cset: moving following pidspec: 10890
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.903327744 seconds)
loading group "shootout"... done (took 1.248939869 seconds)
loading group "string"... done (took 0.660752193 seconds)
loading group "linalg"... done (took 8.710848484 seconds)
loading group "parallel"... done (took 0.171917341 seconds)
loading group "find"... done (took 2.91549538 seconds)
loading group "tuple"... done (took 2.186172346 seconds)
loading group "union"... done (took 15.164626759 seconds)
loading group "dates"... done (took 1.462887237 seconds)
loading group "micro"... done (took 0.221729287 seconds)
loading group "simd"... done (took 4.856670988 seconds)
loading group "io"... done (took 1.078167358 seconds)
loading group "random"... done (took 9.63777108 seconds)
loading group "problem"... done (took 1.527461184 seconds)
loading group "array"... done (took 25.238092971 seconds)
loading group "misc"... done (took 1.991841974 seconds)
loading group "scalar"... done (took 44.129549939 seconds)
loading group "sort"... done (took 3.361014985 seconds)
loading group "sparse"... done (took 13.153854937 seconds)
loading group "collection"... done (took 18.498800389 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.566802849 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.134807798 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.140144937 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.133918859 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.197287594 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.127058658 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.143280964 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.093565034 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.908461068 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.145676284 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.121548381 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.455562347 seconds)
done (took 5.765638433 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.177821465 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.095989179 seconds)
    (2/2) benchmarking "String"...
    done (took 0.085901605 seconds)
  done (took 1.54468504 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.074928288 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.064068466 seconds)
    (3/3) benchmarking "different"...
    done (took 0.072520611 seconds)
  done (took 1.574051796 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.069672316 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.140770989 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.069635239 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.071759282 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.071503334 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.070516057 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.070522942 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.073221162 seconds)
  done (took 1.933481835 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.074288168 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.070598732 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.069240939 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.071484695 seconds)
  done (took 1.650452482 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.067685752 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.126131048 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.067692596 seconds)
    (4/4) benchmarking "different"...
    done (took 0.068579216 seconds)
  done (took 1.692627937 seconds)
done (took 10.027882292 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.247774688 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.1064113 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.301605951 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.454415159 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.636005039 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.098286778 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07841739 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.073896658 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.132912635 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.331146826 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.10667332 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.187460957 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.096575457 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.176205831 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.033250086 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.127975142 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.090037519 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.130551785 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.099281342 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135573051 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.407269424 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.082088964 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.077020826 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.074229246 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.071328608 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.654663815 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.677862226 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.126666519 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087563627 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.163136013 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.118010953 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.662476504 seconds)
  done (took 11.245852425 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094339619 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.094384471 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.071828895 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126974886 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097968642 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072694028 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077958731 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.070075641 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.093236357 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.128980719 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093506035 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.102466236 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.069340339 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071702831 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076996915 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.205980726 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08092892 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082408559 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069910136 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.084077439 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.109372144 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.081813384 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.081590187 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.081446731 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.133198619 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.172355758 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097007905 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.099059518 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068834644 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.081606018 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.118084457 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.129343738 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.070033532 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.070842072 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.123280827 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.09817276 seconds)
  done (took 4.901252249 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.909730807 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.098002432 seconds)
    (2/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.098018914 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103892845 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.663085095 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.068600645 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.156116491 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.247389254 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.076419937 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.375950566 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155749535 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.116436807 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.153266189 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.12211819 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.07270898 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.174266644 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.123715775 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.574887032 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071886004 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.070329982 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.069195477 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.071658752 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.07119875 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.066655614 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.096310061 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.07263809 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.099209511 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.092304254 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.177407317 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.994261028 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.314661949 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070409942 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.172931329 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.086110354 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.361959487 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.073481004 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.086221081 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.490426564 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.127024273 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.068626862 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.169994684 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.120592864 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.067327547 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.126080429 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.081839885 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071899475 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.072310042 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.506201684 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072628517 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.075094826 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.082553335 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104323129 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071622306 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.068119737 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.177157137 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.067759523 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068996516 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069441469 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.152007838 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065185525 seconds)
    (60/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143568696 seconds)
    (61/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.066873446 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071504087 seconds)
    (63/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.106249059 seconds)
    (64/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071512544 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089416868 seconds)
    (66/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.098809149 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.336795001 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.088811728 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.043065795 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071695187 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.929922431 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.080928911 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06931377 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073340817 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06948912 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070549445 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069784563 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.075306363 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074050798 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071849992 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112214154 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.069762316 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.06658635 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.073270117 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069443382 seconds)
    (86/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.074974191 seconds)
    (87/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099830126 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.067630104 seconds)
    (89/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.570267194 seconds)
    (90/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.100273404 seconds)
    (91/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.06971412 seconds)
    (92/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.195812856 seconds)
    (93/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108080287 seconds)
    (94/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068730533 seconds)
    (95/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072077539 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069327439 seconds)
    (97/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.070073066 seconds)
    (98/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068783261 seconds)
    (99/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069675342 seconds)
    (100/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.072362671 seconds)
    (101/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.100376786 seconds)
    (102/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072957727 seconds)
    (103/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115465967 seconds)
    (104/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.038824844 seconds)
    (105/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070485043 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065391041 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.071616121 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.075050406 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071922979 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072316901 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069359714 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071965468 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071017729 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067665028 seconds)
    (115/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.11102179 seconds)
    (116/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.124520295 seconds)
    (117/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067632183 seconds)
    (118/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.066275273 seconds)
  done (took 23.442303193 seconds)
done (took 41.870723365 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.316083983 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.08137463 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.082064838 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.081928578 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.082196747 seconds)
  done (took 2.059235225 seconds)
done (took 3.518031616 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133667629 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.087657308 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.06678661 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103583562 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070979259 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.105012507 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111690848 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107369711 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.071232147 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070805583 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.07064025 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105086315 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.108043808 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.070867357 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100864082 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106652292 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070689757 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066192255 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070710301 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070818177 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.071061707 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069149994 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070811054 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070902522 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101812904 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.071200082 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066832542 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101965719 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071630898 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101901137 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.071816442 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.071325423 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.071113005 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.103110368 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.071352849 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.103088497 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066669518 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.071290415 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070867723 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071131157 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070921954 seconds)
  done (took 4.870319764 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07173263 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.084036292 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085715495 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064379299 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073682299 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084488254 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.064136001 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084317622 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090854783 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085225576 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084655877 seconds)
  done (took 2.336834685 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.07093263 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.085486244 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086535524 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063970073 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075807178 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.086257614 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06719526 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085556539 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088682511 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.086149973 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085829743 seconds)
  done (took 2.32837698 seconds)
done (took 10.974465541 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097075716 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.068166226 seconds)
  done (took 1.594729945 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.659310341 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.340108249 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.070515773 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.089620394 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.20036644 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.0962738 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.208658651 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.075010241 seconds)
  done (took 8.361157303 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.103521624 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.074310809 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070733361 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071804969 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071684342 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070378305 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.072215197 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071265915 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.071147589 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069595133 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.070147484 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070791195 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.071540009 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.070252494 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.070194352 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.071731928 seconds)
  done (took 2.705809164 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.103568644 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.10273179 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074647856 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.07517621 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.074485953 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073779759 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.076189477 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.07568959 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.072561521 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.074761284 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.076231382 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.074421258 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.073889764 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.064919525 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.07540531 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.076092695 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.071843394 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.075072638 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.07625985 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.076867694 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.075165927 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.065055693 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.073469233 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.074363116 seconds)
  done (took 3.395342833 seconds)
done (took 17.508893144 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.176589003 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076972957 seconds)
  done (took 1.693326824 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068794016 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070025245 seconds)
  done (took 1.596285565 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073877326 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061745688 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.081173935 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072982612 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06373695 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063466059 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079819629 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063876591 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063241938 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063573791 seconds)
  done (took 2.144078192 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063505956 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069749902 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.069154179 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066872069 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.068997612 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064759705 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067626442 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064363593 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.071322363 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063286959 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067843826 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084790598 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.067833323 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.086226147 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.06804212 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.068024451 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.07069972 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066967154 seconds)
  done (took 2.693029192 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062025329 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.06401123 seconds)
  done (took 1.587748742 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065462713 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062688041 seconds)
    (3/7) benchmarking "month"...
    done (took 0.066781953 seconds)
    (4/7) benchmarking "year"...
    done (took 0.067585814 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063445288 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.063018513 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064130162 seconds)
  done (took 1.909026556 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.429490802 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125871425 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.350438697 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.074015 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079468354 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259246345 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.066208397 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070728538 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070847477 seconds)
  done (took 3.026445306 seconds)
done (took 16.124420226 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082944573 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.185494901 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090845261 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.41442539 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.094324571 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069604873 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.115160244 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.172920145 seconds)
done (took 2.70822599 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215618439 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.1895049 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.374390365 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.128032308 seconds)
  done (took 3.156762403 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.334712386 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.08095573 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.079388342 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.06997186 seconds)
  done (took 2.041588662 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065886645 seconds)
    (2/2) benchmarking "read"...
    done (took 0.0728841 seconds)
  done (took 1.609099577 seconds)
done (took 8.508635407 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064741333 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.065883354 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.066515189 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065662877 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.067511213 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06591078 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065570037 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.096630454 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.076517199 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.065843593 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.065798833 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06559208 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066226719 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066485927 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.0655804 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.06627339 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066281076 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.065388967 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066403164 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.065928247 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.065577146 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065414638 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066332856 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066369814 seconds)
  done (took 3.123531428 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080376103 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.067591023 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068843107 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068514227 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.070468883 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068931501 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068826558 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067713283 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.069667874 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.067415946 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069481028 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069680349 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.067627844 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069856773 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067713629 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06947165 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069891457 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068051066 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067286865 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.070493226 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069274614 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068128982 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069592487 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069190592 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069613689 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069734376 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067956995 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06808004 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069642636 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070075755 seconds)
  done (took 3.564575761 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067565326 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061665111 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062864376 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.072178295 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.062321302 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062405219 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062531444 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.062130607 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.063052646 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063622402 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062888024 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.062808661 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.063071536 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.062139233 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.0625079 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.063440808 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.067409496 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081988986 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062314913 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061877902 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06705105 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062591704 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062522553 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.062436058 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.063154725 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062568436 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062303261 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.063290625 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062090081 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063121964 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062623455 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066356149 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.0672598 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062238844 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072263225 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.066914815 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062058608 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066263908 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.064055432 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.062061191 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062404474 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062042222 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062632806 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062001927 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.07200539 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062405128 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063701029 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063402182 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.06243387 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061978245 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062314833 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064619676 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06764059 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063756809 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062202007 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063353066 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.062267556 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.063105271 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062340242 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061901715 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061917765 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.069361608 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063973436 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063640949 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.08285179 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063741436 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072394858 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062220058 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063268901 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.06593989 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.063427689 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080350684 seconds)
  done (took 6.139782851 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.083000198 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.086722725 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.068212393 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067653623 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063329743 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06330745 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.071148677 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063265128 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067941529 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.083677733 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063145322 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067939422 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068075193 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066756673 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062994059 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067499997 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070931996 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062940357 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062679844 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067149153 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062598868 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070771193 seconds)
  done (took 3.013497211 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136179136 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068877623 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108830273 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077562141 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071646093 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077584074 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068552262 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068848699 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068453199 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068986 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068994927 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068704854 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070921198 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069626424 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069497407 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068834717 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068520497 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.069197403 seconds)
  done (took 2.861868876 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077347715 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.068463904 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089647668 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068207156 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068052978 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068163893 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072246182 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072262734 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067782398 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068188012 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072804031 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06754206 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067823636 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067926302 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06789351 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.06827876 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067523336 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068028151 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072031546 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071551711 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071850003 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072417623 seconds)
  done (took 3.049756193 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077390253 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066648509 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.083360271 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.069070391 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062642145 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062598386 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.068632488 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067186648 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.068356608 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066972721 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067443257 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062957361 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068493091 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067762895 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068897024 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067789979 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066796763 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067561854 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067228578 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.063279902 seconds)
  done (took 2.855530773 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086755367 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064743474 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065237991 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.08453231 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065208126 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065210923 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.085474058 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065974952 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065737986 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087673722 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065693164 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065626445 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084842925 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084942865 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065452956 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.085436281 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.085187094 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084937367 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065614418 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065332816 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.087603905 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065473189 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084775689 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065450576 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065270929 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065672136 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065546645 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085355549 seconds)
  done (took 3.570119141 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065145392 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.065217551 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065793346 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065921587 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.066131464 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066462011 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066124854 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.06640633 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066362357 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066575071 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066050228 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066095988 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066415993 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.06556221 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066503166 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065901116 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066025429 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066827395 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066078193 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.0665386 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.066066271 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065578394 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065854746 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066373848 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066318559 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065894744 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065964261 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066086325 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06574488 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066233997 seconds)
  done (took 3.48289858 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073684666 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072311281 seconds)
  done (took 1.64815899 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062718776 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078394265 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061518677 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.074831829 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070936674 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068954494 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072055419 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071424179 seconds)
  done (took 2.055724847 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067233785 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.093181637 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064477663 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064965706 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067730275 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.1354145 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.077452991 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075916648 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078520146 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066838423 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064994389 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076850423 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.064030477 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077186451 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065469195 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.073099532 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071408691 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082207225 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.077376889 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062832372 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076322091 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064831097 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.063084982 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065508677 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064166532 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071085025 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079899995 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076679001 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072374677 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06192274 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082802643 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063049759 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064049933 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072488396 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067721622 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.063283464 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100863429 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063588592 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068648032 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062600633 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075626335 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084514369 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077604667 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081321771 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.065195602 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065461344 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062639965 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.065094247 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066795571 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072551683 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.063051565 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070757043 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062166074 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064628524 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073747372 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063748924 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068631611 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072334889 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076529629 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073659474 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072093116 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078568273 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071921604 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.071449759 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064133436 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083521805 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064736084 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076147627 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078111014 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06424594 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076609106 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062417031 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061818959 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062997687 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097068879 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064575714 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064608048 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.06347719 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062839796 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.065026169 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072890517 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068882232 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07053815 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06661334 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080149999 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072444637 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063121096 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.070378672 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081730546 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066857458 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063821714 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.080997388 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066706611 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.063106711 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.081585102 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07317598 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064908815 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.064741906 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.067054762 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077152367 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.064536894 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.062390793 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071987261 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.06504655 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.065805966 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.067714469 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071076021 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.063196445 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.073127146 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067958999 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.064726585 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.061695433 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.067297951 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.064383679 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.061888509 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.072291009 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.062955982 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077627723 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.069333577 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.077180137 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077636977 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.073669352 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.078759301 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.062629116 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.061465895 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.080949743 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.072274292 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.201887325 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.082015487 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062611792 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073689055 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062701307 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064687858 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.073099601 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062525832 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065202467 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063675694 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.069140536 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064659287 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065595857 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.069125321 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072702817 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.076171412 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064910607 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.072141552 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.06392861 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079738293 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073156633 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067415274 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066682615 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064101328 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075436492 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06978092 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073009243 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062615559 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064011957 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.066409559 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073998563 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072584053 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.065021929 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.071238645 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067619986 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063814979 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063900564 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.064625139 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066791896 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.067035043 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064034506 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071174374 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072184923 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.077454848 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.070591396 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.072106256 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062041894 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.06233912 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064971793 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06219483 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067712602 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072318527 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078579113 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.075426227 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084969901 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063170033 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073047814 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064779239 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080465798 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076775578 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064185412 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068460441 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061919799 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064707886 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.07243502 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074938278 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077163572 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078288305 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067772123 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067504553 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062950551 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.077982384 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063359958 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07184335 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072908917 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.068070454 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063215932 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065174731 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.073021936 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067476565 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063230305 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079285193 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069585842 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062835812 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077493529 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.06359821 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.074299401 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062666747 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066504323 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068342027 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06528708 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072747327 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078709793 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062387911 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.06426684 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.079504064 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065121631 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065053527 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.07169978 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078653626 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067652569 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.071310107 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074307509 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.073471957 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.068456157 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.073191603 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.064802208 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072618657 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.066732767 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.0752619 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.063633152 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081570809 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.062345766 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.079241621 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.063729294 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.074315208 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.064231196 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073007793 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.064733031 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.080189222 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.064981429 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.06412473 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.074703898 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.061672743 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.072250291 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.062522247 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.067439853 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068891747 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.072336699 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.065237859 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072749108 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.207172392 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073012564 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06759396 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071490496 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07271112 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067329486 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062642113 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.071955809 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.074502717 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.072178005 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065024461 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.064633104 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.063860878 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.073153556 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.064783742 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064769232 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071856706 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067368945 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068721179 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064848005 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065673428 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.065027488 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07178673 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073110546 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08128843 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071886796 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070932666 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.072727585 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.063318147 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079182761 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063941457 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.071033381 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062002609 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068989535 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.074752928 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.063395679 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082665214 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064541811 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070833817 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.07556809 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071451957 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.067173822 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081122521 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066445104 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.071622282 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071057518 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067531018 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069310404 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064877559 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.071237483 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.073106973 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073888951 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063968945 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.071569031 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071956544 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065139627 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071456178 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.068093261 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.071727803 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.065200492 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062523132 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067727378 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074828836 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06778214 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.068098245 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063615467 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.0619524 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063676424 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070262673 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067666249 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.072070318 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078682479 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.062339293 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.064934812 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06270021 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066578924 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08131763 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072656096 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071338373 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.067783492 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062500216 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.065144348 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065155976 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063276171 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.067072353 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062244672 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063135857 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074447696 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06488516 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067396647 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063906457 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064245154 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072861119 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068017065 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063857522 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.06948087 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062869849 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067942301 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061866603 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064977603 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067325639 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062862389 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.067004047 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.074123141 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.079881616 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069949655 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.072150196 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064275968 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071396479 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078997508 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070561323 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064315867 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072573759 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.06249063 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.081681387 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072662496 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071778916 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.073202057 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.064425045 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.080764495 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.067858851 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.073482298 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.078735463 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064549639 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.070384213 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.062702914 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07906366 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.067601134 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.062540882 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.070744191 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071104096 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.06867668 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.075006308 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.210364686 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071365352 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068501932 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066711393 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065048497 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065314336 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.07238882 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.079939928 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064593759 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.06809143 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.072007059 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.072226713 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067767758 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.075840463 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071764415 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065145604 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.065301624 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066798751 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064708733 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07536975 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063941313 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06761334 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068330514 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.062942272 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069850786 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080154039 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072955736 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073017586 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062985591 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062152045 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.081409353 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066647477 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066405382 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071691817 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072905956 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075252823 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072785958 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.081142073 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064196007 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068989441 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07546593 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064078368 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062974046 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.066853502 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064833095 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072421871 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072840201 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.07056327 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065341058 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069269493 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076840432 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064291153 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06816633 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067900524 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06369049 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073913633 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.071245887 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071698502 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064669725 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062911481 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066552496 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072363081 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071113028 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072630678 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064406084 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.070354782 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077668032 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071603537 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066346117 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062650057 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066721922 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072562927 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068117838 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062397188 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067603741 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067134416 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070778588 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072564495 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067181118 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.06337109 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080241314 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071382596 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073107377 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068290474 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065329834 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063912187 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062783559 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074365266 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06283513 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064960008 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068012233 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.064728678 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080750232 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071585642 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079584331 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064125938 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067520837 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.062688179 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073500111 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067572688 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063890151 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073993988 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062549653 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079357975 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074957087 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068785694 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.083667782 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.068161023 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071452129 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.079066621 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073344097 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072536173 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06696717 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072842501 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.065687139 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.074255138 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.063005553 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.062110476 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.073188732 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071728986 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.075723774 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062882336 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.074342706 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.065381142 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.071499965 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.071144478 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.065013896 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065587085 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.065326601 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072592962 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.067733002 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.072667256 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.211823931 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080760574 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.06469249 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075811889 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073733249 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.074727004 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077412246 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076072538 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071848764 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.064022757 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071450024 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071478445 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064293107 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068502492 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067537294 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.085291544 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065766286 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064984789 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077793846 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070231046 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063395978 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069732071 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.067766784 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.073189544 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064211601 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073359221 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067403912 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063868454 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067770497 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.067859988 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062537233 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.063246512 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.062835374 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073042719 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068250882 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063584101 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082701992 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.065004911 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.071924147 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074809846 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.069509092 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064683269 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061679454 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064733278 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.076607883 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078388931 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066239036 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071537778 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.06501752 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07249254 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.061963156 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.072291279 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071783614 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071860564 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.062938857 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063296959 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078002049 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079042693 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067829431 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072776001 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072687893 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.064868567 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085196052 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072453286 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064232452 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074470894 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.066415413 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062619406 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062254206 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.065339694 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.074716173 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.062839857 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066298732 seconds)
  done (took 43.635441064 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099114565 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.06426985 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062830404 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063108051 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074268266 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064236862 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062839571 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.06401329 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064135937 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066120253 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063019797 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063542476 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074686712 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.077001055 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074075692 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.066946279 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063230206 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064418596 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063174642 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064399493 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073350047 seconds)
  done (took 3.034275482 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068092645 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.076592428 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072706847 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.078113906 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071735281 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.067615976 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.074666479 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067047213 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.075484758 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072882459 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.075629369 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067600451 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.072618955 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.073074928 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.07253078 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06721596 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.078086334 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071468456 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06701765 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.074538079 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067189146 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.074831145 seconds)
  done (took 3.163848773 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063491359 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.061938745 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071615713 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062073183 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062473448 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066283209 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062265501 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.066756692 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066886215 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066862628 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.072578707 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063675157 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062411661 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068777655 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062084608 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063610054 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.107030365 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063994863 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063770645 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062574401 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065381384 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072679366 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062621985 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062766199 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067322985 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065900223 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062634772 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.065379565 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06363387 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.06735292 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063838118 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061888159 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071875638 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.070877558 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066921407 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066720301 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064602766 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063540984 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.063012877 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062321317 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.07150591 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064093839 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062711327 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063867941 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071843945 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062520082 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061896496 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071882364 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062481954 seconds)
  done (took 4.826534811 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071498509 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.115919467 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068604562 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096524748 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.076339326 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069625273 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068850268 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.097659264 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.064082433 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064656996 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076822484 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.077409603 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.068592398 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.067760625 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069779544 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065467124 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.0663905 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.065000065 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.068489637 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065277685 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068710622 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069782416 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075818147 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.076727147 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066760223 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064634284 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065310688 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.067167978 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.076336137 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069125872 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.06732148 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067658409 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076316537 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070449052 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065634599 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065857299 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.077479282 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.066033499 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065611643 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064180747 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.066017708 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067135809 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070046929 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077377082 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066214859 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070359744 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066075478 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063400579 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076447503 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065414196 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069656805 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077516977 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067163046 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065853234 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067694887 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07685143 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065889044 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064216269 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.066312465 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076253616 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064308686 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066525578 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.0776297 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065167058 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069503331 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077344719 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070508116 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066629605 seconds)
  done (took 6.537684445 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071015864 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096656384 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074548169 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074703369 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073544705 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.074165889 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073918592 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.074128687 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073762943 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074473678 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074635687 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11419063 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.070096928 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078443924 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074100637 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073560687 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073680756 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073874918 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073596611 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074085841 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073788333 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.074048237 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073944092 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074132439 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075743122 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070082934 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073352248 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073111445 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074177216 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073400094 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.076305375 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073751452 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073241066 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074241274 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076170493 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.076495579 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.064147788 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073438747 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074293405 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073270168 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070017705 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074129636 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07437022 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069893045 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073683608 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073581851 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074365127 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076014127 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.080666654 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074205893 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073673816 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074869733 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073756198 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073889443 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.07513818 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080685735 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074779405 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074317306 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074133538 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074525052 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074759971 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080737958 seconds)
  done (took 6.27444523 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.075186782 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067928364 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080767718 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062860525 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062788799 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072564723 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062777002 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063247291 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.070400936 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070257171 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.072015685 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.072703764 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.075766436 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.072078633 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.07251949 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074995867 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.07294697 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.07259439 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070274793 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.073008121 seconds)
  done (took 3.028674725 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076875611 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082555733 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068897693 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.072248551 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.068179384 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072670475 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067578724 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068897415 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069298131 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068746676 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074383914 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.074301733 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068962962 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072652179 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073418585 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072666143 seconds)
  done (took 2.751634675 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068403963 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.070294606 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070204717 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064902874 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.068083814 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.063172247 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064093026 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062611869 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063547563 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077369136 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.064434646 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.076505071 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.06396499 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063423765 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.064150013 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.069457644 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063093307 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06423628 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063721373 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068482567 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070930734 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.065540941 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.068011189 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06373525 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.069307238 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07108164 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065710448 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.068139961 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063835619 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064647691 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.069735157 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070439133 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.063642884 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064918609 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06309969 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063974831 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.063969662 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064194849 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.069709728 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064130146 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.063157195 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.069444521 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064434798 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.065742799 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063395183 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064678247 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.063054842 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.070089248 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06450889 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.069841516 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064392966 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065965344 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.06493602 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071912804 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066373348 seconds)
  done (took 5.255613164 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07857946 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068317265 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062835877 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.063582775 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068260397 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069138643 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068158183 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068423311 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069903263 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.063232468 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069623539 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067821646 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068810094 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068546756 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069282642 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068984792 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062809134 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068727004 seconds)
  done (took 2.838179591 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.07282601 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067154431 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.074301824 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.068550843 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068035658 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06814846 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.063477173 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063428611 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063298284 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067956437 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068141273 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.067762692 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063368259 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067899803 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.068270084 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068085114 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067588301 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063127641 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.068181102 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063124041 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067856247 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062956428 seconds)
  done (took 3.081200212 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089087981 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.090014337 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130878122 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082457095 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091105624 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074301451 seconds)
  done (took 2.165162922 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094826459 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107402613 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067747427 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068307282 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077093637 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07178937 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071360985 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071480231 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077321769 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075754797 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07231836 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077734549 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077481194 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07322514 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077492949 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079380895 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071521193 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071686909 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068201308 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079609202 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071734335 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077326185 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071626594 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071490173 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07125355 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073400824 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079848424 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075451289 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071648758 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077055487 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079824415 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07168928 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076767455 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075352208 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068385416 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07675683 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071137664 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079345147 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076771428 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073745859 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067913843 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077368524 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077437053 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073167143 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079732294 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071613355 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073353677 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072020907 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071881564 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081932688 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077446434 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073229287 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077007927 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079343942 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079581001 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081514653 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075670643 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073429183 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07711217 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07560047 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073681082 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077471247 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073261368 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075961126 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079692141 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073166029 seconds)
  done (took 6.603940772 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101660093 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068496191 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072527969 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075423764 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073278482 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071643527 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07201381 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071720835 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071547962 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069288873 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107582271 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071920677 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073487249 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073545219 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07201908 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072370257 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072103541 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073572689 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06959825 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081979922 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071992984 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073733957 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073780536 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073371107 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075737797 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079808446 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071828044 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071435779 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071679705 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071286225 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073812324 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071681098 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07289737 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068472118 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073242845 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07250371 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071622352 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073505317 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071503007 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077801922 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07329327 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079885469 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072043555 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071925184 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076195327 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071391351 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071570887 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069078088 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071507893 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068903324 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075699083 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075897047 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075905271 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073411628 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071867652 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071798303 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071371402 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071815575 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071977456 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079436333 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073744003 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071644237 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081951524 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071577116 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071542161 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073710691 seconds)
  done (took 6.520079543 seconds)
done (took 136.561250579 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.227126248 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.199379377 seconds)
  done (took 2.02177117 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075422367 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.100745019 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.078967389 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.14571222 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073064098 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.111790434 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.109092994 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.076573735 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.074826204 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.074871948 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.075216847 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.077490579 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.189401064 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073591465 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073988889 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077945808 seconds)
  done (took 3.107538974 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.108474352 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.188825067 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.116949162 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072595308 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.114971098 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079978678 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.072734024 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.084670173 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.077451925 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.085239682 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079975042 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078590463 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.074889639 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.077925053 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.077035425 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.080061597 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.075110417 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.08002969 seconds)
  done (took 3.248732488 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098728423 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.088696184 seconds)
  done (took 1.81382115 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.156027884 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10572489 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145864595 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.336497761 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.135485783 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130908121 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.134543453 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129608998 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110751885 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122247168 seconds)
  done (took 3.12546761 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.107640546 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.180783485 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.319705045 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.126419564 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079472077 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102916357 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.128557118 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085720216 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083727436 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082945892 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.083231215 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.080291188 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.105861686 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.080515804 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077762256 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.080210288 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.108892452 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077269628 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078256074 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.079242035 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.110176719 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073540642 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.07926209 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076926925 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.081164581 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.081054466 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075349076 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073320838 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078564049 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078230664 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.081119287 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.10063809 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.080560328 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.103014295 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077896709 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.103602158 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.078518614 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077964613 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077920352 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07703406 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.080254315 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.080175506 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.08302281 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.07983433 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.075460455 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.078059495 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074930731 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072867277 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081878149 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.07449471 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.082194531 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.081184552 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102520481 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.074487919 seconds)
  done (took 6.572084389 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109335995 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107021426 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072796404 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116542215 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.108646881 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072521221 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.108399698 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.104066981 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.11318685 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072657138 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071601163 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.072253186 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079457651 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.084528797 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.119889565 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109643388 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073391754 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.073504512 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.111100652 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.111067817 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.07208693 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.105345465 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103505269 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.111453855 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070880417 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07230362 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.07124075 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072187304 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077248455 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.078181436 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.071248125 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.079135935 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.087899788 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078568765 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071227714 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071240186 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071403088 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.079265276 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079159388 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079554198 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07848085 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071084614 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071150108 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071756469 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.072027951 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071013165 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077888818 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.079075676 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077554536 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071572178 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071804013 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070771644 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071723401 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078390598 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077962834 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.080033205 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.079206933 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071353826 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070983549 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.072825528 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08033769 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.079823165 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079270435 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07257372 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.080477489 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071495306 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081725366 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08543626 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071602178 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071966372 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071229455 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071347157 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071879435 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077743509 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.077470573 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071976962 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.074430918 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070978872 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079843981 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077743012 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071281803 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.077185649 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071253387 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071622092 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071513718 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071537607 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.077091687 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078966127 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072339907 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071327797 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071503389 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071550938 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070518965 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.077545375 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.078529644 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.079888735 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.078035389 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072857909 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.078034531 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.078103835 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071993577 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.077941263 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071300069 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072002896 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071809283 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07761292 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.077110097 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07927374 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071550487 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070985598 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.077848643 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.216007813 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.072664319 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.077661558 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081186514 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.078502114 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.071297603 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081456286 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072170963 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.081166522 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072168024 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.08095118 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07229404 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07881309 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072160578 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070693301 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071399707 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.07851632 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.072727939 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071477242 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071727565 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071927111 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078190534 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081973649 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072914383 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078439498 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078914841 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.07235264 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078101145 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071907622 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.079161916 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071907605 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071782425 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070743548 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081431747 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.072016025 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071605707 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071653617 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080779613 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071732858 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080580238 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.07750362 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071367793 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.084161383 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077493963 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075849723 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.080559511 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072768711 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071957313 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.072082604 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07144232 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076992501 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.079178911 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07246212 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.072121421 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.077239232 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.08132592 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071119577 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.309636437 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076895144 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.078023337 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071763733 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071843604 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081294137 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.080644777 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077679056 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077485924 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078984467 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071790855 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077642065 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07782687 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072144362 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.084445872 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071865416 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081979609 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.078738912 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077208805 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078634466 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079945843 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080553349 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.081020206 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083057292 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071324567 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.07155083 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077974804 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071228832 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071718478 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.077748644 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071476431 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071813192 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.084907829 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069442537 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.080734136 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.071178972 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.079600191 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071155838 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072297885 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.083523782 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.072157055 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071984083 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077647993 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071611581 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.07800195 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080969927 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075278442 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069673375 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.0719295 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.078100188 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07858349 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071213632 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070887103 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072094875 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.077398513 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.077246205 seconds)
  done (took 19.402318243 seconds)
done (took 40.935120394 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.209962181 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.173913946 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.198317469 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116584044 seconds)
  done (took 2.426261872 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.092794578 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.100335348 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.077641276 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.067806656 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.087915099 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.068360256 seconds)
  done (took 2.165769221 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.251529831 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.190535199 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174919556 seconds)
  done (took 2.28190361 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.220497443 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.206828033 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.510054473 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.319194427 seconds)
  done (took 3.02335912 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131292677 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.078622932 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.064231344 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.075759326 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.105889625 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133801746 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.088688074 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.109543091 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.076104066 seconds)
  done (took 2.594202028 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131385599 seconds)
done (took 14.31643441 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.234315105 seconds)
    (2/341) benchmarking ("sort", Float64, false)...
    done (took 0.172279607 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.178567348 seconds)
    (4/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.249481675 seconds)
    (5/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.212693217 seconds)
    (6/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.079740197 seconds)
    (7/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.198917001 seconds)
    (8/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.078527629 seconds)
    (9/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.153277363 seconds)
    (10/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075986761 seconds)
    (11/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.080032845 seconds)
    (12/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.10666592 seconds)
    (13/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.084650785 seconds)
    (14/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.080176668 seconds)
    (15/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.08739685 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.125306819 seconds)
    (17/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.200736205 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.095321558 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.09504505 seconds)
    (20/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.078971131 seconds)
    (21/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.185875305 seconds)
    (22/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.156035212 seconds)
    (23/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.249925402 seconds)
    (24/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.203731099 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.099025849 seconds)
    (26/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.076769699 seconds)
    (27/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.077766442 seconds)
    (28/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.158891941 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.06943553 seconds)
    (30/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.077029256 seconds)
    (31/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.190767398 seconds)
    (32/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.25303869 seconds)
    (33/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.203629564 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.093644374 seconds)
    (35/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.1924862 seconds)
    (36/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.074549383 seconds)
    (37/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.076144995 seconds)
    (38/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.183517951 seconds)
    (39/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.18802006 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.095698629 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076366253 seconds)
    (42/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.259834958 seconds)
    (43/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.110456045 seconds)
    (44/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.079107264 seconds)
    (45/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.242189782 seconds)
    (46/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.194146964 seconds)
    (47/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.076251647 seconds)
    (48/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.075524512 seconds)
    (49/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.098156223 seconds)
    (50/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.08539548 seconds)
    (51/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.068640518 seconds)
    (52/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076793502 seconds)
    (53/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.067201297 seconds)
    (54/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.203799046 seconds)
    (55/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.225322857 seconds)
    (56/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.095680485 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.080728644 seconds)
    (58/341) benchmarking ("sort", Bool, false)...
    done (took 0.149101996 seconds)
    (59/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.173821407 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.126110095 seconds)
    (61/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.075463567 seconds)
    (62/341) benchmarking ("sort", Int64, false)...
    done (took 0.069585755 seconds)
    (63/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.182545422 seconds)
    (64/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.068150916 seconds)
    (65/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.194221414 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.085465252 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.145994728 seconds)
    (68/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.069333862 seconds)
    (69/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.071801946 seconds)
    (70/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.06718333 seconds)
    (71/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.077443135 seconds)
    (72/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.082383036 seconds)
    (73/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.07902685 seconds)
    (74/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.066248461 seconds)
    (75/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.082831143 seconds)
    (76/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.140122525 seconds)
    (77/341) benchmarking ("sort", BigInt, false)...
    done (took 0.269401362 seconds)
    (78/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.374426281 seconds)
    (79/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067423484 seconds)
    (80/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.081864121 seconds)
    (81/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088238705 seconds)
    (82/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.066818305 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.150465259 seconds)
    (84/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078460095 seconds)
    (85/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075750716 seconds)
    (86/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.065743775 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.099585908 seconds)
    (88/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076075984 seconds)
    (89/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.176234028 seconds)
    (90/341) benchmarking ("sort", Float32, false)...
    done (took 0.139369117 seconds)
    (91/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.149977559 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.09249352 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.068171124 seconds)
    (94/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.202869983 seconds)
    (95/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076534133 seconds)
    (96/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.067245833 seconds)
    (97/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.165996855 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068942899 seconds)
    (99/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.228872973 seconds)
    (100/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.156789522 seconds)
    (101/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.200156135 seconds)
    (102/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.178471161 seconds)
    (103/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071455271 seconds)
    (104/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.076481061 seconds)
    (105/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.227214105 seconds)
    (106/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.142529424 seconds)
    (107/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.079886858 seconds)
    (108/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.169267955 seconds)
    (109/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.068922684 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.090270685 seconds)
    (111/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.15196752 seconds)
    (112/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.078899608 seconds)
    (113/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.086697886 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137568315 seconds)
    (115/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.069114743 seconds)
    (116/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.068470541 seconds)
    (117/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.072828853 seconds)
    (118/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.20300514 seconds)
    (119/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075878687 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127758471 seconds)
    (121/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.145771167 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.091888744 seconds)
    (123/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.069285814 seconds)
    (124/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.147171534 seconds)
    (125/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.069514186 seconds)
    (126/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.157348096 seconds)
    (127/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.156574547 seconds)
    (128/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.069071925 seconds)
    (129/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.166617243 seconds)
    (130/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.101882888 seconds)
    (131/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.159648694 seconds)
    (132/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068482289 seconds)
    (133/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075800911 seconds)
    (134/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.177038447 seconds)
    (135/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.15077576 seconds)
    (136/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.212520047 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.08620465 seconds)
    (138/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.071078708 seconds)
    (139/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.076969821 seconds)
    (140/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.070970444 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.13775227 seconds)
    (142/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.076497394 seconds)
    (143/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.071125139 seconds)
    (144/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.06978799 seconds)
    (145/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.167627474 seconds)
    (146/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067960389 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.118381496 seconds)
    (148/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.204077384 seconds)
    (149/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077968851 seconds)
    (150/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087673499 seconds)
    (151/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075386615 seconds)
    (152/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.069534084 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.077867663 seconds)
    (154/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.069154519 seconds)
    (155/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.143560966 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.085516708 seconds)
    (157/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.069024486 seconds)
    (158/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.069924091 seconds)
    (159/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.194060534 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.084307385 seconds)
    (161/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076241836 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.166321026 seconds)
    (163/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.068080426 seconds)
    (164/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.069616323 seconds)
    (165/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.08969272 seconds)
    (166/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.076459602 seconds)
    (167/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.20261644 seconds)
    (168/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.0688493 seconds)
    (169/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06721091 seconds)
    (170/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.18140662 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.097048985 seconds)
    (172/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069081872 seconds)
    (173/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.079086025 seconds)
    (174/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.082995302 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135337909 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.09086663 seconds)
    (177/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080422727 seconds)
    (178/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.244346348 seconds)
    (179/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.070194576 seconds)
    (180/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.069672628 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.201610598 seconds)
    (182/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.073057425 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.131367855 seconds)
    (184/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.069590718 seconds)
    (185/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.069434978 seconds)
    (186/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.069231348 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.155023111 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068999359 seconds)
    (189/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.080463224 seconds)
    (190/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.070078862 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.127628877 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.094723106 seconds)
    (193/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07690013 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.071106978 seconds)
    (195/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077578972 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.068245595 seconds)
    (197/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.076046678 seconds)
    (198/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.080712518 seconds)
    (199/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.070130734 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.115179842 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.068295798 seconds)
    (202/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.071341215 seconds)
    (203/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.07145618 seconds)
    (204/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.072890827 seconds)
    (205/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.077762364 seconds)
    (206/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.077964101 seconds)
    (207/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.086440038 seconds)
    (208/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.06866181 seconds)
    (209/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.086465743 seconds)
    (210/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.069391972 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.157155693 seconds)
    (212/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.233244799 seconds)
    (213/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073635747 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.08895784 seconds)
    (215/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.177987669 seconds)
    (216/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.076398384 seconds)
    (217/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.071995526 seconds)
    (218/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.069228207 seconds)
    (219/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.083959487 seconds)
    (220/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.068574374 seconds)
    (221/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.073148438 seconds)
    (222/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.080814637 seconds)
    (223/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093822911 seconds)
    (224/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153993152 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.06751086 seconds)
    (226/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.06707633 seconds)
    (227/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.078846698 seconds)
    (228/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069093874 seconds)
    (229/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069365 seconds)
    (230/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.068763053 seconds)
    (231/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076963357 seconds)
    (232/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.069020904 seconds)
    (233/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.069350726 seconds)
    (234/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.077287479 seconds)
    (235/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075801676 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.095075551 seconds)
    (237/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.155228893 seconds)
    (238/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.069578822 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080799175 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.07926705 seconds)
    (241/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.068367821 seconds)
    (242/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.069241837 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.17493428 seconds)
    (244/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.076679324 seconds)
    (245/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.150706204 seconds)
    (246/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.180941854 seconds)
    (247/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.086452252 seconds)
    (248/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.08192577 seconds)
    (249/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.072277786 seconds)
    (250/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.06849264 seconds)
    (251/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.067865858 seconds)
    (252/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.07737115 seconds)
    (253/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.076344348 seconds)
    (254/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.067936859 seconds)
    (255/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.080644627 seconds)
    (256/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.075837501 seconds)
    (257/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.069278776 seconds)
    (258/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.136264705 seconds)
    (259/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069737835 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.067520242 seconds)
    (261/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.069543633 seconds)
    (262/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.069627099 seconds)
    (263/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.070021742 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.068353289 seconds)
    (265/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067058669 seconds)
    (266/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.086542732 seconds)
    (267/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.070469896 seconds)
    (268/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.068778751 seconds)
    (269/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08578557 seconds)
    (270/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.146070674 seconds)
    (271/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095165574 seconds)
    (272/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155421364 seconds)
    (273/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.07186037 seconds)
    (274/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.068993704 seconds)
    (275/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076287498 seconds)
    (276/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.223810932 seconds)
    (277/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132817614 seconds)
    (278/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.069260948 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.068535195 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.06791157 seconds)
    (281/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.086035718 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094563942 seconds)
    (283/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071047271 seconds)
    (284/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06881935 seconds)
    (285/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068435883 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125529169 seconds)
    (287/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.072416542 seconds)
    (288/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.068876034 seconds)
    (289/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.07008567 seconds)
    (290/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.070402149 seconds)
    (291/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069254012 seconds)
    (292/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.068730122 seconds)
    (293/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.072208143 seconds)
    (294/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.071364922 seconds)
    (295/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.172985333 seconds)
    (296/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.068506249 seconds)
    (297/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.070492487 seconds)
    (298/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.068849397 seconds)
    (299/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069031503 seconds)
    (300/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.069360603 seconds)
    (301/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095028952 seconds)
    (302/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.075505144 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.085752622 seconds)
    (304/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154749473 seconds)
    (305/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.067365246 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.08962473 seconds)
    (307/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.244795219 seconds)
    (308/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.073408171 seconds)
    (309/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.071564212 seconds)
    (310/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.069843175 seconds)
    (311/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.070969805 seconds)
    (312/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.070450095 seconds)
    (313/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.072515318 seconds)
    (314/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.09340157 seconds)
    (315/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.081379323 seconds)
    (316/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.070036051 seconds)
    (317/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073604829 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.0689931 seconds)
    (319/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.072023432 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080941839 seconds)
    (321/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.069778121 seconds)
    (322/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.073258011 seconds)
    (323/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.069975034 seconds)
    (324/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.069153618 seconds)
    (325/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.068632774 seconds)
    (326/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.073044803 seconds)
    (327/341) benchmarking ("sort", Int8, false)...
    done (took 0.153698538 seconds)
    (328/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.069203494 seconds)
    (329/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076586485 seconds)
    (330/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.069728959 seconds)
    (331/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073494675 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.069136111 seconds)
    (333/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.068484831 seconds)
    (334/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.070899145 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068684052 seconds)
    (336/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.068543039 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068459317 seconds)
    (338/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.069171868 seconds)
    (339/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.070987007 seconds)
    (340/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155335665 seconds)
    (341/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.069263022 seconds)
  done (took 37.984390895 seconds)
done (took 39.67108976 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.085807781 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091468415 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.074023572 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.085897962 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.083047766 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.103048144 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.077342506 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.081724356 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.084770144 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083605619 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.081930001 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.075354469 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.078318374 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.078652675 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.076473519 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092337531 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.08485035 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077383839 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077619188 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068541552 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.077587071 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069158322 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.068288497 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.075558125 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.080702011 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075899873 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.0784255 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.078213814 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.068999331 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.068692057 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073916705 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.078046219 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068296103 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.08012215 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077533155 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077682192 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.079192612 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.082409385 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.068810054 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.069668958 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080406433 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069376842 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.077639437 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075645029 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.073986571 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.07716186 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.077730773 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.08113099 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.092026811 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074012093 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080166125 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.080007375 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.080079958 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.07444204 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.074666617 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077886686 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.075827264 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.092733128 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.078137537 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073707885 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.079467885 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.078254303 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.076206264 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077079909 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.077432319 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.080962661 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080545262 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.07669717 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.08055311 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076440144 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.068496606 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.077818736 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073937839 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.068918039 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.080379658 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.08275749 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06762442 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07275744 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.076896727 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.077250655 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068233434 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073690804 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067720698 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073432636 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074172407 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.075416635 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074170743 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076329728 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.067704327 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.077651553 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076907844 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.077035418 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.067509588 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.08132084 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.067934668 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.075722903 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.068672902 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06870208 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067882423 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074305751 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068494997 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.07428845 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075631491 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065761464 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071484106 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.079587596 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.070146472 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076403281 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.067640041 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.067861242 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079876667 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.079948947 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.069072769 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074320852 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067727336 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.074405001 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.068257738 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.068646715 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.068572554 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.068936336 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073407278 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.069127431 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073801818 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075268531 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080414929 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.068280156 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073256036 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073533488 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.068709715 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075779894 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.069175905 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.068967745 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.06810644 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.081979242 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074095994 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.068691023 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074087453 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073734057 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.076822008 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.067215133 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077947053 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074769518 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.073295492 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.221759842 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06796357 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.079808618 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.075007653 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074258914 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.067870902 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.069082456 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.067771774 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068915127 seconds)
done (took 13.400821678 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068632614 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107695835 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.076931553 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.085671248 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.081312948 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.070447817 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073450775 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086199332 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.07253225 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089898844 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.096762859 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091407841 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.097044379 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068735906 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069525995 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.07076873 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.067910061 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.077125095 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084167694 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.093283438 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098816064 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.069192582 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.071481895 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.086386741 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.080089357 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08626677 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.070660152 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.111318334 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.07202151 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.086591719 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095731116 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.068865247 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070206956 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.08334298 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.084112043 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076640556 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.070369821 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073882374 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070178899 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.069326589 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071190457 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083765344 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072956366 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.0736419 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.070221942 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070547522 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.070209232 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072802602 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.082175558 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.073084691 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.076484568 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.081034069 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.07074053 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069407958 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067320456 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.073784925 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068985888 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.06995726 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069695446 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.06912095 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069300293 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.071665972 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.069814283 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.070427267 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.073004 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.071755153 seconds)
  done (took 6.842390861 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083417539 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093657597 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.084504595 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.084445105 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068526877 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069835722 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069706014 seconds)
  done (took 2.340308464 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068095719 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075423579 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080507122 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080358416 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089904391 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076800309 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068014141 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099185632 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067070512 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07833537 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086406206 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083286472 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.073283157 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.082473672 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.070142337 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.081907369 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070598978 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077160882 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077885856 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.083192562 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074119141 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.100085011 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.083357019 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.070451798 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.0838773 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077417925 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.072151682 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.071031234 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070900516 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.069558302 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069374573 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.091999984 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.076190852 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.082085173 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069831507 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068413559 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074062359 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070502448 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.07677789 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078966528 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073725997 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069997983 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070062382 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069530669 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070591793 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074150396 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.070859435 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069446129 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.069382387 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077249936 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068354628 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076049557 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.072273353 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074981073 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.073798629 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074030207 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076622778 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069612183 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.077730554 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076021621 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069869728 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.08222711 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081620455 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073211709 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081242873 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.077944022 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076363641 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073081611 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.0695415 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068931366 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069750151 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.080737817 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072932461 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071855998 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070216898 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.073659902 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.073599699 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.084642937 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.084172322 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.082310146 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069684636 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067131132 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070707065 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082880154 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073685378 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06925669 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070280338 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.068854273 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074599711 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069420858 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074046527 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069885183 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076716205 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.072438583 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.071910351 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077910015 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.069804012 seconds)
  done (took 9.072418551 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069907508 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068597606 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069737114 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069095763 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068511635 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.07034822 seconds)
  done (took 2.237293183 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.091098613 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069162134 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082028885 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070090823 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092705017 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.077505281 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.076256165 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072100777 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.087091005 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.080549138 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.076610509 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.078859104 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076756119 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071531426 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.07654927 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.07080703 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.077028969 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073092231 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.080033589 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072548271 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083974112 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.071929384 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072481138 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082373173 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.07392144 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071146228 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071540715 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080342724 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080019342 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.071880547 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.072157308 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.073211338 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.078516916 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.071782622 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.077067586 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078515315 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069933242 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.075539872 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072413101 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.07333693 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.078042522 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070569386 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070586036 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073757612 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069450494 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076498287 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073166719 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071029073 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073748816 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072903404 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073364665 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068003597 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070555376 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07350216 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075953571 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.075977253 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.075879387 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076197395 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071235081 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.078185506 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06966638 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072810376 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.071916453 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.072809881 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075063647 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075263843 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078746013 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072084197 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072377227 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.070062116 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075317611 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.069986533 seconds)
  done (took 7.180672969 seconds)
done (took 29.452437464 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.546219292 seconds)
  done (took 2.308186975 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.586534825 seconds)
  done (took 2.388501149 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.511489273 seconds)
  done (took 10.312523399 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.295578342 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.32773337 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.736139403 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134239227 seconds)
  done (took 3.326468914 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.740500874 seconds)
  done (took 2.55318693 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.228103787 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.224705774 seconds)
  done (took 2.265797372 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.344336163 seconds)
  done (took 2.135672272 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.145060754 seconds)
  done (took 2.944978213 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.226195201 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.16367979 seconds)
  done (took 2.200189184 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.512694559 seconds)
  done (took 2.322351824 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.300488654 seconds)
  done (took 6.113904707 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.232480906 seconds)
  done (took 2.076882004 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.230572738 seconds)
  done (took 2.04514755 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.050410697 seconds)
  done (took 3.856628625 seconds)
done (took 48.670576578 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086965346 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.086581926 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.086678464 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.081908328 seconds)
  done (took 2.125271658 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.074592576 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.070885467 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074401933 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074325784 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.071897506 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073319863 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.075322823 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072094429 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075039577 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.073688236 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072398219 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.073821524 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076259775 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.072847638 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.075820393 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076963256 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073246559 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073945823 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075753206 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073190864 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.075960507 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072962393 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.071170081 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.072698377 seconds)
  done (took 3.58079312 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07940661 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073324194 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077398731 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073954621 seconds)
  done (took 2.122474183 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077232546 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07787169 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086333981 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091038846 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07765571 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.079880122 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.087829142 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088622796 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068761361 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090489067 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071005895 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.069734953 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.069623884 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.08927302 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.085838326 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065147936 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06647121 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080201196 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079430104 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083134706 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071647586 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068870518 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080153009 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080291564 seconds)
  done (took 3.706130195 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.079949286 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066503309 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.080541964 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093503637 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095962074 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.068802122 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083039436 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096429986 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.130538294 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068352651 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.074634425 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.068360134 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.108216661 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068870336 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.084281637 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112741197 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115557456 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072437696 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.102663343 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068940799 seconds)
  done (took 3.567439692 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076600215 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.072581043 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073579914 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068977047 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080459598 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.077129969 seconds)
  done (took 2.279125273 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.0690501 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069766768 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.070450024 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.069486438 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.075118447 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.070402031 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068807514 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.070992391 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.070918482 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.07050136 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.070228758 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.068944376 seconds)
  done (took 2.666960867 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155713455 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.072305299 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071196461 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066885106 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.074503731 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.069877375 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.084922948 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.072448707 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.088185186 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.069241576 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.069621904 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072556871 seconds)
  done (took 2.791895899 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101669033 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104208269 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.150917495 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121973072 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119971919 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100045443 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123716835 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.09795723 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.165201836 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.141918117 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121260243 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097788047 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090518086 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.073772957 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103895614 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105893863 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140489443 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075365969 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11668871 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.170157499 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117136377 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.114784444 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123951804 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119244827 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084727951 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125209628 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098817135 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106844528 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127336323 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114093381 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.122395588 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.101742616 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075314755 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074559357 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152643826 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.103719885 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111596479 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.097199694 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104290108 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092011682 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110572711 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.07288409 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090328197 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.108547769 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085322759 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117400163 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088388938 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104443449 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083481102 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132872532 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107716652 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101510368 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09152438 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107421836 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132739864 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099196493 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114497524 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.109775153 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086406812 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.122119128 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.104220583 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254976998 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097721028 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08400662 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.164750322 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093905841 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.116720554 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117178354 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086537013 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094089126 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106878703 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135447279 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111624142 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111701575 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118402457 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.098960618 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114791094 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.096727681 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.133283265 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097387263 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076176388 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.108960007 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.133750086 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089061685 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104846632 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134117746 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095113998 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.081278101 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096760213 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.122135441 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083736917 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.10074212 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072710688 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.101686376 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111372032 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101470102 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116023752 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111285951 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08165171 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129049159 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111836907 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07663812 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121857118 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102470144 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.157684219 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10019431 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080182962 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104745542 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098063317 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151731423 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089428287 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083853064 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101873461 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144465225 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097538747 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.174454836 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100195449 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13220821 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100055835 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09089117 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.079004974 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.093040822 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105859747 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112704142 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105795739 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093236184 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.080881609 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090826399 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100667071 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.251626721 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084978451 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118844415 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.106349184 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.078798336 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092632331 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.08004589 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129102011 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.081586653 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113691093 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130007931 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.081545368 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110159777 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102638588 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112304885 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.10142134 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111650515 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143826685 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.121059841 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.084023287 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.087836489 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110902758 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.146621626 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.118180635 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089300727 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.080218894 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10405483 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114156332 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101540734 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11143392 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103134345 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112744657 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102165469 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145368451 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121529119 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096615422 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098823568 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101578997 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.128508145 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.080282496 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.159185227 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098989621 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122432158 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.088478909 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.144855191 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.117962468 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093732342 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088752106 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099971333 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.108399972 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109464462 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146840161 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099829325 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076295267 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097224322 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13616424 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080103031 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104398201 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094164906 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097312555 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122383986 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.088122471 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08535694 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.072215754 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106205538 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139752348 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.073547964 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.123349057 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.277948597 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104634649 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.106559876 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.072420445 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102328893 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143189691 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110561564 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145483541 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121799649 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105512171 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122941272 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.103532178 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110020295 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086737213 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.131189553 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.13893471 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100839053 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093363637 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13878092 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121485455 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137499089 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.100476469 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120043458 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.10976445 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105776489 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108539244 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.104471715 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.148225547 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125028513 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.128802522 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.090005838 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111288344 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113483776 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139988701 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085471535 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120378504 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079729945 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115537843 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.08124039 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110714836 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.083346384 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.115943808 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083354062 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104900816 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.073626907 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077279305 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.144523713 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117474962 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09171867 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087145203 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.137451376 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13492643 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.085112321 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105383448 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109311058 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105859664 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105770897 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11287709 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.090135315 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100065616 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274650735 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083807681 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.086567523 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103562335 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098963535 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112690335 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088617227 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07877482 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141136304 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108632281 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099665345 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.082009811 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098978901 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.125973286 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093984677 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091827277 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109605674 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107955757 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145373503 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094379915 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.101814819 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121365581 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.0847713 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.096376551 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.073559493 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088943278 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079322735 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.11297393 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078993256 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112938575 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071831176 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135464678 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.09129309 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09675725 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107049302 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102441668 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131615095 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096802664 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133478994 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094856383 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106240572 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113240124 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099082353 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084249701 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1086368 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100428089 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114556466 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100605758 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109902377 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114280426 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098792197 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146202268 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094340737 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12544735 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110937316 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.111568104 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108057936 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121272834 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14145123 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116551213 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116055071 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.079345114 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087567808 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109485365 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10442293 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150341219 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107617117 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.076007546 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091194214 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.095707893 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10035998 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.26586421 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084931034 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146205706 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091737347 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091521754 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118743364 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.092979665 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099255204 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07858213 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.09678168 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102643939 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098246973 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09951652 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.113254798 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121452431 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119089504 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.138073447 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.104156068 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.098084315 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.123947698 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116096589 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115343787 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090189145 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091725853 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128436901 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.107527066 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.13177982 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104321456 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099791128 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106545665 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095454855 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103922813 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101302959 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.11384782 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083456973 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.079427112 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072544236 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07611336 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122483194 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112983565 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106653387 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102224595 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076406618 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108026274 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104281832 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075944155 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091848016 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098948847 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.102938257 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.087999424 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096537228 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.118153265 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.095616183 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108128056 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10261182 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.131848236 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.104927293 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093520284 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147265256 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.131975057 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092671636 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09766156 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075367663 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083453272 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106692541 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150391927 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.123605893 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.082006239 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087626234 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.081312283 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.248683808 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.075627447 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.093078706 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.094369827 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108907932 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097177428 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.117384054 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108045429 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079848945 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.107843436 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101776148 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096848832 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101822933 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106964436 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110287567 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.129700536 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105894717 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101726003 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08015926 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084635278 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079969011 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08352185 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106572039 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.082064145 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080637934 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133134138 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.094770075 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109254177 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113239078 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089271489 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079416709 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136756411 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073308065 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139269131 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075718747 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087037998 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085132165 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083423523 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098542152 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109900897 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100945942 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117738097 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110669838 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10902806 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114694932 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161082582 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.074760302 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.148018977 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080120567 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079686172 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079526948 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114058492 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093789082 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108476813 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144680294 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091941037 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093922637 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079079777 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130421313 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100870355 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104742686 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.085063453 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081093469 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.131938965 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083204132 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075115476 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091005693 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.115312449 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.076353726 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107401127 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.089140841 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.243894124 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.116670063 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.633785651 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093556216 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.079701033 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093831532 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.147266746 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133795709 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086233792 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112143406 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121052587 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092772152 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087135287 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112400995 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187589231 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078661603 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099637804 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.109102872 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.103635502 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096770028 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.096409496 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090744255 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.096271463 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089304424 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08365243 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111479658 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09141074 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095290474 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100897861 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084587593 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081416716 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131798751 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105942006 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.085657647 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093929722 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105205475 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091448762 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091925649 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071052524 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114993116 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092357779 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104713277 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.093572509 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109223362 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124513961 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092409234 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116763555 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.092330254 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114032788 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089443932 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082842089 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107270372 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.081596913 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080773211 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.120732924 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.091688759 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.096843219 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108319799 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.099460716 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118055484 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.12309885 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115973058 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102278766 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083638059 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090279588 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.092668073 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079004656 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082708286 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.078614282 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.079490439 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112032215 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.250666266 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.08686955 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.119116689 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087137208 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.107635791 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.105815084 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114717919 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087113252 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106534255 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113667647 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095207951 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109199903 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105357304 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133234047 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150200321 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103629108 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128907582 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13860036 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080923294 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079403496 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.073724218 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11976179 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.082900087 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.085459494 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084049067 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136098338 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.086133863 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098028487 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.234084996 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.085013577 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085247657 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100405139 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.073268217 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.088569947 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113271637 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089645181 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08486184 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10250748 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.087001691 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.121254718 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116463307 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093835567 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087232872 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085519695 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098471175 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.108238307 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131802364 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.094080612 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.078994073 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110478768 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.106067159 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.127774834 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.076164917 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084119077 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130614391 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09581697 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107057828 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083681028 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.124253842 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137787597 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094025697 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138212593 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075313738 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086780773 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.092622512 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.128882293 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078788598 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091782037 seconds)
  done (took 67.256005492 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.149914024 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.14606385 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.087404711 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.106921722 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.197255169 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.213159918 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.131539398 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.105315412 seconds)
  done (took 3.137047587 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.069948843 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084179902 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.10194134 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.084685013 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.068896766 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.069341256 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.210976201 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.086195871 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.070482618 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.111269301 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.077764457 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.069929781 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.364763716 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.068187015 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.070232043 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.079325692 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.071076932 seconds)
  done (took 3.731914171 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.371596354 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.629668208 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.327683307 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.079332328 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 5.039020322 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090719732 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.214549706 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.13875957 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.083987976 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.556747274 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.369540647 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.136239651 seconds)
  done (took 19.005607673 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.077800934 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.077869765 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.081819641 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.082018514 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.078180461 seconds)
  done (took 2.365684257 seconds)
done (took 120.173797614 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.084931325 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.173824783 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.071006804 seconds)
  done (took 2.243531774 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084036665 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.084566749 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.085340165 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082643863 seconds)
  done (took 2.308728887 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07681929 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078968814 seconds)
  done (took 2.12029255 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227188744 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.180786158 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.096117388 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084254542 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.083236602 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.08497547 seconds)
  done (took 2.229740875 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073581717 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.074872517 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.07602997 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07644318 seconds)
  done (took 2.263769453 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071739063 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.068736932 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072178143 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.076958653 seconds)
  done (took 2.254385285 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087291432 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.08521469 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.116059274 seconds)
  done (took 2.253609319 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085156111 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084904406 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081506694 seconds)
  done (took 2.221626792 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.11075213 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099565965 seconds)
  done (took 2.175779493 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081918267 seconds)
  done (took 2.052034168 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091334203 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.101523717 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.14656648 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.111875674 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.144150235 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.129785781 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078545268 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079448667 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076359033 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076258767 seconds)
  done (took 3.00135058 seconds)
done (took 27.687627883 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080177597 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.370291859 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.360729301 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.090113286 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.675629585 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.360797389 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.008913241 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096291153 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.105273497 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073116054 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089586903 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.652402373 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.996194672 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.326658645 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.983091638 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.330329364 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651480062 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069873078 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.068722841 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069653975 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.990460899 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069953449 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069382877 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069894715 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652264305 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375134056 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070197087 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.325086837 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069460592 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071600285 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.35771906 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071456296 seconds)
  done (took 16.592484843 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071893081 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125466672 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076456001 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088687427 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.074683378 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073860963 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.075653614 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.072695518 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115999588 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073059847 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090530677 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072020725 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.076206185 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.074083762 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.092521614 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.07243681 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.073719405 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073769523 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073787863 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074454147 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092438705 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073321132 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.074114339 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073900566 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073077879 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085865718 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074912872 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073301534 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073279542 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075185092 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076454333 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072957391 seconds)
  done (took 4.524808603 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123311303 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.130684101 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.077434445 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.113125345 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.124149575 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073454848 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156810939 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096956679 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118163095 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073309139 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.090648682 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072584496 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.108688746 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073875109 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.09391861 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073300764 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074852871 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074666831 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.072888038 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074057831 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.091242875 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072316385 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072785478 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072724333 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07391286 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.088106877 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072737565 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070372841 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072423034 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075211602 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.076675835 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07454097 seconds)
  done (took 4.79781658 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071477227 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073513725 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081227303 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083816787 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068724177 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070798525 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072459957 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.069499119 seconds)
  done (took 2.580175747 seconds)
done (took 30.488772342 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080742951 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069463229 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072365927 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090230025 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.077677542 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.074641674 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.068898726 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.078217423 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075736173 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.075550348 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.077764028 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.070861294 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.073861484 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067569709 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074940601 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068563651 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074393094 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072220937 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072827179 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.076918985 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.069816648 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.072887439 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077120134 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073740672 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073506794 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072537042 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.07771053 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073787528 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068064964 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070622963 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.06994842 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082089343 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074600556 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074741066 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068541288 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068330581 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072392639 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.069972318 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074589278 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076976825 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069990633 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07674836 seconds)
  done (took 5.051186412 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089186632 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095494482 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087459319 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083468866 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108444576 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.085605107 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.09474248 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.083087879 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080378074 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092473371 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075315183 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080259565 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.084263298 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076847977 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080631426 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076379469 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.083006562 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.076952497 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.082755816 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.082216428 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.094589599 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.075737059 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.082191192 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.083087401 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.076166418 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.080971409 seconds)
  done (took 4.186599163 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.07459742 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090841447 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096111979 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146258796 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.11498565 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086472579 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086424594 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.106941679 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.105883098 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.071677239 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.075285545 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097246248 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097842346 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076240505 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107688769 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087125825 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082574507 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.070636776 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076233062 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.104149716 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.0942923 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.090428702 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104576046 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.091949782 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.071076479 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08114985 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.078755346 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.086814085 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.079019352 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.084465178 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.076274499 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075695929 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.072066736 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.084980238 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075966424 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.069232302 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.093187878 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082659265 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085365097 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107974561 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079387401 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072114005 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.101684299 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.136881874 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071123755 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074990688 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.076131005 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.083668903 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073919261 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.101792823 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.090496939 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071512631 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.090717417 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.072542123 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.072038164 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087793847 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.073271969 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.073618595 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084333307 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.077705626 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.092438828 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.077508416 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093922523 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.071089406 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.083203072 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073487044 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073206275 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070317784 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108436048 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079570798 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.125521864 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.07272866 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.069596665 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.084238445 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083626657 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.078411614 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071342817 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.091820628 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084064799 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075274858 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.083186329 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.074612576 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.07478774 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.107631103 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.071221702 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.069882655 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069719083 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.07252068 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072812585 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069731895 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.0822976 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069281331 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075230261 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.087541698 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071769146 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072074284 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074103887 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073321268 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071218505 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.083755112 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075403754 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.072785416 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084111695 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.072692374 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075083963 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.086963273 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.081653306 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.071041563 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.076052415 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.07473369 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.072881992 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074275271 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072671776 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071376382 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076334222 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076112697 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074643828 seconds)
  done (took 11.678379052 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164903408 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155657927 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.072418025 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150926494 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.080273687 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.075060574 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150273234 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090299746 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069740189 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071272127 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069423207 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097243378 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.095131549 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110600359 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077185086 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071918572 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096281113 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104463535 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.151794945 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146686131 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093269018 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077163729 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072688829 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071331021 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071896643 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078153365 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086035427 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077632313 seconds)
  done (took 4.766526505 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077832274 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.112584298 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.07399818 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094058005 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089431949 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070406014 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072919003 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073010697 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087698645 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.07792638 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069841645 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074450288 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073675971 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.071031501 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070105415 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076295516 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076025261 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.06867681 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073500483 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074875482 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.081175204 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.09545911 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074598883 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069729098 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072239571 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069902228 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076685899 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082046445 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071418711 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.102518124 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068405443 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.076401888 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.087090995 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.072984708 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071198129 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.072163318 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.071331795 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070592002 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.07012228 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068462109 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067833 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.075075116 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068379779 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076644061 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084272646 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.079250334 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07281033 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074093779 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.073046271 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066622819 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072870514 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073327341 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072351662 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078391421 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073335406 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.073167646 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.072714971 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100422084 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075537176 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068725175 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068876716 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.06795908 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071526363 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077776159 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086202057 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071074002 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.069194564 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.07012508 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.07461141 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083767897 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069759827 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075304668 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067211973 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.071905763 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.073996831 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.074069747 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.072895294 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070696977 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071401548 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.071519301 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071703386 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070380282 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069918558 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.073956843 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.070186256 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069603882 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070149982 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071950333 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.07648257 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068765499 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073061172 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070880023 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068446057 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072203634 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074698336 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072204837 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089235193 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078422432 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070304769 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068095379 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084572337 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071760221 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069024554 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074729474 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074086079 seconds)
  done (took 9.900034049 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.09248432 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.07130399 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.08954288 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096145593 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.08036429 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075217415 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084427739 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070299043 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.085893299 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.068858596 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079159064 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068295978 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083138284 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078727821 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071035939 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079941334 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071900504 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.093301253 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084541494 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069197597 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079260612 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082636385 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082407071 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087432758 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.08801431 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088155505 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081564036 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.07185733 seconds)
  done (took 4.301909059 seconds)
done (took 41.872483685 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.081283703 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.227054594 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.062332779 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.278573879 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.296300874 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.08094917 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.277469682 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.060073761 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.074966275 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.106118044 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.371503902 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.469376352 seconds)
done (took 69.442067134 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.143592016 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.202964601 seconds)
    (2/2) benchmarking "String"...
    done (took 2.280155148 seconds)
  done (took 6.485977915 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.662689897 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.061553569 seconds)
    (3/3) benchmarking "different"...
    done (took 2.108895929 seconds)
  done (took 8.825644001 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.167349591 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.074691473 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.318219104 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.060413048 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.066435205 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.454313946 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.844648289 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.515235585 seconds)
  done (took 33.327727351 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.218321333 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.300478222 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.739817398 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.782968577 seconds)
  done (took 17.073662035 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.670616966 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.324619992 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.325598437 seconds)
    (4/4) benchmarking "different"...
    done (took 2.317478548 seconds)
  done (took 11.675349776 seconds)
done (took 89.775516421 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.104022149 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.063409918 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.116692633 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.104863453 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.074404173 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.067130613 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.066955184 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.067848123 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.069310084 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.156861791 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.063099301 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.068393704 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.066121018 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.130958387 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.663883953 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.11363155 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.072278831 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.068967122 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.083175549 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.112839771 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.120553445 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.068789216 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.547096745 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.22117182 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.695767789 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.16169943 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.248076269 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.531312725 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.067319552 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.06363614 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.331490889 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.32668131 seconds)
  done (took 213.713019931 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.063834672 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.997970506 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.082664288 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.086476915 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.513782271 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.258056773 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.205993784 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.557375571 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.068789093 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.09500194 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.277900723 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.066277024 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.303475519 seconds)
    (14/36) benchmarking "dot"...
    done (took 3.013927948 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.059039722 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.064027205 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.299429772 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.326237116 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.065627564 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.252813883 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.085614144 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.169860046 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.123343255 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.276247714 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.08024213 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.151078931 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.078057381 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.082069582 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.250627169 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.271032922 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.064523985 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.099183538 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.266849993 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.930990746 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.068909761 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.080054181 seconds)
  done (took 180.73323474 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.235840318 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.06149541 seconds)
    (2/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.074532598 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.059073986 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.113252671 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.197156615 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.060815106 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.739471407 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.064825517 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.097397373 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.063951005 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.056507019 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.056991237 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.058605813 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.070994841 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.180670901 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.061500382 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.072536812 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.059595342 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.079004139 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.058338848 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.056949591 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.057039973 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.057626989 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.058443203 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.057338796 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.057721227 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.058497044 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.843592709 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.310431162 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.059761133 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.058505267 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.346745988 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.070756106 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.27217374 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.060853775 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.146943261 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.114375641 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.16290926 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.061336003 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.27603986 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.185565007 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.057589698 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.057441883 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.120961012 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.070811282 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.059349018 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.057895313 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.060649557 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.064892124 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.122799487 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.307818363 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.059747335 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.19623319 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.573934967 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.058746331 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.060064437 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.058761498 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.71657824 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.061330687 seconds)
    (60/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.0586091 seconds)
    (61/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.06614731 seconds)
    (62/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.065920437 seconds)
    (63/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.059080934 seconds)
    (64/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.060537821 seconds)
    (65/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.444805026 seconds)
    (66/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.124624917 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.22636429 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.05849165 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.90754952 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.060959987 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.214465276 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.256744963 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.059029193 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.059988285 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.060022586 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.061910087 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.058995973 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.062936747 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.19659604 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.07088187 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.180596118 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.140913533 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.059224108 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.197296861 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.062756948 seconds)
    (86/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.070035722 seconds)
    (87/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.885966121 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.129314642 seconds)
    (89/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.096698383 seconds)
    (90/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.885672505 seconds)
    (91/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.049533869 seconds)
    (92/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.432414784 seconds)
    (93/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.844068008 seconds)
    (94/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.06004354 seconds)
    (95/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.060948312 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.072910069 seconds)
    (97/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.049828297 seconds)
    (98/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.061878843 seconds)
    (99/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.061636618 seconds)
    (100/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.139365832 seconds)
    (101/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.060308295 seconds)
    (102/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.198798643 seconds)
    (103/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.811668975 seconds)
    (104/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.690715016 seconds)
    (105/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.061553569 seconds)
    (106/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.061213927 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.04625856 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.067855999 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.141353516 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.199211802 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.065570247 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.124844162 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.068630185 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.062279932 seconds)
    (115/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.1900579 seconds)
    (116/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.063074432 seconds)
    (117/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.061965994 seconds)
    (118/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.061770639 seconds)
  done (took 443.250078203 seconds)
done (took 841.963875808 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.692288164 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.664808731 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.756772624 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.73577497 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.65828958 seconds)
  done (took 15.501400919 seconds)
done (took 17.493809741 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.092401022 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.079415356 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.067737659 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.118683136 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.087394756 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.075153276 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.10922545 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.107947722 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.093954361 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.074939461 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.112388426 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.079043238 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.080072601 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.096809785 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.139040825 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.10225013 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.068153173 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.071353156 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.119095513 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.080217982 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.081424724 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.07751972 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.076284575 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.114477213 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.1483122 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.088208427 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.075678986 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.113349818 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.08531354 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.111325642 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.130973684 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.097685863 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.110614321 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.14175309 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.124049426 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.146899351 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.086729522 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.133005947 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.083532925 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.149195661 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.121343296 seconds)
  done (took 88.147593158 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.075276583 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.214930869 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.333035993 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.10806777 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.07307355 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.339316761 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.131930836 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.207120624 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.213284926 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.339484127 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.342508903 seconds)
  done (took 26.379370732 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.071851773 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.215888394 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.343146278 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.110963904 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.095334549 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.336267429 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.140037604 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.20725986 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.22050931 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.336589954 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.34909016 seconds)
  done (took 26.435215506 seconds)
done (took 142.954646327 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.445533155 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.102876939 seconds)
  done (took 6.545619198 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.088256531 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.226002229 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.069580175 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.06897282 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.069498298 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.067920465 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.070241344 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.068107318 seconds)
  done (took 18.726548241 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.068398241 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.068838456 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.069549284 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.069789292 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.069541841 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.069613127 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.069215523 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.069325144 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.070137202 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.069753264 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.069059143 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.068444414 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.07043142 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.069186086 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.069384984 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.07051607 seconds)
  done (took 35.109818389 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.072692125 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 2.06854199 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 2.069895813 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 2.072166656 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.070495045 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.070285166 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 2.057461652 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 2.070226352 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 2.070585121 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 2.070602549 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 2.070204806 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 2.068770731 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 2.070120288 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 2.071683381 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.070445693 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 2.070515337 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.070270569 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 2.070571222 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 2.075473713 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 2.071980475 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 2.075015231 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 2.073977968 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 2.071555014 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 2.071961736 seconds)
  done (took 51.695635836 seconds)
done (took 114.083953954 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.339206438 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.681863783 seconds)
  done (took 9.021836066 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.074509313 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.071683386 seconds)
  done (took 6.217612095 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.072526463 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.072194454 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.072720939 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.071026341 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.072036735 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.071565983 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.071973739 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.072222039 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.071907864 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.071324908 seconds)
  done (took 22.72016326 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.073761672 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.073006481 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.07286647 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.073408318 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.073128222 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.073078459 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.073879292 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.074086337 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.073991106 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.073152115 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.072767715 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.07348912 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.074261953 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.073000584 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.073470063 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.06883282 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.074264615 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.07468336 seconds)
  done (took 39.321007724 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.073855123 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.073700734 seconds)
  done (took 6.148520587 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.075555862 seconds)
    (2/7) benchmarking "second"...
    done (took 2.073922016 seconds)
    (3/7) benchmarking "month"...
    done (took 2.074918117 seconds)
    (4/7) benchmarking "year"...
    done (took 2.074847663 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.073968846 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.073843164 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.07601525 seconds)
  done (took 16.524456842 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.075929307 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.221108099 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.276606447 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.702760472 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.075016265 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.075720086 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.942063364 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.075907196 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.076547743 seconds)
  done (took 22.523451052 seconds)
done (took 124.476891093 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.886585906 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.075248392 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.339190244 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.193296631 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.095521074 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.412140603 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.117302739 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.675777555 seconds)
done (took 44.796713272 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.129957402 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.072193517 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.105941716 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.105775084 seconds)
  done (took 23.288060415 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.07341279 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.419755831 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.098637187 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.057539206 seconds)
  done (took 23.664919327 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.46197443 seconds)
    (2/2) benchmarking "read"...
    done (took 2.432432423 seconds)
  done (took 6.902619159 seconds)
done (took 62.989556674 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.074269253 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.074794993 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 2.073694496 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.075049958 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 2.073938046 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.075754665 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.074511915 seconds)
    (8/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.07445461 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.075836921 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 2.076384096 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 2.076957652 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.076053586 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.076641595 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.075130472 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.075864872 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.075516273 seconds)
    (17/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.075437258 seconds)
    (18/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.075627752 seconds)
    (19/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.075285911 seconds)
    (20/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.076668806 seconds)
    (21/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.077601896 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.075464684 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.075067731 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.076482787 seconds)
  done (took 51.81669041 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.076091773 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.076590899 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.077335107 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.076790204 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.077119364 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.076776316 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.076902557 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.075607932 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.076478994 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.077164062 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.076491403 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.073362514 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.077333572 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.077153386 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.076723765 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.077374294 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.077201468 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.077113079 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.078588837 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.077837279 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.077172029 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.077615376 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.077451135 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.078656251 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.077625674 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.077552418 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.076946943 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.078165288 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.07805237 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.077668712 seconds)
  done (took 64.317909447 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.07749642 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.078068934 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.078501688 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.078729272 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.078882083 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.0777578 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.078301143 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.078336092 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.077854433 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.078365609 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.078208536 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.078955328 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.078938301 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.078600173 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.079273491 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.079017649 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.078694574 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.078624118 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.07937691 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.080316551 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.0795904 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.078863222 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.080008215 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.079249859 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.079237082 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.079083527 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.077492413 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.080335322 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.079335869 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.08008949 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.080482238 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.080499014 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.080071331 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.079878012 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.079981292 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.080154184 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.079823503 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.080079524 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.080248207 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.080684515 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.079593111 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.080210809 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.080581919 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.08014782 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.079895339 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.080514218 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.080896006 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.081098955 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.080703007 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.077158027 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.080492456 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.080962864 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.080815514 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.079812853 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.080186552 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.0797568 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.080167077 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.080632935 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.080445907 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.080896386 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.081449261 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.08078582 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.082077509 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.08228937 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.083243004 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.080970793 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.081423147 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.080535565 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.082212221 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.081470169 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.083136809 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.08066103 seconds)
  done (took 151.762285829 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.082164387 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.082854767 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.081059423 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.081185017 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.082314053 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.08199201 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.080791253 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082006084 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.081945271 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.082312711 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.082498462 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.083438873 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.082139763 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.083591344 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.082505159 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.081780234 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.082272208 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.083332337 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.083857042 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.083361418 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.082948041 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.083830867 seconds)
  done (took 47.825676582 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.083377669 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.083111558 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.082447611 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.083429589 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.083484581 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.082327513 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.083377166 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.083661588 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.082497529 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.083873124 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.083582348 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.083646126 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.083794407 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.083783088 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.084604856 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.084639391 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.082576674 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.085312159 seconds)
  done (took 39.516459212 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.084267151 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.084242305 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.084014107 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.082829902 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.083652881 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.084539392 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.084283473 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.085498227 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.084951238 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.084285552 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.083624793 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.084243392 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.084414043 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.084595698 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.085526186 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.084168658 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.085537807 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.084589165 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.084373092 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.085768331 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.084856159 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.084932715 seconds)
  done (took 47.872948919 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.084966524 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.08475408 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.085711101 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.085432125 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.085070457 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.086458772 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.086058401 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.08565069 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.086682278 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.08545647 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.086160588 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.08658555 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.086070672 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.086047804 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.086140207 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.085715037 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.08592634 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.086607828 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.085815173 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.087282919 seconds)
  done (took 43.732863793 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.087614402 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.086761139 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.087314536 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.087677818 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.086027466 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.0868374 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.08721877 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.086067574 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.089123138 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.087907423 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.086748303 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.087794826 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.087430646 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.087772851 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.08781595 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.087218881 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.087330853 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.087823702 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.087950983 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.087954877 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.087963352 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.086463573 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.088272154 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.088146987 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.088246948 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.088545205 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.08183252 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.067334883 seconds)
  done (took 60.440665485 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.086342857 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.0876038 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.087450102 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.08909992 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.08916288 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.087632959 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.088422609 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.089213813 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.087310898 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.08917214 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.074512787 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.089528734 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.088661692 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.089448799 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.088682016 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.089621626 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.078853798 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.088635815 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.08935857 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.086316723 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.078995388 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.088763772 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.088522574 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.089340388 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.088509293 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.089241826 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.089208872 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.08988308 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.088132835 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.088511043 seconds)
  done (took 64.64207665 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.109883503 seconds)
    (2/2) benchmarking "in"...
    done (took 2.107563887 seconds)
  done (took 6.235406871 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.090371545 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.089900613 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.089527625 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.089608082 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.08850112 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.088670014 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.089167893 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.090394989 seconds)
  done (took 18.734301751 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.091297537 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.094630954 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.091549633 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.090630612 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.091776932 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.099556318 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.091736468 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.092703333 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.093196128 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.091665612 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.095341915 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.095042108 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.100102394 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.096440791 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.092259503 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.092544858 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.093808415 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.094388201 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.09327739 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.091765787 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.096016763 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.092501189 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.091803812 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.095624516 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.091950735 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.093765462 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.103493935 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.090823654 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.094255516 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.09296882 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.100311574 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.093306831 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.092420334 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.095287382 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.092890563 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.092548387 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.100421079 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.093736124 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.094101874 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.092578738 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.095445856 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.095944016 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.097249818 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.102022592 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.093204223 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.09378665 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.093687567 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.09367645 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.092828733 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.097338958 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.102031389 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.094106068 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.092994532 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.094454946 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.097023595 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.093770143 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.093742757 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.095476944 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.101460656 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.102761857 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.097443493 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.115817505 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.104213792 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.094913144 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.095194987 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.105258779 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.1198129 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.096315714 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.095388084 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.094197846 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.104030134 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.094551688 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.094646797 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.094859774 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.109596097 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.10235577 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.094255255 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.094055217 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.094512629 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.094825592 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.096789063 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.095472198 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.095142009 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.095160418 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.105927805 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.120718748 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.095752322 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.096024152 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.098189271 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.097300732 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.100096994 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.098860064 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.096840154 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.095544567 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.098589523 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.098616716 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.096226322 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.095904336 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.095743606 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.10656782 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.096312655 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.096305725 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.100915632 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.104161756 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.095488873 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.096073724 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.097527882 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.087914493 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.083565585 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.097788876 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.09702039 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.097080371 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.097410378 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.102158564 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.096737628 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.100828858 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.105695064 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.105156721 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.097997756 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.10085372 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.101556114 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.100450547 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.094874692 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.122154987 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.096781309 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.101682053 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.103723606 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.110276025 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.102515288 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.09721617 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.101588576 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.097487349 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.098143139 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.101793608 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.097142904 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.098695445 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.097533278 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.098590468 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.09937435 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.099269656 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.101858766 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.099921474 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.101322551 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.098559467 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.10294802 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.099658748 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.102105423 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.107048365 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.100287719 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.100013644 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.098854021 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.102171509 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.100900218 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.098857453 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.098715141 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.098800985 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.09986517 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.100711234 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.101991811 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.099906457 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.10044359 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.099224123 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.103926902 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.099507328 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.10041413 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.100788905 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.10131891 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.099922027 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.101866639 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.101807635 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.102374242 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.100670322 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.106296767 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.10025732 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.100301377 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.100964106 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.100772997 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.100192148 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.104982563 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.112795775 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.105563061 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.110974766 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.100527275 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.109642223 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.100600156 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.103373884 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.102373184 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.101399849 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.100806892 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.100589857 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.1010458 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.106221937 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.124007134 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.113542713 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.105221313 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.075761863 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.104853981 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.105696704 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.108697248 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.103136467 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.103160686 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.105171857 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.089712889 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.10221233 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.102641774 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.105683106 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.10180132 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.10153429 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.107300839 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.092907025 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.102274323 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.104119963 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.103137043 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.104616552 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.102489791 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.10309448 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.102263153 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.101949612 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.11219147 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.106460526 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.102171009 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.102870264 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.105876526 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.103095376 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.102866877 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.105499337 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.107229954 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.103994823 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.104373898 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.111232336 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.104546617 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.10391648 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.104027304 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.103996546 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.105614764 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.104345915 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.107537841 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.112237511 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.107901786 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.104634096 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.110640531 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.10324993 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.106343918 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.099741507 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.105343453 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.104617748 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.107385688 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.104695018 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.104133186 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.113000726 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.104640858 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.107848542 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.106950789 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.108065423 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.107710235 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.107330825 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.104805227 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.109947042 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.113628827 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.112063444 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.10605499 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.109076028 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.108242642 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.106835225 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.109240064 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.106735088 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.119353966 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.11577898 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.105055273 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.1058558 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.105570242 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.108241023 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.105915331 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.106538891 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.11542004 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.106143753 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.094116 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.110724455 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.105983894 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.107696978 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.113726989 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.107579143 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.109938997 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.108532501 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.10744954 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.107628601 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.106891748 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.109614662 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.107352432 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.10920609 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.10998913 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.107560157 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.108449825 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.108381979 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.116882174 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.106883145 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.108893606 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.114714581 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.109346908 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.107103145 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.108879517 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.107012232 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.109378501 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.108863931 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.107899644 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.108951479 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.108529075 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.112381499 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.118153208 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.11213696 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.116325507 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.109997887 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.119809579 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.109039597 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.108247184 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.108550311 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.112277273 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.117241711 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.107910992 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.095694716 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.117421668 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.108625537 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.109475831 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.113140943 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.108248379 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.105926046 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.109122185 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.110316757 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.114133899 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.11283696 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.108443029 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.109487781 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.109399911 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.108622025 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.113603151 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.11247695 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.110801313 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.110742577 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.110011001 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.109500575 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.109994345 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.109298064 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.109405139 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.10921892 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.109970261 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.118707106 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.110440217 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.111224327 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.115029835 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.110433616 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.120142444 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.112470436 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.110021 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.111915641 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.110671625 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.113397324 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.110592994 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.111507477 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.111131869 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.110192471 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.11163471 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.124458646 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.118245746 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.115064963 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.113873049 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.111924391 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.113128729 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.121612898 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.135946258 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.1114435 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.105190261 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.111149755 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.120038994 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.113935664 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.118869555 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.11549292 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.120165833 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.113570225 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.111242785 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.098234832 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.126066712 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.112817513 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.111566473 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.111744727 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.117656105 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.113965855 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.1117056 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.113122413 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.117056095 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.114531813 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.1256556 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.112313324 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.114747285 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.116393753 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.112536586 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.112646447 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.112410824 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.115210324 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.116204529 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.112578319 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.112900028 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.115311851 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.119056566 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.11395279 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.112218317 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.122615338 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.112000635 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.112474986 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.1156025 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.114328022 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.116572633 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.388445393 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.112287157 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.115427082 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.11425905 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.115310433 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.117716672 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.123544739 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.114983119 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.114260957 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.113402948 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.119125208 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.114659274 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.114609407 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.116552975 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.124232323 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.118845166 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.126702395 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.124868589 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.1154972 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.117000519 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.122393497 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.123204073 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.115329202 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.11437504 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.115138467 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.118555855 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.117822216 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.115803915 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.115776037 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.116786611 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.121383578 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.115217281 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.115651617 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.116443721 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.115214211 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.11821659 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.117637191 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.121516849 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.115210702 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.116602398 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.114542319 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.117345734 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.116786266 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.119338798 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.117310441 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.116134103 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.118673542 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.118060961 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.120047838 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.115277655 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.116596169 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.118091499 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.115431837 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.116126036 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.115995131 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.118082182 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.117330694 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.120814022 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.125963153 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.116287372 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.11888144 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.118092968 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.121937007 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.11750004 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.117902848 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.116984313 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.118318488 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.126600018 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.118568421 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.118190218 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.118301401 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.117274923 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.124213318 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.119583409 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.122430993 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.117903644 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.118688959 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.117859727 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.122558826 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.127762525 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.122685447 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.121708768 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.125917992 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.123446235 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.120157548 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.118437386 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.118126293 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.11928816 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.119960709 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.123214958 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.121385429 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.122258901 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.119350156 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.120854352 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.118777476 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.122114527 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.11902997 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.119109622 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.124614675 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.130574063 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.128809897 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.119055946 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.121389794 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.119126391 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.123941896 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.132431923 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.119800269 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.119668157 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.12073387 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.121282114 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.122391104 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.128566481 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.128665651 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.125304626 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.121185385 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.125542484 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.139547037 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.122823318 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.130620733 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.153001457 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.121181654 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.120389071 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.120499649 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.121848134 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.120884397 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.124603154 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.121096846 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.128730332 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.121217966 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.12069903 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.12977852 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.121501434 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.121152376 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.122484015 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.123476317 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.128735491 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.122382396 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.129890179 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.122454657 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.121730651 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.121559902 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.124691173 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.121699659 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.60158319 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.121169416 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.125377568 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.121879657 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.122587221 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.131523875 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.121874262 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.124452197 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.136500819 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.133425132 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.122073331 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.122008879 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.122550775 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.129662929 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.127100455 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.122988317 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.126915297 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.130965506 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.125927502 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.130933467 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.124258592 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.125921353 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.122814285 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.122025597 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.122374111 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.136691167 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.13513752 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.122279694 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.123522819 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.129576496 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.123075342 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.130011026 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.128025069 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.122866317 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.124804381 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.122324723 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.12252045 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.121274454 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.122463789 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.127301405 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.104827908 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.123682889 seconds)
  done (took 1260.248587067 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.122114966 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.123484218 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.122770972 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.122607331 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.122283925 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.123285601 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.123864001 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.122764494 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.123139057 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.123575883 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.123143418 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.124122852 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.122456235 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.123533471 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.12333779 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.122983675 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.122671793 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.12283007 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.123957657 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.123509864 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.123615242 seconds)
  done (took 46.635976125 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.123988258 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.124603676 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.124167328 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.124205335 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.124450264 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.123902731 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.124379893 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.091272238 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.123158921 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.12418849 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.123718754 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.123842532 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.124572679 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.124023338 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.123881128 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.125324926 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.126584652 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.124705972 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.125144704 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.124980052 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.125086164 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.125717175 seconds)
  done (took 48.757461643 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.126437402 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.124306415 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.126346368 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.125315176 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.124454786 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.126025121 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.126088095 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.127330595 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.126163415 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.12732385 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.13458139 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.134527306 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.125385359 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.128877086 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.126319955 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.126218595 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.271992232 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.126326221 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.125666882 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.126512466 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.126198192 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.133401713 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.125470814 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.126422982 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.127208173 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.128384528 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.125925938 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.126671437 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.127437843 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.128497406 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.13180601 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.126668525 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.128777725 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.130850667 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.127627445 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.129041906 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.131149094 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.127301412 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.127017215 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.128200966 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.137958625 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.151916241 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.127795221 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.127608135 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.135764259 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.127438637 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.128397034 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.132344304 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.137148571 seconds)
  done (took 106.510248702 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.128224624 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.127371754 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.127632408 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.128822803 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.127528569 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.128280429 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.129694267 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.128528688 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.128751447 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.128383594 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.129248484 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.129077104 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.128678391 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.129476154 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.129603044 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.129618895 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.130207962 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.129440657 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.129344859 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.129484546 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.129447088 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.129927453 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.129382066 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.129327115 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.128640899 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.128944454 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.128491619 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.129874884 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.128835138 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.128636593 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.129211373 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.129485178 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.129850247 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.130325741 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.129565611 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.129770679 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.130198126 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.130941176 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.130790749 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.130759555 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.130244997 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.130260165 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.130460905 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.130497817 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.13160577 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.130066588 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.130806108 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.130330983 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.131199389 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.130395867 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.13097669 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.131425983 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.130962583 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.130758325 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.131052921 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.131218101 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.130740553 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.131474051 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.131111825 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.131648356 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.131293049 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.130569951 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.130900981 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.13118786 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.132292294 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.13222657 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.130973496 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.131578884 seconds)
  done (took 146.895331885 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.132742692 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.132655282 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.131781772 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.131677534 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.132445547 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.132463647 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.13263972 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.135456874 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.132916151 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.131953263 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.132324529 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.133810896 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.1323623 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.132219044 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.133519299 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.132339436 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.132338074 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.131953243 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.133869067 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.131765159 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.13300576 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.133852092 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.134092085 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.133020355 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.13319743 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.133841663 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.134190902 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.133869296 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.133035878 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.132726386 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.134396819 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.134278805 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.132784161 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.134206494 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.134409248 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.134279347 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.134408304 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.134075641 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.134095167 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.133961728 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.133449182 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.134228423 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.134874959 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.134203553 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.134641351 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.133690605 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.135034426 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.134689071 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.133454564 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.133774297 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.134296655 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.136059965 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.135046955 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.134624473 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.135054671 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.134413598 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.135312284 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.134199036 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.13470044 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.135863273 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.135868124 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.135232124 seconds)
  done (took 134.352010551 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.135025265 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.135681069 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.135687407 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.135023121 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.135747965 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.135864771 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.136109616 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.136101496 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.136505275 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.136399641 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.135000391 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.135959543 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.137468384 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.136041711 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.136167569 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.13775704 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.136630634 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.135546824 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.136744516 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.136421937 seconds)
  done (took 44.783912974 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.136646991 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.136239829 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.135803905 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.136644526 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.136084944 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.136423257 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.136153826 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.136643609 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.137564667 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.136449459 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.135195021 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.136993287 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.137168608 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.136650698 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.13782151 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.137894097 seconds)
  done (took 36.249897852 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.137081845 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.136506366 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.138922649 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.137544249 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.136720026 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.137530097 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.137696812 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.13797577 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.137533441 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.136498849 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.137239287 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.138053471 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.137883929 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.138131382 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.137634415 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.138102409 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.137972288 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.138103632 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.13801361 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.137920008 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.139419389 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.138296724 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.137789653 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.138461883 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.138512316 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.139141828 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.139020928 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.138925946 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.139753483 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.138137509 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.138997621 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.138299819 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.139521796 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.140064161 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.138584069 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.138912565 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.138831651 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.139355349 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.140493709 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.139080456 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.139482228 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.141095134 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.138946979 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.139309739 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.139278181 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.139396364 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.139100291 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.139628952 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.140141805 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.139739922 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.140896061 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.140501751 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.140384914 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.140548448 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.137676804 seconds)
  done (took 119.694966424 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.140150751 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.140445338 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.140645071 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.140185017 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.140080282 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.139987557 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.140875004 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.139900375 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.140900429 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.14058598 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.13971945 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.139791882 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.141308947 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.141185603 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.140497791 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.141994712 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.141757218 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.140884994 seconds)
  done (took 40.596408169 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.141949943 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.141390693 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.117201997 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.134302015 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.140724205 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.141797907 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.1419382 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.141326656 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.142104224 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.141387369 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.141384111 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.142005676 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.1425285 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.14302539 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.141972586 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.142132444 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.142549271 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.140638898 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.142524024 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.142535938 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.142509686 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.142449746 seconds)
  done (took 49.158289476 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.142707719 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.143703315 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.158322403 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.164757062 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.164355932 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.17912501 seconds)
  done (took 15.022153432 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.142920901 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.14249893 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.143162951 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.142703127 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.143129064 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.143727897 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.143963032 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.143305474 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.143810333 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144139258 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.142735088 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.144087926 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.143650152 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144021477 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144390895 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.142903409 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144048813 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.132311145 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144413164 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144346286 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144551619 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144265278 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.144197589 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.143515135 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.14402058 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.144534822 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144018806 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.144384992 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144431085 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145029638 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.143631987 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.144733303 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144387708 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.145000006 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144730071 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144581493 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145253926 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.143669897 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.145474699 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.14581852 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.144506321 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145634364 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.144884974 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.144809818 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.145684551 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145875434 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.144443597 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.116212543 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.145940189 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.1449652 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.134466433 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145938279 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.144932624 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.133058171 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.145815999 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146417652 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.12466921 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.137695378 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.145476604 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145764697 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.145694765 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.145236675 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145991703 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.146559619 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.145937717 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.14640043 seconds)
  done (took 143.524491203 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.146486369 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.146224835 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146434143 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.147115815 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.146801626 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147512642 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147362156 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.145922609 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.148165522 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.146019559 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.14752751 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146471263 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.147384392 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.146913279 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.146896858 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.147056771 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.146017562 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148304365 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.134682068 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.146779006 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147071929 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147273378 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.146977391 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148427872 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.147960688 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.147663606 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.147448686 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.147820692 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.147349846 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.149050217 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.14784543 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148856038 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148850299 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.14861775 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.148381157 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148777161 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148377875 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148401451 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.14851775 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148317723 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.149608046 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148365506 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.148574517 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148385215 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.148604039 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.148015164 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.14872359 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.148323231 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.148789422 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.148894323 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.150331753 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.150108211 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.149419559 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.149846399 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.149180435 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.148840103 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.149499384 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.149051909 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.150177277 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.149339827 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.150258525 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.14989527 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.149577319 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.148973613 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.149360788 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.150599303 seconds)
  done (took 143.843577622 seconds)
done (took 2935.181038639 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.198404005 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.490595275 seconds)
  done (took 16.764613775 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.314697107 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.267779111 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.153012582 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.15540955 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.152001539 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.168910101 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.152704595 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.152226135 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.153430595 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.152643395 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.152983222 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.338965249 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.2471091 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.153062667 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.15188358 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.245606896 seconds)
  done (took 57.198671205 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.157704758 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.144120139 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.167416179 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.157779714 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.157513191 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.171399381 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.18878042 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.162061046 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.195795813 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.176356861 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.235519471 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.170959581 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.158305664 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.208433697 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.172114042 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.172838152 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.251945909 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.238131775 seconds)
  done (took 41.364390198 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.239311458 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.166078809 seconds)
  done (took 11.492164499 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.187711694 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.144976674 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.180221688 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.169381572 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.178873449 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.190451382 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.17191262 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.163734548 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.16106738 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.168299422 seconds)
  done (took 73.830901485 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.161449054 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.15883934 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.15945207 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.155618718 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.15445774 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.158534444 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.155299036 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.14612104 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.864380733 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.1908843 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.163525368 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.166310758 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.157936203 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.158789851 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.154137173 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.183082964 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.297395162 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.154699572 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.153571868 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.162203873 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.158005494 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.229812288 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.172468027 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.159613303 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.189909125 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.868094074 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.172816931 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.163004675 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.319138571 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.154488341 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.157154398 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.316696748 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.16254697 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.51427849 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.483544815 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.16255888 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.169568912 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.163076472 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.154313672 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.321425596 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.159941283 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.163614407 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 7.102251695 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.468309567 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.246779736 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.206155659 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.547327742 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.16323147 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.159711502 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.191853773 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.162456933 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.160247164 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.174059422 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.670309 seconds)
  done (took 148.908675952 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.154490255 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.394986873 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.308805906 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.159379026 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.41285752 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.367056611 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.158369331 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.202887635 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.157972448 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.359319237 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.415031868 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.26069254 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.158707677 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.155996172 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.157124833 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.154411269 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.305752387 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.224203187 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.161094527 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.155169335 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.18123947 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.35841768 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.279608914 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.159629781 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.182466543 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.363672133 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.279493154 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.260475472 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 5.117102188 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.156495576 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.219185154 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.158937169 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.155325777 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.156246486 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.310331577 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.252089458 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.241180201 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.160773852 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.157410315 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.173139822 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.833331267 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.357288542 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.253526397 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.282403645 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.409372762 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.373798225 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.851119754 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.156685299 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.797494404 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.321964356 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.362634999 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.365085084 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.278430405 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.161927677 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.476080556 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.157040384 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.157770469 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.379176689 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.378347287 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.259204999 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.149165453 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.158036216 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.157549586 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.396482041 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.163475306 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.250435563 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.164400581 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.158570634 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.251475253 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.260514612 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.387289786 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.380933653 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.191184428 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.486211958 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.673608489 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.361371069 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.225041233 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.385070912 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.162823331 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.158288518 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.238286576 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.00430404 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.4116972 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.40221099 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.359778733 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.190457852 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.817821011 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.158542571 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.346306234 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.351863817 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.397000606 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.409227849 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.394861859 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.742357807 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.147800204 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.160407019 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.507246169 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.277072465 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.153850958 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.511702995 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.389460869 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.704928795 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.186576685 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.446460955 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.290448449 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.16394851 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.80807013 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.162809885 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.365622427 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.201194152 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.162230138 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.162863295 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.351459854 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 3.076823596 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.162107535 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.881401576 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.222726032 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.16651172 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.367571575 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.166010148 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.406746748 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.164835621 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.393658226 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 6.05975908 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.192507574 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.335255726 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.409563808 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.819968321 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.473951138 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.404020378 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.27697553 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.385889196 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 7.055186216 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.143243339 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.423742868 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.165182393 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.162852178 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.332441436 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.1647544 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.305132646 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.166648417 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.427553435 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.184756068 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.392006758 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.166781165 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.402016029 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.196500121 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.214041252 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.166442659 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.28817978 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.165324339 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.005313582 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.321708735 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.168072523 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.163343985 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.755890655 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.162054928 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.317944259 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.389861209 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.185823286 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.233143467 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.737485175 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.163362313 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.247103885 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.186804449 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.804069878 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.164254903 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.415079058 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.167664656 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.643721083 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.164155568 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.39901346 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.351999991 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.16929981 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.16692386 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 3.007068474 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.164687052 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.164062883 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.322189108 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.561099464 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.110356083 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.363679103 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.168296695 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.293937687 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.170459419 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.499068973 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.505595877 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.165185404 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.164211342 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.165020312 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.165012882 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.165900469 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.374770987 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.193660422 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.61371305 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.300499089 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.422785442 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.471839473 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.36394749 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.207065607 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.169569652 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.389752893 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.169579825 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.228938037 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.168696465 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.185896414 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.397572685 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.173228108 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.372127496 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.402953586 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.057205408 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.214613621 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.16953363 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.16590156 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.081006346 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.310158549 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.254548131 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.17019135 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.166378832 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.281109801 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.287727975 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.352541935 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 7.022702002 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.376814892 seconds)
  done (took 967.801102739 seconds)
done (took 1319.437324119 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.167906925 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.171102353 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.17271279 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.170381136 seconds)
  done (took 30.775963735 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.170461441 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.169370392 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.169758293 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.168158622 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.169836696 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.169154151 seconds)
  done (took 15.111421358 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.167506018 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.170619939 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.170810042 seconds)
  done (took 23.603105343 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.244785441 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.594778531 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.311928369 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.616185928 seconds)
  done (took 11.864052926 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.170473589 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.170192244 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.170316901 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.169718224 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.17257273 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.173559541 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.170530373 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.170415871 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.1737174 seconds)
  done (took 21.636180209 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.440849185 seconds)
done (took 109.524805088 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.555150576 seconds)
    (2/341) benchmarking ("sort", Float64, false)...
    done (took 5.923305281 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.289896485 seconds)
    (4/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.576696062 seconds)
    (5/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.558615139 seconds)
    (6/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.179116312 seconds)
    (7/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.375436922 seconds)
    (8/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.265750409 seconds)
    (9/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.36249859 seconds)
    (10/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.181647964 seconds)
    (11/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.245974995 seconds)
    (12/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.17129612 seconds)
    (13/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.155794943 seconds)
    (14/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.238099018 seconds)
    (15/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.234223872 seconds)
    (16/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.917447354 seconds)
    (17/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.442178627 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.299709944 seconds)
    (19/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.09522701 seconds)
    (20/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.182572871 seconds)
    (21/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.358876454 seconds)
    (22/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.103549588 seconds)
    (23/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.419424351 seconds)
    (24/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.370012035 seconds)
    (25/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.172467085 seconds)
    (26/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.3092299 seconds)
    (27/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.275771304 seconds)
    (28/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.172178864 seconds)
    (29/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.159286827 seconds)
    (30/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.167697286 seconds)
    (31/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.897994669 seconds)
    (32/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.45169867 seconds)
    (33/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.338518872 seconds)
    (34/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 3.043783093 seconds)
    (35/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.323256204 seconds)
    (36/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.292842395 seconds)
    (37/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.451920503 seconds)
    (38/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.313657224 seconds)
    (39/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.154906768 seconds)
    (40/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.9692411 seconds)
    (41/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.245746082 seconds)
    (42/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.237778245 seconds)
    (43/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.791356803 seconds)
    (44/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.1526778 seconds)
    (45/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.187974118 seconds)
    (46/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 9.280897954 seconds)
    (47/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.327766955 seconds)
    (48/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.245592832 seconds)
    (49/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.881800989 seconds)
    (50/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.95758093 seconds)
    (51/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.47099495 seconds)
    (52/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.301047972 seconds)
    (53/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.243532423 seconds)
    (54/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.458908673 seconds)
    (55/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.155359483 seconds)
    (56/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.220240824 seconds)
    (57/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 4.294330296 seconds)
    (58/341) benchmarking ("sort", Bool, false)...
    done (took 2.36597554 seconds)
    (59/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.285108102 seconds)
    (60/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.288871329 seconds)
    (61/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.44738471 seconds)
    (62/341) benchmarking ("sort", Int64, false)...
    done (took 5.790245395 seconds)
    (63/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.31433789 seconds)
    (64/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.276218726 seconds)
    (65/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.150123955 seconds)
    (66/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.419685852 seconds)
    (67/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.284459994 seconds)
    (68/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.150192683 seconds)
    (69/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 3.934996495 seconds)
    (70/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.267737078 seconds)
    (71/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.171450231 seconds)
    (72/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.151873605 seconds)
    (73/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.374325088 seconds)
    (74/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.233319963 seconds)
    (75/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.695125601 seconds)
    (76/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.247815168 seconds)
    (77/341) benchmarking ("sort", BigInt, false)...
    done (took 7.153378807 seconds)
    (78/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.565267869 seconds)
    (79/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.281623343 seconds)
    (80/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.63464137 seconds)
    (81/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.171447876 seconds)
    (82/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.239526132 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.176499139 seconds)
    (84/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.165985345 seconds)
    (85/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.161227494 seconds)
    (86/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.228283676 seconds)
    (87/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.133614 seconds)
    (88/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.160886461 seconds)
    (89/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.250435601 seconds)
    (90/341) benchmarking ("sort", Float32, false)...
    done (took 5.835443444 seconds)
    (91/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.402557755 seconds)
    (92/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.312053523 seconds)
    (93/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.154811676 seconds)
    (94/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.138182008 seconds)
    (95/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.169090916 seconds)
    (96/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.355027057 seconds)
    (97/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.302601029 seconds)
    (98/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.150907414 seconds)
    (99/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 8.609276276 seconds)
    (100/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.638427287 seconds)
    (101/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.994563594 seconds)
    (102/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.66780597 seconds)
    (103/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.364875483 seconds)
    (104/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.348510171 seconds)
    (105/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.604173338 seconds)
    (106/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.227175731 seconds)
    (107/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.283553007 seconds)
    (108/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.292648419 seconds)
    (109/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.49092938 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 3.057926957 seconds)
    (111/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.282321811 seconds)
    (112/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.175803152 seconds)
    (113/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.24953353 seconds)
    (114/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.256795613 seconds)
    (115/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.149338693 seconds)
    (116/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.295822514 seconds)
    (117/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.22820267 seconds)
    (118/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.441738943 seconds)
    (119/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.174085317 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.154529975 seconds)
    (121/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.29972721 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.550371254 seconds)
    (123/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.264407811 seconds)
    (124/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.539586948 seconds)
    (125/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.411589849 seconds)
    (126/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.177768281 seconds)
    (127/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.389289471 seconds)
    (128/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.345862908 seconds)
    (129/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.437307564 seconds)
    (130/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.190245006 seconds)
    (131/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.158916333 seconds)
    (132/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.803472459 seconds)
    (133/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.152309627 seconds)
    (134/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.691043093 seconds)
    (135/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.149249122 seconds)
    (136/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.566274559 seconds)
    (137/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.439057683 seconds)
    (138/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.147184563 seconds)
    (139/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 3.863825983 seconds)
    (140/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.518849777 seconds)
    (141/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.278384855 seconds)
    (142/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.227869633 seconds)
    (143/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.792883424 seconds)
    (144/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.58751851 seconds)
    (145/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.350893804 seconds)
    (146/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.40817571 seconds)
    (147/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.284426656 seconds)
    (148/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.451730087 seconds)
    (149/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.174558124 seconds)
    (150/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.088392903 seconds)
    (151/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.17105918 seconds)
    (152/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.351215447 seconds)
    (153/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.411856933 seconds)
    (154/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.374242529 seconds)
    (155/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.425143495 seconds)
    (156/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.445107481 seconds)
    (157/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.299622945 seconds)
    (158/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.157301187 seconds)
    (159/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.155557804 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.501525024 seconds)
    (161/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.168704966 seconds)
    (162/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.431490421 seconds)
    (163/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.290404573 seconds)
    (164/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.153819696 seconds)
    (165/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 3.033321874 seconds)
    (166/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.263664629 seconds)
    (167/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.388367846 seconds)
    (168/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.548797763 seconds)
    (169/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.170137918 seconds)
    (170/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.149218338 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.032714868 seconds)
    (172/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.380587514 seconds)
    (173/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.33571107 seconds)
    (174/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.567137607 seconds)
    (175/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.290922962 seconds)
    (176/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.486026053 seconds)
    (177/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.316082794 seconds)
    (178/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.6207502 seconds)
    (179/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.397690378 seconds)
    (180/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.370133719 seconds)
    (181/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.343077042 seconds)
    (182/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.216746002 seconds)
    (183/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.584649832 seconds)
    (184/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.25362082 seconds)
    (185/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.500442695 seconds)
    (186/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.264768897 seconds)
    (187/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.160887515 seconds)
    (188/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.496599616 seconds)
    (189/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.263382195 seconds)
    (190/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.296088812 seconds)
    (191/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 8.898859525 seconds)
    (192/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.784712276 seconds)
    (193/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.17559621 seconds)
    (194/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.152890841 seconds)
    (195/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 3.507771413 seconds)
    (196/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.412134038 seconds)
    (197/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.18115607 seconds)
    (198/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.153865568 seconds)
    (199/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.685539134 seconds)
    (200/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.286140885 seconds)
    (201/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.547393508 seconds)
    (202/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.436631432 seconds)
    (203/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 3.054098211 seconds)
    (204/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.24863083 seconds)
    (205/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.811500885 seconds)
    (206/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.455931668 seconds)
    (207/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.641862881 seconds)
    (208/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.155878148 seconds)
    (209/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.680781548 seconds)
    (210/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.316316691 seconds)
    (211/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.159424831 seconds)
    (212/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.560154893 seconds)
    (213/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.304761653 seconds)
    (214/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.290017712 seconds)
    (215/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.156683775 seconds)
    (216/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.584492462 seconds)
    (217/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.23437656 seconds)
    (218/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.271629297 seconds)
    (219/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.423963884 seconds)
    (220/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.437676189 seconds)
    (221/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.876663203 seconds)
    (222/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.172586911 seconds)
    (223/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.169169975 seconds)
    (224/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.155144959 seconds)
    (225/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.479748791 seconds)
    (226/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.468298893 seconds)
    (227/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.16231215 seconds)
    (228/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.588199761 seconds)
    (229/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.360093062 seconds)
    (230/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.369932576 seconds)
    (231/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.175481193 seconds)
    (232/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.501909349 seconds)
    (233/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.441443768 seconds)
    (234/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.172533744 seconds)
    (235/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.383958929 seconds)
    (236/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.75481185 seconds)
    (237/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.058471849 seconds)
    (238/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.162870713 seconds)
    (239/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.936580813 seconds)
    (240/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.463839684 seconds)
    (241/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.276260777 seconds)
    (242/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.251305132 seconds)
    (243/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.0831437 seconds)
    (244/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.175306187 seconds)
    (245/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.15581913 seconds)
    (246/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.159812339 seconds)
    (247/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.533511441 seconds)
    (248/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.054468973 seconds)
    (249/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.224938599 seconds)
    (250/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.555767557 seconds)
    (251/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.427738374 seconds)
    (252/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.273058101 seconds)
    (253/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.168461751 seconds)
    (254/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.471099221 seconds)
    (255/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.840724255 seconds)
    (256/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.182163494 seconds)
    (257/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.414504286 seconds)
    (258/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.161483504 seconds)
    (259/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.582685615 seconds)
    (260/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.267320695 seconds)
    (261/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.576425234 seconds)
    (262/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.939228079 seconds)
    (263/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.159316424 seconds)
    (264/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.497839362 seconds)
    (265/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.165459877 seconds)
    (266/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.234500894 seconds)
    (267/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.750630479 seconds)
    (268/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.406933835 seconds)
    (269/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.963208762 seconds)
    (270/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.349682425 seconds)
    (271/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.443796153 seconds)
    (272/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.247686603 seconds)
    (273/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.227423555 seconds)
    (274/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.944434812 seconds)
    (275/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.171172046 seconds)
    (276/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.157401574 seconds)
    (277/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 3.635341864 seconds)
    (278/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.282911532 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.454353733 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.182173835 seconds)
    (281/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.288405644 seconds)
    (282/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.824925906 seconds)
    (283/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.27570643 seconds)
    (284/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.471929574 seconds)
    (285/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.868667747 seconds)
    (286/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.638170577 seconds)
    (287/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.434648876 seconds)
    (288/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.259514449 seconds)
    (289/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.25351469 seconds)
    (290/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.137986577 seconds)
    (291/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.921746854 seconds)
    (292/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.475601159 seconds)
    (293/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.245677378 seconds)
    (294/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.225203481 seconds)
    (295/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.159340698 seconds)
    (296/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.297225909 seconds)
    (297/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 7.159461612 seconds)
    (298/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 4.001002814 seconds)
    (299/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.493583288 seconds)
    (300/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.588798401 seconds)
    (301/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.163704459 seconds)
    (302/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.235783794 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.264587603 seconds)
    (304/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.191883285 seconds)
    (305/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.237628512 seconds)
    (306/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.514824052 seconds)
    (307/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.239590926 seconds)
    (308/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.419099187 seconds)
    (309/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.469055451 seconds)
    (310/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.58019111 seconds)
    (311/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.944865416 seconds)
    (312/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.598149622 seconds)
    (313/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.754581476 seconds)
    (314/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.186026514 seconds)
    (315/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.159490519 seconds)
    (316/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.683410597 seconds)
    (317/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.454252103 seconds)
    (318/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.511913526 seconds)
    (319/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 7.163328024 seconds)
    (320/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 6.890169617 seconds)
    (321/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.514811278 seconds)
    (322/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.3000571 seconds)
    (323/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.228035754 seconds)
    (324/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.400272235 seconds)
    (325/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.282072453 seconds)
    (326/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.500773845 seconds)
    (327/341) benchmarking ("sort", Int8, false)...
    done (took 5.095612514 seconds)
    (328/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.16371535 seconds)
    (329/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.242202443 seconds)
    (330/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.367865636 seconds)
    (331/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.181106732 seconds)
    (332/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.387649939 seconds)
    (333/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.408649851 seconds)
    (334/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.165377552 seconds)
    (335/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 4.110108502 seconds)
    (336/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.277944365 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.38659448 seconds)
    (338/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.394921937 seconds)
    (339/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.907585072 seconds)
    (340/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.274717895 seconds)
    (341/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.379678421 seconds)
  done (took 1196.044597112 seconds)
done (took 1198.592147027 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.190505794 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.184261376 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.165284559 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.187101329 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.278519098 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.217157282 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.178864481 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.170381457 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.216257181 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.215431185 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.166204187 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.216430962 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.16755914 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.16729338 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.166392384 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.182621067 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.534255097 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.211172537 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.185009009 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.177555622 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.184431511 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.164400135 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.216488739 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.216410446 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.171070721 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.171846172 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.171567195 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.186992538 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.280223394 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.170508834 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.171421897 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.180344574 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.534811957 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.208860879 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.165609996 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.187480083 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.180667208 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.179640045 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.171619965 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.200986726 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.691845028 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.175764093 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.168766132 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.168342444 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.169738517 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.17517092 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.16851117 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.176513294 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.18524618 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.184884936 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.676738263 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.191406333 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.173289689 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.169667066 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.181476045 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.169649049 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.172944057 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.185178303 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.188507472 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.186138773 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.517987841 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.220061219 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.172969114 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.187075564 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.179155271 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.758660171 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.191281192 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.175947462 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.692665454 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.185465884 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.757880252 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.202318077 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.173117545 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.185006551 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.202950105 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.535954434 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.212459098 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.169350876 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.179440398 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.168485132 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.182447588 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.185622392 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.176250565 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.17014743 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.187182266 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.220993941 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.182695929 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.170919271 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.183122874 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.189247228 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.179873028 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.183059168 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.177160727 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.169757442 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.18321974 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.176517091 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.175254502 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.175184238 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.175957831 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.184525593 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.692472864 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.197720336 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.169016539 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.169644821 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.171244735 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.186903199 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.694017038 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.18101742 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.195312386 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.221487807 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.17384928 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.520516963 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.218954201 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.191319292 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.184470572 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.174393075 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.170842021 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.520849843 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.724931006 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.195680413 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.172686405 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.169748735 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.170917764 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.162877842 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.170848503 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.540707161 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.218731189 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.177967867 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.291928553 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.184363304 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.193255954 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.170690766 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.177643514 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.222666012 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.190868634 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.205416257 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.174902966 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.188782503 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.190603579 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.170483962 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.184963793 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.186820384 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.176134681 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.181913865 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.171900484 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.223589308 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.188595129 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.188385776 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.195083433 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.296432493 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.171964808 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.52230973 seconds)
done (took 341.433817854 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.234035549 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.172344693 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.247503426 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.171747197 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.23453671 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.225288388 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.171492854 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.172346292 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.170731092 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.555794521 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.170831022 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.177040332 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.170641467 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.171628663 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.221383391 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.171850704 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.171962592 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.409437147 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.173150337 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.230588134 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.173307793 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.1718682 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.171926058 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.574116998 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.169856456 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.172350068 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.233624786 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.171807828 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.411428266 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.173522702 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.174173517 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.421336146 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.234532136 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.178227557 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.159399586 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.174717736 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.242150589 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.181408626 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.220651514 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.22103706 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.247008914 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.207799154 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.17248902 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.172831258 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.177882378 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.173818075 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.173696085 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.201876438 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.173652186 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.178429732 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.4059484 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.181582964 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.178422755 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.173036154 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.17457936 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.189377255 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.17422118 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.175418788 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.23313276 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.175668682 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.220873545 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.563234895 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.569767345 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.175206124 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.173391648 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.175409525 seconds)
  done (took 203.971690192 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.246054136 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.248614226 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.242322866 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.173281047 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.220208983 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.240331518 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.180764881 seconds)
  done (took 17.650251252 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.182668469 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.175572311 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.198396004 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.199604195 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.175512246 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.3247651 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.188132001 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.181525821 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.203616598 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.177076497 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.532828641 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.200817148 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.183976333 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.177595014 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.187714616 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.204865947 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.179699686 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.176425526 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.274275108 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.252799786 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.181885995 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.183843152 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.208638952 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.189191179 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.177782189 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.177508587 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.176441328 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.18424298 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.177141122 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.177414666 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.176498626 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.190155466 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.177399261 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.177715358 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.176824675 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.177502876 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.178218415 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.176749419 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.177660847 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.176404931 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.178197122 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.177630005 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.178410588 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.17821713 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.176903138 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.200865742 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.177627876 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.178592191 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.178245178 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.179080193 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.208720301 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.179066282 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.177860795 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.182519365 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.227237505 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.182921521 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.178497266 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.178984784 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.178094419 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.178767347 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.179278887 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.256367806 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.202351967 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.177660456 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.202223341 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.215745471 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.178429439 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.178551671 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.179147097 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.202192074 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.178438989 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.20162136 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.178821461 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.295760956 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.178743731 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.330892799 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.201815427 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.182938666 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.18289329 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.179003708 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.187750063 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.180331054 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.181901786 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.186063377 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.185762117 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.18130212 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.180445125 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.181431399 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.186891019 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.179452358 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.230348494 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.179956094 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.180657436 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.295432181 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.180186298 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.277189781 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.20907744 seconds)
  done (took 235.243485216 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.185120349 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.18586755 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.182098982 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.194146616 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.181413122 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.182049601 seconds)
  done (took 15.214901333 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.182369232 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.183821373 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.181102697 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.180689352 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.180614896 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.181164382 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.181982881 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.182887313 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.184631887 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.169969939 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.180931417 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.183039506 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.181793827 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.180755655 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.181046137 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.181889059 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.181671035 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.182219599 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.182452092 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.181874373 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.32213617 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.181041987 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.181718863 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.185337366 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.186487462 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.182126003 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.190561705 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.182078584 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.18290804 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.18794613 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.187243913 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.176563356 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.186423658 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.188650142 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.186941655 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.186212189 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.186476415 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.183503929 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.183365798 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.184153662 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.183860568 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.182801842 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.183891374 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.184208181 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.185649619 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.190942857 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.187923509 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.193626824 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.184077761 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.184787958 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.187203919 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.183498809 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.184096075 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.184814754 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.188148856 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.190653443 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.187439827 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.184287319 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.183489166 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.187090187 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.187929838 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.185544088 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.186075601 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.18972972 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.18832015 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.186024744 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.188211421 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.187057074 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.184820882 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.184643898 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.186103048 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.184703777 seconds)
  done (took 160.527061349 seconds)
done (took 634.728105233 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.244589434 seconds)
  done (took 9.353305786 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.227458706 seconds)
  done (took 9.416970464 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.949404442 seconds)
  done (took 13.060207912 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.247694805 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.205626191 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.202941197 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.186235253 seconds)
  done (took 30.963315822 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.421935095 seconds)
  done (took 9.530532953 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.194464562 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.183457875 seconds)
  done (took 16.536947669 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.221229073 seconds)
  done (took 9.331237888 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.646163747 seconds)
  done (took 9.773492125 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.195442662 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.210950737 seconds)
  done (took 16.535407843 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.188001835 seconds)
  done (took 9.296946976 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 8.036805341 seconds)
  done (took 10.235915475 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.195121093 seconds)
  done (took 9.320072339 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.249629258 seconds)
  done (took 9.358590142 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.30899499 seconds)
  done (took 10.418016248 seconds)
done (took 175.238693865 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.192811818 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.187410704 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.189060579 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.187044232 seconds)
  done (took 30.865555119 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.221913362 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.221651615 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.230003036 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.221698005 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.212169883 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.211129798 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.222333943 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.220886852 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.211908458 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.218895428 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.221067202 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.219227647 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.220363982 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.230531405 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.23137606 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.219395867 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.221966868 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.222096754 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.212985149 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.23088345 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.221270735 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.221407864 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.187249147 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.187158398 seconds)
  done (took 55.349667258 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.378251119 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.253163615 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.342107266 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.232921551 seconds)
  done (took 11.316122058 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.187026606 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.25170077 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.238448907 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.234226866 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.282099872 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.289267125 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.240206575 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.400649499 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.303413897 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.314090875 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.194177407 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.212788947 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.213175004 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.233999112 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.277996969 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.189408516 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.187223965 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.302489015 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.250078683 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.398793071 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.187728078 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.24163742 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.276230456 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.241557019 seconds)
  done (took 56.259506647 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.188457717 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.196691287 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.19638976 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.190336353 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.190182303 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.190361554 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.197114425 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.191813145 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.212477723 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.191281039 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.189935487 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.19036946 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.196724452 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.18973365 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.187252031 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.196915563 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.203680941 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.191242704 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.194375218 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.196546255 seconds)
  done (took 45.994510891 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.190186677 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 5.037692482 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.536146837 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.441290312 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.188409485 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.190927119 seconds)
  done (took 33.697634176 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.203530889 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.197802886 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.190976683 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.249930353 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.331983304 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.20018192 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.191925695 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.202307193 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.238994189 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.259186379 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.21228668 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.22072403 seconds)
  done (took 28.81332043 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.191855851 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.193071835 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.19279201 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.204278345 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.201524334 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.199166179 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.199234257 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.188982623 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.204972693 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.209696791 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.199493273 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.190978023 seconds)
  done (took 48.493336904 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.40720904 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.418513394 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.398441599 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.859876293 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.524838299 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.176347563 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.478550839 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.404101214 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.998782958 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.008747606 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.486499758 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.170258792 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.12690588 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.118217265 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.108904609 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.43539922 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193915486 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.054073123 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.448291025 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.230249184 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.196204214 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.194870492 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.195232819 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.483052915 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.518594332 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.200768684 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.407195657 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.211825599 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.192303536 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.44309588 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.706014238 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.252622103 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.397122407 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.452707279 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.533989366 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.246180645 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.298381433 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.435240861 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.243125311 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.229005093 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.199141926 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.205024219 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.722494528 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.206007492 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.465660663 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.195803732 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.194366937 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.273373235 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.120827781 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.619387789 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.3125124 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.196158113 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.229371442 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.625362479 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.314563765 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.437401825 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.199447812 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.423931497 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.256759168 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.554543812 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.313198425 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.299345638 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.409258121 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.122177737 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.643558758 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.323822535 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.19722278 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19964159 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.894987157 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.439283319 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.276437545 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.625908388 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.967881681 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.196819699 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.199021884 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.244526277 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.289723383 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.195421731 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.508969273 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.159308262 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.122064419 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.295255228 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.700017566 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.201510805 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.194974935 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.204759516 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.043340367 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.12312759 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.29436215 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.561945203 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.525145971 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.198415078 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.198078364 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.218693947 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.199720477 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.152675172 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.840258779 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.268795061 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.123695443 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.762276118 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.724377422 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.167954449 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.713376305 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244848015 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.463672037 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.336755576 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.604997946 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.405429628 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.442850057 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.729618642 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.203183629 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.761251863 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.278938192 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274242952 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.198099781 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.785544588 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.449792665 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.611869349 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.318617417 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.198854608 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.125556762 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.210470153 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.402432816 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.770944828 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.257789678 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.199566089 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.209442288 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.201127047 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204657493 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.369411958 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21795553 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.492031027 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.270513044 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.202763021 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.145803641 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.20623079 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.488727538 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.953516799 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.261778983 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.455431935 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.46420088 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.946165862 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.800244402 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.301470575 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.471202021 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.27333509 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.276742398 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.760415787 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.32460656 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.299722251 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.201767147 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.33222768 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.214814772 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.205353424 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.711470229 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.719944376 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.626560928 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.246222445 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.203009347 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.157318194 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.44276935 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.447703054 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.333918042 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228844577 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.207883292 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289711558 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.430515092 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.202378902 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.12937324 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.44062821 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.440143398 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.49621286 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.620826441 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.340950954 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.273922793 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.213942208 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.418221533 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.288178672 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.874707184 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.763223305 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.412764179 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.818628906 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.171870742 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.843154605 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.575727868 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.589191155 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.220303976 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.657006669 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.446858299 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.95422113 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.238399698 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.731784438 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.130854277 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.209280663 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.530532883 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.15404582 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.518778527 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.264685635 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.236139467 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.206697077 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.207033041 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.21343206 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.179455307 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.31414603 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.275063473 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.278330859 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.132091397 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.907544381 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.249118664 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.208645228 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.204597269 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.613974097 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.056935125 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.158420904 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.206366709 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.282175687 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.976407663 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.762446104 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.210712219 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.209539407 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.826129275 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.213270087 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.123948035 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.209411803 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.129560979 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.231649322 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.564232124 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.911443359 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.503900386 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.280835545 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.283431839 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.207146695 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.21533507 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.908394883 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.215827578 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.907887851 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.489917704 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.48046095 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.649979397 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.268135639 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.416050527 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.223720075 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.208533152 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.747872673 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.232734674 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210554658 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.412122048 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.731851903 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.638854286 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.853276981 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.29400738 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.209203878 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.478637389 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.198271102 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.731757069 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.904947261 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.213531245 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.207212322 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.45653116 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.895152247 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.207529979 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.127919424 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216995316 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.423482935 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.412620048 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.469848138 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.497058294 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.65467678 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.139540014 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.215345354 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.234042465 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.452310507 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.209731503 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.247683158 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.714397763 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.32210842 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.637578042 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.490934531 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.667020499 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.840842993 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.475845896 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.267504345 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.222244792 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.867691141 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.342196594 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.14532334 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.328974537 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.136390484 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.100382276 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.501705347 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.229102702 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.476608294 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.185396745 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.548318685 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.500699263 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.558020407 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.260085094 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.240717473 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.211097663 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.253279588 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.211158798 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.478142582 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.330745041 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.217613806 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.789699822 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.254487957 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.257973664 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218978714 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.752814403 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.231488452 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.213767029 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.951426988 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.238259216 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.330656203 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.284618089 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.000808853 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.768476202 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.243982144 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.17045227 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.868540301 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.477715481 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.260941098 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.648548807 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.241721071 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.61746161 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.213203218 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.427212305 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.218485109 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.859202075 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.262879719 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.473496608 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.160457731 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.42748831 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.403045904 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.244629304 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.221013437 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.139815705 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.326682043 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.110107612 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.200597863 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.217171049 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.902940036 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.679317618 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.489809839 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.713354811 seconds)
    (346/608) benchmarking "3d"...
    done (took 3.084453542 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.216126374 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.644224345 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.612411682 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.898345381 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.249289234 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.216283651 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.616924261 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.342986723 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.603762259 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.524625186 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.223440264 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.240530794 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.428162761 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.342045122 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.134612025 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.714630892 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.803093755 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.915474382 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.226365784 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.419504628 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.625099593 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.567519374 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.252294794 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289423394 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.620465876 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.480727414 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.277522855 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.142179748 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.211190625 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.61673246 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.626105848 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.313618552 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.458824871 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.510552374 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.942276061 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.744912009 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.702004297 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.676641571 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.679747989 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.622374465 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.41833779 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.560513363 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.534161368 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.104337277 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.629431479 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.431197016 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.312002221 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.484255861 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.078171774 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.92705832 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.461455908 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.221174433 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.146661267 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.424414636 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.227358306 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.806507469 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.846604662 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.46893732 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.560462682 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.724914783 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.760971868 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.468967238 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.244955577 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.184509458 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.241419549 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.24006926 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.218338837 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.717101247 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.500616333 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.230898509 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.168107048 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.890930404 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.144662923 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.432736063 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.473986387 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.257062545 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.7860869 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.557083951 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.316370804 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.514707582 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.519514076 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.258029788 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.149118539 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.998824483 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.16428128 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.344617732 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.64417925 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.235893345 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.222274517 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.423284291 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.147619649 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.264241752 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.225358674 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.407721022 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.820409032 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.490253874 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.337777868 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.452228486 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.511679588 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.161520086 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.242463827 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.492445398 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.148510722 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.894084623 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.936972403 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.261066512 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.29056977 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.219224105 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.223652613 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.492126809 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.616659633 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.315515579 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.900300651 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.256937764 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.243859957 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.634123735 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.306966798 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.211100342 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.225852546 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.765547317 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.456237614 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.221287761 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.185353914 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.435042585 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.294621885 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.4168777 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.296779893 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.735731657 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.225634376 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.129965295 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.317857009 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.159889899 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.221071686 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.958340046 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.283225199 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.219223832 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.495558795 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.877126214 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.426141589 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.623713484 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.113346618 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.485406669 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.266343749 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.225775016 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.224289079 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.605359414 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.519366272 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.222560873 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.49331056 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.266486092 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.228241809 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.88510112 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.192605735 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.223996 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.947848616 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.125027977 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.954396275 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.624066465 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.217052637 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.235421988 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.227776687 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.151012956 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.223636119 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.395573878 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.185834069 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.230833267 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.585609952 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.628993859 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.309556535 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.229942201 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.19553166 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.23043212 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.439116147 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.738597358 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.240769527 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.925876865 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.428725699 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.233368955 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.722693076 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.674452791 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.520613214 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.265155055 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.476672847 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.458517811 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.871781119 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.476218964 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.189417074 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.452925873 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.226170547 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.497721345 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.498484734 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.225763569 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.438605796 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.756025131 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.513618361 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.593054506 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.538657856 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.284377749 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.492117335 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.139299899 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.225826811 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.230785372 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.492289945 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.275175275 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.225365706 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.235056204 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.868041703 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.022079304 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.679674084 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.374982998 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.62498591 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.103321338 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.980069072 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.22894831 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.152915294 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.224322895 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.25266124 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.230111118 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.153634746 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.954958069 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.951293305 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.441491186 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.536677234 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.154252749 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.430745164 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.819254199 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.154431003 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.196977044 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.226861951 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.478749314 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.157187138 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.230744555 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.183544637 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.588674069 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.999016035 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.497539866 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.227657083 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.180149612 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.233157089 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.228669587 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.226673187 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.315941362 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.228744578 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.344772488 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.494357168 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.681799816 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.330166267 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.877667352 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.965360571 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.168348845 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.27155299 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.791395652 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.798942795 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.595977477 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.355582373 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.953177801 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.173147459 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.232240539 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.245618281 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.478557072 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.235631451 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.233612189 seconds)
  done (took 2294.118374002 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.285141672 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.306424016 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.262200698 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.316843853 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.318156684 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.305085458 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.282753918 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.277650429 seconds)
  done (took 60.50456319 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.229457286 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.228983227 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.237688514 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.230339689 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.24911257 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.241184475 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.423908837 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.247783048 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.234058072 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.235299479 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.231447393 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.229994934 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.546896033 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.263748408 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.230966983 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.226662572 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.234786568 seconds)
  done (took 82.702101801 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.23271641 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.362874053 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.300150659 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.233822037 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.964597548 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.237744264 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.381797539 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.253529646 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.238918761 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.628817637 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.52695329 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.249479122 seconds)
  done (took 94.763491346 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.23664683 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.230873341 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.231070183 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.23141799 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.231779473 seconds)
  done (took 13.319309541 seconds)
done (took 2858.363372162 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.476198756 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.289813034 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.334508384 seconds)
  done (took 6.777478655 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.380308468 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.424977279 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.548920144 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.566604323 seconds)
  done (took 12.080456424 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.51750143 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.602146188 seconds)
  done (took 7.272370485 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.606906091 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.246215584 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.623434432 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.23332761 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.236125977 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.234863712 seconds)
  done (took 23.862470481 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.233205816 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.23346606 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.233451846 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.233020472 seconds)
  done (took 11.086663594 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.231478571 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 4.008938515 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.232496425 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.243381714 seconds)
  done (took 22.869604675 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.40760245 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.256525105 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 3.000353878 seconds)
  done (took 10.818588884 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.85774465 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.676883756 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.841060053 seconds)
  done (took 10.52967636 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.402541106 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.217557768 seconds)
  done (took 8.773221082 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.374228409 seconds)
  done (took 4.527849625 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.072978555 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.545338502 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.733149415 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.778199994 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.849055256 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.453309457 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.556019379 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.507907926 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.641769091 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.679793749 seconds)
  done (took 28.972892495 seconds)
done (took 164.674942864 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.674453828 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.261109052 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.461045963 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.616182311 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.482046647 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.458663617 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.52413314 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.606622736 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.294024014 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.275849448 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.615722496 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.478189074 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.478090993 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.260543374 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.48083216 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.260349157 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.475556769 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.700402804 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.296824249 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.534908565 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.538637645 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.259062083 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.459969053 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.279822034 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.477602519 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.406600572 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.865651292 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.265941413 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.444327542 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.881775365 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.408225916 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.682931594 seconds)
  done (took 181.361363162 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.124283789 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.236438164 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.236566235 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.234910435 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.508965122 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.236482004 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.237450203 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.236243694 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.540837775 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.514712823 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.236940642 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.49845365 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.23693437 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.237287986 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.238730655 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.236251278 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.665848077 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.16955065 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.236931952 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.23740455 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.237623525 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.363283033 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.231747357 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.407074941 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.640818387 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.238370318 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.237956791 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.237066181 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.237607154 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.245452926 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.238804248 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.237969426 seconds)
  done (took 219.815126249 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.238013621 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.238425962 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.236650292 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.238503005 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.239015671 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.238338204 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.240962488 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.238305895 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.014764634 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.007877748 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.239042792 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.24944593 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.251385519 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.239912076 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.251712853 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.238838651 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.252181551 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.247106224 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.250785791 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.249590755 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.239394377 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.028408943 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.24025682 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.07671713 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.239987314 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.246832219 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.239874521 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.240795707 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.238005629 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.240629288 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.239612482 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.239869508 seconds)
  done (took 233.070968285 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.485514121 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.241251208 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.241404116 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.249910373 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.242252666 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.241479759 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.246089136 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.489270566 seconds)
  done (took 22.598132597 seconds)
done (took 659.014070569 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.579869345 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.984564823 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.373865343 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.265186928 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.496323945 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.315247951 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.258498292 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.322364623 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.911788049 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.330836884 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.65116516 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.269056895 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.95581654 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.28765212 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.376610403 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.317970504 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.622047465 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.879726953 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.398472335 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.926867476 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.416462963 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.167362331 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.336465294 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.95823706 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.666963331 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.206085332 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.268233417 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.627289493 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.266658359 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.413002575 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.932300344 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.546753267 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.275597954 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.261963576 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.31484825 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.291968264 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.459912777 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.271658706 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.374991069 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.975119339 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.915204394 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.787611602 seconds)
  done (took 115.421281802 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.249592729 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.247469326 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.249187682 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.247895649 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.257608728 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.247928085 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.249466418 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.249252637 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.248773198 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.249024925 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.248580229 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.257251301 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.24930323 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.257559229 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.248558377 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.24899084 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.249603254 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.258418155 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.249469001 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.243789544 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.250128426 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.249910939 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.244334437 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.249497183 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.24927487 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.249054555 seconds)
  done (took 60.675247845 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.244972816 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.416153411 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.478757047 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.266694799 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.245473874 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.248074968 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.27459384 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.252937098 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.247212731 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.246537549 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.343996987 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.250145853 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.258747262 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.479929348 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.264034079 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.236016244 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.242624262 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.236287731 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.424725103 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.262629757 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.276569901 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.252237378 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.275961114 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.262350903 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.248804949 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.24720351 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.248614552 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.66807256 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.25817542 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.344931347 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.291126639 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.280830732 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.59248331 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.490509221 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.302594006 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.256308428 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.246757569 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.398103347 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.260120307 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.247084379 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.276303372 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.256270777 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.484631732 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.763204067 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.262732503 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.246767353 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.664571979 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.408003479 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.295272033 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.263026983 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.493436246 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.266372459 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.247014868 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.249100274 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.283987278 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.262635241 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.24739103 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.504336585 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.264111442 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.276284185 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.255146841 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.249156626 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.431167503 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.259043619 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.420056222 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.259954043 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.254666134 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.250087073 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.486609138 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.266522165 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.769482038 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.264723354 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.247683573 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.347649918 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.424333531 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.692520564 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.262740575 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.433683686 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.614329616 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.286953364 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.260926798 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.651430818 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.291490308 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.259859591 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.248475894 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.249203374 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.248751978 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.297031466 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.277318237 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.681552638 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.773502147 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.524117189 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.290524521 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.262602745 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.250317581 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.504495759 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.260858729 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.250868472 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.478130507 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.784196649 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.268823627 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.257088668 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.750602067 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.268137513 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.279783895 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.261953619 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.500366201 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.268959287 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.295817181 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.250248533 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.257276034 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.254296976 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.280617512 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.261991556 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.250485941 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.743596159 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.416744112 seconds)
  done (took 276.714865477 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.254875026 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.249718125 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.251374246 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.250474816 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.249057125 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.251609923 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.248705597 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.250141325 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.251888287 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.250389744 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.24941908 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.251670732 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.253694357 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.257280686 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.300826437 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.252890681 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.737536261 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.248662741 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.251868056 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.252968357 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.823660939 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.259025968 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.250712023 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.254055704 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.251409332 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.252042746 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.252334278 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.870184408 seconds)
  done (took 178.957382321 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.263594391 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.371979563 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.27685633 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.31314993 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.276957991 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.264630941 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.289017158 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.286836556 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.271077334 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.263716665 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.265703499 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.29577222 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.273053015 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.461276643 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.309500975 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.298899177 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.365663937 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.271285844 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.265442451 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.266493455 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.315086272 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.278351222 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.297336307 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.329992594 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.279295009 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.321577425 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.279432345 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.266214691 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.266936114 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.415622544 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.28904073 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.297393142 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.302491494 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.287214096 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.387735609 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.386911307 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.369438403 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.297644106 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.270101497 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.265881379 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.266355095 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.267891418 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.32321225 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.279593189 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.26023833 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.421757939 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.289771834 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.266941311 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.286606862 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.273240142 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.280888585 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.284416279 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.304518193 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.394321584 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.322433336 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.293665051 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.292979975 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.286773009 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.272999047 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.365751811 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.27556668 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.382417227 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.295640357 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.269398358 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.26947966 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.272102535 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.319162972 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.312425764 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.370119371 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.275866816 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.365075786 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.328993887 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.28286125 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.268946712 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.269505414 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.328258644 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.381413137 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.324909739 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.332086486 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.306430339 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.282287303 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.269273309 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.271248153 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.297178062 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.280273515 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.384251037 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.387461696 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.274731231 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.275340916 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.269864297 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.270166421 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.294930653 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.334109685 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.315981185 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.379440405 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.308038663 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.309580437 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.28070628 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.285271533 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.27551608 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.303644015 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.282086077 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.283555262 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.61231203 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.311628982 seconds)
  done (took 244.446671712 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.649143678 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.314229272 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.342115643 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.525886926 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.671447766 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.159640844 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.310920338 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.327411127 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.330900272 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.4445402 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.385492201 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.373038483 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.310651729 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.29358765 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.314311111 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.332521762 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.364666304 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.610905484 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.414998235 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.793274436 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.313113283 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.568275721 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.610983552 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.662763114 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.363763528 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.72809425 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.913589251 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.411209362 seconds)
  done (took 74.035797922 seconds)
done (took 952.412498338 seconds)
SAVING RESULT...
DONE!
