cset: moving following pidspec: 30138
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.853440131 seconds)
loading group "shootout"... done (took 1.236014151 seconds)
loading group "string"... done (took 0.65916567 seconds)
loading group "linalg"... done (took 8.684811694 seconds)
loading group "parallel"... done (took 0.282873002 seconds)
loading group "find"... done (took 2.909654397 seconds)
loading group "tuple"... done (took 2.267752341 seconds)
loading group "union"... done (took 15.089050327 seconds)
loading group "dates"... done (took 1.485827243 seconds)
loading group "micro"... done (took 0.223573078 seconds)
loading group "simd"... done (took 4.830871852 seconds)
loading group "io"... done (took 1.069495413 seconds)
loading group "random"... done (took 9.573362973 seconds)
loading group "problem"... done (took 1.525088119 seconds)
loading group "array"... done (took 25.458973677 seconds)
loading group "misc"... done (took 1.925116783 seconds)
loading group "scalar"... done (took 43.905197363 seconds)
loading group "sort"... done (took 3.361768918 seconds)
loading group "sparse"... done (took 13.017659665 seconds)
loading group "collection"... done (took 18.888757856 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.531041554 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.126418251 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.131029201 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124868138 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.191367875 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.123278976 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.133492683 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.087622284 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.839372456 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.139213584 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.11667906 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.444005079 seconds)
done (took 5.39978018 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.191142344 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093128424 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082617842 seconds)
  done (took 1.366919425 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071861639 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.062162094 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068493754 seconds)
  done (took 1.394238673 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066783967 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135503841 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067641034 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.068350155 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068411771 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067830081 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067949133 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.068147167 seconds)
  done (took 1.739339089 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072357427 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068855499 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.067100532 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.069512596 seconds)
  done (took 1.47491415 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068369346 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124901971 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066725739 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066716804 seconds)
  done (took 1.521822885 seconds)
done (took 8.964132582 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.245789813 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.105372499 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.295176433 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450451219 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.625945173 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.095745048 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.077122762 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.072293352 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.130048782 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.320377777 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.107933267 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.187523631 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.093981097 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.171611737 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.031447648 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.125414398 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088561008 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.127799217 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.098455835 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133911411 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.404669206 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.081310068 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.076879805 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.073237378 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.070410782 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.645270402 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.676457877 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.126793335 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.08758843 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162424009 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.117849762 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.677058877 seconds)
  done (took 11.014783616 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093634565 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.096492975 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070653812 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125855476 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096931904 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072359361 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077486732 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069283567 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091464559 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.127072171 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.092052327 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101002741 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068902982 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071459861 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.075975428 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.205595868 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080410805 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081702223 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.069497413 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.083182378 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.108135561 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.080767525 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.080476585 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.080449052 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.132528909 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.173066477 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.09991766 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101201279 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068862154 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.080871292 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.117077594 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.128714246 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.068920365 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066952906 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.121867769 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.096966787 seconds)
  done (took 4.703590731 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.903616787 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.097494676 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.106258048 seconds)
    (3/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.117254378 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.660930887 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.068461181 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.155077623 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.246130752 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07601455 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.302052522 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.115929593 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153274226 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06666741 seconds)
    (13/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.151918016 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.120785928 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071751764 seconds)
    (16/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.168529983 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.12232821 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.552080973 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.070305133 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.069357517 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.068209568 seconds)
    (22/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.070011229 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.070003398 seconds)
    (24/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.065270758 seconds)
    (25/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.094502269 seconds)
    (26/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.07075691 seconds)
    (27/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.098335168 seconds)
    (28/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.090963263 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.167341321 seconds)
    (30/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.985605615 seconds)
    (31/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.314115053 seconds)
    (32/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.069795335 seconds)
    (33/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.168971768 seconds)
    (34/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.085985099 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.067377237 seconds)
    (36/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070882981 seconds)
    (37/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.368633506 seconds)
    (38/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.089640049 seconds)
    (39/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.483042472 seconds)
    (40/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.126703959 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.06842996 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.168599313 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.120295238 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.066963516 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.124519317 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.08129685 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.071480987 seconds)
    (48/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.07135469 seconds)
    (49/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.498631609 seconds)
    (50/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072093548 seconds)
    (51/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074429964 seconds)
    (52/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.081770014 seconds)
    (53/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.104400022 seconds)
    (54/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.071339958 seconds)
    (55/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067693862 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.175844128 seconds)
    (57/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06778695 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068840399 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069387219 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.151725841 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067526282 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.146816606 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.066970468 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.07141997 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.10562781 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071096138 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.088872144 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.097987154 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.33508796 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.052771187 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068213611 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.970119536 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.079155526 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068580053 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.075542842 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068675517 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.069717322 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069484803 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074892786 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073690415 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071030728 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.112869905 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06909613 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.066565458 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.06587998 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07268059 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068811591 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.074368278 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100930655 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.066271726 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.565419146 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099086719 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.18316449 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.078933511 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108149108 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070100309 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.073777949 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069762497 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068911707 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068342843 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.069056021 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071760175 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.10005002 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072003988 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115187568 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.046754951 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069566607 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068270672 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.074712194 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071688195 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072064004 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069663292 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.074594519 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071147379 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.06700683 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109948266 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.122694453 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067468949 seconds)
  done (took 23.127464323 seconds)
done (took 40.948005404 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.313833008 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.080796835 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.081314796 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.081558664 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.081313579 seconds)
  done (took 1.890785186 seconds)
done (took 3.179068859 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.132703103 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.087645365 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.066131133 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.10304765 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070888043 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104097917 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111048131 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.106931349 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070660945 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070705968 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.07036534 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.104810498 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.106900691 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.071066865 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.099782185 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.105892099 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.070042402 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06573262 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.070449119 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.070500759 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070307275 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.06637673 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070532125 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070839042 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.102126176 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070358851 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.0690789 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101083438 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.070761307 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101546318 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070613483 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.07045105 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.070439311 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.101415969 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.07072141 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101485993 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.066175173 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070749156 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070769208 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.070623809 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071086196 seconds)
  done (took 4.685698081 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071312735 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083258139 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085114519 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063668315 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073272586 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084010371 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.063413167 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082754854 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090276955 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084242457 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084349066 seconds)
  done (took 2.166237867 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070857936 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.08399006 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.086048087 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063244334 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074847196 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084951258 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.0636626 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084743278 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087606024 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085532287 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085378162 seconds)
  done (took 2.149296874 seconds)
done (took 10.272600008 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096618093 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.070091038 seconds)
  done (took 1.431995055 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.52685835 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.44890869 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.067979406 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.087833994 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.197650211 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.095686558 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203696942 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.07309594 seconds)
  done (took 8.153277737 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.101782385 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.070064198 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069996097 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069639134 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070964143 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071371237 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070440457 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071607177 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069605843 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.069550765 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069945096 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071486402 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.07028626 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071449451 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069666918 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.070104987 seconds)
  done (took 2.531413959 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.102532069 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.101120308 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073946267 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.074426634 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073684119 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.072821036 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.075580523 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.074706247 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.072349296 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.073961359 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.075320527 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.073713248 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.073406652 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.064442165 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.075036598 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.07557754 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.071315335 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074872527 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075530958 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.076253959 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.074567677 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.064150734 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.072707552 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.07358342 seconds)
  done (took 3.209502741 seconds)
done (took 16.606798085 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174331226 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076443705 seconds)
  done (took 1.524621286 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.067710087 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070414173 seconds)
  done (took 1.42904331 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.07337205 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.062739581 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080957691 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.072365739 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063248005 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063421006 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079215794 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063743071 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.06287289 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.06337113 seconds)
  done (took 1.975016629 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063269814 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070784604 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068670769 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066085475 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069326877 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.06432484 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.06747208 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064249627 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070782292 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063296272 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.06727419 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084825624 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066987221 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.085451889 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.067155424 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.067986663 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.069680916 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066631317 seconds)
  done (took 2.537151703 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061622314 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062934639 seconds)
  done (took 1.422995931 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065118448 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063284945 seconds)
    (3/7) benchmarking "month"...
    done (took 0.06589235 seconds)
    (4/7) benchmarking "year"...
    done (took 0.066154119 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063274357 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.06305193 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.064179308 seconds)
  done (took 1.742986286 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.420687884 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.124929933 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.348663594 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.073895507 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.079168245 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.259022428 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06529054 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070618417 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.070239831 seconds)
  done (took 2.851197626 seconds)
done (took 14.785620899 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082736998 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.184444502 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.090429126 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410476209 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.09428442 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.069098756 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.114556374 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.171236742 seconds)
done (took 2.532278603 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.213983188 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.166449739 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.367487095 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12522721 seconds)
  done (took 2.96058769 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.333814365 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078477419 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.080603715 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.068895216 seconds)
  done (took 1.872620548 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.064874884 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072868446 seconds)
  done (took 1.444239093 seconds)
done (took 7.805163937 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064116741 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064857128 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.066462313 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065247197 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.065464426 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.066265139 seconds)
    (7/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.095724801 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.065124205 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.076403594 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.065656721 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 0.065450942 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 0.065213723 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065442199 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06563996 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065931195 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06535253 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.065224137 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.065655511 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065823985 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.065190413 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065487916 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065452668 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065729448 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.065869231 seconds)
  done (took 2.949629603 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079556021 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066350548 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068746973 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.06835991 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068808881 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068148498 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068744623 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.067219157 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.06828225 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066632654 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068793772 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.069014029 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066851051 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.069174949 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06745724 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069256985 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069033452 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06753101 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067688233 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069065037 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068606617 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067800112 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069110905 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069024998 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069230163 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069448536 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067307159 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067970447 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069590975 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.069871804 seconds)
  done (took 3.384385265 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066719998 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.061593375 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.062511638 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.071663887 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061652247 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.062549096 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062825225 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061985223 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.062019107 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.063193243 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062922187 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061632148 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.062903556 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.061703132 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061828006 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.062502758 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066974759 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.081549108 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.062052543 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.061856693 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06660706 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.062115587 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061910024 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.06222663 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062441955 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061860857 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.061581455 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062306874 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062061816 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063273003 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062356863 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066511829 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067098898 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.06155074 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.07233293 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067071522 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062067802 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066107147 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062929568 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061912688 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062074664 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061672147 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061939085 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061858904 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072574818 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062695952 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063262041 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063021859 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062422525 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062073968 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062343861 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064087426 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06791157 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063256505 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061686631 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063172008 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061329782 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062514021 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061786498 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.061744011 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061972052 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.068161823 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063637035 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062498747 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082823059 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063519563 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072235889 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061813618 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.062954366 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065344072 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062323295 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079880729 seconds)
  done (took 5.94967335 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082331254 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.087884589 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067197809 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06682659 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062832831 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062365342 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070325803 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062303637 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067082395 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.08293527 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062853522 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066693681 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06710145 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06675125 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062932548 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.06699538 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070490948 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062113443 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062400731 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066809562 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062582751 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.069813702 seconds)
  done (took 2.835803407 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.13524551 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066679138 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.107118555 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076776505 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070237236 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.076826377 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068391728 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068013959 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068233339 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068663604 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069000129 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068491185 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070411132 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06830621 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068474132 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068648409 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068398285 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068483997 seconds)
  done (took 2.685235864 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.0765018 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.06826537 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089407208 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067480144 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068309108 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.0675498 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071326652 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071912594 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067721718 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067680658 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072266751 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067926689 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067585865 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067809925 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067460022 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067955056 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06706876 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068008553 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.071441053 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071183449 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071510362 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.071925155 seconds)
  done (took 2.878635562 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077764049 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066506429 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082172711 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068079812 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.063032209 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062225867 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067475781 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067097985 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067344517 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066275372 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066731709 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062050347 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068442801 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067084229 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.06877504 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067056618 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06663666 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067101483 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066598931 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06263588 seconds)
  done (took 2.682566834 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086686405 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064706918 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.065019556 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084063461 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.0647362 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065145536 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084330939 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.0651749 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.064999746 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08655538 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065104107 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064693647 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.084917697 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084761096 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065344449 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.085290952 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084174042 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.08461188 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065374644 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064804897 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086684874 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065050922 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.084518929 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065050797 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065277341 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065145882 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065377366 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.084052876 seconds)
  done (took 3.382390913 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064578609 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064769783 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065387325 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065357234 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065574623 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065264069 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065900462 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066117052 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065570184 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065899182 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065621471 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.066020933 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065331458 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065416825 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065323544 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.065575899 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065191223 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065632426 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066436843 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065687663 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065306389 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065946637 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065441784 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066340531 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066385382 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.06581138 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065752065 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065974908 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065634723 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.065743375 seconds)
  done (took 3.307346681 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073349845 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072895639 seconds)
  done (took 1.485153028 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.061900302 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0797543 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061533993 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073845981 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070443048 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068437632 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070907146 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070450363 seconds)
  done (took 1.890929552 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067526563 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091208856 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063732218 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.064327239 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067305604 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134128732 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076874718 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075649112 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077458452 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06596036 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065275361 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076632804 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063559957 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077134061 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064841332 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072809788 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.07087183 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081329064 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.07655333 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.062238275 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076133492 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064924874 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062121862 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065341767 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.063761749 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.071213552 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.079819886 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076413342 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072201069 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.061708379 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.08318348 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.062488358 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064339501 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07235979 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067312781 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062355128 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100341474 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063362524 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068184087 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062555308 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075565796 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.084513526 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077118347 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081236202 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064565325 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06490987 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062628607 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064924803 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066405331 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.072284102 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.06281728 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070349933 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062216671 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064364159 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073433461 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063500717 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068451496 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072338331 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076609417 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073880119 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071600081 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07828051 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.071875207 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070577597 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063800236 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08265629 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064375194 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076261051 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077551667 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064082839 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07668885 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062162015 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061345094 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062462715 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097296535 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064596031 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064077006 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062591736 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.06308559 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064846325 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072915154 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.068262856 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069781996 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065994153 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079073445 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072603361 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062737708 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068984462 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.080916357 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066159061 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062880418 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079767476 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065898917 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062064925 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080640028 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072504886 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064507524 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063809276 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.065868743 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076342248 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063818946 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061199203 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070678537 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.063871881 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064820479 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066799376 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.07013284 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.0621231 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072163038 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066898674 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.06358665 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060706802 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065973791 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.063306651 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060255878 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071044509 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061257791 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.075823563 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.068517251 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.076906565 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.077027366 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.072355749 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.078178408 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061952399 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.060626654 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.079694774 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.071448622 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.199844799 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083359486 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064422532 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074716658 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063461908 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.066035019 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.074102752 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.063011065 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065829215 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.063638073 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.068107194 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.064618235 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064775214 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.068337971 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.072386971 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.075793095 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.064716776 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.07287049 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.063316589 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.079395778 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.073042805 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067514212 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066699694 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.064029164 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075334838 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.06930784 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.073270625 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062824247 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.063503667 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.065661388 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073442186 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.073084232 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.064984481 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.070414522 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.067346837 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063580885 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.063759422 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063810789 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.066744881 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066173189 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.064121736 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070899757 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.072065534 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.07765718 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.07046115 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.073066709 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061916365 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062371132 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064853851 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.062658342 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066851987 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072354119 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078700972 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.07495889 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084207425 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063777017 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.073056586 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.064515848 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080215105 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076831401 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.064538537 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.067881506 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.061747515 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064874138 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072625112 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074506339 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077329933 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078104048 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067401164 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067176928 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062667319 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078434996 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063481602 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071742866 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072510428 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.067483364 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.063031414 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.065025198 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.072307931 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067441222 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063220839 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079112478 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069275282 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062749262 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.077648027 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063175685 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073995347 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062410599 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066723659 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068206238 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064593702 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.072939018 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078959756 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.061856519 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063476473 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078359157 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.064530041 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064548661 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.071230613 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.078751794 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.067749925 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.070796267 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.073747482 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.073428054 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067604719 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072394604 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063319457 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072384121 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065709917 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074715175 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062428186 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081128873 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061387551 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077983655 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062804627 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.073677529 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.063355708 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072394666 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.063148415 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079664829 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063929208 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062683745 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073403401 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060726645 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.071240805 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061377256 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.066686353 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068338972 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.071291547 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06332506 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071174822 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.206176807 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.073809694 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.06972893 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.073017652 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.074491362 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.068823567 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.06359762 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.072360518 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.075271949 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.071754396 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.065056319 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.065215214 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.064308448 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.072649936 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.065090825 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.064386713 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071728626 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.067680622 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068975257 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064953183 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.065043945 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064668373 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071960535 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072924391 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08165704 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072607874 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.070708104 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.073310373 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062676634 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.079648402 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.063396919 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.070939445 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.062042421 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.068911577 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.072633738 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06483118 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083475595 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.064639839 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.071209717 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.075665312 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072421381 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066464312 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.081397018 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.066749521 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.072027768 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.071266525 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.067557234 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.069122323 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.065114656 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.07167668 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.072997883 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.073957888 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.0644232 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.070627329 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.072303778 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065095616 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.071186643 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.068082128 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.072101608 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064730739 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.062409873 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.067613039 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074998088 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.068032393 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.067867805 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.063236557 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.062220346 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.063642651 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.070566263 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.067721526 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071660127 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078864976 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061647538 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06397947 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.062731261 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.066948447 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081492625 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07317555 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.071411455 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.06774829 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.06263105 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064777903 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.065425504 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063414709 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066806134 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062355215 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.063094252 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074068838 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.065651748 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06753816 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063575322 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064283121 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.072810503 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068093064 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.063611878 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070248116 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.062883145 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068221478 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.062355308 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.064871179 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.067517345 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.062093942 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.066587764 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.073952213 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.080064417 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069337445 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071953652 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064358055 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.07125886 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.078294761 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.070027864 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063983518 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.072368858 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.061569985 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.08076887 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.072308788 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071276644 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071967247 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.062998234 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.0788628 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066346039 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071520521 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077412374 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062876618 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.06806026 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061417753 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076950321 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065709292 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.061353062 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069422247 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069289802 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067094525 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073295634 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.207798397 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.072529508 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069856505 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.067452336 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.065573666 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.065337979 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.072789886 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.080050387 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.064560578 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.067458103 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.071329149 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.071609713 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.067496023 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07622182 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.071478645 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06501646 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.064910347 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066650252 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.064356209 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.075508008 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063931872 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.06787489 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.068044874 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.063156986 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.070383734 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079762214 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072990262 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073124319 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062636057 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.061912105 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.080741303 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066449877 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066798478 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.071041298 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.072584076 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075716483 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.072398111 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.080062351 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.064118723 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068447369 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.075245318 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064319406 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062885727 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.067054068 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.065302595 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.07252181 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072744281 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070595313 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065025094 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069870371 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.076648046 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063985613 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067639194 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068002658 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.064117153 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.073641868 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070918013 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071540904 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.064221744 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.062686138 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066133199 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071751454 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.070821832 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072477567 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063907273 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069967353 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077055178 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070719309 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066213034 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.062393398 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066561884 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07270345 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067684234 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.062726721 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067997249 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.067272278 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070539527 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072735268 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.068158093 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062951471 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080297722 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071573723 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072566521 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068431273 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065209319 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064057137 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.063003817 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074722612 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063097691 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.06479578 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068354839 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065037618 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080822651 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071769048 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079502983 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064133515 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067861448 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063130667 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073326823 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.067994094 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.063716433 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.073987506 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062548428 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078892669 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.075177273 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068513481 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.083738419 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.0683516 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.071041173 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078135654 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072777878 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.071925294 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066279281 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072693764 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064803251 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.07389696 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.062022205 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.06116768 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.072235298 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071138853 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.074690809 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.062178926 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.07257062 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.064153492 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.070369514 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.070263555 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063923443 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063744575 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063878093 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071577179 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066686215 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071591388 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.212592012 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.082335662 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.065669125 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075982672 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073414756 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075266229 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.078349009 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076790721 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.071622058 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.065004639 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071458199 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071812571 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.064952167 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068231125 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.066835821 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.084846657 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.065160023 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064838523 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077826562 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070200845 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.063651771 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.07011865 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068271229 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.074221766 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.064990568 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073886161 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067976373 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.064420436 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067885137 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068072336 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061895236 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062553905 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06363593 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073611571 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.067745528 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063263715 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082795354 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064864351 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07192372 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074402238 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.070442189 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.064918361 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.062097831 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.064610957 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.077068662 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079568016 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.066927929 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.072428691 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.065082148 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072916727 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.06250685 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071882337 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.071384486 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.072043524 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.063235662 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063287548 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.078377972 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.079188531 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067981868 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.073047327 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.072831582 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.065014742 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.085864759 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.072435977 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064817286 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.074867515 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.065532912 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.062900602 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.062650204 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.065128535 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07526708 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.063204436 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.066031001 seconds)
  done (took 43.331276281 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099820377 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063890871 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.063249825 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.06313231 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074337109 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064031627 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.062995821 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063910688 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064140719 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065768425 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062934714 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06358562 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074400175 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076452924 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073742813 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.06665161 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063241322 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063875477 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063737539 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064039484 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073639517 seconds)
  done (took 2.890776001 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068098736 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.077863132 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074300604 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.079300453 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071557754 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.067665557 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.074542997 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067574623 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.075014869 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07263342 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.074984064 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067684858 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.072695232 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.072901661 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072374144 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0677773 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.078005023 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.0714998 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.06704561 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.07457654 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067226211 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.074727134 seconds)
  done (took 3.022091743 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063714088 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062062725 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.071531548 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.062355529 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.062543074 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.066743697 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.062165447 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.067513186 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066873641 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.06690186 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.07227395 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.064133108 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062354112 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068774686 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062261205 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063686285 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.10649506 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.063960067 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.06393506 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062708221 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065891611 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072190803 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062477626 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062677738 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.066815586 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066359685 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062437105 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06540664 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063346203 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.067319065 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063903744 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.061958124 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.071941368 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.0711399 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.06717921 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.067388365 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064298575 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.063863955 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062992214 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.062620683 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.072195908 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064260039 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062823032 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064250685 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.072101726 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062399958 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062261749 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07202117 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062760152 seconds)
  done (took 4.687056192 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.07138693 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.116328767 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.068644506 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.096605239 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.075894037 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.069074232 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.068403249 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.09779584 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.063819932 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.064858097 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.076659684 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.076788406 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065752313 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.066929369 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.069652511 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.065557926 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06650839 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064832607 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067860919 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065349473 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.068451498 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.069454394 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.075867906 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.075867027 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066554207 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064973593 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065475622 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066635281 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075848281 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068854214 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067670269 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067932242 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.075894081 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.070303271 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065279166 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065530247 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.07684614 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065899839 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065902033 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063945886 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065573797 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067253845 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.070528598 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077086811 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.066039193 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070613235 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.06579393 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063785 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076536832 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065957216 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069572814 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.08013109 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066992353 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.066004098 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067089733 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.076180705 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.065953105 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064252775 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065839074 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076642761 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.063791386 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066427351 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.077113803 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.065329364 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068736079 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077136537 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.071195653 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066786628 seconds)
  done (took 6.388515948 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070828151 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098061179 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074244867 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07396431 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073922018 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073810522 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073413792 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073440424 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073201768 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.07413061 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073448207 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.11403695 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069937904 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078090532 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073652967 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.07327687 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073424796 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073465775 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073547222 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07349617 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073330723 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073582033 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073442994 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073943969 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.075983709 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069790501 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073163528 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073646016 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074368108 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073653606 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075884698 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.074003568 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074109914 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073798024 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076229827 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.076446241 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063855528 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073718975 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.07358127 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073515063 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.070505286 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074279434 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073535456 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069692901 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073695138 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073815466 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074041926 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076016984 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.081074451 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074839426 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073945694 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074639214 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073661677 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073633986 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074723114 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.081099291 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074720767 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074281756 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073533925 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.074492429 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074360906 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080585532 seconds)
  done (took 6.125164863 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074330502 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068969724 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082375233 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062595896 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062796848 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.072538052 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062723667 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062642555 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069947368 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.070294084 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.071430773 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.07264687 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.074878554 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071360509 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072389577 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.075192195 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072578424 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.07323687 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06984213 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072202049 seconds)
  done (took 2.884085884 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076245221 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081896521 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068853594 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071986748 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.06858181 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.072443219 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.067654314 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068722355 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069303981 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068506154 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.074403343 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.073925799 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06895684 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.072569146 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.073291002 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.072035446 seconds)
  done (took 2.606514314 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067815634 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069639556 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.070683058 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064361367 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.067707115 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06356911 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.064083178 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062396509 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.063205896 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.077833746 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063873721 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.075919503 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.063946524 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.063057436 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.063547903 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.06986531 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.063043241 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.063609885 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.063917674 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.068337893 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.070509993 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.064799252 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.067678362 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.064021607 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.069760566 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.071431802 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.065261158 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.06787306 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063961166 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.064541895 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.070011096 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.070734314 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.0632324 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.064095219 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062818442 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.063617334 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.06328731 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.064233889 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.06976913 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.064251896 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.062420042 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.068977535 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.064034347 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.064412002 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.063504977 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.064546288 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.06361537 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.069601897 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.064218711 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.069370275 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.064257914 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065746106 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064752787 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070871033 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066506778 seconds)
  done (took 5.101236641 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078321504 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.068191105 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06274198 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.06296347 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067922104 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.068564896 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067794686 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068300898 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069195193 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062581445 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.068904162 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.068002088 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068436785 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.068360046 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.069389561 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068441453 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062740071 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.068502485 seconds)
  done (took 2.691946063 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073036442 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.068269048 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.072915463 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067971427 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.068181708 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067598921 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062903027 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063414464 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063076894 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067860289 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067727166 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.067203176 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063142081 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067537231 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067571305 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068011462 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067367368 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063348198 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067493896 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062835797 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067549106 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063195742 seconds)
  done (took 2.932170871 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089202347 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.089551108 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130399833 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081649313 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090735859 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074088891 seconds)
  done (took 2.020961572 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094673487 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106121495 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067370096 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067795997 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076770333 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070826605 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071125573 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07139674 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076721521 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074871903 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071318751 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076460246 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076314065 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072595408 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076403395 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079008309 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071504644 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071009353 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06910487 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078996833 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071142772 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076542517 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071182597 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070823953 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07133811 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073014483 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079193382 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075110351 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070801326 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076751334 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07882193 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071542719 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076796933 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07499269 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068509497 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076819303 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071303067 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079397015 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07716143 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073523198 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068249837 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077032981 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077365176 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072848044 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079645488 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071647718 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073237309 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071391507 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071514262 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081594914 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077274278 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073689485 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077111095 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079511707 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079331277 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081537767 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075416155 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073357473 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077316987 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075546402 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07320528 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077934924 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073350956 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075697701 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079710971 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073524454 seconds)
  done (took 6.439566744 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.100543092 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068099377 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071137319 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075059587 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073294848 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071562192 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07136724 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071217246 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071186917 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068804918 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107029961 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072058078 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07296485 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073267918 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071458785 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071613548 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071458749 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073074178 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068817405 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081767144 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072253526 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073223846 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073385862 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072824987 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075526015 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079376942 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07126552 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071265494 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071526021 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071415888 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072776544 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071527482 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073240624 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068230393 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073213299 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071438998 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070678636 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073399906 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071078829 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076778319 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073070925 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079076104 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071521475 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.0714685 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074937638 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071299561 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071632631 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06862036 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071417821 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.068242102 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07542311 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.075341675 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075350184 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073215003 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071793607 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071743116 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071358881 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071246812 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071683185 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079808003 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073074289 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071210235 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081298453 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071094233 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071375073 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073223726 seconds)
  done (took 6.352441733 seconds)
done (took 132.215625405 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.229165849 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.20426851 seconds)
  done (took 1.883852702 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.0754815 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.097856875 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.077661673 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.144330372 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073254153 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108508434 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.107748093 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.076575441 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073300706 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.074506127 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074782918 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.077446951 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.146398695 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.072982605 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074015143 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.077201981 seconds)
  done (took 2.902383811 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.107609082 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185316058 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114554929 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.072619173 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.113099789 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.079370679 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.072252453 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.084042257 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.07626393 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.084450462 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.079239438 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.078134173 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.074745081 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.078170726 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.076539805 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.079876241 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.073899683 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079465085 seconds)
  done (took 3.08718362 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098566297 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086758904 seconds)
  done (took 1.666731966 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.155404147 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105539011 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145022135 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.334888744 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.134898444 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130203518 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133470408 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125614653 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110828189 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122067054 seconds)
  done (took 2.970369971 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.105927362 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.18029052 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.319344101 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.125239296 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078909112 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102339755 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.127526279 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.085604939 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.083405247 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.082376061 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.082146936 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.079962528 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.104985083 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.079070261 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077455902 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079561106 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.107574036 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077350421 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.077396497 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078977761 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.109485134 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.073509151 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079163882 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.076787832 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.080477044 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.08091066 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.075141469 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.073015877 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.078243276 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.077506994 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.080712295 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.099712548 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.081030702 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.102287096 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.077701913 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.10322492 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.077761506 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.077518139 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.077616738 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.076940058 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.080124973 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.07985657 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.082839415 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.079667217 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.074866238 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077611709 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.07486516 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072987578 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.081961574 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.074128829 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.08204934 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.081434059 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.102629523 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07453654 seconds)
  done (took 6.403944103 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108490786 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106463912 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070723602 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.116285994 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.107920389 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072363088 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.107807333 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.103270896 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.112368194 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.072175237 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071104 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07165955 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078782547 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.083509508 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.115627606 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10855926 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071735834 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071284188 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.110890147 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.110514298 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071610701 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.104918244 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.103248145 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.11003646 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.071150623 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.072644925 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071183284 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070991259 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.07666393 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.077469637 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070890092 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078757976 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.087575501 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07684021 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070125111 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.07077472 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071079799 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07817462 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078818011 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079357638 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.077423161 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070452503 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071386014 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071522551 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071761129 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.07051941 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077627463 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.078789861 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.077839836 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.071430921 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.071234021 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.070325793 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.071683506 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.078388916 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077456576 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.079785836 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078837828 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070950998 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071539466 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.0729519 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080548228 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.080775237 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.079639823 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072915766 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.079832551 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.071180172 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081722671 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.084944095 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.071226623 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071881962 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071387995 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071710689 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071792566 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.077292302 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.078035497 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071604276 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.074425879 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070934286 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080345978 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077704885 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071611011 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076839825 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071297298 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071299443 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071789669 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071751258 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07687453 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.078802092 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07196679 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.071166496 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071569084 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071116209 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.070339859 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.076993442 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077716905 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.078034861 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.077647956 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071563122 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.077085347 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.077237177 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071026421 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076337623 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070354889 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070481567 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070019766 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075425911 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.075125157 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.077838688 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070363041 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069294501 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.075700591 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.216863813 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070927417 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.079090415 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.081327979 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.079155286 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.071968641 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.081811031 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072438031 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080927751 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.072042473 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.080003363 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071744428 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077751707 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071728904 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070514522 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.071315262 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077802942 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071712085 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070990414 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071835087 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071398995 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.078105602 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.081654568 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.072475636 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078354199 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.078377746 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072466835 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.078189717 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071599997 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078993695 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071326814 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071327857 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070860694 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080572654 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071361199 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.071567443 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071613603 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.080100885 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071905358 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080395041 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077763674 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070916318 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081545785 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077498916 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075767815 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.08049409 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072774125 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.071795276 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.071532738 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.07180719 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076861362 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.078706034 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.072060441 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071768595 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.07703292 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.081306189 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.071305271 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.077694864 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.310502268 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.077516949 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.07184804 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.071164898 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080752306 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.08037234 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.077610727 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.077192613 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078639933 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071357833 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076746452 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077993831 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071071909 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.085523843 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071602194 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.081741267 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.07847503 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076332394 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.078039897 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.079125676 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.080729423 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.080789215 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.083537522 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071547774 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.070528091 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.077429485 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.071015317 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071182283 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.076778454 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.071281995 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.071904985 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.082890285 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068943144 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.079964683 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070892279 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.078145944 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.071341783 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07129433 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082932267 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.071588216 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071746163 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.077073565 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.071336646 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.077212364 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080274888 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.076652162 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.071016144 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070926995 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076825919 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.07728452 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070172182 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069942028 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07050453 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075024484 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.074802334 seconds)
  done (took 19.158052873 seconds)
done (took 39.563733455 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210044782 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172666907 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.203730306 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.120762118 seconds)
  done (took 2.294563137 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.092088392 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.099853568 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.077667834 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.066709236 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.08718525 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.068009875 seconds)
  done (took 2.019605842 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250172665 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.189490735 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173920855 seconds)
  done (took 2.132967818 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.218917979 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.199619987 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.508611459 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.316803125 seconds)
  done (took 2.8680643 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.133677292 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.080880661 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.06638748 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.077230219 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.107421943 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.137098936 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.089485824 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.111261557 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.078271936 seconds)
  done (took 2.468217191 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.13286744 seconds)
done (took 13.472088235 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.155429968 seconds)
    (2/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.237970063 seconds)
    (3/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.109206781 seconds)
    (4/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.072549847 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.079167449 seconds)
    (6/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.11779524 seconds)
    (7/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.218488659 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.12101557 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.076393192 seconds)
    (10/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.081543654 seconds)
    (11/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.105837321 seconds)
    (12/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.212849671 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.163454604 seconds)
    (14/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.094462238 seconds)
    (15/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.079162804 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.126128944 seconds)
    (17/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.068603944 seconds)
    (18/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.080575973 seconds)
    (19/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.214399735 seconds)
    (20/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.072068643 seconds)
    (21/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.079505231 seconds)
    (22/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.077242282 seconds)
    (23/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.078111304 seconds)
    (24/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.185782752 seconds)
    (25/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.076754137 seconds)
    (26/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.16198044 seconds)
    (27/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.209353685 seconds)
    (28/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.203323738 seconds)
    (29/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.088044027 seconds)
    (30/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.181285442 seconds)
    (31/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.163193876 seconds)
    (32/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.079549951 seconds)
    (33/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.159938463 seconds)
    (34/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.247439925 seconds)
    (35/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.08985604 seconds)
    (36/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.206366873 seconds)
    (37/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.183692831 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.119668652 seconds)
    (39/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.170781791 seconds)
    (40/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.076182177 seconds)
    (41/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067612409 seconds)
    (42/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.06660906 seconds)
    (43/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.170735531 seconds)
    (44/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.245626714 seconds)
    (45/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.079572436 seconds)
    (46/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.220415195 seconds)
    (47/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.07239237 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.095466037 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.185263148 seconds)
    (50/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.079120787 seconds)
    (51/341) benchmarking ("sort", Bool, false)...
    done (took 0.149878209 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.089106449 seconds)
    (53/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067410546 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.081001696 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.228611673 seconds)
    (56/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.152528667 seconds)
    (57/341) benchmarking ("sort", Int64, false)...
    done (took 0.069933986 seconds)
    (58/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.067422348 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.092160549 seconds)
    (60/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068520524 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078160063 seconds)
    (62/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.169595277 seconds)
    (63/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074763623 seconds)
    (64/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.159478108 seconds)
    (65/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.068116856 seconds)
    (66/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.077436751 seconds)
    (67/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.21026056 seconds)
    (68/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.187739402 seconds)
    (69/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.132303599 seconds)
    (70/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.160530668 seconds)
    (71/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.076187599 seconds)
    (72/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075443349 seconds)
    (73/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.06598547 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143432903 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.097086009 seconds)
    (76/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.08052393 seconds)
    (77/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.067664283 seconds)
    (78/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.076275168 seconds)
    (79/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074412978 seconds)
    (80/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095664651 seconds)
    (81/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.069792843 seconds)
    (82/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.075550853 seconds)
    (83/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.078728223 seconds)
    (84/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.236945961 seconds)
    (85/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.081284347 seconds)
    (86/341) benchmarking ("sort", Int8, false)...
    done (took 0.15812924 seconds)
    (87/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.208779933 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.179655209 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.070200523 seconds)
    (90/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.088612189 seconds)
    (91/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.203285714 seconds)
    (92/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.070553824 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.095184659 seconds)
    (94/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.067557986 seconds)
    (95/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.071353008 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090124418 seconds)
    (97/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.156654919 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.089705454 seconds)
    (99/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.184684711 seconds)
    (100/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.205875744 seconds)
    (101/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.080619697 seconds)
    (102/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.076136445 seconds)
    (103/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.206711572 seconds)
    (104/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.19523345 seconds)
    (105/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.146675605 seconds)
    (106/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.200134075 seconds)
    (107/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.165948119 seconds)
    (108/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071741401 seconds)
    (109/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.155962256 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.094786092 seconds)
    (111/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067679911 seconds)
    (112/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075517463 seconds)
    (113/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.147309625 seconds)
    (114/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.07043608 seconds)
    (115/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.08317962 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.088696274 seconds)
    (117/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.073592592 seconds)
    (118/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.07028217 seconds)
    (119/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.221648911 seconds)
    (120/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.090848246 seconds)
    (121/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.165637812 seconds)
    (122/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.158678944 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.092339711 seconds)
    (124/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.088148229 seconds)
    (125/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.164665035 seconds)
    (126/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067705838 seconds)
    (127/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.093234425 seconds)
    (128/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.067207118 seconds)
    (129/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.079994896 seconds)
    (130/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.071725097 seconds)
    (131/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.080163999 seconds)
    (132/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.069705336 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.078293142 seconds)
    (134/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07680088 seconds)
    (135/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.150073276 seconds)
    (136/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.152493201 seconds)
    (137/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.175258428 seconds)
    (138/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09674289 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.092625141 seconds)
    (140/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.150951242 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.068637735 seconds)
    (142/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.070779855 seconds)
    (143/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.201847354 seconds)
    (144/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.087159 seconds)
    (145/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.077159134 seconds)
    (146/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.068655 seconds)
    (147/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.077362646 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.127908523 seconds)
    (149/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.067420916 seconds)
    (150/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.069302573 seconds)
    (151/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.182144069 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.078564829 seconds)
    (153/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.146425254 seconds)
    (154/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.069963699 seconds)
    (155/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.163165133 seconds)
    (156/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.204650622 seconds)
    (157/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.068543398 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.085966385 seconds)
    (159/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.087587786 seconds)
    (160/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.070791674 seconds)
    (161/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.097008852 seconds)
    (162/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.198898366 seconds)
    (163/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.143107177 seconds)
    (164/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.075885417 seconds)
    (165/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.066351716 seconds)
    (166/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067051704 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.075189037 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133838116 seconds)
    (169/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.170617673 seconds)
    (170/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.18035157 seconds)
    (171/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069151841 seconds)
    (172/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076351579 seconds)
    (173/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.139102638 seconds)
    (174/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.076910317 seconds)
    (175/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.066387774 seconds)
    (176/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.080031184 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093919099 seconds)
    (178/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.068405789 seconds)
    (179/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.071649539 seconds)
    (180/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.078929511 seconds)
    (181/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.06902887 seconds)
    (182/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.075936745 seconds)
    (183/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.074388358 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08731908 seconds)
    (185/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.329489773 seconds)
    (186/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.070427175 seconds)
    (187/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.068732993 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.158892753 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.070614837 seconds)
    (190/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.071285245 seconds)
    (191/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.233431626 seconds)
    (192/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.06839221 seconds)
    (193/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.067571228 seconds)
    (194/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.067514583 seconds)
    (195/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.224801164 seconds)
    (196/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.076313034 seconds)
    (197/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.087604251 seconds)
    (198/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.076382008 seconds)
    (199/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.067782128 seconds)
    (200/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.070960565 seconds)
    (201/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.071558997 seconds)
    (202/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.069323149 seconds)
    (203/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.068306655 seconds)
    (204/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.068274278 seconds)
    (205/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071650431 seconds)
    (206/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.077676981 seconds)
    (207/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.145004431 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.089101317 seconds)
    (209/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.073049837 seconds)
    (210/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076105733 seconds)
    (211/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.095666322 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.137310458 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.068506602 seconds)
    (214/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.067503237 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.068506487 seconds)
    (216/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.07344556 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.068437192 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.148204311 seconds)
    (219/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.080249552 seconds)
    (220/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.166274149 seconds)
    (221/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.068109588 seconds)
    (222/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.070398214 seconds)
    (223/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.068975975 seconds)
    (224/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.080900535 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.119641036 seconds)
    (226/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.078588361 seconds)
    (227/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13586902 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137681129 seconds)
    (229/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.068004809 seconds)
    (230/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.069820888 seconds)
    (231/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067806815 seconds)
    (232/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075721935 seconds)
    (233/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.073187252 seconds)
    (234/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.071075069 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.068446698 seconds)
    (236/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.069832147 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.070074936 seconds)
    (238/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152321751 seconds)
    (239/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.067971956 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.080793014 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.079305897 seconds)
    (242/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.084235878 seconds)
    (243/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.149794626 seconds)
    (244/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067820524 seconds)
    (245/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.072882933 seconds)
    (246/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069729798 seconds)
    (247/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.076402679 seconds)
    (248/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.078203653 seconds)
    (249/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.22325294 seconds)
    (250/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072945007 seconds)
    (251/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.069416889 seconds)
    (252/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.067765859 seconds)
    (253/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.084514881 seconds)
    (254/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.069400368 seconds)
    (255/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.06727463 seconds)
    (256/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069177649 seconds)
    (257/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.06739583 seconds)
    (258/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.069177897 seconds)
    (259/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.077012522 seconds)
    (260/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.067525422 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.130204542 seconds)
    (262/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.067281747 seconds)
    (263/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.06863469 seconds)
    (264/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09688232 seconds)
    (265/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.171603502 seconds)
    (266/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.070917384 seconds)
    (267/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068070181 seconds)
    (268/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.071208354 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.128389874 seconds)
    (270/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.066827317 seconds)
    (271/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07673416 seconds)
    (272/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067272298 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.068392391 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.067449025 seconds)
    (275/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067593669 seconds)
    (276/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.068084498 seconds)
    (277/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.069561657 seconds)
    (278/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.076374099 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.088468433 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.067103339 seconds)
    (281/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.086059032 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068315279 seconds)
    (283/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076612039 seconds)
    (284/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067318483 seconds)
    (285/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.070187536 seconds)
    (286/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.155053592 seconds)
    (287/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.069436792 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094422595 seconds)
    (289/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.071977874 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.126026845 seconds)
    (291/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.071201183 seconds)
    (292/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.073123231 seconds)
    (293/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.069261428 seconds)
    (294/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.068570663 seconds)
    (295/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.068284848 seconds)
    (296/341) benchmarking ("sort", Float32, false)...
    done (took 0.140816326 seconds)
    (297/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071943183 seconds)
    (298/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.067813845 seconds)
    (299/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.0703397 seconds)
    (300/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074945264 seconds)
    (301/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.06858479 seconds)
    (302/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.068463666 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.085260091 seconds)
    (304/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.066345142 seconds)
    (305/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.068518768 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.067474787 seconds)
    (307/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.06748664 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.093398485 seconds)
    (309/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.072040382 seconds)
    (310/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.074763138 seconds)
    (311/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.070208318 seconds)
    (312/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.06773047 seconds)
    (313/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067440662 seconds)
    (314/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.068028872 seconds)
    (315/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.066001858 seconds)
    (316/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067444743 seconds)
    (317/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.193205942 seconds)
    (318/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066524543 seconds)
    (319/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.068551187 seconds)
    (320/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.079154456 seconds)
    (321/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.06789215 seconds)
    (322/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068536915 seconds)
    (323/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071722771 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.078371722 seconds)
    (325/341) benchmarking ("sort", Float64, false)...
    done (took 0.137603359 seconds)
    (326/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06834639 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.147704468 seconds)
    (328/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.072343051 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.096500671 seconds)
    (330/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.067712594 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.067407352 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.090915577 seconds)
    (333/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.19547956 seconds)
    (334/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.075617298 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154938538 seconds)
    (336/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.070008448 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067186336 seconds)
    (338/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075211777 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.091028843 seconds)
    (340/341) benchmarking ("sort", BigInt, false)...
    done (took 0.267351979 seconds)
    (341/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079658013 seconds)
  done (took 37.452459381 seconds)
done (took 38.992560105 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.090776862 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.093426695 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.077585459 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.091015714 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.086628122 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.106332569 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.079088859 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.083363155 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.086768783 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.084982517 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.084206523 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.077649915 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.080066118 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.080440715 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.077453023 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.094055234 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.086539029 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.078544652 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.078916734 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.068915428 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.078663996 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.069688081 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.06829446 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.076567679 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.08123 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.076931616 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.07841141 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.078903862 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06914669 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.069762759 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.074661526 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.077903756 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068722485 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.08121009 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.078131194 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.077658132 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.078927043 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.082299707 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.067915509 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.069240689 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.080365821 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.069011386 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.077602562 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.075450254 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.074743424 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.076619962 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.07761926 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.080991204 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.093619895 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.074414253 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.080711222 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.080448379 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.080625805 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.074449639 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.074257792 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.077636561 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.076384987 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.092695044 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.078076478 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.074555667 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.080176437 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.079325775 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.07637761 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.077900927 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.078234349 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.08171673 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.080806481 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.075969223 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.080960387 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.076856971 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.069039658 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.07789936 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.073819242 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.069215311 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.081069253 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.083303143 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.067407018 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07350413 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.077398192 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.077546286 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.068215045 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.074138733 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.067865915 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.073687363 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073259944 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.075708593 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.074533145 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.076687931 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.068014952 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.078092762 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.076747105 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07691436 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.067558904 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.080529677 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.06781318 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.07537672 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.068824757 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.069245975 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.067750424 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.074775451 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.068581068 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073840754 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.077201925 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.067155268 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.073771776 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.08202723 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.071822582 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.076547908 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.068107447 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06778376 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.079344399 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.080037347 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.068488874 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.073828685 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.067822123 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.074729286 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.067880682 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.068157713 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06838693 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.069234894 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.073122804 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.068381647 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.073545669 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.075507473 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.080043188 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.068007226 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.073609692 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.073869315 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.068803129 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.075075335 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.068630032 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.068559082 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.067539382 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.082045961 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073525321 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.067934292 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.074526207 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.073245165 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.076774431 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.066611141 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.077440535 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.074765545 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.072837039 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.224591038 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.068522597 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.081196595 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.075020103 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.074140994 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.068017681 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.068598565 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.067478599 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.068232327 seconds)
done (took 13.418503774 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068323346 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.107299694 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.077062736 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.086215207 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.08180806 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.069984058 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.073184413 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.086033879 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.072294557 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.089288884 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.097491457 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.091136712 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.096623914 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.068267784 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.069811605 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.070434749 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.068333451 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.076925239 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.084535241 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.093092008 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.098019564 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.068833318 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.071931266 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.08628966 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079926441 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.086040832 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.07087647 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.070103625 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.113754799 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08636935 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.095282969 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.069083049 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.070299466 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.083097857 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.083950898 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.076248175 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.069860598 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.073713429 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.070343215 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.068861971 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.071034217 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.083681907 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.072885028 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.07389646 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.070435385 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.070352159 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.069251106 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.072801405 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.083329696 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.072698298 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.077478205 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.08180413 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.070802727 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.069382041 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.067656599 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.0735261 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068962451 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.070158733 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.069677101 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.069608995 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.069613969 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.07173737 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.070203497 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.069967918 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.072615364 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.07204937 seconds)
  done (took 6.72603836 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.082911877 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093081072 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083173124 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.084669564 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.068646114 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.069758578 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.069711387 seconds)
  done (took 2.223779676 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067958429 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075291764 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.081499684 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.082391987 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.092224533 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.079565893 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.070089706 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.101869 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.068483123 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.078957953 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.086317161 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.083487449 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.072637642 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.081850567 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.069839815 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.082136042 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.070065044 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.076933877 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.077790167 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.082731448 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.073407169 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.098830531 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.082868451 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069986698 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.083555755 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.077489025 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.071925164 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.070051904 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070272802 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.06926972 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068819942 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.092052735 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.075976891 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.081989671 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.069732562 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.068935161 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.074196232 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.070174408 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.077034168 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.078942845 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.073481542 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.069287513 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.070406123 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.069418079 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.070486063 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.074314476 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.07079109 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.069194135 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.068799106 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.077022565 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.068252458 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.076033262 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.071623585 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.074293533 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.074240615 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.074340949 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.076874043 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.069727999 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07736527 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.076107698 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069158666 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.082968385 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.081232776 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.073651581 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.081711275 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.078924785 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.076252907 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.073171168 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.069053706 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.068998772 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.069958505 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.081652845 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.072876587 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.071834008 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.070538636 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.074469239 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.073559013 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.084803953 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.085554079 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.08326511 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.072073749 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.069336466 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.073365349 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.085020743 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.075045972 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.069308552 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.070370462 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.069088783 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.074227662 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.069709735 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.074320808 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.069257909 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.076462019 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.071584414 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.072097419 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.077625177 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.070060409 seconds)
  done (took 8.974903857 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070163965 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068976365 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.071835459 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.0704603 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070882505 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.070819241 seconds)
  done (took 2.125176124 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.089937242 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069958579 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.082218717 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.070900534 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.092827122 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.07689858 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.077161136 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.078368844 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.086744286 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.08086529 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.077439672 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.079169475 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.076569652 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.071868481 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.076241083 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.071648582 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.076634894 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073684633 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.08006234 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072026864 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.083514796 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.072004214 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072565602 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.082275602 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.073269881 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.071255726 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071230576 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.080275313 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.080127325 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.078216924 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.071817874 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.072990134 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07859351 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.078181297 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.076468092 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.078707616 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070366037 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07509806 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.072342206 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.073423666 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.078502058 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.072102532 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.072358149 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.075553567 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.078086764 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.078761319 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.075387831 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.073837445 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.076528952 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.075493375 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.075417847 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.070796603 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.072994691 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.075587607 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.079671581 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.078716252 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.080725646 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.076107006 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.071420202 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.07847149 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.070106927 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.072885607 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.077576741 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.073076198 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.075128044 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.075527498 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.078805622 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.072155562 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.072026875 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.069569884 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.075683998 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.070281144 seconds)
  done (took 7.13856095 seconds)
done (took 28.841383579 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.544374399 seconds)
  done (took 2.188080255 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.583458579 seconds)
  done (took 2.267771993 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.735351918 seconds)
  done (took 10.41942319 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.307534278 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.337421134 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.741232221 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134054527 seconds)
  done (took 3.245116006 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.751457481 seconds)
  done (took 2.448957348 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.23099724 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.225598704 seconds)
  done (took 2.164847402 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.34405444 seconds)
  done (took 2.037456957 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.15246659 seconds)
  done (took 2.839987484 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.226217132 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.163248603 seconds)
  done (took 2.085801274 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.515848406 seconds)
  done (took 2.20764212 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.332593031 seconds)
  done (took 6.031860134 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235864622 seconds)
  done (took 1.972967977 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23276963 seconds)
  done (took 1.929873124 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.064720812 seconds)
  done (took 3.756406398 seconds)
done (took 47.286911642 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085305365 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.09022067 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08768021 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083063415 seconds)
  done (took 2.013066062 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075341914 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072446069 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.077644156 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07755187 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.07600936 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076652066 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.076849574 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.071931367 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.074943371 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.07398377 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.072227921 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.074161733 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.076348424 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.07331714 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076647034 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.077710065 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.073753693 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.073556919 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.076241397 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.073493651 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.076403836 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.073913848 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.072119843 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.073663723 seconds)
  done (took 3.487543736 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.07982436 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073871345 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.079044106 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.074516421 seconds)
  done (took 2.009903084 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.077742055 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078044308 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.08933457 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.094401557 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.080364986 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.080847824 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088135083 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.088740783 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068689369 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.0913117 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.071866758 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.070322171 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.070410133 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.089512368 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087784944 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.065953447 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067550929 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.080833272 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.079936338 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.083323776 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.072555675 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068890985 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080524213 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.080651224 seconds)
  done (took 3.610375804 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080942904 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066700688 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.081422638 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.094707212 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.095983049 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.069038587 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.083286405 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.096602841 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.131358383 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.068903476 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.075041961 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.06880397 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109199128 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.068821394 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.083991641 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.112165864 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.115879901 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.072786413 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.1024049 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.068550768 seconds)
  done (took 3.457633095 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.07666516 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.07041988 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.073521194 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.068691036 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.080237397 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.076715064 seconds)
  done (took 2.16230211 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069282033 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069131333 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.07019603 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.069939224 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.075421132 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.070327452 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.068799887 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.071134233 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.070751151 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.070290294 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.069747694 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.06941011 seconds)
  done (took 2.552269425 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156543161 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.071056952 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071841969 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.069586652 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.074868873 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.070348294 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.085016494 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.07203577 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.089011964 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.070173262 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.070130453 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.072810678 seconds)
  done (took 2.682188524 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101044819 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102650649 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.149907357 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121812479 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119389036 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101076677 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123924939 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.098360513 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.163927042 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.14171129 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121069849 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.129215254 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.091043021 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.07372344 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103429298 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104941478 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140521531 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07577326 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116964231 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.200979026 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118838015 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.116532605 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126253199 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120503999 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084576842 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126291202 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098964449 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106720088 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.156806708 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111419953 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.123701737 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.101948902 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.075170727 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.074910706 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154081015 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104457518 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141433833 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.096827267 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10425058 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.092847553 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111490221 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.072922919 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.090825966 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.10987237 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088105253 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121078399 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.091291492 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107549767 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084381546 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.135756261 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110066178 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101552265 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090381883 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106867824 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131938806 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096025735 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110968848 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.110263574 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08574375 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.121675895 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.101922765 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.254225295 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098814785 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085547296 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.165283598 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093871166 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.117116587 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117282537 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.086380625 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.094459649 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107219337 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.134764339 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110750478 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.111624805 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119418642 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.128371575 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114144486 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.095958633 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.133309845 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097093612 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.076396416 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.109133019 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.132974851 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.089217117 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104672588 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1345591 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096656549 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111058473 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.096613734 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.12278097 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084566503 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.100484862 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073263117 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.101888178 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112205533 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101317276 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.116073177 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111695186 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08185251 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129114751 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.113011043 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07615306 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.12165872 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103042457 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158396757 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100162866 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.080229802 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104258241 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097841553 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.154531743 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090110746 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.084093295 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102899548 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145686395 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097814538 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.175078862 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100782244 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133036137 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10136951 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091397277 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078967965 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.093224187 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105883917 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109081309 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101629043 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089143231 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077213086 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.089723226 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099452054 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.254937643 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08381917 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119335385 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.106899027 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.079288816 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093778561 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.080846759 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130324154 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.082300192 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113094107 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129764241 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.082313408 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109522176 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130832113 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141488139 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.100662644 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11030972 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14292437 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.11782188 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081141621 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085058183 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109160678 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143722854 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115748876 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088627195 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079017356 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100613979 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111860655 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09853725 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.139828443 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127802874 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11317937 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102263175 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.145070578 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122614916 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095139762 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09942768 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101260024 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.127693489 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109903285 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.160030723 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098535268 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123100993 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117900341 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.145615461 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.119330202 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093693614 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088986301 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100093461 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.10872367 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110675856 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148578954 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.099911394 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.076656779 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097489618 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136059576 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080562254 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104757658 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.094717032 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.097568744 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12057699 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.087486764 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084426428 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.071593428 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104192154 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135897404 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070569569 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114447263 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.27701242 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10634726 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.109423923 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.074229056 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104262057 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.148814457 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110371689 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145301189 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121111679 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103627014 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118968827 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100886863 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106367917 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08133598 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.13224493 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.138759841 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100623997 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094145924 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139285141 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121280394 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135766368 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.099844092 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11787559 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105446576 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100665616 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104220612 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102027652 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144149213 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121030886 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125175761 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116575355 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108276658 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109318434 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138708755 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08598836 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120979782 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.079661936 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115922095 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.080939718 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11155367 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.083511271 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.115556668 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083987757 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10573073 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.07358419 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.077606797 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146561383 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.117239524 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093520634 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090264884 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141083249 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.136369475 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.084741325 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105723567 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136888867 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104110373 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104662947 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109570439 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086461735 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097504283 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.306099543 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.083649768 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.087272439 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.103727909 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098794013 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112264723 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.088449699 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078336191 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141156931 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108577342 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099779563 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110664264 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097795236 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.125789515 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.093667209 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091620085 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108595673 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107673381 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143085032 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.094547491 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.10168609 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.121644982 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084580066 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.095912476 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.072849281 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.088976119 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.079221544 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.113308978 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080723888 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112277029 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.071959769 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135137812 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.090826152 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.097251156 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.106773332 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102291565 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.132691882 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096638871 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133264775 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094284046 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106510002 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112806161 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099196292 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115176449 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108296581 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10001346 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113758846 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.100000923 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110242975 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114730742 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098290115 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.146538303 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094349588 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125706012 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110242866 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110824022 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108105312 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121639603 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.141860218 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117006317 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.146635812 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078861662 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.086475128 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108945858 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102755419 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146568902 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10529392 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.074977058 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117707798 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090828672 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095686401 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.265581544 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084807315 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147523229 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09165187 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.091841852 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117791764 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.094186459 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101917382 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080428799 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099849551 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.10467669 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.098919394 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099388171 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137850129 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121963344 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118819277 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.137315967 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.103784706 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.097788953 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.124215256 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115503629 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.115603949 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090590562 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090580472 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128401298 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106270872 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.132845889 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.104963899 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098807468 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105030508 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09443435 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104025042 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101499851 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.114392485 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084642178 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.080247258 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.072234108 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07628977 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.122340639 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113735655 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106740823 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102769571 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.076100692 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108085571 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101758527 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075599037 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091621416 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.0986092 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.130238762 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085266656 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095017926 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11594955 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.093886915 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104063013 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131417885 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130041825 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101522225 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090989344 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146138629 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.132647737 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092168721 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097246142 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.075564347 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.083613365 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106228027 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148446008 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118537264 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078102448 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083992561 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.078486581 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.253307315 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.076078334 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.092347004 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.09473645 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108822551 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122650746 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.117272601 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108657371 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079864569 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108036891 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102803198 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096430673 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101099778 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105739763 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108699484 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.128641823 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105840759 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101663118 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080110515 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.084921646 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079955912 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083465425 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106744716 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.081606055 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080685196 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135021337 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095530574 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108877927 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11300696 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089013986 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079202181 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136969906 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.073022605 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.139160355 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.075252988 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086607445 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.085016406 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084031449 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098663753 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114325 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100076327 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117677184 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110378325 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109187699 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114690959 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.161371783 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075223565 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.155231761 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080395919 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079567433 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080255174 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115681961 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094674705 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.108250879 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145475138 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093971794 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097660486 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08134422 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13265309 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.102803539 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10826619 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086814382 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08330702 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133371856 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083570037 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.075320561 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090826959 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.114767592 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074665975 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137291669 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115492183 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08227047 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.279422728 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.634391711 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095212262 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.080138097 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094466172 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.153613664 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134054058 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087905588 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113597173 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.12327888 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094258335 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117374516 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111858319 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187790225 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.078206531 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099205847 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106959172 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102633631 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096741585 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.09631452 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.091185381 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.096760524 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.089845253 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083657105 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111761373 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092182985 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09624874 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127239353 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087601138 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.084321089 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.135691359 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.107967434 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.086745972 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093284216 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.105188028 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092705917 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095748934 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.07327448 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.149307773 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126148778 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106323732 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.094950742 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.112915375 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122108002 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092951765 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117353016 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.093484738 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.114634463 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089590941 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.082536752 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107263472 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.082398123 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081790271 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122041625 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.09132289 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.097958738 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108987451 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.100550339 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119273431 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.122689044 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115824046 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.102317729 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083471767 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090711383 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.091116091 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078870475 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080980464 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075575091 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077242256 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106670966 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.250156728 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114951207 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115295016 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086783126 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108563172 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.10541338 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.114510681 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087388809 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.105541208 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113682864 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094506688 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108295794 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104763592 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132423927 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150876618 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103531559 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.128607191 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.1375907 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.080363986 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079687305 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.072465035 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.151692875 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.083674437 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.085035909 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.114632123 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137659134 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.086021362 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099673753 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.237782742 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.084654227 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.085714175 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101402287 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.074376491 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.087742117 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112530031 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.089474164 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084618765 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103636397 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117297435 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.122563295 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11639949 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094174264 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.086979037 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085918647 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098440422 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.109420657 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.133288111 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.093952265 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.079304458 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111312535 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.107845299 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129772156 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.077580995 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085392371 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.134720488 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096380758 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108266661 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084552563 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125521298 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136418647 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.094520684 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.138359663 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075170686 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087491397 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.093495997 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.130899279 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079149247 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092286063 seconds)
  done (took 68.069811442 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151254458 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143356593 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.089793369 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.109048669 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.199987453 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.210803858 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.131431811 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.107646095 seconds)
  done (took 3.034208446 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.069704171 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.085870558 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.105967713 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.087417124 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.071160362 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.072093253 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.211391585 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.086231846 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.07030076 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.111920135 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.079633006 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.07286289 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.372932824 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.069760551 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.070909998 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.078925093 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.071278713 seconds)
  done (took 3.636058395 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.370850548 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.628159751 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.325896607 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.076095449 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.962728155 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.09072154 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.204064837 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138023868 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.083893446 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.536932905 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.374347082 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132553259 seconds)
  done (took 18.785151577 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.077836228 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.079071282 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.082931853 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.082548448 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.078619815 seconds)
  done (took 2.258746303 seconds)
done (took 119.471604918 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085091507 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.178734044 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.072170439 seconds)
  done (took 2.144556819 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084039018 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.085056664 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.085384661 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.082425653 seconds)
  done (took 2.203103982 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076225224 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.080325071 seconds)
  done (took 2.016297568 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.230229804 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.181801572 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.095219837 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.08395775 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.084540699 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.084474558 seconds)
  done (took 2.12320359 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.072948096 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.075558756 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.076647699 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.07647484 seconds)
  done (took 2.161615377 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072992478 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.070470105 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.072451314 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.075285801 seconds)
  done (took 2.153163997 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087039003 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.088172345 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.118098109 seconds)
  done (took 2.156960481 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085022272 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.086948079 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.082348276 seconds)
  done (took 2.124649491 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110525821 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.100824014 seconds)
  done (took 2.075528897 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.081783589 seconds)
  done (took 1.947497024 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091313572 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.102550791 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.146499047 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.112497139 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.146664014 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.131615676 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.081020072 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.081989556 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.078030074 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.076575359 seconds)
  done (took 2.909763567 seconds)
done (took 26.465131961 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081206231 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.379014665 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.364949159 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.092353812 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.676026861 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.361090856 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.012653139 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096036944 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.104995451 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073130808 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.089865399 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.653411967 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.003755594 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.335214603 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.991179347 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.328762316 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.654880411 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073128051 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071975614 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.073035576 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.995884253 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.072534843 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.072577017 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073076944 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.657345608 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.379323825 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.073754631 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.333501601 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.072319624 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074627994 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.361286232 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074020789 seconds)
  done (took 16.597193061 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072092243 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.1277058 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.076863555 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.0888492 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.075287297 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.073834304 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.075346015 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.0736354 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116331213 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.073601538 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091125693 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072508151 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.076200782 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073885111 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.094560818 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.073555511 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.074843502 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.074280728 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073925072 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074716401 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.092468026 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.07332687 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.074095963 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.074482895 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.073801524 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086875689 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.0747631 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073087335 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073685092 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.076168697 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.077365574 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074704583 seconds)
  done (took 4.441525065 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123271908 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.133790134 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.078523025 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.114958735 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.123815302 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.074241938 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.157305211 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.096912936 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.118929308 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072644041 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.091012524 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.072414757 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.108608579 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.073841914 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.093410798 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.072993535 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.075049294 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.073880264 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.073596542 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.074031562 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.093248497 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.073369483 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07400907 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.073727928 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.074101617 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.088719933 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.074411855 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.073406466 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.073528625 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.075685448 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07750029 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.074794232 seconds)
  done (took 4.716078057 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071344141 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07511363 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.084104738 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.085560288 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.070904364 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.072329701 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.074539801 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.070688549 seconds)
  done (took 2.492740959 seconds)
done (took 30.129053812 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080361223 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069183 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.074013454 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.092210277 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.078471539 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.07407581 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.068922106 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.079078056 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.075371675 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.075221523 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07689033 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.070893004 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.073872882 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.068890271 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.076035397 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.069688275 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.076457106 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.074071832 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.075267079 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.076587899 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.076130523 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.076001168 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.079458915 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.076070913 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.075399531 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.075774044 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.080556299 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.076635007 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.070508966 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.073151243 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.072984743 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.085120283 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.07739935 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.076994719 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.070216526 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.071428601 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.075095236 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.072837776 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.077360289 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.079991018 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.073012522 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079722216 seconds)
  done (took 5.028275135 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.088617197 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094229385 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.089080742 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.086708212 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.111631935 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.086258747 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.094689415 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.083553779 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.081936085 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.093817248 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.078011051 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.08378052 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.084902923 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.079868142 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.082496174 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.079350127 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.084040096 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.077954171 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.082750187 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.082617377 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.093812979 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.07669138 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.083963968 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.084499265 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.078446756 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.084253995 seconds)
  done (took 4.122137147 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074573158 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.092167171 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.096969277 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.146851256 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.114704237 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.086748117 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.086020032 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.106275039 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.106273165 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.072782907 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.076244092 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.099948052 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.100744821 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.07912342 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.111324901 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.090920851 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.085726008 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.073593201 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.078134635 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.106758052 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.095094037 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.091169599 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.104681815 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.091858826 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.07098726 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081085162 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.078767441 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.087391455 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.07924993 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.08484753 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.076418577 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.075177799 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.071949341 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.085023903 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.075972273 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.069388415 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.094368005 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.084455133 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.087554133 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.110999453 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.08154584 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.073041323 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.102449262 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.137677386 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.071324962 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074514849 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.075697367 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.084163332 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.073158107 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.102062491 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.090668062 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.071194838 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.090831403 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.073251029 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07339129 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089032285 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.073577667 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.073604655 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.084873396 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.078109028 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.092825534 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.077024418 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.093677482 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.07228838 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.083608589 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.073875603 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.073620894 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.070614255 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.108723434 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.079644269 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.125545943 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.072710587 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.069764434 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.083934775 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.083499422 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.078898026 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.071928532 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.091707567 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084045381 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075506966 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.084074572 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.074768048 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075094776 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.108421589 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.071061575 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.069820694 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.070075847 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074009428 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.075151941 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.072131489 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085797179 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.070997146 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.074801122 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.087981474 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.07171537 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072027395 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074411155 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073183086 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071113908 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.082940272 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075799575 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.073216198 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084339842 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.072532167 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075382669 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.087018127 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.081586621 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.07111834 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.072899006 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.076962414 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.07338022 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.076449852 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.075025141 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.073981821 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07924472 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.079446662 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.077884506 seconds)
  done (took 11.662083963 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164480216 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.158041298 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.073368183 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.153863244 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.081375377 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.076764069 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.153934289 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.092106891 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.07255355 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.074353983 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.07208476 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.101367545 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.096532465 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110615936 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.077548693 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.073692757 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.098173792 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.106276576 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.156131026 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.151058422 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.096325592 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.080544616 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074776156 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073943369 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073691006 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.081863625 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.090824776 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.081192862 seconds)
  done (took 4.733614516 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077331135 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.116066134 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.076749396 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.096599795 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.09191876 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.072683586 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.074916752 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.073686223 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.089701367 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.079945391 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.072350226 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07680797 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.076563714 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.073060665 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.073257165 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.079165145 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.078928922 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.070721773 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.076037958 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.077470946 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.083372863 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.099216449 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076541925 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.072501947 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.075212895 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072331126 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079334218 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082540585 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071803615 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.102995858 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.069376135 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.077081878 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.08720247 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07347177 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.071807767 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.073063489 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.072370712 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.072406549 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.072627678 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.070562566 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.070180857 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.077120209 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.070821123 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.078688155 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.086771009 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07979557 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.073762464 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.074787559 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.0745489 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.068987194 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.075779112 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.075539981 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.074784413 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.08124767 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.076536643 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.074911014 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.073209693 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.10270995 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.078768006 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.07164404 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.070825572 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.070607859 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.074000117 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.080594556 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.089071622 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.074276402 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.070620464 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.072935137 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.077280472 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08672844 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.071558604 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.078004854 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.069794412 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.0727953 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.075305001 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.075396873 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.073865138 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.070869978 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.071926575 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.072136989 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071899875 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.072236414 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.071642268 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.074712266 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.069937532 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.070534193 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.072787259 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.073593853 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.079078902 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.07148439 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.075025627 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.073998912 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.071253441 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.07487351 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.077577561 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.075215248 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.092413211 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.081995862 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.072967212 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.07025668 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.087063801 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.074526978 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.071601124 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.07826873 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.076606058 seconds)
  done (took 10.010352548 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094652588 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.074311351 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.093004864 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.100149708 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.083323656 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.078501264 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.08736165 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.073491353 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.089153844 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.0720322 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.081960221 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.071414092 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.086042041 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.082330201 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.074523564 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.082619908 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.074752023 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.09325153 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.090963427 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.071227666 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.082421237 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.084831286 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.085317372 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.090716939 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.090303403 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.090794496 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.084651835 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.075020764 seconds)
  done (took 4.287884696 seconds)
done (took 41.723846694 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.962739468 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.137998878 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.956625995 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.157848498 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.225408255 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.065777196 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.09680156 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.957772216 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.175345232 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.984268496 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.276851452 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.35572749 seconds)
done (took 69.305763621 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.027931565 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.101554967 seconds)
    (2/2) benchmarking "String"...
    done (took 2.178297448 seconds)
  done (took 6.171110808 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.551693858 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.955243503 seconds)
    (3/3) benchmarking "different"...
    done (took 2.004654002 seconds)
  done (took 8.394333942 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.061471173 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.969530756 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.221100808 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.95530539 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.963389005 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.349451312 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.755281526 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.414854718 seconds)
  done (took 32.51771092 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.037652971 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.165469896 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.641501073 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.65424562 seconds)
  done (took 16.420580906 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.554824855 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.214717915 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.215991568 seconds)
    (4/4) benchmarking "different"...
    done (took 2.211179538 seconds)
  done (took 11.132729879 seconds)
done (took 86.705005462 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.999767282 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.954296686 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.971128484 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.994727439 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.957343361 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.957989208 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.960230838 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.955719249 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.97839631 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.022451243 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.955786977 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.969779814 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.957158081 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.02005732 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.8128146 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.012026977 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.968802483 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.957756317 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.961568727 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.99077702 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.955815763 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.955326493 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.445294055 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.145363062 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.575137267 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.056447038 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.263160166 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.403473411 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.954699704 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.954980682 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.034207089 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.035589747 seconds)
  done (took 210.025426522 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.95450201 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.987512137 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.028555268 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.988705337 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.449386235 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.151643443 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.107549213 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.468115029 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.962978323 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.967006967 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.168920202 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.962733776 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.194492633 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.907533888 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.95825124 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.972865283 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.224450079 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.207557117 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.963903236 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.149188868 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.976075637 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.109297724 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 4.070731276 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.159161072 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.975161769 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.996799781 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.95640945 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.976739228 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.131845866 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.194422055 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.98724606 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.003840966 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.124732162 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.806701048 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.962755206 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.968158554 seconds)
  done (took 177.067412961 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.143263388 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.967097677 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.95665871 seconds)
    (3/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.958327108 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.013182183 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.095457252 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.962127525 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.623484273 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.966694988 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.387959869 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.963898987 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.957865802 seconds)
    (12/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.958482459 seconds)
    (13/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.958460632 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.960575977 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.971174762 seconds)
    (16/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.047049171 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.960520277 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.974660706 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.959461701 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.98432752 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.959568789 seconds)
    (22/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.959323244 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.959104897 seconds)
    (24/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.959490075 seconds)
    (25/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.958462831 seconds)
    (26/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.959499287 seconds)
    (27/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.95733464 seconds)
    (28/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.958190547 seconds)
    (29/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.722742533 seconds)
    (30/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.204018219 seconds)
    (31/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.961951235 seconds)
    (32/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.963182769 seconds)
    (33/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.939694629 seconds)
    (34/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.970285329 seconds)
    (35/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.959042966 seconds)
    (36/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.960798314 seconds)
    (37/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.115617328 seconds)
    (38/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.055104912 seconds)
    (39/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.01382114 seconds)
    (40/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.07096432 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.964924225 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.178144737 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.045641622 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.960393532 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.962411639 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.021716608 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.971245108 seconds)
    (48/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.961678334 seconds)
    (49/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.960706607 seconds)
    (50/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.964273883 seconds)
    (51/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.967296196 seconds)
    (52/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.023296449 seconds)
    (53/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.192938948 seconds)
    (54/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.961394913 seconds)
    (55/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.097285564 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.466362772 seconds)
    (57/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.960114952 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.959808299 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.960401676 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.617215296 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.960633404 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.960030597 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.969530935 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.967610911 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.961245676 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.963934555 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.347779435 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.032825576 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.371584467 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.42215689 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.96733728 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.49291298 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.035224028 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.96056838 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.96204702 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.963290519 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.964093717 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.96257488 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.964950174 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.102023219 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.974432658 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.064427704 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.038309629 seconds)
    (84/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.963118283 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.963692193 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.101052989 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.970279182 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.961320768 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.77743692 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.036293376 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.99948425 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.773606236 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.964457214 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.337622062 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.727139312 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962716478 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.962672966 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.976153393 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.962736002 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.962688464 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.966175021 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.044506737 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.962931249 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.099952066 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.70526286 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.344359136 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.963906733 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.964749167 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.974030003 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.04118157 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.100027214 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.968522993 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.029332821 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.971963976 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.965830399 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.066816817 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.956414062 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.962088778 seconds)
  done (took 431.247005391 seconds)
done (took 822.406059707 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.624220308 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.639221226 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.719868216 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.591698831 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.571278416 seconds)
  done (took 15.043118459 seconds)
done (took 16.939094299 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.993685753 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.979548346 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.968797639 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.019324482 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.991098507 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.975107194 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.012184033 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.009488745 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.994105789 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.977648011 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.014067474 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.98119679 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.996233293 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.999127738 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.042467968 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.009585686 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.981899928 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.974035592 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.022235501 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.983621267 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.981243421 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.978019398 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.979555864 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.019228118 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.050651826 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.99416207 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.977308884 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.018091903 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.989006045 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.014689003 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.033278355 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.999135729 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.012152561 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.042150843 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.02780755 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.047265147 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.994314663 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.042700329 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.98586074 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.053558292 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.024036462 seconds)
  done (took 84.085546185 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.976656879 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.113981426 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.19047798 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.007958204 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.977470563 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.190894297 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.031834333 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.10530184 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.110346281 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.190423343 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.201316931 seconds)
  done (took 24.999151848 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.976227483 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.116688251 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.196132357 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.01036123 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.997255393 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.196728194 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.036568307 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.108948219 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.114577946 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.210666918 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.206971197 seconds)
  done (took 25.080797357 seconds)
done (took 136.062174248 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.347698687 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.295502908 seconds)
  done (took 6.542671812 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.996367764 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.131037978 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.975682643 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.975695559 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.971912792 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.973490165 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.973604264 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.972907642 seconds)
  done (took 17.874473369 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.970184221 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.972048868 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.972530609 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.972102247 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.972488977 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.971897923 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.972463391 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.973218196 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.971694337 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.972244497 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.972211185 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.971722505 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.972398855 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.971842769 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.970943387 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.97120728 seconds)
  done (took 33.451484039 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.971946366 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.971941056 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.97278107 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.972079123 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.970342106 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.971487225 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.972386866 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.975841801 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.973441505 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.974720278 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.972768719 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.970615551 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.961700155 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.973087663 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.971063948 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.973523965 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.972272613 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.972665624 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.979467821 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.970911157 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.97267047 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.971649548 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.975088728 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.976347126 seconds)
  done (took 49.244168813 seconds)
done (took 109.021749307 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.282991297 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.647533702 seconds)
  done (took 8.833235238 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.976880116 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.974791972 seconds)
  done (took 5.933165484 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.973085409 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.97234973 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.972924116 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.972786775 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.972520519 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.97310816 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.97296453 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.973756899 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.970810194 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.973137458 seconds)
  done (took 21.631738089 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.976086052 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.974225862 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.974161801 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.975020378 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.972614542 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.973792021 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.972144012 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.97436482 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.973630844 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.970554851 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.972926928 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.973008994 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.973840488 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.974368104 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.973172578 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.9735071 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.975870326 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.976900995 seconds)
  done (took 37.435774452 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.967870599 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.974081343 seconds)
  done (took 5.838877109 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.973854887 seconds)
    (2/7) benchmarking "second"...
    done (took 1.975782414 seconds)
    (3/7) benchmarking "month"...
    done (took 1.974820007 seconds)
    (4/7) benchmarking "year"...
    done (took 1.974616481 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.973353701 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.972627298 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.974640516 seconds)
  done (took 15.724074271 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.973446522 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.119661813 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.174651128 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.59055172 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.974522233 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.978072087 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.832937639 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.977750372 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.977850508 seconds)
  done (took 21.504434615 seconds)
done (took 118.803353555 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.818713802 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.983929649 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.221852021 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.053791359 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.047490164 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.317033226 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.996658801 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.582540444 seconds)
done (took 43.928527185 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.040471723 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.972363988 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.003093044 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.006608811 seconds)
  done (took 22.888799999 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.974686212 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.29937806 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.000231522 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.921934296 seconds)
  done (took 23.117394207 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.354576641 seconds)
    (2/2) benchmarking "read"...
    done (took 2.323439408 seconds)
  done (took 6.589315254 seconds)
done (took 61.543016208 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.977121556 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.975869459 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.977561188 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.976172382 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.974751415 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.97548288 seconds)
    (7/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.976711237 seconds)
    (8/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.976320013 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.97458604 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.975048971 seconds)
    (11/24) benchmarking ("zero", "Float32")...
    done (took 1.975889674 seconds)
    (12/24) benchmarking ("one", "Float32")...
    done (took 1.976267358 seconds)
    (13/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.976906055 seconds)
    (14/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.975875747 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979969211 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.978531945 seconds)
    (17/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.978572234 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.977325609 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.976582789 seconds)
    (20/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.977004769 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.9759833 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.976562566 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.975917401 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.979067826 seconds)
  done (took 49.346030699 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.978934712 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.97641232 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.977408757 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.976096686 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.979837672 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.977646471 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.978318032 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.977325951 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.977562499 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.979453878 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.978191611 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.977381032 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.977589634 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.979499489 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.977672169 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.97906394 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.978944336 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.978922732 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.978877233 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.978298449 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.974839512 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.97705088 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.977676458 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.975755654 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.974700642 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.976598388 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.977234945 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.976771094 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.97490604 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.977083209 seconds)
  done (took 61.23529893 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.976859794 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.97534022 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.977229542 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.961878672 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.976407862 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.979288158 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.977404081 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.98002576 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.971717369 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.963322384 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.975816017 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.968187121 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.981820784 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.973117125 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.979832643 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.977033149 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.97926734 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.976934576 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.97626401 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.980056221 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.979571019 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.979757982 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.978961135 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.969732622 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.977028248 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.978139513 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.976419913 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.977271574 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.977509788 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.978951545 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.976060009 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.979053241 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.977618344 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.967539354 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.977510798 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.977374751 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.979612985 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.97787101 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.981599315 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.978314505 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.97875748 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.978140208 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.979462715 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.979287333 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.98022871 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.978842951 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.978839747 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.981016409 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.977710475 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.978132134 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.978477461 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.977393328 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.97939742 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.979164699 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.979602361 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.978158061 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.981238936 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.979352017 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.979307701 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.980550828 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.979881681 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.98011708 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.978610845 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.980629345 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.979893288 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.97864463 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.979515161 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.982701248 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.981295223 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.979982977 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.980429207 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.979955003 seconds)
  done (took 144.307505891 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.980255864 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.981300324 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.981608343 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.980344249 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980936009 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.978750621 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.982028732 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980651527 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980973766 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.981392587 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.979345469 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.982511391 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.97989579 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.9813962 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.981316554 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.979615914 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.978640371 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.980982697 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.981083376 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.981181727 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.9810838 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.981507745 seconds)
  done (took 45.486247096 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.980042569 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.981768865 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.981084809 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.982649024 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.980366277 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.979694674 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.982278559 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.981051442 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981863963 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.981895826 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981781395 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981874835 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.980162872 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981272922 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981608794 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.981516203 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981328051 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.98155039 seconds)
  done (took 37.573702171 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.98062287 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.981784088 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.981797864 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981912285 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.980946678 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.98100883 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.981053047 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.982202778 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.981660408 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.982204888 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.982158426 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982577961 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.979770967 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981355119 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981601165 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.982226237 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.981751779 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.984917907 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983571151 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.983191443 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.983405991 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.983704045 seconds)
  done (took 45.516244326 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.982227829 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.982082682 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.984041813 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.983538373 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.985870273 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.981484974 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.98309637 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.984946406 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.984045403 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.982252566 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.983485648 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.983430932 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.983839842 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.983834575 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.984985606 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.983088829 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.982839774 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.983729737 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.984207187 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.983077495 seconds)
  done (took 41.582184295 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.984042935 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.983075095 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.985470423 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.984968541 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.984364875 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.985531655 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987352946 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.985230861 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.985223363 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.983376582 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.983827329 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.985105475 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.983833594 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.985092032 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.983471836 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.984527794 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.984692756 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986520261 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.986165512 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.983614886 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.984712446 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.984948649 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.984364052 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.985715403 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.985843897 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.985575381 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.98500431 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.986257204 seconds)
  done (took 57.492746033 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.98494532 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.98556624 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.985340195 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.985905497 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.984955954 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.984836725 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.986356125 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.983782062 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.984763189 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.984184995 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.984499788 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.984327293 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.984751111 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.984865215 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.985927866 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.985654824 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.985599591 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.986280687 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.986896995 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988520531 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.987083026 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.986353331 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.985444603 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.986494965 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.986238764 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.984521578 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.984959837 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.986679706 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.986559565 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.986757433 seconds)
  done (took 61.484143289 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.007223454 seconds)
    (2/2) benchmarking "in"...
    done (took 2.004413121 seconds)
  done (took 5.929066103 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.986358463 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983824498 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.984465141 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.987024633 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.984448331 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.986188149 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.984666604 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.985722274 seconds)
  done (took 17.797616153 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.98680465 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.990282785 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.986669727 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.986127485 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.986483433 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.995316465 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.988782345 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.988848534 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.990182635 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.987453826 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.991347724 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.992292332 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.99752532 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.99555207 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.987898241 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.988803156 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.990471915 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.990051092 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.990606656 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.988074276 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.993891358 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.98647798 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.982836845 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.987420411 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.988705352 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.996412807 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.999958708 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.989728496 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.989677351 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.986673711 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.995164171 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.98792203 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.989566411 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.99190048 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.990525482 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.988284871 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.997923793 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.989682364 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.993134272 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.985368447 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.990670144 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.99161343 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.993356901 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.000026803 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.990857079 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.989095397 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.98784671 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.989813012 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.991219688 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.994970972 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.997530183 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.991264851 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.989893711 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.990430256 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.992771501 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.98986165 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.989495899 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.991419828 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.000541943 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.998100273 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.996313402 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.012917988 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.000124786 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.989815621 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.989125382 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.000056239 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.01545339 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.993767818 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.992665123 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.990362484 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.998469658 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.990865559 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.990273026 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.991609949 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.006223519 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.0021453 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.994216563 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.990907614 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.989262461 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.991111867 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.993493022 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.991907113 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.992588921 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.991809939 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.002924207 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.019872245 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.993339575 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.991560779 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.99500877 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.994505778 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.996354201 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.995445878 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.993474228 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.98380495 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.995017341 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.995307593 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.994644395 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.996018924 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.993364692 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.003616016 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.992382177 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.99200635 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.997034772 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.002033572 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.993507741 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.992330508 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.993066317 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.993466739 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.001438873 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.99246729 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.993086828 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.991789214 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.993375174 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.998176957 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.993091993 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.997096031 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.00280166 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.00067118 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.995753345 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.9979563 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.998530319 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.998110198 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.004969908 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.011680651 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.99354681 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.998585468 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.998791531 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.007114477 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.994654748 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.995783935 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.996316656 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.995303964 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.993370907 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.987999545 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.994346203 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.985829295 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.993811007 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.997185468 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.986680573 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.995650825 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.998618308 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.999091309 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.998298475 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.994247868 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.999559638 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.995168997 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.99884128 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.001472317 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.994902244 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.996342802 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.995688213 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.999277419 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.997383188 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.997011732 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.994812074 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.994620639 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.996706966 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.997106739 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.99736881 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.996363089 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.995211919 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.997531075 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.001846197 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.99632662 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.995658718 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.998579725 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.996082418 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.996057137 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.999680344 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.998279809 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.999038765 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.998108213 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.004148587 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.997335365 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.996577654 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.998961334 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.99748174 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.998801786 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.003078443 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.008484439 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.001186216 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.008353316 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.996776749 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.00585738 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.996351008 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.999369341 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.997561207 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.999128161 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.999986726 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.99549919 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.998076205 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.001903297 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021513789 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.008841983 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.000935566 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.999998717 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.004981328 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.004126101 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.002100703 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.998770327 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.999793487 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.999560451 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.998966885 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.998201235 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.997391838 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.002722617 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.997105795 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.997237734 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.003075249 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.9993442 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.998102015 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.999574695 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.99736982 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.001036693 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.000595638 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.998045108 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.999971793 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.997582497 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.007996614 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.00089562 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.000304295 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.999197362 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.001136075 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.99943835 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.99802463 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.000895448 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.004227064 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.999665835 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.0023976 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.00866968 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.000484187 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.998726094 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.001647178 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.998005743 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.004172647 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.99968244 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.00494804 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.008351263 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.003645705 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.00081268 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.006481029 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.99573508 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.003280266 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.001112131 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.003048346 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.001635039 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.003280813 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.000488377 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.0000964 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.006848945 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.994098506 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.00294001 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.001903875 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.004219962 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.006087014 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.003050035 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.000526565 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.005329782 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.010400892 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.011227698 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.000682261 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.006604544 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.00580582 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.004740338 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.004334215 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.00573268 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.016824623 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.011714608 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.002287099 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.001626042 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.003313336 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.007732685 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.000671625 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.989921763 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.010625914 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.003630971 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.003502584 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.007711864 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.003483434 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.003555058 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.010803879 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.999075231 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.006278405 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.004746046 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.003462605 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.004117492 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.0013415 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.005452227 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.004314576 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.005185322 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.005988967 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.98971701 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.005411091 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.004673541 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.01333101 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.002739305 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.006898582 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.012920501 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.00457357 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.005219393 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.004610564 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.002075187 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.004438113 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.004272529 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.003303398 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.006351526 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.003774803 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.008238077 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.016675132 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.00729402 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.011902039 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.008943958 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.015298977 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.004746384 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.003067624 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.005177804 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.007971488 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.012532222 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.004988889 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.003895044 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.013651186 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.0065561 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.006063922 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.01067835 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.002484946 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.004349 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.004047722 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.006587009 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.011175032 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.008675953 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.004629351 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.007522194 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.005121877 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.004877076 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.009405792 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.006502729 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.006843541 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.004849623 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.005340295 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.005355805 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.004403452 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.00496683 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.005289266 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.005884251 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.004646873 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.014138651 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.00641249 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.006771692 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.012051695 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.00684435 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.017518145 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.006950856 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.007037909 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.010115175 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.006058362 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.009798581 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.006338947 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.006403496 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.006475176 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.00790752 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.010709636 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.023305474 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.015611239 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.010836495 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.008816874 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.009551799 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.01223684 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.017898152 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.033664881 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.011042118 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.012765276 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.013885831 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.015661972 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.012534831 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.017583293 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.013583492 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.01890587 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.011758957 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.009909437 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.012858305 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.022488491 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.009264489 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.009737703 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.007582971 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.014416631 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.012825731 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.009042192 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.012416452 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.012261067 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.010057691 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.022657715 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.00873144 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.013233904 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.009984127 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.008988401 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.015109132 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.012768422 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.014799235 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.013411597 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.011311735 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.011924868 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.015625927 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.017808643 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.010393973 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.015711341 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.020736289 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.00982615 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.012920411 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.015107669 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.011556499 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.012702475 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.010511373 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.012917127 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.015153565 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.011853659 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.016543636 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.016807573 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.022503858 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.015547321 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.011592346 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.012451302 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.015575886 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.010642691 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.012048903 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.013868454 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.022603446 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.016497873 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.026790016 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.024234322 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.012777553 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.014786496 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.022642212 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.022158957 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.016434004 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.014120346 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.011837781 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.014502654 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.018186199 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.015331688 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.012895451 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.012708516 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.020956088 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.011446531 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.015157558 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.012154314 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.013136287 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.017623007 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.015386432 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.02067773 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.015446738 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.013442261 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.012441844 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.01475322 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.01437058 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.017519908 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.014419336 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.012938847 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.016435111 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.015242098 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.017162424 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.010779836 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.013767245 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.017390698 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.013010128 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.01595019 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.015715845 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.01474225 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.012863444 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.019915421 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.024273044 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.014952191 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.018654441 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.014933967 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.019163376 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.015203715 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.01659947 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.0168486 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.015666539 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.02539704 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.015500312 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.016230845 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.016971262 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.017472932 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.022992719 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.017889224 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.023570386 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.015273207 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.017077456 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.014153823 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.019172543 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.029960254 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.019640984 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.021864583 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.025713433 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.024198483 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.017808447 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.018883767 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.014531069 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.016318239 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.013680849 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.019013764 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.020620246 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.018694939 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.015898715 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.020118502 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.017879846 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.021695954 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.016517139 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.015336221 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.020091783 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.025984309 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.021906994 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.016612185 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.020060502 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.016789825 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.021863527 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.028245338 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.016428137 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.01615568 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.017328005 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.02032849 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.018431844 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.026743113 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.029097833 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.023421338 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.015852789 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.023147447 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.035743244 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.022099587 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.03037439 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.052999693 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.021136549 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.01913202 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.020387301 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.021687531 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.016509359 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.01647496 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.017099014 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.024960772 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.018367484 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.018529982 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.027276173 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.020331662 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.014226873 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.01872554 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.020447107 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.025238958 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.022343967 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.029615925 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.018903201 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.020233475 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.014816181 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.021181107 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.016860109 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.018753346 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.019910596 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.024275374 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.019359472 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.022431812 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.032407044 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.019882884 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.022334433 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.032797312 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.031401067 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.519849891 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.018912194 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.018938731 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.025766144 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.022080068 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.018459649 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.024464707 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.029313907 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.02659291 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.028939063 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.024314117 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.023863392 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.02350758 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.019377815 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.020438883 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.035381731 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.031457368 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.020186026 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.022828306 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.029068826 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.020066305 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.027954844 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.025694655 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.020459971 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.022707527 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.019946582 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.021367542 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.024937942 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.024831773 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.029892779 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.032711607 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.028387526 seconds)
  done (took 1198.612246794 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.024723673 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.024993407 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.024321948 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.023622646 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.023997423 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023996314 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.024898028 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.027343563 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.026832742 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.025773038 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.027275591 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.025111453 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.023830373 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.025149466 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.025237535 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.025547497 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.024278517 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.027162906 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.025073191 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.026174074 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.02534981 seconds)
  done (took 44.482204437 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.027777044 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.026134089 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.024694797 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.026696941 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.024780971 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.027442161 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.027458637 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02692195 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.025791965 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.026406513 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.026237957 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.022842623 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.024776187 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.01748049 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.02735566 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.026553107 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.028312928 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.027235786 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.026161168 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.026523032 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.025686198 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.022576331 seconds)
  done (took 46.516824322 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.028906152 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.028023011 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.029661618 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.025344713 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.027714944 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.02897918 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.029475032 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.028691799 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.03048157 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.030818001 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.037802569 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.036087309 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.028119952 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.030712616 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.025991481 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.027771125 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.172564857 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.029422442 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.027009226 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.027476057 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.030023585 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.033709315 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.025283216 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.030338846 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.029155635 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.0292217 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.027552345 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.026192116 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.028600602 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.031350252 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.03518733 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.027750982 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.020050649 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.030724129 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.02529011 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.029827393 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.036418286 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.029418142 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.027175004 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.029040437 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.04233106 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.051243714 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.030048984 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.027616608 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.036734026 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.027533042 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.030016081 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.036101228 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.040590388 seconds)
  done (took 101.590563805 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.030808855 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.030959616 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.031530067 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.02869732 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.030494051 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.032951252 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.03382628 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.029815393 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.031894152 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.032059799 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.031103255 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.031157509 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.031505426 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.033347493 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.033105473 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.031664147 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.033548126 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.033609687 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.033787811 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.032484835 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.035266236 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.034195095 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.03384886 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.03270119 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.034774775 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.032727154 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.033461178 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.032462596 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.034385529 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.033894479 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.033905194 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.031883856 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.033467784 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.018543086 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.035011424 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.032967986 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.034822341 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.034002241 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.023545914 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.034961348 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.032938879 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.032485157 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.035202946 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.031940032 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.033163449 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.032199771 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.032494263 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.033289206 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.03339604 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.033312595 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.032941413 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.032536636 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.033333638 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.032467941 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.034673693 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.034714329 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.033623733 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.035790573 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.034485793 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.032980524 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.034451381 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.027938007 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.032784247 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.023886176 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.036395779 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.035653717 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.034582112 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.031009139 seconds)
  done (took 140.171333639 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.034610373 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.034506907 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02317088 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.034709902 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.035544739 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.03571376 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.034682385 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.034933853 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.03552645 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.039009857 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.038304878 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.035209973 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.03469353 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.037457064 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.0362191 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.034809534 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.037344366 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.034938589 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.035632664 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.034911906 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.035048943 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.037284806 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.035962164 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.036276977 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.037970381 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.038566211 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.040591825 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.037789549 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.038006969 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.03768938 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.039860762 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.03744627 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.037726529 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.035847731 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.037827292 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.037212676 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.037153942 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.036457332 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.03725231 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.039011587 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.039083591 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.037971117 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.038196866 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.035591295 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.035452567 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.036966551 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.040207715 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.03766618 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.036304467 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.038296789 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.038472966 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.037002177 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.037314097 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.039404563 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.037335003 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.041090629 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.039983009 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.03830286 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.039964143 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.039351406 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.040113341 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.040403898 seconds)
  done (took 128.260798303 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.035880723 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.037554798 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.037849805 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.035772725 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.036788554 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.039662828 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.036488262 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.036202327 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.037086793 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.035436607 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.038474405 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.03851177 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.039062481 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.036202124 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.037912671 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.039137538 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.03693323 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.038376612 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.109130477 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.035485625 seconds)
  done (took 42.780843097 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.03392633 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.035494548 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.037950872 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.036182499 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.03439634 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.037687958 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.033429658 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.042379548 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031725404 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030240581 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.032202631 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.033988903 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.04074205 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.032259091 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.034536533 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.031995498 seconds)
  done (took 34.52226622 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.038783332 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.032936276 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.033391588 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.033621885 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.034893501 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.03794554 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.035772852 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.034760639 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.035218099 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.032924307 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.038771522 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.035080557 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.036369133 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.035413251 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.034400922 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.040086515 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.034377236 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.034047263 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.03609782 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.034811886 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.038429677 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.033876266 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.033375043 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.035314709 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.036264289 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.037766038 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.035873497 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.032629021 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.032085189 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.036222039 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.032670277 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.034239366 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.032446563 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.03285787 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.036738957 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.033860696 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.034929209 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.036926019 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.034260447 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.046739244 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.030857075 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.031518993 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.032936414 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.033014745 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.037862188 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.029047851 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.028326376 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.027719892 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.028102738 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.043932518 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.001168624 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.02902395 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.030387714 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.029251834 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.033522023 seconds)
  done (took 113.825977836 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.027587559 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.02848327 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.027712579 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.036474945 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.026858192 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.027861945 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.029483303 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.028196942 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029016874 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.028191456 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.030548949 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.030804453 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029798219 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.044247527 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.031422203 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.030741139 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.034416733 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.033972095 seconds)
  done (took 38.511334203 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.031436083 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.031506861 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.031102557 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.028604844 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.030730813 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.033411083 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.031590708 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.032313904 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.032771646 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.04185554 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.033181095 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.032992813 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.033336195 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.031983581 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.034774099 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.032557695 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.030602192 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.033945862 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.035428288 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.034943823 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.035287644 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.035188426 seconds)
  done (took 46.68513449 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.037005817 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.039535921 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.050842342 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.062376672 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.059203629 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.081007235 seconds)
  done (took 14.289411799 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.033288604 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0360496 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.035731105 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.040736217 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036015438 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034928867 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035689335 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036892197 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.042649114 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038022833 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034322268 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03798321 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034222626 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.041517932 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036669291 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035710225 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.036395817 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037463883 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.039246975 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035585353 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034368497 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.034480049 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035950727 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.039977321 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035299813 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034399129 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.034787345 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.036856422 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.041951483 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034974212 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033470571 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03650498 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.032165899 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.028752203 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026637918 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025907407 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026243042 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023092715 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.029412603 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022804459 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.020938135 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020431402 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021422284 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017049442 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.0112913 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.012463597 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.019331096 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.018922095 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018465498 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019888967 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.017758153 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017839089 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019293813 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023749365 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019038528 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020853531 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021394485 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020721266 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02237194 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.01744716 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014586514 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.015513999 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.01567094 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021544394 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018302033 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017495996 seconds)
  done (took 135.832406537 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019701184 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.020119565 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.014512746 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014995083 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.016625415 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.017025625 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015591351 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011632232 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014768294 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.012477876 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.012929974 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.016786461 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015447252 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015529555 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.017635056 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015030716 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.014012045 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.016125668 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.013895711 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013800024 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014913672 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014665728 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.011589747 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.011267867 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014695757 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014121236 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018179983 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.014276439 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.015779636 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014140904 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015021421 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.018081799 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.014385376 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.01579596 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.014836585 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021277114 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01375363 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014940477 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.013083921 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.014227949 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01783945 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.013420205 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.010138752 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01177293 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.01234406 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013842568 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.010546721 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.009225413 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.010392859 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.010900855 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.014745503 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.010476015 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009787056 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.010136455 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.010446391 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.014248934 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.009383994 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.00869149 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009975597 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.008912564 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.010830761 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.010882075 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.009881179 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.008457898 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.009260797 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.011786691 seconds)
  done (took 134.835741508 seconds)
done (took 2790.584628042 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.030518098 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.095515831 seconds)
  done (took 16.054068858 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.175185888 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.126177603 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.013257514 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.021472379 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.008687429 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.01373261 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.013780278 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.009396732 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.013204779 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.012155515 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.012186106 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.199023429 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.027129556 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.010796744 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.020634561 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.106729021 seconds)
  done (took 54.724107684 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.017994545 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.017803332 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.033481599 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.017532338 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.01802124 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.030546853 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.04677637 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.021927495 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.05365644 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.031483899 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.091085821 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.026607864 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.019143576 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.068788379 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.025736516 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.028508866 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.111108662 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.080721038 seconds)
  done (took 38.674144438 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.094068271 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.023827783 seconds)
  done (took 11.05769401 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.04082589 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.009599026 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.020449903 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.036677571 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.033029592 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.027810207 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.020697385 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.026177813 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.027906 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.03408059 seconds)
  done (took 72.230940549 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.021234389 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.016169209 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.00682492 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.011054643 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.008697436 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.010225127 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.018133834 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.008718808 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.711261113 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.049998228 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.021850369 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.022013181 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.013131567 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.014819403 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.01040928 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.038678528 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.152811597 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.007757376 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.007782454 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.015232793 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.01064668 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.073031641 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.025849003 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.011432722 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.045690202 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.706624679 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.020072856 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.017410342 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.171651618 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.009997552 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.01276032 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.172710573 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.018550142 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.369037968 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.293569479 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.015056418 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.017770171 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.021687568 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.010395575 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.166546898 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.014563748 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.018382413 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.923131794 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.274961378 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.098805021 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.057291379 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.396826762 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.012567238 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.013618167 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.047191653 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.017334529 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.015179649 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.030155213 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.525199963 seconds)
  done (took 140.733766318 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.01202966 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.252427817 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.164049211 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.012496677 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.265283143 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.222075891 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.013193615 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.057854222 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.01502322 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.210719518 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.258567372 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.113489506 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.00863984 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.011945359 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.009164536 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.006311543 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.154473485 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.076098085 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.009299763 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.007841874 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.037534681 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.213177878 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.131001044 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.010274121 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.034419855 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.21634974 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.131087507 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.111901441 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.790233251 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.009868122 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.072596865 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.01060169 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.010641959 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.007365254 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.163115393 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.106953549 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.092291719 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.011935786 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.998508063 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.011802866 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.687738686 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.214082621 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.104628402 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.132078552 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.255432732 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.222781375 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.620572041 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.010878021 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.64130874 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.176913661 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.218938302 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.222671281 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.129218757 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.012067043 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.565737394 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.011497097 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.01273908 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.232004072 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.227427347 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.109442596 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.014175591 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.012207974 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.007529847 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.252749669 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.011290496 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.100442673 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.014567437 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.007225569 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.106124389 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.110647098 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.235535849 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.230559696 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.040517142 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.337776272 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.501389569 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.218030752 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.07583247 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.230758521 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.013633364 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.009962546 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.0948281 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.850176463 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.266322921 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.25062614 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.209190465 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.039419748 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.664821109 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.014577685 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.203132129 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.202048302 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.245280631 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.262450841 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.247610294 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.372936071 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.015214787 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.016681256 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.316918848 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.126951253 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.9648228 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.364749064 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.237382198 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.504716994 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.039154264 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.362438149 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.14135622 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.013633912 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.662943789 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.015493247 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.220989392 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.056929384 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.018797336 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.015600829 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.203100817 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.918153957 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.013486905 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.713463051 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.074980233 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.015952577 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.218212463 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.015546453 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.259442797 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.01495003 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.251099472 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.64477857 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.044382962 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.242518077 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.264151074 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.648850366 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.258236503 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.2560931 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.12709473 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.235099969 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.736874467 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.016337666 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.278781129 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.015773485 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.01750304 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.187013103 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.019891191 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.159597593 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.016113291 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.28396401 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.035216547 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.241604873 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.014691871 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.252060593 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.045017563 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.068342216 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.016684386 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.143506247 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.023008199 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.853745962 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.176165567 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.023412003 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.014781666 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.742591186 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.019566276 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.161880446 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.245817051 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.036481273 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.085894604 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.579209054 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.015737499 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.108115486 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.034459525 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.287922232 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.01888725 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.265668229 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.976111625 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.499361541 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.017442095 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.254624019 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.200296635 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.023524636 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.017161923 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.861860578 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.020832546 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.017973615 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.174635085 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.493271144 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.920397292 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.217274957 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.017911446 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.143420026 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.020022126 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.091355269 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.3634032 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.015334432 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.020644562 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.021070527 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.021143532 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.020429391 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.28347716 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.044395542 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.45833996 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.156855263 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.277148273 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.323614731 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.220017755 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.055536929 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.012232384 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.240610932 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.019053787 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.080227215 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.018202264 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.037752597 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.246852483 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.022897304 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.224162367 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.252909223 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.067818301 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.068367692 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.020830207 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.022956013 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.97259967 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.166982287 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.103454305 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.02114009 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.020401773 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.138491257 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.141104511 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.1993195 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.845977593 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.149030701 seconds)
  done (took 933.357399155 seconds)
done (took 1268.761590224 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.020510114 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.022756502 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.025388076 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.02221074 seconds)
  done (took 30.034001594 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.025026821 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.02328725 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.025350343 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.026562652 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.025029609 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.025305054 seconds)
  done (took 14.093869983 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.02469187 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.024817931 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.022034209 seconds)
  done (took 23.013995683 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.101397529 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.441305634 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.162759576 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.462148012 seconds)
  done (took 11.111237246 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.022161948 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.023175865 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.024167052 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.026705686 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.027892167 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.026809559 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.025020873 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.026323422 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.028384914 seconds)
  done (took 20.177000549 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.311209035 seconds)
done (took 104.684447238 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.146439133 seconds)
    (2/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.135431184 seconds)
    (3/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.508846395 seconds)
    (4/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.18231566 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.03862708 seconds)
    (6/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.903082558 seconds)
    (7/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.229263596 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.155896078 seconds)
    (9/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.03854802 seconds)
    (10/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.025117796 seconds)
    (11/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.088248161 seconds)
    (12/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.110058432 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.05255969 seconds)
    (14/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.035696134 seconds)
    (15/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.040486114 seconds)
    (16/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.335167032 seconds)
    (17/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.083748812 seconds)
    (18/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.265467951 seconds)
    (19/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.775470618 seconds)
    (20/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.081809909 seconds)
    (21/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.232577762 seconds)
    (22/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.178244621 seconds)
    (23/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.766487441 seconds)
    (24/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.318002623 seconds)
    (25/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.033049324 seconds)
    (26/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.768055339 seconds)
    (27/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.409045511 seconds)
    (28/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.328292409 seconds)
    (29/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.230658728 seconds)
    (30/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.098710126 seconds)
    (31/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.175030169 seconds)
    (32/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.104992338 seconds)
    (33/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.062358727 seconds)
    (34/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.106671532 seconds)
    (35/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.902410275 seconds)
    (36/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.031064496 seconds)
    (37/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.935651082 seconds)
    (38/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.954983744 seconds)
    (39/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.158204212 seconds)
    (40/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.169125021 seconds)
    (41/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.387216444 seconds)
    (42/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.103142456 seconds)
    (43/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.100617623 seconds)
    (44/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.086945489 seconds)
    (45/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.419710311 seconds)
    (46/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.022427314 seconds)
    (47/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 4.106958591 seconds)
    (48/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.313873347 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.027309617 seconds)
    (50/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.036240682 seconds)
    (51/341) benchmarking ("sort", Bool, false)...
    done (took 2.244934197 seconds)
    (52/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.445378356 seconds)
    (53/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.201329027 seconds)
    (54/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.692114565 seconds)
    (55/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.313031823 seconds)
    (56/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.285104075 seconds)
    (57/341) benchmarking ("sort", Int64, false)...
    done (took 5.673427066 seconds)
    (58/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.207366388 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.92129047 seconds)
    (60/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.994561423 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.384886182 seconds)
    (62/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.002886418 seconds)
    (63/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.129596769 seconds)
    (64/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.026831209 seconds)
    (65/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.141686732 seconds)
    (66/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.046338288 seconds)
    (67/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.779102676 seconds)
    (68/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.172227602 seconds)
    (69/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.154759932 seconds)
    (70/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.668777227 seconds)
    (71/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.147025484 seconds)
    (72/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.113892383 seconds)
    (73/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.106928366 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.153540695 seconds)
    (75/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.640083487 seconds)
    (76/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.037601973 seconds)
    (77/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.026396996 seconds)
    (78/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.047168043 seconds)
    (79/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.274270736 seconds)
    (80/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.029363119 seconds)
    (81/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.059317106 seconds)
    (82/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.138295926 seconds)
    (83/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.044251678 seconds)
    (84/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.029097637 seconds)
    (85/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.187122859 seconds)
    (86/341) benchmarking ("sort", Int8, false)...
    done (took 4.969080075 seconds)
    (87/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.439134377 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.998810212 seconds)
    (89/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.26946496 seconds)
    (90/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.10988202 seconds)
    (91/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.205027417 seconds)
    (92/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.802816551 seconds)
    (93/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.542881781 seconds)
    (94/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.30095551 seconds)
    (95/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.240624069 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.396984652 seconds)
    (97/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.028529376 seconds)
    (98/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.410225503 seconds)
    (99/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.130705189 seconds)
    (100/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.253486143 seconds)
    (101/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.50017836 seconds)
    (102/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.177735941 seconds)
    (103/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.339828832 seconds)
    (104/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.032398331 seconds)
    (105/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.310902896 seconds)
    (106/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.419333488 seconds)
    (107/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.125148111 seconds)
    (108/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.089709507 seconds)
    (109/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.490671159 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.794536039 seconds)
    (111/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.357396119 seconds)
    (112/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.053421551 seconds)
    (113/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.119913801 seconds)
    (114/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.031514832 seconds)
    (115/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.589409934 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.9667918 seconds)
    (117/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.195285335 seconds)
    (118/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.247887578 seconds)
    (119/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.321194211 seconds)
    (120/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.043029975 seconds)
    (121/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.130592826 seconds)
    (122/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.045425189 seconds)
    (123/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.167854774 seconds)
    (124/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.133990708 seconds)
    (125/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.167676248 seconds)
    (126/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.334065095 seconds)
    (127/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.024478834 seconds)
    (128/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 3.619052279 seconds)
    (129/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.026627065 seconds)
    (130/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.085773472 seconds)
    (131/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.800631218 seconds)
    (132/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.609525249 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.326212279 seconds)
    (134/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.044520086 seconds)
    (135/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.032609968 seconds)
    (136/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.138237313 seconds)
    (137/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.032296116 seconds)
    (138/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.069132039 seconds)
    (139/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.363789976 seconds)
    (140/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.03005685 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 4.173019543 seconds)
    (142/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.151946059 seconds)
    (143/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.247020046 seconds)
    (144/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.733745677 seconds)
    (145/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.108065164 seconds)
    (146/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.162683745 seconds)
    (147/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.047870319 seconds)
    (148/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.034562074 seconds)
    (149/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.380858175 seconds)
    (150/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.035935684 seconds)
    (151/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 3.994489838 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.279905922 seconds)
    (153/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.270104506 seconds)
    (154/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.444966398 seconds)
    (155/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.292588041 seconds)
    (156/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.350956064 seconds)
    (157/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.220893144 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.357336678 seconds)
    (159/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.267719263 seconds)
    (160/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.099317234 seconds)
    (161/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.420662867 seconds)
    (162/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.430847098 seconds)
    (163/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.196025641 seconds)
    (164/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.047263085 seconds)
    (165/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.285207233 seconds)
    (166/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.412019476 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.300768563 seconds)
    (168/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.157655998 seconds)
    (169/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.510772208 seconds)
    (170/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.029505612 seconds)
    (171/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.322825993 seconds)
    (172/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.049387573 seconds)
    (173/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.111816607 seconds)
    (174/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.040649297 seconds)
    (175/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.050290018 seconds)
    (176/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.195947036 seconds)
    (177/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.634614522 seconds)
    (178/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.19411102 seconds)
    (179/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.119896137 seconds)
    (180/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.044563477 seconds)
    (181/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.285285272 seconds)
    (182/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.044864963 seconds)
    (183/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.036864819 seconds)
    (184/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.168545575 seconds)
    (185/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.033563803 seconds)
    (186/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.185949445 seconds)
    (187/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.140666557 seconds)
    (188/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.036984543 seconds)
    (189/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.355548713 seconds)
    (190/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.032431459 seconds)
    (191/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 3.915721011 seconds)
    (192/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.157512488 seconds)
    (193/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.398076985 seconds)
    (194/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.329801779 seconds)
    (195/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.031707741 seconds)
    (196/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 3.821565711 seconds)
    (197/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.173569849 seconds)
    (198/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.04398918 seconds)
    (199/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.490801523 seconds)
    (200/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.402922124 seconds)
    (201/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.28511711 seconds)
    (202/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.378252958 seconds)
    (203/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.225791236 seconds)
    (204/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.155272401 seconds)
    (205/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.097330368 seconds)
    (206/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.046993213 seconds)
    (207/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.13641325 seconds)
    (208/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.0710304 seconds)
    (209/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.301210864 seconds)
    (210/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.047946365 seconds)
    (211/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.035482614 seconds)
    (212/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.227525673 seconds)
    (213/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.428826107 seconds)
    (214/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.787638277 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.378157469 seconds)
    (216/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.405369742 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.213856616 seconds)
    (218/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.173420559 seconds)
    (219/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.039276684 seconds)
    (220/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.188021681 seconds)
    (221/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.226552552 seconds)
    (222/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.575601263 seconds)
    (223/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.153246731 seconds)
    (224/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.111201508 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.16484346 seconds)
    (226/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.059207944 seconds)
    (227/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.145855523 seconds)
    (228/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.134504197 seconds)
    (229/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.440897958 seconds)
    (230/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.560219334 seconds)
    (231/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.282805255 seconds)
    (232/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.270901296 seconds)
    (233/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.050982785 seconds)
    (234/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.628829092 seconds)
    (235/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.375037443 seconds)
    (236/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.262496244 seconds)
    (237/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.037507906 seconds)
    (238/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.153594479 seconds)
    (239/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.11713387 seconds)
    (240/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.712770287 seconds)
    (241/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.334374834 seconds)
    (242/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.859788458 seconds)
    (243/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.048164391 seconds)
    (244/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.442004999 seconds)
    (245/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.132792855 seconds)
    (246/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.774321414 seconds)
    (247/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.046557154 seconds)
    (248/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.055745834 seconds)
    (249/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.037213151 seconds)
    (250/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.364513874 seconds)
    (251/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.366385935 seconds)
    (252/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.278818954 seconds)
    (253/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.346466754 seconds)
    (254/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.038666709 seconds)
    (255/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.269424714 seconds)
    (256/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.250926155 seconds)
    (257/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.308590057 seconds)
    (258/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.265074532 seconds)
    (259/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.155560655 seconds)
    (260/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.044039655 seconds)
    (261/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.377829846 seconds)
    (262/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.327773044 seconds)
    (263/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.74522752 seconds)
    (264/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.050955378 seconds)
    (265/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.557441092 seconds)
    (266/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.117596508 seconds)
    (267/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.339791517 seconds)
    (268/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.635298319 seconds)
    (269/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.334412167 seconds)
    (270/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.370930207 seconds)
    (271/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.047738614 seconds)
    (272/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.184705993 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.398677019 seconds)
    (274/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.138925165 seconds)
    (275/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.346703634 seconds)
    (276/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.354358942 seconds)
    (277/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.465681535 seconds)
    (278/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.120609622 seconds)
    (279/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.942536395 seconds)
    (280/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.068020333 seconds)
    (281/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.193834719 seconds)
    (282/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.286474159 seconds)
    (283/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.054705827 seconds)
    (284/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.434942818 seconds)
    (285/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.038063695 seconds)
    (286/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 4.95909332 seconds)
    (287/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.421266932 seconds)
    (288/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.701572679 seconds)
    (289/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.446476707 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.041033082 seconds)
    (291/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.999050744 seconds)
    (292/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.146762352 seconds)
    (293/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.527644912 seconds)
    (294/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.683091042 seconds)
    (295/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.040508797 seconds)
    (296/341) benchmarking ("sort", Float32, false)...
    done (took 5.752537583 seconds)
    (297/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.125947535 seconds)
    (298/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.041660435 seconds)
    (299/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.436772554 seconds)
    (300/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.055545661 seconds)
    (301/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.043008988 seconds)
    (302/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.586071712 seconds)
    (303/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.14277586 seconds)
    (304/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.130261837 seconds)
    (305/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.180458541 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.439921377 seconds)
    (307/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.043903753 seconds)
    (308/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.84820334 seconds)
    (309/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.139222985 seconds)
    (310/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.065258322 seconds)
    (311/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.122483565 seconds)
    (312/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.145324548 seconds)
    (313/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.179041894 seconds)
    (314/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.303625293 seconds)
    (315/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.13919822 seconds)
    (316/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.35067723 seconds)
    (317/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.043248707 seconds)
    (318/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.243261791 seconds)
    (319/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.349925494 seconds)
    (320/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.708572617 seconds)
    (321/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.156951776 seconds)
    (322/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.048150156 seconds)
    (323/341) benchmarking ("collect", "all", Int64, true)...
    done (took 3.887611073 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.999329625 seconds)
    (325/341) benchmarking ("sort", Float64, false)...
    done (took 5.764226654 seconds)
    (326/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.327241955 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.070209681 seconds)
    (328/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.173162658 seconds)
    (329/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.036918032 seconds)
    (330/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.047296286 seconds)
    (331/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.387061567 seconds)
    (332/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.924597175 seconds)
    (333/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.045856063 seconds)
    (334/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.058230546 seconds)
    (335/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.044020171 seconds)
    (336/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.853123222 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.265297096 seconds)
    (338/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.057577555 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.923746555 seconds)
    (340/341) benchmarking ("sort", BigInt, false)...
    done (took 7.048169912 seconds)
    (341/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.537640709 seconds)
  done (took 1150.861746139 seconds)
done (took 1152.913676544 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.080605836 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.065844545 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.048825462 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.073266874 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.161363078 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.109490945 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.063972987 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.053438364 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.100475939 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.09889082 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.049984622 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.107956086 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.051731313 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.050127948 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.053050493 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.065497055 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.420413251 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.09708701 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.068682098 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.063058218 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.070686707 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.052673835 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.102085792 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.106412915 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.05783691 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.058809864 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.054349529 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.069447275 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.163699887 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.054588009 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.055879443 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.062837923 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.420791132 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.090838698 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.050657425 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.074038257 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.064132685 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.063925551 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.056450378 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.084403039 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.580137786 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.057644092 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.053405706 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.051821334 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.05271832 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.060932726 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.054330309 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.060642046 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.067135326 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.070297607 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.565082772 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.071172842 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.05826179 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.051800002 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.068069818 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.053638833 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.059818091 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.070832229 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.071899399 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.070239228 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.402966962 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.10654857 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.056487973 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.071220191 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.062922546 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.645449467 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.072947132 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.06194927 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.580625667 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.068132944 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.648177444 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.083017105 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.056956724 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.068903538 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.08737951 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.420689323 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.094358108 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.057455309 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.06372523 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.051748968 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.067710765 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.071091402 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.059762843 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.05497344 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.072879722 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.112903918 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.067509962 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.057143523 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.069644141 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.07350903 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.064392971 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.069111583 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.06065178 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.053299345 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.070822945 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.060704139 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.058997038 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.058050198 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.061901964 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.068227534 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.579181181 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.076446434 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.056409722 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.05473701 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.056222664 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.070244507 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.580467955 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.064686791 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.077597628 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.105619679 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.061259651 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.409166154 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.103742781 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.075605755 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.069722487 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.060398743 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.056727383 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.407528118 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.611734116 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.076140873 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.059588509 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.053543004 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.072843601 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.060895732 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.055336329 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.424841531 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.101026049 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.072290532 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.180277535 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.071586803 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.091751081 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.0551688 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.061398532 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.113870863 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.074878668 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.090628751 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.061806697 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.072897515 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.076519775 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.056736569 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.069193643 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.073361173 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.058347356 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.064492141 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.054496018 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.115483061 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.07159256 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.073227812 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.0792369 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.180535344 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.056269932 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.408636749 seconds)
done (took 323.888304932 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.117071231 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.054387047 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.134788277 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.05425645 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.122283681 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.109625641 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.052420196 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.052330713 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.052866544 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.463085381 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.05693884 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.061076337 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.053688402 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.05864666 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.104980281 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.054020676 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.055965716 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.294045385 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.053173783 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.114640624 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.052954685 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.054567837 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.053318793 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.45784849 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.05463059 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.054344395 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.116305309 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.056718712 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.301145964 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.055821931 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.055883808 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.303025308 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.11885058 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.06919987 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.066224179 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.042466362 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.120095093 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.064505068 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.107008208 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.092291003 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.127435058 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.090648909 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.05721256 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.056946747 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.058289952 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.059067503 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.058085191 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.087930383 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.057244463 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.06260606 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.296139191 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.063110204 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.063952535 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.0577902 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.056618747 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.069240856 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.059259895 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.059167793 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.119071401 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.059431654 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.105244306 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.456956218 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.454269487 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.05474227 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.05855767 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.058793955 seconds)
  done (took 196.201429604 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.120920754 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.133032074 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.12623643 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.064886967 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.107137702 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.128048724 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.063614822 seconds)
  done (took 16.719152372 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.064617623 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.061070939 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.081648041 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.082462463 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.059265591 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.199760411 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.071682934 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.063319696 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.086142459 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.060406216 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.396927076 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.079345383 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.066010571 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.061070194 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.071425624 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.08756378 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.051848876 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.059698885 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.157715275 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.136593927 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.06337779 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.06821186 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.090396021 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.071113482 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.06032446 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.062528205 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.060210936 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.065823589 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.059729998 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.061515018 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.059104374 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.074362626 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.061943386 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.06227098 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.059332238 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.062249302 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.061703059 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.059987016 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.062053215 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.060204366 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.060587536 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.060447818 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.060452816 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.062667501 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.059149678 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.081815677 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.059981686 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.059457009 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.060671317 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.059891764 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.09188823 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.062322011 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.062257964 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.066146877 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.104561815 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.06773148 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.06121012 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.061407624 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.060969239 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.061876344 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.061693281 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.137941457 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.087443823 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.061758512 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.08382841 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.100390759 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.062642274 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.063068576 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.058903575 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.085395951 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.061034507 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.086772478 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.062631337 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.162596112 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.061662512 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.206326891 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.085632215 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.066277342 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.065041866 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.053542926 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.071003061 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.063869102 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.063589812 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.070717003 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.067618181 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.05945321 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.062948919 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.06712811 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.07109097 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.06296303 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.113354724 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.062221493 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.061909668 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.162819063 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.06239028 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.157035348 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.085127074 seconds)
  done (took 223.670018634 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.068978377 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.069226455 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.063613434 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.075046496 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.065046754 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.064299547 seconds)
  done (took 14.387026693 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.066131024 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.069617514 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.064106726 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.064346152 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.064725814 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.064050119 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.065785713 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.065875391 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.069776159 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.064292704 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.062884669 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.065976807 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.065713816 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.064931199 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.066137069 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.065032764 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.066618175 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.065061441 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.054144563 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.064912819 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.200357068 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.063323885 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.064415965 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.068785892 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.069824149 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.06408818 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.074725578 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.066803834 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.065609888 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.073711502 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.069963564 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.066774585 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.070346889 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.072197105 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.070221831 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.072125924 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.072040192 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.069064058 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.066565351 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.06714498 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.066110897 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.06545611 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.067980005 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.068011954 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.067007743 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.074687406 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.070882357 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.076180332 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.067558041 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.065950298 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.069614612 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.066727401 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.065765757 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.067071938 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.07257932 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.075319832 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.074175315 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.066830112 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.068830929 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.073038354 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.072535609 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.068264123 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.072213775 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.071570077 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.07575169 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.069817398 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.072154725 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.07205292 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.067424952 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.069468393 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.067455846 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.068770877 seconds)
  done (took 152.030616301 seconds)
done (took 605.013498599 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.143080825 seconds)
  done (took 9.126344791 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.180975821 seconds)
  done (took 9.262776858 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.9369604 seconds)
  done (took 12.937406214 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.082541594 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.086732616 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.084351358 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.072962245 seconds)
  done (took 30.331380131 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.2503 seconds)
  done (took 9.238323407 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.082801698 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.063047887 seconds)
  done (took 16.201208567 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.11006816 seconds)
  done (took 9.098202974 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.084725447 seconds)
  done (took 9.091308212 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.087614614 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.097895909 seconds)
  done (took 16.191712914 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.072137613 seconds)
  done (took 9.060625251 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.847944236 seconds)
  done (took 9.922301123 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.076932829 seconds)
  done (took 9.085046037 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.08281313 seconds)
  done (took 9.065249413 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.254552781 seconds)
  done (took 10.243374374 seconds)
done (took 170.839727815 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.08020668 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.067353368 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.067103544 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.064265552 seconds)
  done (took 30.265579646 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.106708839 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.107908721 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.116118409 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.10624646 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.095346607 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.095051151 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.103978445 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.104831641 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.095796939 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.104365712 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.105578335 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.099954339 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.106704365 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.11416055 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.113479671 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.105129194 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.106083133 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.104320522 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.097134856 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.113181099 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.115948476 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.106543653 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.07242771 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.071663103 seconds)
  done (took 52.458535763 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.262656729 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.139179896 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.225231572 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.121044463 seconds)
  done (took 10.733921403 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.073180108 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.137953165 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.123622515 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.116720627 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.158428587 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.17688764 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.126496867 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.28340703 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.188568457 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.201775205 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.079289362 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.093290877 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.099617006 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.12289455 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.177076216 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.073923457 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.074376616 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.188388586 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.136165061 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.282384821 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.075797081 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.126360984 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.159999235 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.126348912 seconds)
  done (took 53.391091641 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.075208894 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.079456119 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.081682076 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.072747728 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.076658062 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.073093356 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.083259265 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.07493061 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.0944872 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.075162578 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.075596478 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.07522762 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.081308676 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.075802932 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.070660044 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.089879335 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.091582454 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.077646488 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.079336141 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.083374498 seconds)
  done (took 43.57718515 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.074828437 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.921312726 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.420724588 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.324552722 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.072881413 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.071483716 seconds)
  done (took 32.876022674 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.088349409 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.082225952 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.074001813 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.133317214 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.21286523 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.079032866 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.076052408 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.08878015 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.124850059 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.141865664 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.090752166 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.105198969 seconds)
  done (took 27.289714877 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.075110883 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.078047406 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.077037337 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.084421811 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.086383306 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.085759002 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.082822729 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.07558675 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.086744901 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.096057414 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.083729938 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.090087733 seconds)
  done (took 46.999437251 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.291501107 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.301942057 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.29027088 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.731610963 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.650044058 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.058420914 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.360682497 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.286135369 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.806676078 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.829296367 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.364696482 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.132614237 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.029784798 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.998113624 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.993367082 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.319341648 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.077290259 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.932186068 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.329310301 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.138070345 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.073134504 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.077708418 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084688334 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.358983865 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.405556844 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.075645678 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.290022078 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.092603449 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.096685515 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.31030474 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.577122525 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.131919425 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.277929301 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.339351392 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.412017318 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.126995484 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.087753077 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.313599454 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.119849832 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.110018945 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.085527209 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.075638738 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.612758297 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.089243157 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.351075006 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079600538 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.083055869 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.077415957 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.000788165 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.397035559 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186519985 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.075325238 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.112625319 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.513933932 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.196266235 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.321366671 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.079616933 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.301017859 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136889575 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.33450085 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.247462163 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.081481365 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.288331699 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.003871122 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.448730096 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.200622193 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.078085813 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.08350217 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.776964897 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.323752933 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.161382654 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.418829072 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.842812191 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.078646091 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.082295884 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.090945514 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.175955792 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.074348857 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.375009914 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.080609542 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.001953666 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.175872779 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.481242156 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.086719463 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.07817579 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.087687608 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.9254983 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.079762241 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.177817673 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.359557198 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.400938345 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.079914229 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.080487388 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.10454078 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.084755244 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025826122 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.696222375 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.147115731 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.006249405 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.644890952 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.646127526 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.046873416 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.581989171 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.123546727 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.357148586 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.236133911 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.483126348 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.289492976 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.32323002 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.611425833 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.086580111 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.695903966 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.160609889 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156203134 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.079815061 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.64433462 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.323142601 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.399721869 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194027987 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.081168382 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.009729413 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.093721844 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.281356181 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.589009169 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.13588096 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.077326701 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.087136588 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.082343962 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.084356973 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.197199765 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099145957 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.375647653 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.155893135 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.080809589 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.01671586 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.082911869 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.365416374 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.846862395 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142370525 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.33653986 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.347284393 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.781446082 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109018691 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.114112386 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.35498754 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.15247589 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.155516552 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.65609853 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.217320026 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.179907879 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084309414 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.214495827 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.091339798 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.086365564 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.585270728 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.495633415 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.50781842 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.122894427 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.111586426 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.10248173 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.325770466 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.325837601 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.205149419 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.108299499 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.086171542 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.169750026 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.310060524 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.085605313 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.102944879 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.35035762 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.328034575 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.373879671 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.163660562 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.157482244 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.153266309 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.095251842 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.298482771 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.168164825 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.751247712 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.634021528 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.313852565 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.696479684 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.053933887 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.747264398 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.362552935 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.466065977 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101553157 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.53462104 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.327807366 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.818841014 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.113507303 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.610481876 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.010054107 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089493209 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.422585608 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.044334149 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.666192011 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.151323859 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.154881049 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.084478552 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.086027542 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094004301 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.085632069 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.184826334 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154577639 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.159060367 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.013661413 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.774209958 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.129342823 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.086028601 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.085406386 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.445304047 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.953401439 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.036186845 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.086239092 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.163640508 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.835354663 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.640388104 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.091303097 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.091998503 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.698771566 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.707136312 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.998096592 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.16631489 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.859386444 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.112921186 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.366614527 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.216319098 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.386468726 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.814580413 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.16056986 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.088454407 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08757995 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.787988716 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.097548419 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.788153187 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.377200257 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.362989155 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.525532063 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.151262262 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.301715629 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.101558006 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.08834826 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.586353062 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.111614716 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08978072 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.292334713 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.610035431 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.437960222 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.049194405 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.175829727 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.09958332 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.365792217 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.092629888 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.647251346 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.778347168 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.096338078 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118935314 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.339150623 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.774646581 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.093339738 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.068385476 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096316662 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.304513606 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.294813517 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.362369367 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.391550648 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.541436437 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.117303936 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095563472 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.148785628 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.336484637 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.090889413 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.130003649 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.541583058 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.167852744 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.520342601 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.372303362 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.507311262 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.726704107 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.357958058 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.158928995 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.105239799 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.738502739 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.226730769 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.024935935 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21210749 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.020966904 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.795874703 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.383830975 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.109406696 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.358308268 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072923235 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.442472929 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.390564874 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.38497524 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.138348173 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.119716027 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.092444695 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.138067621 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.105999887 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.337156161 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.215297288 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.099757951 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.682137091 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.139253627 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.139668968 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.100571165 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.616655008 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.115912501 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.095874459 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.790335479 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.752933081 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.214794747 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166574292 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.85705789 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.633545479 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.127668486 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.986582716 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.923014858 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.365030642 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.150858894 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.549896089 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.133046568 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.499441722 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.099922187 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.307799842 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.102706424 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.733570925 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.148458744 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.365879241 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053472494 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.307852001 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294466265 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.129712273 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.103978129 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.022184466 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.201825433 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.963647188 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.081100991 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.098797661 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.100168005 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.534438328 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.368373351 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.569277224 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.915994216 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.098157503 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.4758146 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.499308277 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.787025885 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134460562 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.096569695 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.451228745 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.87152891 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.432876268 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.393123572 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.104215469 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.747938918 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.309465275 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221460839 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.015442135 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.592660865 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.680998962 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.797921205 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.108682516 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.300817774 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.457583133 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.451573923 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138872169 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.171522871 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.501809581 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.361806097 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.814492284 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.024477708 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.098071434 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.493061855 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.125187463 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.195816963 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341065146 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.412124024 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.836779203 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.626594205 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.135745127 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.512995138 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.549664631 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.51072782 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311061619 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.472155356 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.430172675 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.981479585 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.514112339 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.311355414 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.19414679 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.377640871 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.97498048 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.810592334 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.343139034 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.105525008 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.028365138 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.308869439 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.229436273 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.597835417 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.625093749 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.106788822 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.39396309 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.572907321 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.636754398 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.360484436 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.12936596 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.067969967 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.125629872 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.121364243 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.105675814 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.600922496 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.397458524 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.115398547 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.043054128 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.772144808 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.028638537 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.312693598 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.359121155 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.144114586 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.657275957 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.38921496 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.206893697 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.396808948 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.41199412 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.144805609 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.026394304 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.867227692 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.050125043 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.174687531 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.526080783 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.116583755 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.106816672 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.305960569 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.029113025 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146578002 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.725049573 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.305009121 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.687389519 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.377024306 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227943185 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.346630789 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.409234165 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.103915326 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.061903487 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.375896145 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.021110271 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.807616201 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.788019777 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.807156923 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17422345 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106193345 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.104056245 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.37740542 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.460627455 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.318483796 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.62774395 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.141703428 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.125276963 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.459054689 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.195383324 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.106040525 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.110661924 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.628410802 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.345142401 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.121723277 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118969 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.317614905 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178702659 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.297609424 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.180429758 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.618461225 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.111959066 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109707606 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140342096 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.052247546 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.10268354 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.832427531 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.163988027 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.109792849 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.380771644 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.760955261 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.3087723 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.500864356 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.970580401 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.357451495 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.152500164 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.107428738 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.108012568 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.499458524 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.410609735 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.102045619 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.380523695 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.15283417 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.112183711 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118356816 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.074259008 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.106038163 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.876784225 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.993289817 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.83435036 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.503695212 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.120170143 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.149795531 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.107440756 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.034523054 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.131151818 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.138469188 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.115192216 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.24113236 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.376373594 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.176060092 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.197686916 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112353243 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.109299622 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.117031425 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.320512559 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.62108622 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.124951763 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.809099157 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.313784383 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.116672863 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.607957157 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.562374505 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.435083331 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.151750805 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.370750825 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.358623968 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.651101155 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.379296042 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.090814118 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.331383809 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.109810713 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.380589111 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.380992641 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.10857394 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.321041614 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.629023946 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.401355421 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.135325876 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.736795293 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.175842908 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.366411699 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.020319674 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.107585782 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.112771112 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.376554888 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.165826481 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.109454388 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.117841152 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.666227664 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.815704699 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.576827061 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.268070988 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.483308256 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.905197826 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.861673471 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.112017497 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.037064545 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.122631763 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.13126512 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.112831123 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.111378516 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.865734266 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.830812794 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.322780438 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.42099976 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.034771013 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.312788416 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.711118439 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.034465997 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.077988064 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.11095357 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.368563108 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.036415772 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.114572099 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.138681422 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.149958526 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.874834157 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.386564511 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.11132601 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058153344 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.114020917 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.114527758 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.111129163 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.199328855 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.109966581 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.228214311 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.376560951 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.52784093 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.218146085 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.751835744 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.883130676 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.045981639 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.150318418 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.724279403 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.681787973 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.15180662 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.920286945 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.883904577 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.056404683 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.114690271 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128873041 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.37691589 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.113622768 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.117972544 seconds)
  done (took 2301.174358089 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.13466406 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.31526699 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.146286473 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.218038182 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.180560303 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.165964581 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.13869192 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.153271385 seconds)
  done (took 59.481516337 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.111584249 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.109618736 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.534518028 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.125787735 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.141504165 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.143595219 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.389289216 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.146918308 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.132242062 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.133255758 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.130217889 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.128715212 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.462647869 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.166360197 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.131544998 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.125184399 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.11472944 seconds)
  done (took 81.292071402 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.127220167 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.403327066 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.178132146 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.124624731 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.840428558 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.129662259 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.07722009 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.162877219 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.131810398 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.504702733 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.424905938 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.157937818 seconds)
  done (took 93.304601482 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.131439505 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.124185543 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.122955016 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.122957488 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.124840661 seconds)
  done (took 12.674001156 seconds)
done (took 2847.568818122 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.375305253 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.183521704 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.230583637 seconds)
  done (took 6.45702005 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.273779051 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.316184636 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.434398275 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.437582141 seconds)
  done (took 11.513371129 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.4087717 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.506519459 seconds)
  done (took 6.960280307 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.550232952 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.1310842 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.5153378 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.126509474 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.129728484 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.12817516 seconds)
  done (took 23.433327209 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.12545107 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.126700782 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.125320472 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.125941757 seconds)
  done (took 10.547016823 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.122163748 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.875655324 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.126097562 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.140530116 seconds)
  done (took 22.308734513 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.32092799 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.218191657 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.892203422 seconds)
  done (took 10.475214779 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.748780037 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.576565045 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.738103681 seconds)
  done (took 10.106958781 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.976164498 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.943846988 seconds)
  done (took 7.96407004 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.270605304 seconds)
  done (took 4.315148572 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.957658332 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.439121171 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.613624097 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.70232712 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.750011227 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.374375953 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.458004165 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.401502716 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.542767039 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.602270874 seconds)
  done (took 27.887345746 seconds)
done (took 158.583867107 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.567226419 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.154326841 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.334327468 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.510312505 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.373141989 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.334676385 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.429693664 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.498630302 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.181366947 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.158635726 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.503819969 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.374318161 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.363263669 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.148302839 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.378364886 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.147006041 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.381079835 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.728587455 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.186781757 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.424963934 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.436722623 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.150108654 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.350719575 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.165882081 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.387148706 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.292565904 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.752882431 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.145655748 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.331191062 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.76523863 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.296027726 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.571089931 seconds)
  done (took 177.869289282 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.003754724 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.126809764 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.127391146 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.127300208 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.47685915 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.127276754 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.127010542 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.12884129 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.330130476 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.314000265 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.127637748 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.465367079 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.130625064 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.127798715 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.129861773 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.126855819 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.445086824 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.048103814 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.128982889 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.128210712 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.127331375 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.352293473 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.127023015 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.376528783 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.437011721 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.128985634 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.127705128 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.127669628 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.128886468 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.12809097 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.127876396 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.12996115 seconds)
  done (took 216.116818482 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.130381121 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.130185442 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.130440907 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.128689498 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.131098701 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.130333843 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.12955534 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.128823127 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.822371884 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.808708449 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.131468575 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.130165458 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.13332737 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.129271219 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.129960039 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.129754871 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.130011861 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.132651882 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.129538545 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.130105142 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.133171949 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.008767296 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.130244138 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.02288062 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.131142375 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.130577903 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.13061473 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.130283061 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.129189909 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.131737766 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.131011161 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.130888013 seconds)
  done (took 229.367876933 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.375323434 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.134409741 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.135509 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.140582522 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.134953182 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.1325947 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.133068546 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.380504916 seconds)
  done (took 21.617952292 seconds)
done (took 647.032742384 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.501879571 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.875311703 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.26785044 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.156785542 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.393179776 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.202844906 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.15021578 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.21025005 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.800863766 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.223260317 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.547937374 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.160855168 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.853968683 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.180640088 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.270085049 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.20662321 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.506332095 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.759731828 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.290535245 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.819589516 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.308149434 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.065980621 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.233313401 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.84249092 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.557168872 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.100762523 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.165004876 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.501565709 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.156715468 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.301919622 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.79846677 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.411681826 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.169194454 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.155075368 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.207923469 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.183760001 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.354570495 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.167326452 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.267159877 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.878826591 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.828145265 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.681136008 seconds)
  done (took 110.764564047 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.141939126 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.139741093 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.141723171 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.140127607 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.149138076 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.138515676 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.141348264 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.13984483 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.142575064 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.140831626 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.142088296 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.149036807 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.141926555 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.152102457 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.14229292 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.140343811 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.142392881 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.150299857 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.144271334 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.142618943 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.141696812 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.142468078 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.137781717 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.14229816 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.142146216 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.141947694 seconds)
  done (took 57.776418761 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.137019152 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.308849627 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.375207955 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.158030448 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.13592007 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.141654501 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.167817211 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.14297166 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.139159986 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.139907382 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.240588179 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.141710383 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.151555925 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.375940875 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.156191767 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.136802563 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.13723681 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.141891464 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.316490681 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.156302331 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.169798187 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.145022976 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.169181314 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.154020529 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.142205625 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.142531453 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.141608535 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.57719132 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.152198149 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.239820645 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.196014846 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.172439091 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.500084177 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.389901962 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.196877224 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.147683621 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.138231806 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.290401287 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.151859786 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.137386108 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.168634104 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.145833084 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.37982321 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.665840087 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.154877358 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.137041533 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.575559287 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.302280209 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.19026563 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.152687694 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.388540436 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.159817824 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.13813109 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.141874435 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.178889533 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.152418085 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.140688484 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.433546767 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.156981558 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.169305968 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.146220853 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.140149365 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.324649531 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.1502456 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.309434294 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.149600507 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.14820929 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.144211585 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.381091229 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.16011845 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.675577371 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.155742134 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.1398864 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.243021448 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.314652005 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.59649093 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.155308724 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.326926749 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.521101711 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.181379469 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.152730994 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.556996538 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.183736566 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.150573185 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.141219247 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.143098027 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.140505958 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.186533317 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.169049096 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.586397588 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.677192483 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.44841052 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.182418155 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.157203694 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.144168158 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.435885342 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.15147126 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.141185817 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.374339385 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.689046564 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.156886055 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.14821259 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.650190952 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.158341069 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.172528414 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.153493902 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.395632968 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.160267154 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.185434656 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.143374429 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.151496021 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.147839212 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.172609258 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.153410046 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.140589738 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.646587896 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.307656995 seconds)
  done (took 264.36739631 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.146534817 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.141218444 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.141474342 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.141413211 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.142175614 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.14377042 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.140335509 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.142504586 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.144249623 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.143024927 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.143427735 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.14474522 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.140823597 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.150738023 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.189241101 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.145039156 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.632615911 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.144699247 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.143861531 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.145121205 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.715566808 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.150093181 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.142136106 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.143866238 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.144670611 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.145763947 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.149027572 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.18599267 seconds)
  done (took 175.251952979 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.1455488 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.202847297 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.15837471 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.191962935 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.158725385 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.142797109 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.17044571 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.160947934 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.150444261 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.143536776 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.145093414 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.176819961 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.150879664 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.235282626 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.174926927 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.177060763 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.245579367 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.150032509 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.144768237 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.145434058 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.193834176 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.156831534 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.176945441 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.207575257 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.157399388 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.198776021 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.158327355 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.143607244 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.147692856 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.261622244 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.165556475 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.178352295 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.18135526 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.164418904 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.26231833 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.260262055 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.247553835 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.176863832 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.150456421 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.146493926 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.147411696 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.147152925 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.20105717 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.159722619 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.147578676 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.263183649 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.165067884 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.144300501 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.16654359 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.147212181 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.160449529 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.163623104 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.181124369 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.273519597 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.184464868 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.173652105 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.172380937 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.163984642 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.149005504 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.24261893 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.15190187 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.263058561 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.166622144 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.147610544 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.150188089 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.152416546 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.197162574 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.185268193 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.248165943 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.153245566 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.246752108 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.203028511 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.160708889 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.147394548 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.148312493 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.204809865 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.259042762 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.203135996 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.199566533 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.183614873 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.144682571 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.147737148 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.138629346 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.175792128 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.155847349 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.262318444 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.264089399 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.15664662 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.148232924 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.151233662 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.14979309 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.174655921 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.212481716 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.190203711 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.255820821 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.187760099 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.188807171 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.154505666 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.164401895 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.151344349 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.186143231 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.158761906 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.161801396 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.496599853 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.193700904 seconds)
  done (took 231.273016152 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.505022606 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.19350311 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.222202208 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.431572298 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.517766824 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.112331849 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.189491448 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.198760911 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.209390201 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.323187017 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.257236463 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.246190576 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.186791411 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.170470528 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.193015939 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.211174972 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.226169813 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.488679469 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.307752348 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.690932753 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.195287269 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.470832829 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.501290018 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.530338 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.241173774 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.582171945 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.811051648 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.293268082 seconds)
  done (took 70.580637874 seconds)
done (took 912.064684736 seconds)
SAVING RESULT...
DONE!
