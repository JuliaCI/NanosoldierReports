cset: moving following pidspec: 20646
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.879869042 seconds)
loading group "shootout"... done (took 1.260181005 seconds)
loading group "string"... done (took 0.659122991 seconds)
loading group "linalg"... done (took 8.677574978 seconds)
loading group "parallel"... done (took 0.170257715 seconds)
loading group "find"... done (took 2.976613713 seconds)
loading group "tuple"... done (took 2.135728783 seconds)
loading group "union"... done (took 15.06472093 seconds)
loading group "dates"... done (took 1.464285436 seconds)
loading group "micro"... done (took 0.223252498 seconds)
loading group "simd"... done (took 4.841342067 seconds)
loading group "io"... done (took 1.093143829 seconds)
loading group "random"... done (took 9.59424362 seconds)
loading group "problem"... done (took 1.544036112 seconds)
loading group "array"... done (took 25.401110908 seconds)
loading group "misc"... done (took 1.910608662 seconds)
loading group "scalar"... done (took 43.945745227 seconds)
loading group "sort"... done (took 3.356568233 seconds)
loading group "sparse"... done (took 12.868166617 seconds)
loading group "collection"... done (took 18.832043518 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.534760366 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124418188 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.13123326 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.124645855 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.191035017 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.124007961 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.133673714 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08786119 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.865162895 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.146305107 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.117830643 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.444695879 seconds)
done (took 5.438147717 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.30270738 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.092862575 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083810569 seconds)
  done (took 1.365268754 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.07206774 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.06132331 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068245249 seconds)
  done (took 1.38436199 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.06729354 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135835773 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066787053 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.06701995 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.068431141 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.068090982 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.068386894 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.071112559 seconds)
  done (took 1.733244735 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07258752 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.06783341 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.065995077 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.06959179 seconds)
  done (took 1.463563789 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065726897 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123573464 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065696496 seconds)
    (4/4) benchmarking "different"...
    done (took 0.066213424 seconds)
  done (took 1.506882941 seconds)
done (took 9.038204628 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.246129163 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.105125644 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.295385669 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.447213375 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.62145594 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.095682891 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.07673151 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071678393 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.128570152 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.329314961 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.104738973 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.183986158 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.093996128 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.173156661 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.016040369 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.122338563 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.088577852 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.125990134 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.097099109 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.135675127 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.453968141 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078478688 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074328405 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.071154596 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068865142 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.663069343 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.686046819 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125314109 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086656647 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162245613 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.116840099 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.695058361 seconds)
  done (took 11.062020135 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093735649 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091362505 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.070945885 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.126197712 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.096959431 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072167827 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077681571 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.069440653 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.091546837 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.1275237 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.093030161 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.101574823 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.068706205 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.071008101 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.076374032 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.204831576 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080598747 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081398542 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068102179 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.08097947 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.105983152 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078552337 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.07866632 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078148296 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.12946273 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.170346306 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.100081151 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098975538 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066406164 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.078842266 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116278701 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.126498004 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069173275 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.069954408 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.122958881 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.097852075 seconds)
  done (took 4.666895225 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.903092344 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.096554458 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103287869 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.655725137 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066842783 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.152149287 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.241861657 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.075789568 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.27997014 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155105894 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.145854242 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.152104855 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.121514457 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.071724562 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.165143754 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.12233374 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.557293074 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069011822 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067976042 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.066357021 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.06834977 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068014937 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064153431 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.093181484 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069779801 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.096557299 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088728308 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.163997361 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.988871051 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.307635889 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068554548 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.168039034 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.088718488 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.44979809 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.072493755 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.084837858 seconds)
    (36/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.06541044 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.475276756 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.124704084 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066695094 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.165534565 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.117981641 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065218422 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.121507932 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079739365 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.06981373 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070356114 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.492669944 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069997743 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.07257763 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080028841 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102610473 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068338247 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.067334284 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.17438606 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065680819 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.068484088 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.069709225 seconds)
    (58/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.066650215 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.151505876 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065638704 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143383447 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.065143437 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070763658 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.106091391 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.071699471 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.089446809 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.098672892 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.338410317 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.085534483 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.071163894 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.048597738 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.934120146 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.079453761 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068193259 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072493644 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06867777 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.070135375 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069574945 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.074222535 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.073321294 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071278503 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.114017931 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.06966258 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.066538855 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.075971895 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069785148 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.07444049 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100432378 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.067841684 seconds)
    (90/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.066230218 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.571665495 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098163565 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.186158617 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.078789961 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.108444163 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.070653268 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.07388878 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070675298 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.069704105 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068237756 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068870024 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.071806083 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.099754963 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072613639 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.115674279 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.052011551 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073460228 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.068900405 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.074807918 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071899201 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072546369 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.069102587 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.071219568 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070884985 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.067227115 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.109955038 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.125893102 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.068540676 seconds)
  done (took 23.076591293 seconds)
done (took 40.898384504 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.314798713 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.081244064 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.081348565 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.081402215 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.081461763 seconds)
  done (took 1.884866997 seconds)
done (took 3.167839513 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.135334309 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.08781852 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065821795 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.103443468 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.070842525 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.104143924 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.111407835 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.107191386 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.070402363 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.070772625 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.070704894 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.105314393 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.107502488 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.07065142 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.100332975 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.106410963 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.07092328 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.066074323 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.071068636 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.071057321 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.070777906 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.069464349 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.070814472 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.070332246 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.101801869 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.070903968 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.066980665 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.101619926 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071175831 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.100418331 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070292389 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070710571 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.071325879 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.10244876 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.070655527 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.101080598 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065535832 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.070569976 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.070885082 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.071073064 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.071226442 seconds)
  done (took 4.686855045 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071803402 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082304044 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084677589 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.064196366 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.073397089 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084804807 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06442728 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083547226 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.090764878 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084168777 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084654266 seconds)
  done (took 2.158590824 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070759463 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083874495 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085281813 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063916033 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.075820883 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08557606 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06694429 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.085129839 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.087954323 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.085703893 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.085749475 seconds)
  done (took 2.147582958 seconds)
done (took 10.255381414 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.096749158 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066728442 seconds)
  done (took 1.419641719 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.65071977 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.331317358 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068069896 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.088700361 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.198660065 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.094830167 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203637845 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.073211984 seconds)
  done (took 8.154945908 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.104912802 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069691354 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.071482428 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.071298198 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.069279685 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.072064245 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.070105918 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.071037504 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.070413369 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.069903785 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069990241 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.069864115 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.070888646 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.072211911 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.070765783 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.069824957 seconds)
  done (took 2.53054641 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.100647528 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.101149858 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.074139076 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.075448866 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.073291056 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.073151551 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074788315 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.074484882 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.072476887 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.073867511 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.075512967 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.073902272 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.073519772 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.064622329 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074980494 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.075619795 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.071636604 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.074950192 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.075298295 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.076519693 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.075063816 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.06434134 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.073226463 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.074458774 seconds)
  done (took 3.204725944 seconds)
done (took 16.581177845 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17545509 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.076151119 seconds)
  done (took 1.517866221 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068020774 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.069107017 seconds)
  done (took 1.420304208 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073509638 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061523833 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080798052 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07239255 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.063503081 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.063328311 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.079265969 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.063689797 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.063067892 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.063172997 seconds)
  done (took 1.966708355 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063679423 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069155696 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068332297 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.066313787 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.069247739 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.064083283 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.067315475 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.064900096 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070970013 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.063614964 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.067481915 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.084674163 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.06678832 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083597443 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065689136 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.06592221 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067435036 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065396886 seconds)
  done (took 2.520817096 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061352277 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062435299 seconds)
  done (took 1.415257607 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064876749 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062160115 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064546489 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064508188 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.064023066 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062876242 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063846065 seconds)
  done (took 1.731994846 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423262697 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.125842452 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.346935126 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071956934 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076559611 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.257237805 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.065623263 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.070310398 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068703386 seconds)
  done (took 2.837033256 seconds)
done (took 14.704011536 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082469948 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182517889 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088396286 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.406603562 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091354882 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067779118 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113199315 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.166855488 seconds)
done (took 2.507401459 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214909448 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.16921559 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.368965401 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125741745 seconds)
  done (took 2.957649854 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.336397578 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079085867 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.078903888 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.066759322 seconds)
  done (took 1.865983745 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065735794 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072087312 seconds)
  done (took 1.435268113 seconds)
done (took 7.780516243 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064716983 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064240567 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.09509123 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.065921072 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 0.06547325 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.065018175 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.065856613 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06611951 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.076306071 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.065613937 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.066148655 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.072259962 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.065641147 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.065425494 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065851345 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066177503 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065636946 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065497821 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.066116513 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066166138 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065422174 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065233443 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.065872468 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066360192 seconds)
  done (took 2.948392491 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080119307 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066699882 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.068326358 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.068352698 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.068844952 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.068701593 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.068956046 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.068007824 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.068728943 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066098183 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067834763 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067508401 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065626151 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.06821739 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065765518 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.069444677 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.069518613 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067948747 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067228935 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069628859 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.068984319 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068081483 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069156065 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069085152 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069405024 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069918668 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067285134 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.067837223 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06927062 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06976687 seconds)
  done (took 3.374192656 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066837714 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060571212 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061081219 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070822325 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061376808 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.06116062 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061199573 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060393113 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060808246 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062012872 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061210952 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060612185 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061641792 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060334888 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.061003056 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061264103 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.066233692 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080029064 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061435698 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060790733 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065545993 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.06200094 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062335391 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061817383 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.062917182 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062033877 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062029856 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062680282 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.062226872 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.062616017 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.061515391 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066159899 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067278961 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.062113404 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.07270227 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.067032256 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062140378 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.066441525 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.063177133 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.062362961 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.062047794 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.061891359 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062399587 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.06187048 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072679994 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.062575233 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063660023 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.062688014 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.062354753 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061897124 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.0619394 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.064135265 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.067851156 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063411265 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061799441 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063056114 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061823685 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062757411 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.06226703 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062413365 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.061669745 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.068517795 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.063669451 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.063084807 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.08188423 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063498126 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07217924 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.061848847 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063064389 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065598165 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062674227 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.079844049 seconds)
  done (took 5.92687874 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.081957576 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.088380056 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067386797 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067302435 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062892751 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063197318 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070334918 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062564729 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067026919 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.083095264 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062983323 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067450176 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067646174 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067046523 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062748888 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066988566 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.070796639 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062514961 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.062661708 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066791562 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063500279 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070094147 seconds)
  done (took 2.834387286 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135322172 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067108892 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10749945 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.076439917 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070309868 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07699816 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067820242 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.067935354 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067789592 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068668294 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069110327 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068380369 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070650672 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068890675 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068763037 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.068525621 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068168045 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068761719 seconds)
  done (took 2.673519151 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076779374 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066695721 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.089182264 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067832214 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068293733 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068052804 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071218973 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072053524 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067940049 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.067667122 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072042514 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067364722 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.067523022 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067615552 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06729509 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068131616 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.067862124 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068024949 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.0718377 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.07112643 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071535631 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072431699 seconds)
  done (took 2.864570361 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07722377 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065649415 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.082549976 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068266399 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.06239877 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062603685 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.067976589 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.067024418 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.067409666 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.066933099 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067170712 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062710059 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.068614382 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066888069 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.068749192 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067256613 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066702186 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.06750928 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066625574 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06227489 seconds)
  done (took 2.671082682 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087430263 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064443388 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064965809 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.084151669 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.065288355 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065462711 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084783027 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065902332 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.065079162 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087058392 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065278995 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065351524 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.085077085 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084832944 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065482397 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.08524715 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.084613094 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.08471364 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065275024 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.065096332 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.086943034 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065534228 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.085001228 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064979017 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06508043 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064862786 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065349431 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085174362 seconds)
  done (took 3.387366299 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065052917 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06404703 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.065364021 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065734644 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065489756 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.065901284 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066241545 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066200653 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.066200776 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.066238655 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066151682 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065880191 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066381556 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.065380019 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064663704 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064251696 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064273116 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064952811 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064144169 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06462836 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064158709 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064552025 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065163591 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.0655422 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064717681 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.063888183 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064548201 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064946857 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06426254 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064455935 seconds)
  done (took 3.279161232 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073685158 seconds)
    (2/2) benchmarking "in"...
    done (took 0.071545164 seconds)
  done (took 1.470277735 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.06217566 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078249025 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060520309 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073007461 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070155048 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.068523745 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071719512 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070622307 seconds)
  done (took 1.875052199 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067514931 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090846027 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062881104 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063025727 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066605815 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132096496 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.076434409 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075926047 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077572249 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066837754 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.065253402 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076826869 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063560836 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.077505954 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065606957 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.072836482 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071287027 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.081668433 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076970649 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061764924 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.076673081 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064837114 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.062806501 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.065184408 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.064235494 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.070623708 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.080485308 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076484882 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072460525 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.06194739 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082998033 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.06299607 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064141588 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072771609 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.067155548 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.062990319 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100336192 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063856825 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.068368439 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.062741956 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.075635308 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083660691 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077756256 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.081552373 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064552199 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06527159 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062231558 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064691073 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066331581 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.07207247 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062676443 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070544231 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.062282542 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064450057 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073611996 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.063130874 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068226128 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.072369442 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.076985643 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.074320283 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.072272881 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.078765197 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072179496 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.070858835 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.063626468 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.082779891 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.064974937 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076269899 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078445144 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.064071231 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.076054261 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.062480154 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.061721787 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062207458 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.097076809 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064801682 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.064176126 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.062899026 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.063022046 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064281772 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071305891 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066973013 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068980338 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065084175 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078029429 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072937921 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.062877671 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.069430174 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.081408222 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066283832 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.062958931 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.079842556 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.06625867 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062536656 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.080882982 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.072865203 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064550052 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.063676886 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.0659566 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076785275 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063641181 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061542166 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.071174753 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064385282 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.064540539 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.066307122 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070241998 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.06225161 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072372236 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067370213 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.063444795 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.060634546 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066056536 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062956131 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059132811 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069660258 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060281392 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07428271 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066876685 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074852955 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075293692 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071451541 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.078139814 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.061768309 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059956343 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078157051 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069472138 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.198728555 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081841484 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063407339 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075372693 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063030883 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063825397 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072101109 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061505199 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064428797 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062140576 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066981688 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.062967397 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063883444 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067304322 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070622202 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074315616 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062765034 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070906475 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062087538 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.078353666 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072194678 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067016745 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065075999 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062440355 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.074256059 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068509348 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071049684 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061224396 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062063722 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.064630818 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072362324 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071428207 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06333422 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068572694 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066173285 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062854741 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061973808 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063205025 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065279491 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065364062 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062633816 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070066064 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071094644 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075569706 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069483581 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071871707 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.062376279 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062397552 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.065353107 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.06296453 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.067738476 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.072564128 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.078908462 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.074995276 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.084934024 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.063163317 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.072818672 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.065020452 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.080573809 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076917207 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.06439203 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.068201075 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.062301947 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065035356 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.072618604 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074676017 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.077215731 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.078311998 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.067869941 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.067274119 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.062787206 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.078090323 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.063806208 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071798377 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.072784733 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.068432758 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.062908459 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.064794559 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.071970419 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.067219194 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.063228352 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.079382777 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.069563327 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.062872128 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.078027397 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.063469619 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.073874999 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.062998874 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.066793576 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.068438554 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.064966684 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.07285211 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.078614713 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.062415083 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063579472 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.078642331 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.065046585 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06465041 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.070206368 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076223482 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.0659528 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.06912882 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072391498 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071496791 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.067082162 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.072825322 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.063805485 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.072271123 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.065853836 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.074777008 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.062884456 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080622093 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061427353 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.077964012 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062792984 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.07254964 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061496729 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069665309 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062748701 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.079366617 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.063645852 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062326579 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.073694447 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060137324 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070610623 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.061070671 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.06674581 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.068104328 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070819945 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062995491 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070782619 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.202297998 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072167454 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068305117 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070990994 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.072178919 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066813342 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062018922 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070980179 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073324416 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070242226 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063371607 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063362636 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062804096 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071523181 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063886096 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063663288 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070176172 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.06617435 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067331207 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063294884 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063496728 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063613776 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070349111 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071609035 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080112781 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070703398 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069928776 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070934888 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061661416 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.077290261 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062188615 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069621013 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060944727 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.069532133 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071359254 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062424128 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081173204 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063405028 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069507664 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073997337 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07052134 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065547657 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080353297 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065320449 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069959891 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069706835 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066623452 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068361389 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063615926 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070865726 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071938291 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.07236965 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.06252359 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069197767 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070736104 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063420656 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069309569 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065904286 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070070226 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063093169 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060753334 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066264853 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073491301 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066281682 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066871434 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061839551 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.061164152 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06238148 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068406736 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066847449 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070643652 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077166077 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060782405 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062886382 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061568063 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065492992 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.081214764 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073210105 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.07168424 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.068007717 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.062681883 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.064890586 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.066084816 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.063711845 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.066901554 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.062376341 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.062845184 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.074256415 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064967386 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.067860795 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064284661 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.064439051 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.073044318 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.068445359 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.064616761 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.070447868 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.063126687 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.068432452 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061426785 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063259098 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066067383 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060859927 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065151238 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072203623 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077700331 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068573538 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070564101 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062731509 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069429886 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076846047 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068584227 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062053777 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070293072 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060058653 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.078759732 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070779521 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07068432 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.072236598 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.063981543 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.078820698 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.066554905 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071931859 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077419293 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063200747 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.068265272 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.061103212 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077243066 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.066328259 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.060991713 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069296844 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.0696145 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067697608 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.073576151 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.209931176 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070807143 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06796796 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066342855 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.06468305 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063673404 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071579597 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078145741 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063394671 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066625278 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069919658 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070438658 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066600645 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074677637 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070156257 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063337838 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063525477 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065175919 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062273052 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.07359575 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062161731 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066471395 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066754962 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061473305 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069769207 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.080748114 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.073388439 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.073574678 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062419299 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.062124652 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.08121262 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.066626511 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066296475 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070342122 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071701927 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074230361 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071276996 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078544781 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062681351 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067383932 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07488705 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.064086794 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.063254272 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.06680159 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.064392356 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.072739674 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.073142001 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.070817199 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065592513 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.070035175 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077106823 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.064748438 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067604737 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.068008396 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063107022 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072088096 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069586914 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.07022466 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063409269 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061390773 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.066311632 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071979779 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.071181872 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.072531422 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.064536753 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.069956821 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.077927634 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.071296472 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.066981247 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.063046039 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.066580417 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.072451729 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.068028119 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063025763 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.068003 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066856209 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.070681173 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.072926095 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067837446 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.062557041 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.080276182 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.071524451 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072653402 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068554826 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.065687261 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063683785 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.062870773 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074846442 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.063018007 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.065064208 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.068794675 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.065244059 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.08130622 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.071729856 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.079988536 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064546016 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.067956198 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.063426543 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073227351 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.068414664 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.0640109 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.074211521 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.062343568 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.079060425 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074990076 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067567 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.083539189 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.068160957 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.07153594 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.078225603 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073094832 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.072644439 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.066280185 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072368903 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.064604844 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073878919 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061336025 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059961371 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070782974 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069592796 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072788549 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060211874 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070221041 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062527606 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.06861761 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068091187 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062148006 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062873342 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.063875889 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070965792 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.065349395 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071211127 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.211808766 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.081075057 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064941989 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.075644096 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.073123862 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.075210031 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.077820188 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.076184131 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.0718834 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.06444122 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071902242 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.071691954 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.065027541 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.068150237 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.067118272 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08407193 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063734136 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063518839 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.077898314 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.070444364 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.064430986 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.070723579 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.068412016 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.074106097 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.065039867 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.073965278 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.067015317 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063816809 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.067387828 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.068081353 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.062189746 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.062866273 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.063242661 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073361449 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.068070826 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.063608053 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082226549 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.064881902 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070921062 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073468868 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068251072 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063497097 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061221757 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063145759 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075078611 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077122197 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065451054 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070327451 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063542944 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.070986318 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060640125 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070339315 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069692018 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070238638 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061298042 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061806918 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076769231 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077241171 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.067413342 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.072571691 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.071317913 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063177292 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083155431 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070670973 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063192398 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072722128 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064432654 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061125601 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.06082664 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063250456 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073329613 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061659639 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.063996387 seconds)
  done (took 42.973796451 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100055854 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062136882 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061401101 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061753771 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072507924 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062493754 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061334395 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063822845 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.064032067 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.065173184 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.063091901 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062981846 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074089891 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076661223 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073619151 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067168899 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063021678 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.064176109 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063290107 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063846071 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073623877 seconds)
  done (took 2.865318299 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067649954 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.076635409 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.074356214 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.079734542 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071390956 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.067373686 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.074622643 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067429654 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.075368184 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072295486 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.074278595 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065933357 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.071063363 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.071383543 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070555284 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065499896 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.076307288 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071153042 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.067172557 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.074746523 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067451665 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.07430863 seconds)
  done (took 2.998856581 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063191084 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062014364 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070532299 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061705128 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061193964 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.065095181 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060982045 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065904503 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06535177 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066451895 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071829896 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.063400062 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.062116479 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.068378643 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.062039405 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.063206006 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.106032169 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.064294828 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.063871418 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.062465254 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.065200133 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.072123779 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.062288828 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.062468574 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.067188169 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.066316685 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.062567903 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06579047 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.063167964 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066833509 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.063952883 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.062289081 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.072058191 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.071055876 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.066882627 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066707063 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.064392117 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.064076389 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.062894312 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.06247335 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.071464486 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.064028228 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.062975617 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.064413814 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.071933814 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.062958593 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.062269067 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.071919851 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.062867327 seconds)
  done (took 4.659534242 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071257424 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113381207 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066999612 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095140358 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073496823 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067184853 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067262256 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095439819 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062488388 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063008817 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.07471089 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075069603 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06436925 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065374571 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066786594 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064034642 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.065112263 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063273178 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066205712 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063547029 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066747333 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068029785 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073244681 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.074390367 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.06488418 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063328431 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063739144 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065537199 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.07441208 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067307366 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065332539 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066163215 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074472925 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.0686475 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063576528 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063797992 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.0748445 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064456683 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.06451731 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062538738 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06364155 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065529772 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068808442 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.077670095 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065977327 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.070576042 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.066356796 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.063565887 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.076436059 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.065427776 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.069768617 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.077735683 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.066761596 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.069095411 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.067313675 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.07622917 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.06589805 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.064672185 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.065989029 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.076153426 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.064038307 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066667851 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.076903066 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064864609 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.069125526 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.077932787 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.070653831 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.066897915 seconds)
  done (took 6.305660986 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070859703 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096074707 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073884824 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074442128 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073286837 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.073479485 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073690027 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073538476 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073585238 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073994228 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.073864247 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.114572332 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.07005614 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078186275 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.073364963 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073928984 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073517332 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073826331 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.073477316 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073256465 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073727826 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073916714 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073661637 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.074100688 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.07609202 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.070066461 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.073557463 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073637696 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074104371 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073335703 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.075985217 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07334201 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073889916 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074161124 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.076284063 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.07617385 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.063849978 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073646242 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.074152037 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.073455442 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069810737 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.074158166 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.073727533 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.069657114 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073714514 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.073175821 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.074023618 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.076108421 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079561517 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.074062873 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.073850335 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.074481758 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.073354454 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.073612038 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.074313592 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.080763062 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074131716 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074519515 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.073804798 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073930602 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.074005234 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.080479254 seconds)
  done (took 6.110621717 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074677626 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.0677182 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080294467 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062053591 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061049046 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070809247 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.062257524 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.062910034 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068261409 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069002616 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070841757 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070645336 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073154597 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.071311013 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.072624982 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.074331172 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.072474102 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.072237716 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070170521 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.072657539 seconds)
  done (took 2.858554413 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076410122 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080078494 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.068113681 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071137021 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.0665947 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.070703088 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066389638 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066883589 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067286082 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067045839 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071518963 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072482997 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067858506 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070556272 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071190206 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070709841 seconds)
  done (took 2.568942353 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067894276 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068548915 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.067881842 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063304208 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.065989373 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061641017 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062608839 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061559191 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.061745322 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075257062 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062180177 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.074507752 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062503398 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061267556 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062041162 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.068212239 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061637685 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062588353 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062556699 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066188985 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.06884705 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063491392 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066408182 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062245724 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.067385622 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068849327 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063703884 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066280946 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062139001 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062991207 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.068178442 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068990024 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062483273 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.06274012 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.062081839 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062532143 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062231146 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062854608 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067726405 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062164411 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.0609766 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067964001 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062642828 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063108851 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061533579 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062710848 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061579278 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.06791347 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063735921 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.069767903 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.0641492 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.065708298 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064496455 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.071211447 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.06647024 seconds)
  done (took 5.013352174 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078948495 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067176411 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.062402134 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.062585585 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.068538915 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.069212876 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068722952 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.068147135 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.069080212 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.062706076 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.069388322 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.067927651 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.068862663 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06857668 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068535499 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068291064 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062584048 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.06879667 seconds)
  done (took 2.680538001 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.072914915 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.067626735 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.072977508 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067820864 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.067883175 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.067931268 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.06314615 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.063180386 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06322729 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067748655 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067707598 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.067191927 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062988728 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067241944 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.067687054 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068162799 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.067828525 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.063277088 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.067765796 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.063593551 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.067708273 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.063203673 seconds)
  done (took 2.920907832 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088839157 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.090288208 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.132227163 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.0825499 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091548771 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074655039 seconds)
  done (took 2.012294802 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094745204 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107238737 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068458218 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.068259405 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077567124 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071477543 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071517873 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071596943 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076897215 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075583007 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071531853 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077174638 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077273904 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073228168 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077268771 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079079074 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07147459 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071077257 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068129777 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079168773 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071791586 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07715814 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071579357 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072007879 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071488048 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072779638 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07921029 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075431196 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071226052 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076637491 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079415799 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071382461 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077010621 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075542958 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.068219417 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07672365 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071720417 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079913114 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077361589 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073667645 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068421565 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077149556 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077433019 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073109123 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080261659 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071964807 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073218889 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071614988 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071593917 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0818523 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07728073 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073437692 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07700054 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079598562 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079593034 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081963698 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07592813 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073644958 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077322873 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.075363894 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073286654 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077628973 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073412421 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076198938 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079940905 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073644247 seconds)
  done (took 6.446870087 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.101240076 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067067651 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071411878 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075331697 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072332069 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071022964 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069894286 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069919555 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069760771 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068341292 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10675644 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07097141 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07361648 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073626308 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071986097 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071470846 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071843531 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073654459 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.068960265 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.082130595 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071973062 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0734239 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073715079 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073797874 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075751758 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079599986 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07221159 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071284143 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07160687 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071836526 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073472854 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071664493 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073068589 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.068582746 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073378952 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071702841 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071535154 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073191711 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071244824 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077198548 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073040359 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07789441 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070108846 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071149666 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075465673 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071966157 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071535224 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.068844157 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.071872798 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06859788 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075901454 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076031082 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076020368 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073620037 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071831369 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07259256 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071579215 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072137051 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071439894 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079729535 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073378066 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071571969 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081887055 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071660295 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071584847 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073517548 seconds)
  done (took 6.346823925 seconds)
done (took 131.367959058 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.240516359 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.207508211 seconds)
  done (took 1.888251139 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075532156 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.098769274 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.077599954 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.141843066 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073540416 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109358731 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108173228 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.076909615 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073219513 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072689124 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073900017 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.077297494 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.145926455 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073874755 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073079268 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075482936 seconds)
  done (took 2.888811633 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.107753656 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186123261 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.11506292 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070486326 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.111792162 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.07699764 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.070924051 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.082211986 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074239499 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.082706864 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077037861 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075516862 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.072892796 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075496208 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.07379286 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.077041908 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.073056942 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.079698589 seconds)
  done (took 3.046566488 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098780311 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086319776 seconds)
  done (took 1.650647773 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.15531077 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.10542711 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145675653 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.329918448 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.129832611 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126578016 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130190448 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125304162 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.11156744 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.121758692 seconds)
  done (took 2.940680183 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.106587214 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.177872357 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.313314723 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.12271143 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.079282789 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.100899274 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.125220038 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083994209 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081496215 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080639812 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.081409421 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077913973 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103070038 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.076717124 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.07683891 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.079593995 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.108154242 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.077040132 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.078011234 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.078827846 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.108693313 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071836905 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076810648 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.07483317 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078286928 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078741277 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.072734206 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071213298 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.07611155 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075777579 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079061003 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.096910685 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078564318 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.098866778 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075665387 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.099803953 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.075273204 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074791718 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076008907 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.074305497 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.077577665 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077677292 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.081101351 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.078345332 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.072884613 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077571655 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074819535 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.073192787 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.082239806 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.0733669 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.080115152 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.079036235 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099544354 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.073117233 seconds)
  done (took 6.301910035 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108190003 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106504967 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070847142 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113727945 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105988911 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07091994 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.10483185 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101032968 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.108907744 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070411216 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069750762 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070186413 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077196155 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079445955 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116029279 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109180287 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072306059 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070772303 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.10830825 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108303682 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069353477 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.101921319 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100652833 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106159923 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069232952 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070121954 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068621236 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069496379 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074653146 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075380642 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069506111 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07650118 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.080919687 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075707069 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068531839 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068609684 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070693063 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.078196057 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076694233 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076357491 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07473393 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068425747 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069299425 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069514206 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070586658 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070631123 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.077392499 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.077935309 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075209576 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.06908802 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069619015 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.068838163 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069750194 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.077204446 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075629134 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076669534 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075999267 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068959641 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069354453 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071079466 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.076977545 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.07686108 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076165133 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070269604 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077642642 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.06927345 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.081245759 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082570254 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069751993 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070146469 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069226037 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069862455 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069599063 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075033578 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.0753987 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070001577 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072233523 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069333494 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077331922 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.07513049 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069253319 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074546038 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069207007 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069286064 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069919182 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069844629 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074519102 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076168231 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069733802 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069171207 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069411181 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070424596 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069221143 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075275816 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074933523 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076067674 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074970627 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069432781 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074442837 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.073451822 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068762115 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073929713 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.06820033 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068405265 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068927922 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073324573 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073106884 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075350536 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068283997 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068287107 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073825273 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214878411 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071228061 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076119966 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07816191 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076807208 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070407507 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079279152 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069869201 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077770853 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070124317 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07803596 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06971176 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075855995 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06975337 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069192154 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069581521 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075686483 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070151372 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069756888 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070070256 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.06948536 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076044817 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078775861 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070415193 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075258093 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075569885 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070182972 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075936016 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069669864 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076565192 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069555907 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070001307 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069275351 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079437665 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069829419 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069357265 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069953934 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079277429 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069750844 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077440212 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074554134 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069240058 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079428616 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077450806 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075249937 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.077843927 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.07082084 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07023227 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069513875 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070184753 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074957803 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075917892 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070177805 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070470182 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075191709 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077568444 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069102655 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075360281 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.310094305 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075279267 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069539456 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069768613 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078423818 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077474859 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075806467 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075048802 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075499816 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069491601 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074693519 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075283314 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06911749 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081302177 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069299788 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079537456 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075660913 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074632058 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076387689 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076570009 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077237891 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077382481 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080031418 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069046412 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069297423 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075124624 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069044056 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069289105 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074873838 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069754953 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069746666 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079912917 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069800342 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077442263 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068442504 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075673879 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068478684 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069808681 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079882327 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069100703 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069499175 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075194941 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069068832 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074691916 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.076903511 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074447949 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069030228 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068927067 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074656112 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.074901337 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067980858 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068066855 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068313987 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072875999 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072133348 seconds)
  done (took 18.680674313 seconds)
done (took 38.878542573 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.211266308 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.169789238 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197005015 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.115987115 seconds)
  done (took 2.270707545 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.091601088 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.099880969 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.076002716 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.065845251 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.083407531 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.066096365 seconds)
  done (took 1.998165342 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.252156068 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.189361295 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174107858 seconds)
  done (took 2.123735634 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.2191584 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.200020467 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.506441513 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.311227848 seconds)
  done (took 2.849771934 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.130264946 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.078070332 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.064591776 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.074287864 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.103890642 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13234245 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.085962103 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.107613631 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.075650429 seconds)
  done (took 2.423327412 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129647448 seconds)
done (took 13.337451898 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.209076368 seconds)
    (2/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.109780693 seconds)
    (3/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.175813623 seconds)
    (4/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.2088889 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.078859624 seconds)
    (6/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.075363458 seconds)
    (7/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.082779783 seconds)
    (8/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.128725071 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.094015771 seconds)
    (10/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.180652831 seconds)
    (11/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.189996014 seconds)
    (12/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.079409046 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.201533031 seconds)
    (14/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.11152067 seconds)
    (15/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.178002969 seconds)
    (16/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.075233241 seconds)
    (17/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.182701897 seconds)
    (18/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.213556917 seconds)
    (19/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.075131491 seconds)
    (20/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.067030975 seconds)
    (21/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078996462 seconds)
    (22/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075187901 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075007281 seconds)
    (24/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.189699364 seconds)
    (25/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077915587 seconds)
    (26/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.086506558 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.176626217 seconds)
    (28/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.076843958 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134887415 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.121848878 seconds)
    (31/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.225926647 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.092175501 seconds)
    (33/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.077028443 seconds)
    (34/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.202989991 seconds)
    (35/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.194678514 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.07359593 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126274667 seconds)
    (38/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.179278521 seconds)
    (39/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.078336087 seconds)
    (40/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.085446103 seconds)
    (41/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.224947735 seconds)
    (42/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.074289938 seconds)
    (43/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.143160596 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.066131759 seconds)
    (45/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.233009373 seconds)
    (46/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.145432807 seconds)
    (47/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.230424701 seconds)
    (48/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.230301748 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.176866792 seconds)
    (50/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074355715 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.090465659 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.08859545 seconds)
    (53/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065077973 seconds)
    (54/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.064531438 seconds)
    (55/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.067008888 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089920336 seconds)
    (57/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.078263359 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.125104254 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086348942 seconds)
    (60/341) benchmarking ("sort", Bool, false)...
    done (took 0.145597167 seconds)
    (61/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.067855969 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.152078552 seconds)
    (63/341) benchmarking ("sort", Int64, false)...
    done (took 0.067127809 seconds)
    (64/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075625697 seconds)
    (65/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.199192912 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.091621741 seconds)
    (67/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.167585079 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075391217 seconds)
    (69/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.084327147 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.065584964 seconds)
    (71/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.141490009 seconds)
    (72/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065236167 seconds)
    (73/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.074254806 seconds)
    (74/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.192007898 seconds)
    (75/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.07264248 seconds)
    (76/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.063686234 seconds)
    (77/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.219834635 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.154798462 seconds)
    (79/341) benchmarking ("sort", Float32, false)...
    done (took 0.136167447 seconds)
    (80/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070193256 seconds)
    (81/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.163764182 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.065494751 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.284066062 seconds)
    (84/341) benchmarking ("sort", Float64, false)...
    done (took 0.141151892 seconds)
    (85/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.081175593 seconds)
    (86/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.16662777 seconds)
    (87/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.067996851 seconds)
    (88/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.125110676 seconds)
    (89/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.23785631 seconds)
    (90/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.091440606 seconds)
    (91/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070843737 seconds)
    (92/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075639745 seconds)
    (93/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066034635 seconds)
    (94/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068536733 seconds)
    (95/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065255332 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087539398 seconds)
    (97/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.161736038 seconds)
    (98/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.159664166 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.088080666 seconds)
    (100/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.077613636 seconds)
    (101/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066416291 seconds)
    (102/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074107327 seconds)
    (103/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.205056749 seconds)
    (104/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.178078629 seconds)
    (105/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.192572597 seconds)
    (106/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.202358511 seconds)
    (107/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067125063 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.066729919 seconds)
    (109/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073540843 seconds)
    (110/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076186566 seconds)
    (111/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.066575853 seconds)
    (112/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067371549 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.090911228 seconds)
    (114/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.073882148 seconds)
    (115/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.216627213 seconds)
    (116/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.093979912 seconds)
    (117/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067740672 seconds)
    (118/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.209243738 seconds)
    (119/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.155735634 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.12468897 seconds)
    (121/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.069094277 seconds)
    (122/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.073854924 seconds)
    (123/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.0654874 seconds)
    (124/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074203241 seconds)
    (125/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067415685 seconds)
    (126/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.073928318 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07720134 seconds)
    (128/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.075177332 seconds)
    (129/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.074888013 seconds)
    (130/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.171318573 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068388583 seconds)
    (132/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071169379 seconds)
    (133/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070086766 seconds)
    (134/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.077796148 seconds)
    (135/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074686257 seconds)
    (136/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.065106045 seconds)
    (137/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.140660164 seconds)
    (138/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.068761263 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141865521 seconds)
    (140/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076262975 seconds)
    (141/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069546847 seconds)
    (142/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.153662129 seconds)
    (143/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.191288434 seconds)
    (144/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.066806618 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.083656563 seconds)
    (146/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.068422545 seconds)
    (147/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.065695943 seconds)
    (148/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.066580985 seconds)
    (149/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.142215694 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.133803634 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076609617 seconds)
    (152/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.142868334 seconds)
    (153/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.082988392 seconds)
    (154/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074161982 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.191419549 seconds)
    (156/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.076315613 seconds)
    (157/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.068043818 seconds)
    (158/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.069346753 seconds)
    (159/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064943713 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066027349 seconds)
    (161/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.136003302 seconds)
    (162/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.190921205 seconds)
    (163/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.065109957 seconds)
    (164/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089438865 seconds)
    (165/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074322948 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.084175197 seconds)
    (167/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.066969291 seconds)
    (168/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.152586234 seconds)
    (169/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.194664287 seconds)
    (170/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069621894 seconds)
    (171/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.084394341 seconds)
    (172/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.081529799 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.131209418 seconds)
    (174/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.14883543 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.095541707 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.129521681 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.121438184 seconds)
    (178/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.065391537 seconds)
    (179/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.066062133 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115679522 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.065399605 seconds)
    (182/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.072797413 seconds)
    (183/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.065294882 seconds)
    (184/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.074051398 seconds)
    (185/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.196471349 seconds)
    (186/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.334916075 seconds)
    (187/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.068669509 seconds)
    (188/341) benchmarking ("sort", Int8, false)...
    done (took 0.153955907 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086514311 seconds)
    (190/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071723919 seconds)
    (191/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.068965376 seconds)
    (192/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.163761916 seconds)
    (193/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.067151685 seconds)
    (194/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.069296239 seconds)
    (195/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068432312 seconds)
    (196/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.068164044 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086589621 seconds)
    (198/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.075247499 seconds)
    (199/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068599592 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.13717723 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.14770406 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.065788278 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.068752941 seconds)
    (204/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.067004942 seconds)
    (205/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.18156448 seconds)
    (206/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074544687 seconds)
    (207/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.07544925 seconds)
    (208/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.160700201 seconds)
    (209/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.088415226 seconds)
    (210/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066165687 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.067299607 seconds)
    (212/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.079317915 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.155707982 seconds)
    (214/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.201316347 seconds)
    (215/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.084370977 seconds)
    (216/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.139793282 seconds)
    (217/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.066727486 seconds)
    (218/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.092616154 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.088224609 seconds)
    (220/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.066936863 seconds)
    (221/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.065375112 seconds)
    (222/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.083206079 seconds)
    (223/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076462989 seconds)
    (224/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.094301668 seconds)
    (225/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.19525183 seconds)
    (226/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.178159453 seconds)
    (227/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073726357 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.095083087 seconds)
    (229/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.093381796 seconds)
    (230/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.141064709 seconds)
    (231/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.075252207 seconds)
    (232/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.066507531 seconds)
    (233/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068436506 seconds)
    (234/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066676202 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079460639 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.076937625 seconds)
    (237/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.074796707 seconds)
    (238/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.068656243 seconds)
    (239/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.065583716 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.14709551 seconds)
    (241/341) benchmarking ("sort", BigInt, false)...
    done (took 0.26818489 seconds)
    (242/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.096169917 seconds)
    (243/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.081489167 seconds)
    (244/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066521123 seconds)
    (245/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.072061203 seconds)
    (246/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.065922995 seconds)
    (247/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.06720948 seconds)
    (248/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074804824 seconds)
    (249/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.069778164 seconds)
    (250/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074484125 seconds)
    (251/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066684398 seconds)
    (252/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069572797 seconds)
    (253/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.06590095 seconds)
    (254/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.066630931 seconds)
    (255/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07485193 seconds)
    (256/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.066932443 seconds)
    (257/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068945851 seconds)
    (258/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.154952306 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.068413387 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.113789814 seconds)
    (261/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.067386494 seconds)
    (262/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.146919595 seconds)
    (263/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.067408208 seconds)
    (264/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082914678 seconds)
    (265/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06740928 seconds)
    (266/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.069979387 seconds)
    (267/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.07018674 seconds)
    (268/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.065962656 seconds)
    (269/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083800332 seconds)
    (270/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.065434454 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092454657 seconds)
    (272/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.06545602 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066729838 seconds)
    (274/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.065611603 seconds)
    (275/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068730762 seconds)
    (276/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077489821 seconds)
    (277/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.073874341 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.081727013 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.067204452 seconds)
    (280/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068249432 seconds)
    (281/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.180816908 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.154325523 seconds)
    (283/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.067212371 seconds)
    (284/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.07495405 seconds)
    (285/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069770567 seconds)
    (286/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.065248518 seconds)
    (287/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.084279073 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066909447 seconds)
    (289/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.076490721 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.146471006 seconds)
    (291/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.167608856 seconds)
    (292/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.085393771 seconds)
    (293/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065801633 seconds)
    (294/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070135502 seconds)
    (295/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.065916791 seconds)
    (296/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066199936 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.065468424 seconds)
    (298/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.065685403 seconds)
    (299/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.07658281 seconds)
    (300/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.170299414 seconds)
    (301/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.065027338 seconds)
    (302/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.064508268 seconds)
    (303/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.064132857 seconds)
    (304/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.065571537 seconds)
    (305/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.065984526 seconds)
    (306/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.082480374 seconds)
    (307/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.063746669 seconds)
    (308/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.066269811 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065310592 seconds)
    (310/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.246183268 seconds)
    (311/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.073508968 seconds)
    (312/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.07288557 seconds)
    (313/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.07613709 seconds)
    (314/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.073140058 seconds)
    (315/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.077046292 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.070044255 seconds)
    (317/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.070222548 seconds)
    (318/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.081116928 seconds)
    (319/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06809195 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.151821646 seconds)
    (321/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.073317047 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080748007 seconds)
    (323/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.070157387 seconds)
    (324/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.069758013 seconds)
    (325/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.072701201 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.093875356 seconds)
    (327/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.068270308 seconds)
    (328/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.076897455 seconds)
    (329/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067261511 seconds)
    (330/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.075442748 seconds)
    (331/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.068951686 seconds)
    (332/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.069075131 seconds)
    (333/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067489867 seconds)
    (334/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.069873775 seconds)
    (335/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067675169 seconds)
    (336/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.067368246 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.068008345 seconds)
    (338/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.069413 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.086824235 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.068574358 seconds)
    (341/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072317345 seconds)
  done (took 36.897549798 seconds)
done (took 38.423346021 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.084357495 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.090816071 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.075762792 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.086236632 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.081252961 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.099800335 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074200004 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.07852854 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.081359777 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.083009288 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.081549534 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.076115031 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.078768817 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.078869315 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.076300439 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.092288039 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.084662927 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.077843909 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077814641 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.067926598 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07758361 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067207361 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066593634 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073981368 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.078693478 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.075593621 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.078259608 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.077593888 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.06725358 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.067063183 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072197671 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076553099 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.068233106 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.079548098 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.077091814 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076170081 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076535036 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079355791 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066079898 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.066884156 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077839364 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06662714 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075012043 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073338105 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.071602972 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.073705673 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.074933084 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078488851 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089119981 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071137986 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077814379 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.077593019 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.077618744 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072095624 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072952426 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075766843 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073689482 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.089393454 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075443749 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071045983 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077853895 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076402652 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073825406 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075262795 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075168089 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078632745 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077534809 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073649443 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077586119 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074275244 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066348461 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074729535 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071633981 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.066459073 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.077730281 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.080652351 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065095176 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071060874 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074809729 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.074962994 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065853145 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070820669 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065416619 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071328984 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070585322 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.0726443 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072061168 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074116799 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065444884 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075430837 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.073821439 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074696736 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.065611008 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078435663 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.065763921 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073076255 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.066695419 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066267968 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065151666 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072169441 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066292527 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071050911 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074810042 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.064903685 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071328096 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.078931081 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.069431689 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074212308 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.065359372 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065624048 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077063424 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.077424225 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067028537 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071597102 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065646657 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072577886 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065276094 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.065935118 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.065901279 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066351421 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071176898 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.067154164 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071258303 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072448826 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078657843 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.065759551 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071702538 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071118273 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.06606693 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073267235 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066331028 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.065937295 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.065029127 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078099803 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070309217 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.065909324 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.071834147 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070430712 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073915969 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064465243 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074139915 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071571857 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.069994898 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.219964613 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066457569 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.078721619 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072401208 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071590478 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06568425 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066605696 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.06525264 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066273563 seconds)
done (took 12.929088895 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067624835 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105310971 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073705079 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082539605 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.07859915 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068311732 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070932296 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083243623 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070736977 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08698594 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095605118 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.088569079 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093957869 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06604516 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.066862221 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068440889 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065827626 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.07461908 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081637533 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090602045 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095008086 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066867952 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.06880053 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083204253 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077220291 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.08319423 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067845452 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.068023238 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.110505355 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.084062017 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092816795 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066639632 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.06785198 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.079977965 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080946508 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073455663 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067350057 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.070317649 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067593492 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067135392 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068630848 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080943891 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070563204 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070533923 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068014544 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06795141 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067323716 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070313582 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.079908792 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070060612 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.07409826 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078208654 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068231506 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067020794 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065261489 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070572339 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.066888687 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067594233 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067083489 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.066893826 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067137559 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069792872 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068111877 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.06732837 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070262406 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069345063 seconds)
  done (took 6.53544328 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083334762 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092445741 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081785299 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082324639 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066628296 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067536168 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067628384 seconds)
  done (took 2.190624674 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.067783872 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075146124 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079687404 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.079388178 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088634245 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.076846814 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067799462 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099036222 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.06656615 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.075868363 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083045321 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.080716466 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070588679 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.078946815 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067527674 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079537933 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067630353 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074794427 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075339946 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080994002 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071793441 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.096490993 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080585692 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067853043 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081247574 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074593748 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070145348 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067651035 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06753015 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.066980488 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066791585 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.088884808 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073886343 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079344847 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067973113 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066274293 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071300132 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067880501 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.073749288 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.075808291 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070885219 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06728498 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067958947 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067251542 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.067959307 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072132362 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068512964 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067195872 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066726834 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075123519 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066265214 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073743481 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069586847 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.071997938 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071615782 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071848494 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074530374 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.06745208 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07461744 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073479217 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067329854 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079902496 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078721959 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070531144 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.07832826 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075575478 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.07365586 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070985792 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066571822 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066362524 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067741126 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078970685 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070109407 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069641824 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068093168 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072300118 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.070886629 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082272156 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082453459 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080191089 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069595757 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067477667 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071769657 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.0820002 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072027411 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067071904 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.067992921 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066486994 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072437579 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067712712 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07177866 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067331857 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.073792004 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070000668 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069376943 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075146607 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067671723 seconds)
  done (took 8.721660963 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.069558164 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068362253 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069736331 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068754287 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068378047 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069185181 seconds)
  done (took 2.094204556 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.0908958 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068355831 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079752522 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.067935885 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089745732 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074222808 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074421677 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069894514 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084373227 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078127774 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074085011 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077036431 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073773745 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069524161 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073849104 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068383182 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073876443 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070434108 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.077809659 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069707185 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080859248 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069863138 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069391573 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079271777 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070973168 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06871109 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068562214 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078120762 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077695612 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069128943 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069133179 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070391073 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076181705 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069289939 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073681097 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076076351 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067620607 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.072979523 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069559908 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.070266793 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.076103921 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069530433 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069741998 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.07316028 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069417489 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07582928 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073522471 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071438104 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073602356 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072886425 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073085514 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068198969 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070783503 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.07339723 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.080592347 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069185423 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073541729 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073574362 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069124188 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.075903694 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067600223 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070638372 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069173958 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070496996 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.071971136 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072866037 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076305113 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069660011 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069622836 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067845585 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.0731108 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067820468 seconds)
  done (took 6.893746927 seconds)
done (took 28.065686069 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.557562094 seconds)
  done (took 2.183324677 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.584191825 seconds)
  done (took 2.253145773 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.670101518 seconds)
  done (took 10.326277738 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.311239708 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.337608643 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.74114994 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134175965 seconds)
  done (took 3.22735609 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.75528314 seconds)
  done (took 2.424869458 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230123173 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.220032128 seconds)
  done (took 2.132485447 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.344989578 seconds)
  done (took 2.007244027 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.155781657 seconds)
  done (took 2.818096946 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.225972864 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.158830392 seconds)
  done (took 2.059926185 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.512513859 seconds)
  done (took 2.166866296 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.336454487 seconds)
  done (took 6.008432353 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.235799283 seconds)
  done (took 1.948038045 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234182517 seconds)
  done (took 1.910901038 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.058396963 seconds)
  done (took 3.722946937 seconds)
done (took 46.859224455 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088106094 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.087449715 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.0872359 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083166487 seconds)
  done (took 1.994196003 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075660117 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.072305687 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.0746064 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.075429536 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072693362 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074078371 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074416303 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070018521 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072286522 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071881411 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070220957 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071301751 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073954797 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071397834 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.074164834 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074805694 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071675408 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071675927 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073293155 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071287841 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073799505 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.072084367 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069469737 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071214723 seconds)
  done (took 3.416183521 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079272806 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07354392 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076635966 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071985877 seconds)
  done (took 1.982187875 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078645022 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078232274 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086960886 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091967875 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078610824 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078317207 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085102425 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085684071 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066662219 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088165021 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069226393 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068294038 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068096186 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086513227 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084457546 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063470041 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.064878981 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078383941 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077563195 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080634472 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070046059 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067080185 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078349675 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078615674 seconds)
  done (took 3.53403928 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080222734 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066684298 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.07950544 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093702185 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093618957 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067200435 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080508322 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094405434 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128573078 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066813696 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073122745 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067461562 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105457093 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066502248 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081948599 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110067279 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.113326241 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070938143 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100005402 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066560872 seconds)
  done (took 3.395741538 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.077054912 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070931531 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071333096 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066731465 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078369295 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074017626 seconds)
  done (took 2.128881301 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069980274 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069319332 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068195558 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.067923876 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.073317529 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.068576725 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067115698 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.069162756 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.06944363 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.068600127 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068147805 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.067215151 seconds)
  done (took 2.510278949 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.156639911 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070489089 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.070875389 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067278346 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072684913 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067928897 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082606621 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.069633702 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085477667 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.067903752 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067665766 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070105362 seconds)
  done (took 2.633859838 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101720924 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102063959 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147093153 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118708963 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115545088 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097753509 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120299744 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094483159 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160947859 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137423719 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117202874 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124743675 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08754218 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.0709495 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10086775 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102183443 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136549857 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.0732782 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113815619 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.198066334 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118572877 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.114727377 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122277624 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117381234 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081903745 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122194803 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094958658 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103383831 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.155429549 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110560103 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119672914 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098528824 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072430929 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072461618 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150269548 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.104544362 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140311334 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.095648566 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102208743 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089244644 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107636098 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.07067078 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087196392 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107285237 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.084977891 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117600436 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088493716 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104232603 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081607262 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131265212 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106797584 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099564123 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088784367 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10485264 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131769365 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09906767 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11339206 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108246532 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082503554 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.117167575 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100010323 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.253557651 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098169585 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082264787 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161713533 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090965826 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.11365641 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114255756 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084162826 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090858179 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103638389 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132014087 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107989141 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108174425 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115596937 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.12452746 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111044263 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.09351487 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129619941 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094378069 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074340133 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105615513 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130206163 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086366873 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102036923 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130560825 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093201051 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107771783 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093164579 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119340162 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081992074 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.096888793 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071046628 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099107925 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108070566 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098046332 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112204722 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10779 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079466029 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126671647 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.11246265 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076305484 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.121309374 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102153736 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158430622 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099742135 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.079131175 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.102642529 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095047466 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151352923 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085730267 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081037606 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100303195 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144586393 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095134104 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170858796 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10111661 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13325893 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.101099226 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.091617603 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.078696328 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.09062741 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101913146 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10715111 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101406597 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089666667 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.07897176 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.090135869 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098586258 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.25585688 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083109462 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115725764 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103064548 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076787769 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09026149 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078210408 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127081414 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079455169 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110143037 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.125938194 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079636948 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105917666 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127981034 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138112176 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099079767 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108888307 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141728187 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.118174705 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080783826 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085154204 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10874431 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.142223584 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11484149 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086773175 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078141108 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10317953 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11208189 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098339531 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137933557 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.127456669 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109914453 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098246238 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141307768 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118490261 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092188007 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096132233 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097176496 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.12645062 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107831351 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158372659 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095687801 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120276196 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114787556 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141444125 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114461031 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090054682 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085298337 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096351029 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105427434 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107403954 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143453162 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096367597 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073988733 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097299179 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134591473 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078631129 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101167598 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091693841 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.093918812 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118733837 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084254789 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081897247 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069220961 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101574002 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.134040987 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.069994303 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.110874076 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.276759752 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104976321 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.105899892 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.070957869 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10086595 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145081372 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106812866 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141744249 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117874756 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101460458 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122736782 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.103858513 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.109440142 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085463644 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127735514 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135620162 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096585378 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091395794 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.135879518 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.118870034 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.134964901 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097792155 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116190746 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105912685 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101453718 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104406896 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.101843973 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.144921669 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122753279 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125823028 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115849105 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107297851 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11064688 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138467008 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083822384 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118789463 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076287366 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112651985 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079137089 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108442467 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080313076 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112432541 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08081471 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100864888 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070844239 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.074928634 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145286618 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.11762628 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09334052 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090177968 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.141616945 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.135200873 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.084268515 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10608793 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.137931011 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105230521 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103408036 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.107932702 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085318687 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094353608 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.302250315 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081031738 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083648321 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.10069454 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095516536 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108854496 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086349007 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076494466 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136932831 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105481776 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09635698 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109069844 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095784872 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124403944 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090770898 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088790741 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107811234 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.1044903 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140971372 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091348119 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098789825 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119308621 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082361401 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093200047 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.070865111 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086208732 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077303902 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110117105 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.07747813 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10920952 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070185566 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130582786 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.087629622 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093616917 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103504546 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098727271 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.129647204 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09308804 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129190539 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09082959 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103782887 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108760089 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095272502 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110967752 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105435038 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096709299 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111962497 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.098469172 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106581294 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110811281 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095260973 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142387215 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090635745 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121626578 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106886228 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107821603 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104855118 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117830832 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137878676 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113315864 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.14299839 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076747739 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084400672 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106978009 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101425214 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145859282 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102709311 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.072878943 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116827759 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091026138 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096223347 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.265406729 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084745638 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143875075 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089425124 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089044163 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114363581 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090231702 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.098980728 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077581535 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096453602 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.101754963 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096032732 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096226459 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.13432096 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118172215 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114932664 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.13385265 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100436397 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094540093 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119958442 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111843775 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112010126 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087330998 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088118747 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125185632 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102650127 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129124926 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101448548 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096288163 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.102328903 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091480259 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101148689 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098100518 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110539422 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081908873 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.07712298 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069622686 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073314279 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118506943 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109703955 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102836992 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099576345 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073721146 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104265958 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098339794 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.07295551 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088312632 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094945883 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126565445 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084764999 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093426331 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.115104954 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092061033 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104164933 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130111514 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129621171 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101623285 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089874359 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.144062365 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129695129 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089815915 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093893937 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072706474 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08064986 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102988944 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144764707 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11884441 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078012534 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084225275 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.07735689 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.250809104 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074222566 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.09082583 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091248695 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105163463 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120321582 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113967748 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105621714 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077115258 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10476172 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098844975 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093873982 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097497997 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103248858 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10663265 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125136035 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102128179 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098928293 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077628406 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081739925 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077004304 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080716455 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10300863 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079037934 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07760502 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130384452 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092418796 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105101338 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109900159 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086307134 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076528631 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133044665 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070267934 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134493044 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072458445 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083807533 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082082653 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080625096 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094721082 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107453937 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096439333 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114694155 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107799524 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105873163 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111837586 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156558382 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072169644 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.150391538 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077113733 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07721969 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077802447 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115584668 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091712635 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104765341 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141932952 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090913295 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094223221 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078306909 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12917335 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099955659 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104368163 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084208901 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080243885 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128713764 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080991776 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072596554 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087491852 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113076063 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073451403 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134252026 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114231657 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080588695 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.278026132 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632218388 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092342204 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077700946 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094639283 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.150022219 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.12972552 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.084850559 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110065344 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120584975 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091302709 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116036973 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108780095 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185542648 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075960413 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096208674 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.10473161 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099651163 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093792456 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093842507 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.08847699 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093686996 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087420744 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.080775701 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108970702 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089099305 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.092517406 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.124895835 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084111983 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081503057 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131743576 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.105626678 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084014796 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090178402 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102076423 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088992138 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093068177 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070678864 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.144727876 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121839285 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102510304 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092517676 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108988631 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119082261 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089779196 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113183031 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.089860722 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110069183 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08613604 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079800399 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103016782 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079329626 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079702269 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118627739 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.087647457 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093946155 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105027091 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096819753 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115652443 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119213097 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112028835 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098840267 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080575962 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087482138 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088526012 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076823867 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079014391 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075156669 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076743612 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107541787 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.249623409 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11491703 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116061829 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084232856 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105308923 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102128527 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110753161 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084555819 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102242815 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110331301 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092204522 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104714123 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101489262 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129358109 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146793278 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100628135 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125175739 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133820074 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078225509 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.07624464 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.07030789 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146431865 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08093854 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082138933 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111425412 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133915938 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083107578 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096285691 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.232667578 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081554864 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.082885658 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098151507 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071192907 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084099933 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108904987 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086036453 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081632819 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100078597 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114442728 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.118854835 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113607707 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091027996 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084933793 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082487863 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095002881 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.10604857 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.13058134 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091263907 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076770901 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107470898 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104630939 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124682129 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074509676 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082110083 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129864128 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093115383 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104489166 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08091413 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122051986 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131838793 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091516165 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134301392 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072364501 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084492849 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090614669 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126936029 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07652027 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089806331 seconds)
  done (took 66.46871271 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.156068235 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.150317075 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.103304848 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.127508343 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.216839519 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.214850393 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.144211506 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.125001297 seconds)
  done (took 3.099653215 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.072502642 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084697834 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.102482434 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.086450395 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.068087953 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.069597823 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.20635192 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.082978116 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.067779309 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.108585842 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.077034897 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.069710072 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.363059493 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.067340889 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.068806407 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.075818143 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.06850757 seconds)
  done (took 3.561372349 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.372142646 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.627003041 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.32652655 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075912653 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.908618965 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.09413502 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.217099025 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.142880182 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.084678013 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.535895837 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.373430622 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.135875713 seconds)
  done (took 18.730170483 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.077363248 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.076713423 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.082621187 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.082383882 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.078432129 seconds)
  done (took 2.234278896 seconds)
done (took 117.385364164 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085534048 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.17912552 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.071521262 seconds)
  done (took 2.11704205 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084330388 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082356509 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082883366 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080092604 seconds)
  done (took 2.169821587 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076601028 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078219831 seconds)
  done (took 1.986450227 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.230939661 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.182072524 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.095124861 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084435347 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.08151701 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081575004 seconds)
  done (took 2.091556518 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073472325 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072913124 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073714164 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074006642 seconds)
  done (took 2.125665252 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.07187203 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067713139 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069957056 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072729176 seconds)
  done (took 2.112854356 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.086796628 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084889664 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113881416 seconds)
  done (took 2.120350658 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085069799 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08486202 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.081717965 seconds)
  done (took 2.09220741 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.110371571 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.101433229 seconds)
  done (took 2.042449436 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.083411151 seconds)
  done (took 1.92288454 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.093699631 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.103244825 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.146523264 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.111222546 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.147214599 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.13099396 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079208682 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079249398 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075414341 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074119667 seconds)
  done (took 2.870936585 seconds)
done (took 26.074526919 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080043855 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374968248 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361465689 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088528344 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674357967 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358666515 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.013897024 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092694266 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.10188959 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069418448 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086655104 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.651890494 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.005980795 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.329615571 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.995244337 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331789718 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.651350201 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070263758 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069011348 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069654678 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.000524448 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068748464 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069711664 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070495648 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652762213 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375712143 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.069940501 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.330545102 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069109191 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072306434 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358049492 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07067344 seconds)
  done (took 16.493356163 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071702234 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124659952 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074400075 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.087563756 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072450397 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071550227 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073093168 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070870588 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111853165 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.07025409 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086530438 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069164523 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073161252 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071190522 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089633122 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069959283 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071872373 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071367895 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069914211 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070817573 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088386711 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069717826 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071395376 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071043589 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071214616 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083250679 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071398691 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070684169 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070338958 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.07275591 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073801509 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071507337 seconds)
  done (took 4.309859933 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.125359134 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128524312 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075094449 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110683392 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.121681489 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072436882 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.156358382 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.097167158 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11974364 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.072722489 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.08937721 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070485006 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105076264 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070954754 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090035771 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070292028 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071618635 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071413816 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070226466 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070747229 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089032712 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070274865 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070781283 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070917779 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070549836 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08515352 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070768595 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070209397 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070259331 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072062917 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074431144 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071277615 seconds)
  done (took 4.600421037 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071585932 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073318555 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081649218 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082404835 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068301148 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070641791 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071720601 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068219072 seconds)
  done (took 2.447266673 seconds)
done (took 29.700202508 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081339413 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070239965 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072629593 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089286709 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075818658 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071993975 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066532035 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076052583 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072558031 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072907454 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074544435 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068321102 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07212301 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066421033 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073454462 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067516355 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.07399126 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071602542 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072434207 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.076942695 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070812955 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073368234 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076754144 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072469536 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072661502 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072323554 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.076925638 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074120711 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.06833973 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.073557834 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.073291169 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.084875298 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.076879917 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.077506834 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.071079012 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.071003632 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.075260868 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.073096698 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.077775392 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.080222196 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.072605517 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.079396954 seconds)
  done (took 4.932332088 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.089614527 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094841259 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086454935 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084089635 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.10738429 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083457825 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.091195455 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081022294 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079298612 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091107598 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075678115 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.083141081 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.084391452 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.078951558 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080224466 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075822113 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.081010666 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074621984 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079766092 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079826908 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.09159077 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.072611897 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080712099 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.08137246 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075542055 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081525971 seconds)
  done (took 4.033673431 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074481021 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089193723 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094609138 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143544047 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111020894 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084762332 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083890248 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.104273467 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.10288061 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070166415 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07329789 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095378632 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098132717 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076318277 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107526266 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087890166 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081826028 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071349172 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.075597641 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103664456 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092355854 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087978757 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101565095 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089189416 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068182522 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078774998 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075589697 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084094832 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076957946 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081396227 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073039446 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072570549 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069957652 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081604539 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.0731511 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067034554 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.09109533 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.08110634 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084385268 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108004674 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.081104006 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.072770134 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100708247 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13645452 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.07171485 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.074983997 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.074408569 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081175957 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070451511 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098869242 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087137178 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068697316 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088283499 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070623542 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070838591 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08674075 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070878482 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071476425 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081565176 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.077020422 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090741475 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074222327 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090484663 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.068957992 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080915919 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071192469 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071441145 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067776094 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105159864 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076229778 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.12134495 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070489423 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067382417 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081013401 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080622664 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075947882 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069171829 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.089847967 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.084029661 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.075547776 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08393516 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07436349 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.075158965 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.108292799 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.070934488 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.069566165 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.069880193 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.074260118 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.074846132 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.072140381 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.085373134 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.071530808 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075204678 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08783062 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.071432472 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.072255229 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.074348804 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.073959563 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.071690602 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.0831811 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.075498621 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.073306496 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.084693162 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.073182231 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.075509965 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.08665084 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.080575326 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.070874395 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.075859985 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.074019681 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.073357514 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.076251824 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.074754167 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.072415065 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076079956 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076243724 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074687361 seconds)
  done (took 11.417247171 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.166716107 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154340048 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070508638 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150087542 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077560048 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.07388434 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150229098 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.091598347 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.072679815 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.073839351 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.072269373 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.100165472 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.09672172 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.110425238 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.075683048 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.073605495 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.098523506 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.10617595 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.156676091 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.151822539 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.09652417 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07981166 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.074098307 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.073711288 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.073257016 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079925412 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086379264 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077926033 seconds)
  done (took 4.667957111 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.079036707 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.112387779 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074115738 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093709572 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089305268 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070055221 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071949354 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070991437 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086963987 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.080124743 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.07244799 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.07520396 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.074860808 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.07169319 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071606306 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.078476728 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.078318273 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069880904 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.074186912 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.076893732 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.082949076 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.098984945 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.076727364 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.072326764 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.074987559 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.072024801 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.079332223 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.082764062 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.071755008 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.103033415 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.068847113 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075573761 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.086673495 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.073259734 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.07176102 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.072571235 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.07099358 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070807612 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070809348 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068121915 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067797 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074885077 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068678062 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076101205 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083994553 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07731528 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07077309 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072307137 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072520954 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066741953 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072595037 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.072766039 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071983155 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078156842 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073282344 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072350333 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.07108237 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.097904306 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076157051 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069044241 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068694814 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068147626 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071599625 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077665276 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086221991 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.07175921 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.067890882 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069721751 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074789803 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.08371744 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068845332 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075180813 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066961643 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.069986049 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071975367 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072781965 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.070984368 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068189061 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069506399 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070203367 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069965375 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069888742 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068741034 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072660476 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067750933 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068123784 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070074075 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070948633 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076006929 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068702409 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.07276099 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070841304 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068855042 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072354086 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074583952 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072297172 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.08888083 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078750996 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070081906 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.068045724 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084385422 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071596162 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068907228 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075401081 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074541654 seconds)
  done (took 9.748090831 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093603337 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071260066 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.090105644 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.096157241 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079834494 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07596125 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084384859 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070838554 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086812965 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069150443 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079011432 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068104009 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.082988988 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079026431 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071058144 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079594109 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.071942518 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.092556263 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084949139 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068699195 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079624046 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.081989537 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082089318 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.087637898 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087085966 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088967879 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081491474 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072825847 seconds)
  done (took 4.169842234 seconds)
done (took 40.817853546 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.954811882 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.10277109 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.937375549 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.134526251 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 6.987322441 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.168102749 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.050091459 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.932586161 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 7.011909706 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.973707575 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.255158254 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.347328692 seconds)
done (took 67.786183504 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 6.951659496 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.070855423 seconds)
    (2/2) benchmarking "String"...
    done (took 2.144695565 seconds)
  done (took 6.081123189 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.527626888 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.927727068 seconds)
    (3/3) benchmarking "different"...
    done (took 1.983681216 seconds)
  done (took 8.295105791 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.013398754 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.944115863 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.185711982 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.925795868 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.932704127 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.331865204 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.728112867 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.386322268 seconds)
  done (took 32.295453781 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 4.974917705 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.140189449 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.590948303 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.60434002 seconds)
  done (took 16.201715333 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.531379592 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.19187088 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.192225757 seconds)
    (4/4) benchmarking "different"...
    done (took 2.185793443 seconds)
  done (took 11.008714592 seconds)
done (took 85.796764682 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.959193119 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.927537222 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.988829816 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.95862565 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.93730415 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.928458104 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.930106204 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.931169911 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.931810434 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 6.987620352 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.927452675 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.943751281 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.929943293 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.937216936 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.61702098 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 1.992048791 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.950247692 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.942613235 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.94168011 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.986311649 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.937111551 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.934082127 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.405427019 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.103334584 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.562113131 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.352367114 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.407844174 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.366533893 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.936716312 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.93147434 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 6.969718924 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.246387894 seconds)
  done (took 209.660716962 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.931754138 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.937993712 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.999564331 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.968141249 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.404745608 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.124460776 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.078952804 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.446919264 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.940285219 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.94649302 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.150900134 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.934074536 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.190724184 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.881250692 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.932130641 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.955162861 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.159599311 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.20688892 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.935568848 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.121772815 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.944568563 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.030178016 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.948106876 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.12968711 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.979364632 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.994435984 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.955644336 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.962045785 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.099066882 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.133630027 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.952868245 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.982557686 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.099691236 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.781952577 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.936420205 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.961340169 seconds)
  done (took 176.004774912 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.114057358 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.943262996 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.932955352 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.9893402 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.067350157 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.932816282 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.598536084 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.943291869 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.338497075 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.940192035 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.932076271 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.934616646 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.931070076 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.944398325 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.020566168 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.932908585 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.94689622 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.93261914 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.953475245 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.930209139 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.932244566 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.930615893 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.935848114 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.931871446 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.932692327 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.92961509 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.93120245 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.821794842 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.177052271 seconds)
    (29/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.932253925 seconds)
    (30/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.932240136 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.099593222 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.944922096 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.06090644 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.933979891 seconds)
    (35/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.025805966 seconds)
    (36/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.93002293 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.988853962 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.024990008 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.932218732 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.149460551 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.013725217 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.932200238 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.93186798 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.998081338 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.944999935 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.9357252 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.93188045 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.936669168 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.944508586 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.998533845 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.156083373 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.935703192 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.070737546 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.429346359 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.939624626 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.936033453 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.935864866 seconds)
    (58/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.935371345 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.562616296 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.938238629 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.937157213 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.943499814 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.943369283 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.935378579 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.936270481 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.321199352 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.003900078 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.044652427 seconds)
    (69/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.938200851 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.934601186 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.65609683 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.917106112 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.009507596 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.935412166 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.936328529 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.935578892 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.937113252 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.937230529 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.937365923 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.073191613 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.946513113 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.044917024 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.020305629 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.935429599 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.074344535 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.940654523 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.946553346 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.745027721 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.00862304 seconds)
    (90/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.934466772 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.974235317 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.760390933 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.940457555 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.311426633 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.707928917 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939625224 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.938422178 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.948167629 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.938477804 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.936716446 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.936944933 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.013599894 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.939034955 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.073502051 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.668037071 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.821841025 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.942419093 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.938267452 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.946096164 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.018655072 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.074337641 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.940656556 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.00375989 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.946351405 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.942263662 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.023412949 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.938342691 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.936271965 seconds)
  done (took 429.22405799 seconds)
done (took 818.901134083 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.60532889 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.59348437 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.78015096 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.602564001 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.566773993 seconds)
  done (took 15.018381216 seconds)
done (took 16.888431885 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.97056891 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.955433605 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.945256532 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 1.998123274 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.965626858 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.950657829 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 1.986538613 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 1.985159901 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.971905832 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.953131242 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 1.989467928 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.958189309 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.965874276 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.976233229 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.018307151 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 1.980488588 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.958521888 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.948010595 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 1.97869397 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.959304214 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.953384053 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.952284692 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.956504774 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 1.990273754 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.028371217 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.965618376 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.954880062 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 1.992224906 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.966217064 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 1.990932903 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.01211415 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 1.977306466 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 1.98888471 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.021563223 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.002212951 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.025052947 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.960451987 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.010343387 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.962420871 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.030163715 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.003517208 seconds)
  done (took 83.031859066 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.950538771 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.086560394 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.165769698 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.98208282 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.951114224 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.161355638 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.010979334 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.078796411 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.08030716 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.16350178 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.178334072 seconds)
  done (took 24.687885777 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.951794201 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.087931515 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.170216839 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 1.989199695 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.951397767 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.163133301 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.016635206 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.078004073 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.088233741 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.169134092 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.175152386 seconds)
  done (took 24.724507047 seconds)
done (took 134.316299133 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.324001341 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.246803078 seconds)
  done (took 6.444887552 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.966253694 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.104627743 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.947858073 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.949812454 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.946187437 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.949207697 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.94876252 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.946917569 seconds)
  done (took 17.634253221 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.946836656 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.946059667 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.945162101 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.94450019 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.945990016 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.947424121 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.945366093 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.945976885 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.949730157 seconds)
    (10/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.944781313 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.946544751 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.945311895 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.949803639 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.943322 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.947672547 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.948370727 seconds)
  done (took 33.020321814 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.951910816 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.943292252 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.941995927 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.946871522 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.942511589 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.943288618 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.94506377 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.943544336 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.943546353 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.943914505 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.943432138 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.942105701 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.942308622 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.943131959 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.94248916 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.942336605 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.943599907 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.944352051 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.947318276 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.941994416 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.945223263 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.945280519 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.944937393 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.94395383 seconds)
  done (took 48.533857148 seconds)
done (took 107.51839288 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.234187237 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.587021535 seconds)
  done (took 8.695212203 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.945244284 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.944455306 seconds)
  done (took 5.83755098 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.941931935 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.943480364 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.943617454 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.940188482 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.940247979 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.939850803 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.940780514 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.94038851 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.941666682 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.94064124 seconds)
  done (took 21.284794559 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.939394812 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.938292115 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.938236078 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.934689245 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.934755563 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.934847091 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.935134451 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.934393934 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.934441186 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.934637013 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.934994329 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.935010257 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.935080485 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.934060578 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.93464768 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.934283255 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.934589284 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.935999387 seconds)
  done (took 36.707012136 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.933388916 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.934534878 seconds)
  done (took 5.732892857 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.933595513 seconds)
    (2/7) benchmarking "second"...
    done (took 1.934536562 seconds)
    (3/7) benchmarking "month"...
    done (took 1.934080749 seconds)
    (4/7) benchmarking "year"...
    done (took 1.933235288 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.932984403 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.933707501 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.9342681 seconds)
  done (took 15.401362593 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.934614251 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.078768461 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.12764333 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.557764602 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.933686526 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.908539986 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.77431931 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.937865093 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.938140409 seconds)
  done (took 21.055214771 seconds)
done (took 116.587340634 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.793278828 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.940044208 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.162305402 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.01447567 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.007561966 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.270429441 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.95970479 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.533143367 seconds)
done (took 43.546289714 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 6.991418086 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.926677811 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 6.958298655 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 6.959751362 seconds)
  done (took 22.706756395 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.929488563 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.263093791 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.950275371 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.843726953 seconds)
  done (took 22.861966996 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.343851138 seconds)
    (2/2) benchmarking "read"...
    done (took 2.278998982 seconds)
  done (took 6.488387938 seconds)
done (took 60.911072501 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.932656845 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.932076244 seconds)
    (3/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.93233555 seconds)
    (4/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.931026523 seconds)
    (5/24) benchmarking ("one", "Float64")...
    done (took 1.932369794 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.932502663 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 1.931777805 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.931938344 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.933074053 seconds)
    (10/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.930959574 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.93144698 seconds)
    (12/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.932208608 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.931930247 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.93297398 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.932985727 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.933013422 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.932764577 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.933268964 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.932953307 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.932806732 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.932355725 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.93151122 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.932082279 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.932434726 seconds)
  done (took 48.2385933 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.933044785 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.932841979 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.933007493 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.932000483 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.9332123 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.932741246 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.933158025 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.931858168 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.932993705 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.93186076 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.933332167 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.93369661 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.931567835 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.93306734 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.933251867 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.932992228 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.931995736 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.932443194 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.932365906 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.933103861 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.934313305 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.933421896 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.933583719 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.933634934 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.933682485 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.933498306 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.933009906 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.933146944 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.935340465 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.933776085 seconds)
  done (took 59.855495825 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.934050822 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.934705613 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.934245987 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.934578835 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.934239102 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.934760653 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.933054395 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.935134751 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.93500591 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.935237364 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.934232935 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.934395046 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.935971469 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.935510019 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.933985648 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.935452947 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.935224367 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.934411414 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.935331034 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.934224563 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.934574987 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.935731272 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.93561113 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.93603362 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.935938941 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.935456603 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.936714627 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.936363932 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.935560019 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.936047106 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.937242602 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.935752922 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.93517332 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.936356008 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.936669366 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.935128962 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.937151827 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.936685869 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.937746203 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.936927829 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.937943295 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.936417604 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.93777396 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.937431742 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.936764225 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.936476634 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.937285654 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.938457821 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.938153987 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.93786112 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.93804439 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.93807627 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.937133044 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.937559763 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.937138125 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.93531545 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.937662568 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.937436693 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.938694636 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.938820982 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.938217719 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.936641608 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.936758683 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.937654607 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.938381686 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.937654385 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.939457572 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.939052195 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.938913633 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.940492764 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.937798415 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.938791244 seconds)
  done (took 141.294304789 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.937010622 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.939713594 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.937482729 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.937123524 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.939731197 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.942012027 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.938169479 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.939460798 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.939741812 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.938158938 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.938094389 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.940007022 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.941498168 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.939346009 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.940679965 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.939118696 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.939456312 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.939315906 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.941795453 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.939851924 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.939301002 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.941016521 seconds)
  done (took 44.536560558 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.926811047 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.936475532 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.939100881 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.940177309 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.939736332 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.938305159 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.94152464 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.941543291 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.940204478 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.940394564 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.939188213 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.940002833 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.939040121 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.940392533 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.94048585 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.940139707 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.941654657 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.938662276 seconds)
  done (took 36.77343594 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.939934512 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.94008362 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.939233773 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.940199438 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.941420227 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.940113258 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.94030667 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.941348972 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.940866522 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.940882736 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.940877877 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.942027304 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.941643122 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.940218688 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.940468115 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.941342579 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.939991151 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.941517864 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.943137725 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.940507083 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.941401229 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.941092483 seconds)
  done (took 44.555534758 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.941659286 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.940986137 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.942238997 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.940969442 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.941468398 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.940646269 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.940820157 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.940734875 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.941061148 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.941135439 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.939863172 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.942310151 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.942690107 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.943162379 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.942128595 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.941924275 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.942250919 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.942243881 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.942491736 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.941857353 seconds)
  done (took 40.704984667 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.94322131 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.943421706 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.942339393 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.943131573 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.943524443 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.944778703 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.944000506 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.943217235 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.943347626 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.942737887 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.942799541 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.944975392 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.945545111 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.942958204 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.943302353 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.943825365 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.943900098 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.943136709 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.942532675 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.944185046 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.946196634 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.943561143 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.944512005 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.94424471 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.943808967 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.944810868 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.944766043 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.944132427 seconds)
  done (took 56.299514628 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.942259064 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.944339929 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.942883742 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.944049121 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.943718977 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.943779552 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.944051543 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.94403668 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.943656997 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.944964652 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.944026662 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.943823424 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.94477333 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.946506244 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.944116447 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.944691079 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.944632996 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.945489287 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.944546639 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.945403507 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.944525922 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.944271558 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.945209122 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.945948412 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.944977397 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.945426198 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.945416093 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.941080505 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.944528538 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.936574269 seconds)
  done (took 60.198810787 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 1.965464185 seconds)
    (2/2) benchmarking "in"...
    done (took 1.964739549 seconds)
  done (took 5.804380933 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.94589449 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.945772151 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.94633265 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.946610466 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.946040123 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.946308848 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.946173376 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.945498948 seconds)
  done (took 17.443950685 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.947022975 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.949357325 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.946241598 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.946874203 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.947463578 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.953784131 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.948098665 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.948424422 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.948708313 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.947682845 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.951207134 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.951556096 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.957347019 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.951719598 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.947088656 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.946794483 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.94827391 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.949552981 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.948431794 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.946492687 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.950670983 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.947706307 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.947641568 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.950378967 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.9470962 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.950567928 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.957900302 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.949997158 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.949690235 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.947073504 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.954763111 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.948624705 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.948878298 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.949083621 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.948529266 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.948064079 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.956762291 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.94951064 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.948373011 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.950325908 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.950800414 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.950350023 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.951986253 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.957660982 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.948737461 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.949135341 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.948832169 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.949724756 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.949154833 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.953457229 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.956940101 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.949914839 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.948671266 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.950413837 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.952367326 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.948223245 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.949601387 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.951230708 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.955886889 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.957984132 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.953530521 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.971620848 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.960160635 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.948350729 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.951280816 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.960720339 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 1.975595075 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.952364129 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.951209297 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.950837278 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.958799024 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.951085953 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.950054991 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.949539903 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.964157277 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.959525123 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.9517473 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.950244441 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.949982476 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.950890093 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.952218661 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.952373984 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.95118731 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.950866054 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.955846131 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 1.971259828 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.951273418 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.952453274 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.952940137 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.952625577 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.956629015 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.952844166 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.950988082 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.95173055 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.952901465 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.956024412 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.952304864 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.951967708 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.95215034 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.961546228 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.951856226 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.952423629 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.956639598 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.961343754 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.95225559 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.951825892 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.953261012 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.953265122 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.960913847 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.95327504 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.952452077 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.9532371 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.954443561 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.957358008 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.953471164 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.956954004 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.961315661 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.961326972 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.956129595 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.958593419 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.957312742 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.956820227 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.963292554 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 1.978235078 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.95402047 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.957796213 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.959541803 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.965718767 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.957382054 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.953436623 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.957108984 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.954670054 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.954336978 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.955780833 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.954157103 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.953936942 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.954147624 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.954480657 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.95532578 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.955021376 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.957357134 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.956001515 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.95681404 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.955288173 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.960045782 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.953735173 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.957901765 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.961180787 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.955100478 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.955198398 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.955499041 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.957651013 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.957954151 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.956761425 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.95623212 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.956132342 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.95661401 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.955910518 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.958960786 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.956131333 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.957425123 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.956079198 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.959834843 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.95558652 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.957588302 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.956827485 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.956680476 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.957006833 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.957302853 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.956409123 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.959105228 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.956514443 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.961058435 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.955707963 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.956800204 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.957149243 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.955589844 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.956635027 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.960752133 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.968683232 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.96139989 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.967640197 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.957494381 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.964221881 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.957178622 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.958723448 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.958307669 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.957211145 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.956625146 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.95753453 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.956450121 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.960578693 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.980232656 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.968675542 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.960479688 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.958593305 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.964263031 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.960128367 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.963430071 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.941165042 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.958698213 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.960869123 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.958402581 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.960216659 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.958483806 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.96162915 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.959511162 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.957450412 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.952943418 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.959387015 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.957819277 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.96026609 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.959351029 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.961586129 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.958327641 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.958109115 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.959766531 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.959826777 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.966330963 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.960931033 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.9595011 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.960078132 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.962661658 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.959152154 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.960007955 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.962624179 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.957167279 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.949489955 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.96030577 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.967364858 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.959859458 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.960662386 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.960809988 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.95979864 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.962768152 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.961214151 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.964443894 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.968762698 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.962946316 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.96094433 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.965299979 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.960300558 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.96258316 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.960342635 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.961156445 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.95976851 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.962138934 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.960913582 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.961547433 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.96977413 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.964220571 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.962576622 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.025334911 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.962621272 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.961381202 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.962475178 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.961577916 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.975079761 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.967755503 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.965593356 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.959555392 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.962303097 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.968451782 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.959595879 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.962853316 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.959762394 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.973385518 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.976556415 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.958669429 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.959360996 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.958840883 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.961720242 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.958693597 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.969895788 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.966334182 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.958359934 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.961476062 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.962379903 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.962103836 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.958061411 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.96279651 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.958109649 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.961027585 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.958519012 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.957803127 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.957487737 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.954734381 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.960704871 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.95641152 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.958455501 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.96131211 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.957437709 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.95852479 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.958176739 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.965560227 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.955771845 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.956715315 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.964969432 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.957454523 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.956299744 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.955566385 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.956815998 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.956976575 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.960948941 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.95749072 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.957664499 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.95754611 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.962334011 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.969216953 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.960448725 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.963751083 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.959631807 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.967927831 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.962062234 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.955999556 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.956019622 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.96009497 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.964372042 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.957043996 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.956816043 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.963897588 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.956995373 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.956902325 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.961797513 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.957677921 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.956537918 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.956432255 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.957028292 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.960525737 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.959848547 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.95458132 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.954835352 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.954544479 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.954611264 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.959182142 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.956679406 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.955744184 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.955563594 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.954478729 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.955680071 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.954901679 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.954234494 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.95480265 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.954603171 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.956693914 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.962871823 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.954190763 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.956021128 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.959487291 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.955914996 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.964100742 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.954786905 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.95447187 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.955476302 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.95629954 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.957640908 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.953210443 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.954001623 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.953588853 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.957203297 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.955590418 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.965140158 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.963463187 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.957851622 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.95674374 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.95538428 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.955050122 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.963056161 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 1.974217814 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.953802189 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.957310745 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.956370447 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.960526327 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.955261513 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.957941722 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.959438019 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.960834722 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.954194426 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.953041679 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.957685296 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.965582579 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.953063522 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.953921682 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.952586951 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.9577701 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.957096755 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.952762288 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.953858635 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.955264072 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.955744827 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.969636896 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.952942946 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.95462477 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.954661647 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.953636672 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.95652214 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.952739212 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.9535913 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.955869189 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.951736975 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.954515412 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.954430558 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.957163215 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.952743596 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.95576171 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.964951182 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.953641701 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.954227561 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.955426001 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.954117189 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.955209406 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.955712216 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.952134778 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.954688126 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.951427665 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.954334397 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.958044514 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.959427451 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.953014789 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.952694049 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.951842753 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.957666778 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.95471033 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.952331241 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.954231803 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.961611221 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.959806815 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.96148416 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.960386686 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.953064505 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.953613205 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.962007515 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.957711478 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.952706321 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.953104161 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.953214738 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.957116027 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.953272064 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.952332851 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.952203052 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.953215478 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.960619642 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.950331718 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.952524803 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.950671876 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.952233592 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.960364446 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.955381309 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.95607179 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.953611 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.953491692 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.951846607 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.963138519 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.952654195 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.954655899 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.952908074 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.952474884 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.953717355 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.954726639 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.955478413 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.953280578 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.952673335 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.957441002 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.953268819 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.953527686 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.9522087 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.952853445 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.953044874 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.95555891 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.959426647 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.952047459 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.955380077 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.954211748 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.957785209 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.954080998 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.954596906 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.952938654 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.955015909 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.955168913 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.954247804 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.954012324 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.954038236 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.955645726 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.958984754 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.954219501 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.958337033 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.953588551 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.954481779 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.954322578 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.958062918 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 1.961781732 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.957280083 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.961031728 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.960125946 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.959408507 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.956582626 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.955042912 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.954693555 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.956237484 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.957752149 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.957403876 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.957976773 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.958971768 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.958544773 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.957659998 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.955615272 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.957717044 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.955688455 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.95697777 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.959039357 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.964151723 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 1.966700922 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.957197506 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.96260609 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.956541547 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.960786319 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 1.966794233 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.956938655 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.958908316 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.957596941 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.956493026 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.957631112 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 1.96239164 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 1.96454244 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.95905442 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.95659855 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.960872027 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 1.972461312 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.959880421 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.963793467 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.982470832 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.958476168 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.955340635 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.957690798 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.957213917 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.95388181 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.960127138 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.957175869 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 1.963922555 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.955916249 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.956813144 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.964204841 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.956864882 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.956431174 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.958203788 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.958179269 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 1.96223884 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.956339403 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 1.964227786 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.957279321 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.957687275 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.957886579 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.959488925 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.955953064 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.957779951 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.956485552 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.958359637 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.956131527 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.957333723 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 1.968606488 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.958148445 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 1.959296494 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.970786945 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.411768753 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.959466558 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.958547945 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.959466015 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 1.962796127 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 1.960507234 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.958767239 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.960992994 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 1.964593917 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 1.96106125 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 1.96446604 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.96277376 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.959138231 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.958643039 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.957482388 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.95748347 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 1.960216359 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 1.967806095 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.959839716 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.959247421 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 1.964529756 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.960999226 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 1.966532206 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 1.965378773 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.958405691 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 1.961194237 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.960192835 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.958828801 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.959028026 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.959259467 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 1.961488713 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 1.966105545 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.959826989 seconds)
  done (took 1168.973374164 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.958749242 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.960726426 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.960094417 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.959817722 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.960093319 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.958984228 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.958734764 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.959550234 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.956541933 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.960451234 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.960690936 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.95994128 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.960869705 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.963577592 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.959805979 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.960186711 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.960283303 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.960147323 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.963203968 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.960181387 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.960442011 seconds)
  done (took 43.051774491 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.959753997 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 1.961963004 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.960839718 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.959630313 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.958346372 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.960356152 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.962366655 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.960317888 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.960310799 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.946968334 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.961008556 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.961615747 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 1.960835697 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 1.962486505 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.962242962 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.961404531 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.96314836 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.960495118 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 1.960133227 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.961389128 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.960685033 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.963435938 seconds)
  done (took 45.019466294 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 1.962131831 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.962536968 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.965115312 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.962506252 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.96677768 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 1.962497267 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 1.961369515 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 1.966867209 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 1.961679453 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 1.964785257 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 1.970970955 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 1.968284062 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 1.961864129 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 1.965978944 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 1.967554026 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 1.962504896 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.107353823 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 1.963698309 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 1.964871276 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 1.961001512 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 1.965378495 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 1.972287921 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 1.96251031 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 1.964307854 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 1.963996174 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 1.963918106 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 1.963096126 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 1.963641284 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 1.965055505 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 1.964065194 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 1.967969723 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 1.961559037 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 1.967036816 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 1.967316057 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 1.964154831 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 1.964443985 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 1.966327686 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 1.962643341 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 1.965017929 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 1.964065529 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 1.974951349 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 1.983841507 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 1.96409474 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 1.964539927 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 1.972164063 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 1.962410709 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 1.964396522 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 1.969933223 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 1.970605835 seconds)
  done (took 98.348510433 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 1.962877034 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 1.965519028 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 1.964657071 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.964677703 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 1.960516832 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 1.966962461 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 1.964820672 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.965468748 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 1.964775183 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 1.96528527 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 1.965745648 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 1.965777677 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.964253379 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 1.966228186 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 1.968255262 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.964904085 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.965033764 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.9675506 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 1.967504796 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 1.967952999 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 1.967434864 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 1.96721318 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 1.967235293 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 1.966656442 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.968011997 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.96661956 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 1.967145425 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 1.967975504 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 1.968141713 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 1.966434682 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 1.96787105 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 1.966938789 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 1.969411638 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 1.968091116 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.966864319 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 1.966617135 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 1.966827229 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 1.966218118 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 1.96691784 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 1.967042209 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 1.96806447 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 1.966848798 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 1.967202061 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 1.96787168 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 1.96848448 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 1.965998231 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 1.969032118 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 1.968167328 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 1.968643894 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 1.970263988 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 1.968332203 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 1.968844806 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.969765106 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 1.969905668 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 1.968284819 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 1.969370656 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 1.970180025 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 1.966786423 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 1.966730746 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 1.967767994 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 1.966395774 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.96757055 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 1.969294459 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 1.96769584 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 1.968239992 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 1.967908578 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 1.969605642 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.968428581 seconds)
  done (took 135.662552248 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.968385253 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 1.969605732 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.967633357 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.96946539 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.969165948 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 1.968387258 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.969222963 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 1.971654076 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.969043699 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.970644503 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.967613092 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.967632092 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 1.96944655 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.96941271 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.969860955 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.968535954 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 1.971198869 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.968673779 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.96859328 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.969837698 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 1.969270557 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.970915098 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.970017644 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.969191648 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.969392079 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 1.969999549 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.968420382 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.969176237 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.970198434 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 1.969588197 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.970257608 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 1.970876894 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.970197886 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 1.970275432 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 1.9700444 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 1.968642526 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.969410213 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.970544046 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 1.969480021 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.969885369 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.968732385 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.969577537 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.970430203 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 1.970388707 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.970879095 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 1.970894591 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 1.970905731 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 1.970920242 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.970651037 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.970773356 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 1.970859543 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.973528581 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.971449001 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.971018421 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 1.970989502 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 1.970908577 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.970738695 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.971652602 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.971044267 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 1.97239205 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.972062364 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 1.971965269 seconds)
  done (took 124.042274811 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.97069642 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.970506095 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 1.972178698 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 1.971506936 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.970891539 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.970395206 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.970352872 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 1.97187802 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.972272631 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 1.971692687 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972324418 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.971008886 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973063471 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.971391245 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.97105191 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.973047288 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.97087489 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.971958837 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.972214798 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.970670641 seconds)
  done (took 41.329520476 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 1.971357632 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.97344089 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 1.972242984 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.971536288 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 1.972252121 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.972310651 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 1.971987968 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972739603 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.973824129 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973011527 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.973589674 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.971565062 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.972561225 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.97332112 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.974242909 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.973767315 seconds)
  done (took 33.464283155 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 1.972112199 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 1.974399432 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 1.973028881 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.97277208 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 1.972865173 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 1.971490195 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 1.972285156 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 1.973982911 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 1.973290822 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 1.97262626 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 1.972631616 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 1.974343937 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 1.960991925 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 1.975371298 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 1.973903625 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 1.974534719 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 1.97446126 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 1.973549634 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 1.974158299 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 1.974162334 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 1.973611724 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 1.973906875 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 1.975200792 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 1.975947405 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 1.975009855 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 1.974728124 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 1.975397341 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.973915837 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 1.974746635 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 1.975936234 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 1.974778651 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 1.975008601 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 1.975364277 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 1.975748552 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 1.975760201 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 1.975211046 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 1.975767763 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 1.976085776 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 1.975148617 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 1.973978841 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 1.976279995 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 1.975110956 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 1.975833562 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 1.975264207 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 1.975583321 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 1.975076787 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 1.975144535 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 1.975760461 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 1.971431429 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 1.977031378 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 1.975067172 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 1.976076328 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 1.976579735 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 1.976775809 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 1.975810662 seconds)
  done (took 110.494110651 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.974825903 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.975704225 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.97608654 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.9774857 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 1.976144299 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 1.975648309 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.975627719 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 1.976339439 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.976204944 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.977687819 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.976587531 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 1.976088077 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.976960863 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.977168633 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.976520044 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.977802362 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.97611682 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 1.97712109 seconds)
  done (took 37.481550073 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.976494457 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.976214096 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 1.977867471 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.976902157 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 1.976882814 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.976791773 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.977976009 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 1.977296764 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.978748182 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.978182523 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.97867062 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 1.977775136 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.979316859 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 1.976883835 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.977699176 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.977237697 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 1.978001944 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.977010247 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.976960832 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.978778101 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.97821725 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.978282252 seconds)
  done (took 45.413364911 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 1.977797946 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 1.9783194 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 1.990853145 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 1.996003291 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 1.994601007 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.006350332 seconds)
  done (took 13.850449768 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978466724 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978984173 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.978453002 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 1.977866216 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978161826 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978919448 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979005341 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978109955 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978849632 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980014897 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979317895 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.978307688 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980172577 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978954492 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979493642 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.978705334 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.978722906 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979063801 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 1.97848898 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.978879354 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.978547806 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979145399 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.979265663 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.978837367 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979541325 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.978933652 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978899329 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980355617 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.979910269 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980794818 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980272144 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.979523665 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.98100232 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980229016 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 1.980145081 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.979558159 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980314041 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980482187 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.980345916 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981035748 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.980346958 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.978926311 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980608994 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.979923991 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.979858452 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.981468728 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.980552329 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980916517 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.981039113 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.980984494 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.980720915 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.980436245 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.981601846 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.979562036 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.981271871 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.981465624 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.982187607 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.980257984 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.98218421 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.981040426 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.982689194 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.982117756 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.981271695 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.981740122 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.982194218 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.982496792 seconds)
  done (took 132.591061655 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982173952 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.982563939 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983363227 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983384866 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.982863269 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982206774 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.98248803 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.982602056 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.982344616 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 1.981737639 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.982580149 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982136783 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.983523383 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.984097473 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984393669 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983904095 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984053905 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.984136173 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 1.983281323 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 1.983176132 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.983970635 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.982778893 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983796797 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983640908 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 1.982964851 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.981824826 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.983829265 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.983908485 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984007074 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.983636609 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984057345 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.954954441 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.984712859 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 1.983350787 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.983684157 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984843579 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.98520568 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.985537568 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984737868 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.985344232 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.985199733 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.984040804 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.98603579 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983900004 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984444081 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984886944 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.984329538 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 1.983790194 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 1.984474403 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984789629 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 1.984648862 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 1.984758368 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 1.985645167 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.983952199 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.984147229 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 1.984604485 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.985150436 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 1.985408164 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.986490063 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.985598706 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 1.984981945 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 1.985541151 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 1.985227914 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.985991893 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 1.984817581 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 1.985500318 seconds)
  done (took 132.833525794 seconds)
done (took 2720.132038294 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.027515612 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.024281614 seconds)
  done (took 15.966709273 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.151882812 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.103201179 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 1.9910006 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.045431848 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.989485576 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.019890477 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 6.998150487 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 1.988453849 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 1.990443919 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 1.99035657 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 1.988976113 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.173834586 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.030454726 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 1.990236568 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 1.983564088 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.080616144 seconds)
  done (took 54.439789942 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 1.995333675 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 1.993402415 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.004635002 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 1.994740307 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 1.99501645 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.00679058 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.022887003 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 1.998291967 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.029657193 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.01070926 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.068019134 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.0055223 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 1.994400692 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.04508874 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.008435615 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.009338454 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.084235288 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.070365807 seconds)
  done (took 38.251526619 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.073019912 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.006007166 seconds)
  done (took 11.0018274 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 6.996820909 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.019539261 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 6.987085407 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.013796297 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 6.990051285 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.00114943 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.002335256 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 6.996223337 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 6.996098832 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 6.99817617 seconds)
  done (took 71.951405495 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 1.996461142 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 1.994149992 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 1.996328077 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 1.991186493 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 6.988723172 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 6.994081649 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 1.991442771 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 6.991783968 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.68378771 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.030262947 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.002855157 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.002238504 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 1.993876265 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 1.993344991 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 1.990726339 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.019352951 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.148958729 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 1.990844688 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 1.98989398 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 1.999012737 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 1.993021214 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.05281162 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.005515252 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 1.99308889 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.026803835 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.680889028 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.004323983 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 1.998601363 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.15469214 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 1.990933288 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 1.993524834 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.153677427 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 1.998816538 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.347182486 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.319194662 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 6.999916421 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.004112482 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 1.999925609 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 1.990079997 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.158594599 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 1.995573566 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 1.99884044 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.899902088 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.302993 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.082184293 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.041537903 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.379647799 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 1.996819917 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 1.994573151 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.027530139 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 1.997663064 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 1.996617348 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.011229807 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.504474168 seconds)
  done (took 139.80358507 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 6.990994387 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.226618746 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.143713698 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 6.993439181 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.24827376 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.201190782 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.994701194 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.038465565 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 6.995876512 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.193181514 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.246926933 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.095403902 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.994887786 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 6.98995846 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 6.993449771 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.990020031 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.140465269 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.059543444 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 6.996113454 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 6.99086624 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.016981737 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.190858332 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.111778902 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 6.997205832 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.018390622 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.199219562 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.114466282 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.083604496 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.755651229 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 6.991801534 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.054811229 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 6.995610533 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 6.995638183 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.992080892 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.144122909 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.0855456 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.076313094 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 6.995964151 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.99364751 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.993010052 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.66484214 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.194266064 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.088128066 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.115609743 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.241747519 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.207766076 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.602409476 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 6.99331202 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.622431549 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.15859955 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.197809459 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.199508998 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.111488056 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.99588231 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.280817809 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 6.994088923 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.99408105 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.21499275 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.211227835 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.092942582 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.9963287 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.992824812 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.993906504 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.232323895 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 6.997408427 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.083733687 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 6.992911654 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.994295387 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.086257091 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.0945875 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.221654649 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.21598052 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.024992172 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.32892202 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.481127805 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.197900082 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.058962798 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.215946428 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.997882274 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 6.996005986 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.073021438 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.83522711 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.245402602 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.236621515 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.184170134 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.025722282 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.647937206 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 6.989638343 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.182378602 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.185193773 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.230395184 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.243488277 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.229546353 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.353352617 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.995820248 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 6.995325472 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.314237236 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.111995736 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.946676894 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.345204553 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.224161569 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.529107573 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.021752572 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.279936783 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.124749778 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 6.999558814 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.641687549 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 6.998201481 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.201160433 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.035047094 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 6.997507698 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 6.998092611 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.186763448 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.901434756 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 6.995978675 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.720482799 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.056150763 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.000685326 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.20087805 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.002655133 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.240698871 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.00214092 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.228277099 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.899296008 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.027865173 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.17036495 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.242837289 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.647904054 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.308670016 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.238876158 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.112125871 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.220666744 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.806559316 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 6.998480961 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.258574416 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.999852008 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 6.998094935 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.166449432 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.000701635 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.139970266 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.001370047 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.262994001 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.018227923 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.224518557 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.002369401 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.235711034 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.029578753 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.048870341 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.003100228 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.122926809 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.001298082 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.851714625 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.152547413 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.002795157 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 6.999496745 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.592414783 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.001295844 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.153889331 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.223701497 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.019651371 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.066865142 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.563609184 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.992737249 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.082324087 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.020765036 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.634796415 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.001582267 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.249397886 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.989535901 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.479169389 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.00033891 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.233607613 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.184927476 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.003757705 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.000366611 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.844694751 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 6.999955742 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 6.999161256 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.155728501 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.423143621 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.905500898 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.198155464 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.00527654 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.128690907 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.004632475 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.076827565 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.341265698 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.001342507 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.000559324 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 6.999854341 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.003224486 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.001703793 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.208791338 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.026703536 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.433433884 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.136016652 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.254551434 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.308858603 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.19907925 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.041507914 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.005450845 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.222580739 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.005265588 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.064247534 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.004336702 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.020967783 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.229474654 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.006743624 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.206743334 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.236296049 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.891725626 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.049637613 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.00565269 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.002231576 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.919037564 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.144375078 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.08939621 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 6.996766652 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.002842491 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.116923144 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.122640313 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.185617842 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.841167463 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.156970075 seconds)
  done (took 929.520579851 seconds)
done (took 1262.851012925 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.005285098 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.005125894 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.01037907 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.005553322 seconds)
  done (took 29.957351529 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.005698892 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.004873132 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.005814913 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.004549734 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.006137888 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.005309146 seconds)
  done (took 13.965371771 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.002452913 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.004262742 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.005115879 seconds)
  done (took 22.944150321 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.081189998 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.4232798 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.144483818 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.438601327 seconds)
  done (took 11.019745519 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.006356845 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.004780865 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.00594668 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.007557646 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.005803311 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.007863588 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.005870189 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.006063654 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.007179697 seconds)
  done (took 19.990290764 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.697588945 seconds)
done (took 104.507555728 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.092166915 seconds)
    (2/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.263128281 seconds)
    (3/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.107341398 seconds)
    (4/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.217427283 seconds)
    (5/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.022117978 seconds)
    (6/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.01860841 seconds)
    (7/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.063974588 seconds)
    (8/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 6.991786844 seconds)
    (9/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.321294379 seconds)
    (10/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.240995752 seconds)
    (11/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 2.944142044 seconds)
    (12/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.027798803 seconds)
    (13/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.004371795 seconds)
    (14/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.545995401 seconds)
    (15/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.146186115 seconds)
    (16/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.091090134 seconds)
    (17/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.102613204 seconds)
    (18/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.010438562 seconds)
    (19/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.163550896 seconds)
    (20/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.00417399 seconds)
    (21/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.728648143 seconds)
    (22/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.027582891 seconds)
    (23/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.017489076 seconds)
    (24/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.741128831 seconds)
    (25/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.146392723 seconds)
    (26/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.206798528 seconds)
    (27/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.141419078 seconds)
    (28/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.829066044 seconds)
    (29/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.229127576 seconds)
    (30/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.755093785 seconds)
    (31/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.012399514 seconds)
    (32/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.396779426 seconds)
    (33/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.147036666 seconds)
    (34/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.377564149 seconds)
    (35/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.008126303 seconds)
    (36/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.090747615 seconds)
    (37/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.010048947 seconds)
    (38/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.257410764 seconds)
    (39/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.011729198 seconds)
    (40/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.930867825 seconds)
    (41/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.382784416 seconds)
    (42/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.143544699 seconds)
    (43/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.259097049 seconds)
    (44/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.267290862 seconds)
    (45/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 6.999143838 seconds)
    (46/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.483501948 seconds)
    (47/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.390767928 seconds)
    (48/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.223985857 seconds)
    (49/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.008482708 seconds)
    (50/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.153580663 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.006774703 seconds)
    (52/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 4.022289105 seconds)
    (53/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.152446719 seconds)
    (54/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.109958676 seconds)
    (55/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.095885396 seconds)
    (56/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.87465897 seconds)
    (57/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.653231204 seconds)
    (58/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.017804547 seconds)
    (59/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.493363714 seconds)
    (60/341) benchmarking ("sort", Bool, false)...
    done (took 2.22507302 seconds)
    (61/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.011159542 seconds)
    (62/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 8.512495063 seconds)
    (63/341) benchmarking ("sort", Int64, false)...
    done (took 5.656365461 seconds)
    (64/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.853639183 seconds)
    (65/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.332451733 seconds)
    (66/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.397670668 seconds)
    (67/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.262968617 seconds)
    (68/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.259490018 seconds)
    (69/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.373953791 seconds)
    (70/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.340824525 seconds)
    (71/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.092587572 seconds)
    (72/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.132535646 seconds)
    (73/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.028788023 seconds)
    (74/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.392586277 seconds)
    (75/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.095080325 seconds)
    (76/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.09131666 seconds)
    (77/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.257172712 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.035151547 seconds)
    (79/341) benchmarking ("sort", Float32, false)...
    done (took 5.688090956 seconds)
    (80/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.108887631 seconds)
    (81/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.105326915 seconds)
    (82/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.269996064 seconds)
    (83/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.101943827 seconds)
    (84/341) benchmarking ("sort", Float64, false)...
    done (took 5.796226521 seconds)
    (85/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.029054388 seconds)
    (86/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.257972317 seconds)
    (87/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.305207368 seconds)
    (88/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.026866904 seconds)
    (89/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.009491439 seconds)
    (90/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 4.276498642 seconds)
    (91/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.247558199 seconds)
    (92/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.023982512 seconds)
    (93/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.299964889 seconds)
    (94/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.274826617 seconds)
    (95/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.201865823 seconds)
    (96/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.155677259 seconds)
    (97/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.28043451 seconds)
    (98/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.146402118 seconds)
    (99/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.039714497 seconds)
    (100/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.011799103 seconds)
    (101/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.183347422 seconds)
    (102/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.278926229 seconds)
    (103/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.423502628 seconds)
    (104/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 5.928739468 seconds)
    (105/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.013951383 seconds)
    (106/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.432791398 seconds)
    (107/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.796927378 seconds)
    (108/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.102296134 seconds)
    (109/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.037649576 seconds)
    (110/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.021927889 seconds)
    (111/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.379203493 seconds)
    (112/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.267339253 seconds)
    (113/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.155803591 seconds)
    (114/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.025095458 seconds)
    (115/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.466675494 seconds)
    (116/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.155885081 seconds)
    (117/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.426627252 seconds)
    (118/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.742452799 seconds)
    (119/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.08683032 seconds)
    (120/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.154445355 seconds)
    (121/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.905431077 seconds)
    (122/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.418202296 seconds)
    (123/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.755288374 seconds)
    (124/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.101448085 seconds)
    (125/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.420617964 seconds)
    (126/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.092625487 seconds)
    (127/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.30103162 seconds)
    (128/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.791267368 seconds)
    (129/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.132180413 seconds)
    (130/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.213383337 seconds)
    (131/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.012505187 seconds)
    (132/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 3.854089229 seconds)
    (133/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.072418004 seconds)
    (134/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.013341579 seconds)
    (135/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.151562758 seconds)
    (136/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.112925786 seconds)
    (137/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.093353655 seconds)
    (138/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.095345575 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.138610765 seconds)
    (140/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.027043343 seconds)
    (141/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.073398139 seconds)
    (142/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 2.973102759 seconds)
    (143/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.020016353 seconds)
    (144/341) benchmarking ("map", abs, Float64, false)...
    done (took 3.720614397 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.270427295 seconds)
    (146/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.90896051 seconds)
    (147/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.332898358 seconds)
    (148/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.015426647 seconds)
    (149/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 4.342876466 seconds)
    (150/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.115255394 seconds)
    (151/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.307165032 seconds)
    (152/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.288562546 seconds)
    (153/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.217671457 seconds)
    (154/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.036620281 seconds)
    (155/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.189269489 seconds)
    (156/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.09653463 seconds)
    (157/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.067667438 seconds)
    (158/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.659240964 seconds)
    (159/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.049819966 seconds)
    (160/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.332948204 seconds)
    (161/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.017487459 seconds)
    (162/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.015197939 seconds)
    (163/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.093781607 seconds)
    (164/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.906532926 seconds)
    (165/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.038564946 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.981966833 seconds)
    (167/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.10920303 seconds)
    (168/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.018413517 seconds)
    (169/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.409457632 seconds)
    (170/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.218684703 seconds)
    (171/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.283354013 seconds)
    (172/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.023514826 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.116987696 seconds)
    (174/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.014081012 seconds)
    (175/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.636467858 seconds)
    (176/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.149770483 seconds)
    (177/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.031869501 seconds)
    (178/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.278938159 seconds)
    (179/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.051976682 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.235818997 seconds)
    (181/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.408244489 seconds)
    (182/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.245509769 seconds)
    (183/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.150258398 seconds)
    (184/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.017844234 seconds)
    (185/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.210632555 seconds)
    (186/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.018120226 seconds)
    (187/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.019978618 seconds)
    (188/341) benchmarking ("sort", Int8, false)...
    done (took 4.981035915 seconds)
    (189/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.899368463 seconds)
    (190/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.413151114 seconds)
    (191/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.423008066 seconds)
    (192/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.114225091 seconds)
    (193/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.202839621 seconds)
    (194/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.02251402 seconds)
    (195/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.796800228 seconds)
    (196/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 8.54880716 seconds)
    (197/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.0656785 seconds)
    (198/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.162970882 seconds)
    (199/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.207474544 seconds)
    (200/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.584095024 seconds)
    (201/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.043797021 seconds)
    (202/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.310801081 seconds)
    (203/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.414134205 seconds)
    (204/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.095730695 seconds)
    (205/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.01852897 seconds)
    (206/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.033207887 seconds)
    (207/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.019899357 seconds)
    (208/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.196631217 seconds)
    (209/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.994958218 seconds)
    (210/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.210425713 seconds)
    (211/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.372077727 seconds)
    (212/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.135484438 seconds)
    (213/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.018907091 seconds)
    (214/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.334976804 seconds)
    (215/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.517752765 seconds)
    (216/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.096583997 seconds)
    (217/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.207789025 seconds)
    (218/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.616878744 seconds)
    (219/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.413399949 seconds)
    (220/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 7.870876417 seconds)
    (221/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.21056624 seconds)
    (222/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.830616842 seconds)
    (223/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.051678197 seconds)
    (224/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.154164409 seconds)
    (225/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.943187822 seconds)
    (226/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.176347222 seconds)
    (227/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.254196503 seconds)
    (228/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.014048125 seconds)
    (229/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.023010329 seconds)
    (230/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.225518064 seconds)
    (231/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.029550235 seconds)
    (232/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.096539813 seconds)
    (233/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.01822942 seconds)
    (234/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.723180018 seconds)
    (235/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.687956535 seconds)
    (236/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.308916552 seconds)
    (237/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.029302889 seconds)
    (238/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.130747021 seconds)
    (239/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.538162944 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.020636386 seconds)
    (241/341) benchmarking ("sort", BigInt, false)...
    done (took 7.024934287 seconds)
    (242/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.037317361 seconds)
    (243/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.148034303 seconds)
    (244/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.155255922 seconds)
    (245/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.174425363 seconds)
    (246/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.323394458 seconds)
    (247/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.24590069 seconds)
    (248/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.035973747 seconds)
    (249/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.078668184 seconds)
    (250/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.030154041 seconds)
    (251/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.11989435 seconds)
    (252/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.083963214 seconds)
    (253/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.774437117 seconds)
    (254/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.020619846 seconds)
    (255/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.08640816 seconds)
    (256/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.122564443 seconds)
    (257/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.615829342 seconds)
    (258/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.102708654 seconds)
    (259/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.336736348 seconds)
    (260/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.147552674 seconds)
    (261/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.186697386 seconds)
    (262/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.15227457 seconds)
    (263/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.332574898 seconds)
    (264/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.823223366 seconds)
    (265/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.219855549 seconds)
    (266/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.36397526 seconds)
    (267/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.712475801 seconds)
    (268/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.046445412 seconds)
    (269/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.151053205 seconds)
    (270/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.134244153 seconds)
    (271/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.786163122 seconds)
    (272/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.239758971 seconds)
    (273/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.35621991 seconds)
    (274/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.135768314 seconds)
    (275/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.32995822 seconds)
    (276/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.06968437 seconds)
    (277/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.191039462 seconds)
    (278/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.418045932 seconds)
    (279/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.362995596 seconds)
    (280/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.024871719 seconds)
    (281/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.209818685 seconds)
    (282/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.025398336 seconds)
    (283/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.24002934 seconds)
    (284/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.03352957 seconds)
    (285/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.07338056 seconds)
    (286/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.292299869 seconds)
    (287/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.100587163 seconds)
    (288/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.776297552 seconds)
    (289/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.040138071 seconds)
    (290/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.020626317 seconds)
    (291/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.458698454 seconds)
    (292/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.13251771 seconds)
    (293/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.333322954 seconds)
    (294/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.185124734 seconds)
    (295/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.314509957 seconds)
    (296/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.024814712 seconds)
    (297/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.446471971 seconds)
    (298/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.724392966 seconds)
    (299/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.502790962 seconds)
    (300/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.031396178 seconds)
    (301/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.076938433 seconds)
    (302/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.123524753 seconds)
    (303/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.025989189 seconds)
    (304/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.288711004 seconds)
    (305/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.284862916 seconds)
    (306/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.136075867 seconds)
    (307/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.231420161 seconds)
    (308/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.353555579 seconds)
    (309/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.433082082 seconds)
    (310/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.35967202 seconds)
    (311/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.114637356 seconds)
    (312/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.120569622 seconds)
    (313/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.0379643 seconds)
    (314/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 9.068843751 seconds)
    (315/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.188942289 seconds)
    (316/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.312306654 seconds)
    (317/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.026342705 seconds)
    (318/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.592860557 seconds)
    (319/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.408443871 seconds)
    (320/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.04905867 seconds)
    (321/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.308539366 seconds)
    (322/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.916979119 seconds)
    (323/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.8416681 seconds)
    (324/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.366223297 seconds)
    (325/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.500767868 seconds)
    (326/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.685543697 seconds)
    (327/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.177200632 seconds)
    (328/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.048818272 seconds)
    (329/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.419040705 seconds)
    (330/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.028931323 seconds)
    (331/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.183703482 seconds)
    (332/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.327429315 seconds)
    (333/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.426857406 seconds)
    (334/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.326120603 seconds)
    (335/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.53643655 seconds)
    (336/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.156893048 seconds)
    (337/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.240298307 seconds)
    (338/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.329592361 seconds)
    (339/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.911542793 seconds)
    (340/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.338637158 seconds)
    (341/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.310115244 seconds)
  done (took 1143.855979277 seconds)
done (took 1145.875483852 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.055267591 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.048423906 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.030364564 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.05214546 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.144904597 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.082248193 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.044607335 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.035113833 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.08185629 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.080634213 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.03378624 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.082293897 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.035670191 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.035666369 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.031117275 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.048469833 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.402699076 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.080454903 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.053654081 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.043321692 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.053038082 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.0331684 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.081889128 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.08364147 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.036812864 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.036052667 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.039605225 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.056108667 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.147705103 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.039510484 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.03679362 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.049151473 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.401416851 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.073600442 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.031255882 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.055792585 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.048548905 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.044712732 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.03627569 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.06984909 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.557641842 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.043434042 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.037330316 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.033148998 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.034059115 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.028954396 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.037911603 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.043569724 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.049994781 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.050455883 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.542194151 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.060988667 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.042353637 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.035416108 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.048780125 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.020758755 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.025990884 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.051566552 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.057270277 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.05275701 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.383776648 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.086502409 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.039331807 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.056857526 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.047723272 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.621585244 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.05639292 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.041736567 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.558610101 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.050102301 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.624290385 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.070334194 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.038049056 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.054684708 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.073480728 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.404473287 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.077168273 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.038365962 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.048664909 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.038213053 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.048396299 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.051532375 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.041922499 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.03602768 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.05212718 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.087947413 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.050510877 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.040388951 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.048838517 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.05976776 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.049436657 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.052941321 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.043656095 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.034819097 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.039004859 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.041492764 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.044458557 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.044033933 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.042068895 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.049400629 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.558223521 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.062653257 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.035667424 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.035902855 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.038378968 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.055481149 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.558842947 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.049544281 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.061275738 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.087288655 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.039605359 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.386757365 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.088613332 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.056314762 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.050921674 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.042456717 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.03607855 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.387113394 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.58907018 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.065376787 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.039762161 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.040937975 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.055171028 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.040223024 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.03677485 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.405808836 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.0829057 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.054858233 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.166087161 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.052613834 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.075571039 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.041509539 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.04269525 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.089749036 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.045287035 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.07469421 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.042497495 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.056812622 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.060776535 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.036672313 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.055580034 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.052649389 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.039782248 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.046907558 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.037492772 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.090638379 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.055832965 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.054551834 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.062011131 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.16767101 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.039252432 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.388770109 seconds)
done (took 321.05996157 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.099333453 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.035960215 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.11405378 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.035833693 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.102487483 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.087453044 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.035983132 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.036597075 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.035305636 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.418762135 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.036009861 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.041599718 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.034332698 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.035517161 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.084761697 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.037178317 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.037104366 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.269668294 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.038045436 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.095931676 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.034129286 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.037188243 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.036714822 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.423947432 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.035942703 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.0344333 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.096362799 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.037522052 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.279031499 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.038480233 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.034149195 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.27793724 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.09665906 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.049898899 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.045117836 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.044958583 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.104956548 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.047657467 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.084857528 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.085222867 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.115681977 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.070415918 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.037600636 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.037200193 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.042117891 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.037989903 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.038118291 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.067698588 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.037260156 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.04588964 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.257929202 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.043104956 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.046365421 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.038037642 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.038500186 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.052353274 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.039378879 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.039265545 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.098512029 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.038651716 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.086140297 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.427876738 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.419549174 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.039287277 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.040589726 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.039223447 seconds)
  done (took 194.874632417 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.10845349 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.113069188 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.10633991 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.044403965 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.087789806 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.107868786 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.045439738 seconds)
  done (took 16.577519827 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.047857019 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.040257689 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.063272149 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.063035363 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.040339498 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.18057611 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.052157286 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.044516219 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.066865026 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.041939204 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.377638277 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.063747543 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.04774386 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.03847799 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.052599162 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.068597625 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.042489149 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.041047011 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.138770319 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.118949734 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.045931381 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.048554065 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.071792901 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.051884438 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.041624907 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.041785745 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.041626786 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.049354326 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.043086002 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.041723542 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.0418158 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.054239993 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.044193662 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.041835947 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.041749893 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.042927416 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.041714697 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.042307474 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.041607267 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.04010392 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.041814487 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.041213007 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.041516992 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.041846556 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.041330859 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.066042746 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.043169252 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.042941279 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.043063405 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.041581518 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.073598242 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.043113458 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.042377695 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.047384767 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.084876207 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.050307558 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.0425312 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.042632568 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.043060044 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.04267554 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.042674899 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.121073548 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.065268675 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.042563709 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.066581451 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.081457007 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.043534837 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.043519371 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.042706036 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.068623158 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.042761066 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.066802742 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.043512036 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.143846725 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.04397908 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.185083065 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.067396897 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.047136778 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.046983944 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.042553644 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.052097557 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.044150932 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.04698403 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.051294573 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.048264795 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.044251198 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.044502237 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.046800416 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.052259109 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.044379956 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.093333424 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.044395831 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.044744047 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.144279991 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.046120948 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.141982806 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.071483192 seconds)
  done (took 221.874688027 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.049722356 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.050255014 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.046656897 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.058370336 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.046165653 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.045014163 seconds)
  done (took 14.26677856 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.048460765 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.049056937 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.04505956 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.045003538 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.045634614 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.045496993 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.045653097 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.047173596 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.048671155 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.045498635 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.046509571 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.046691937 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.047345772 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.046455435 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.0461282 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.045637504 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.04592912 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.046726837 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.045476456 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.0453225 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.188362602 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.046266383 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.045327314 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.050407597 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.050593601 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.046019639 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.054944956 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.046778078 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.046402358 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.051840724 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.05201035 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.04608448 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.050724009 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.051249584 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.051520929 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.051336368 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.050476479 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.048143681 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.046055741 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.047221585 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.047577349 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.047188003 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.046915352 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.048518556 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.049337224 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.055685346 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.051674687 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.056616329 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.047093476 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.048497409 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.048952128 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.047745046 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.048762769 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.048395222 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.053416872 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.05363329 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.052424436 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.049729837 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.047972634 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.052965548 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.051890572 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.048705383 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.050213956 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.052608507 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.053072746 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.050196954 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.052439326 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.051773603 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.047979621 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.048237265 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.050206544 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.049600633 seconds)
  done (took 150.631878793 seconds)
done (took 600.212704993 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.081785581 seconds)
  done (took 9.05523703 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.199769339 seconds)
  done (took 9.251551476 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.693860736 seconds)
  done (took 12.687668014 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.05969148 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.091095065 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.069893126 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.056097797 seconds)
  done (took 30.262781663 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.237008705 seconds)
  done (took 9.212818228 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.064798488 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.050161399 seconds)
  done (took 16.152669751 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.223706448 seconds)
  done (took 9.200348118 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.510593789 seconds)
  done (took 9.496780707 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.074327593 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.084585643 seconds)
  done (took 16.155742338 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.05666048 seconds)
  done (took 9.032973503 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.85983163 seconds)
  done (took 9.915870571 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.061606008 seconds)
  done (took 9.055320024 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.074631933 seconds)
  done (took 9.052036608 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.123421367 seconds)
  done (took 10.099858755 seconds)
done (took 170.605555023 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.059800555 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.052227531 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.050774483 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.052005516 seconds)
  done (took 30.190903473 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.088298958 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.088819993 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.096520595 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.087661868 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.078489802 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.077985933 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.089023086 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.089312146 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.078503945 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.086613946 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.089758168 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.086378298 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.08769508 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.097261378 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.098161665 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.086853371 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.089175177 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.070162464 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.079904751 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.097331871 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.083826944 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.059726561 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.055075426 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.054852676 seconds)
  done (took 51.974605959 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.245141306 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.121215277 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.208597474 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.09976955 seconds)
  done (took 10.65212892 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.053896697 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.118456157 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.105868124 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.101780205 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.139692009 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.1575198 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.107222511 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.263585289 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.170357488 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.183031739 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.061720565 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.079383702 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.079667432 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.099878429 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.153714634 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.056298541 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.054966617 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.171328799 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.117585392 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.265330471 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.055268971 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.111338937 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.1417757 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.108365424 seconds)
  done (took 52.936500889 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.05654809 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.064677496 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.062775601 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.0547587 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.045467548 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.05682833 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.063366123 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.058589747 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.079394115 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.058924511 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.056870137 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.05959667 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.063717768 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.057457609 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.057660689 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.069870892 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.071333373 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.058369795 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.060788831 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.064068836 seconds)
  done (took 43.201600401 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.055925916 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.902370751 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.403180304 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.307245635 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.057307427 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.055516953 seconds)
  done (took 32.761663734 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.070391798 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.0643176 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.0577728 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.115182565 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.195815457 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.065835769 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.05686118 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.067568923 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.104568263 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.1255113 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.078457621 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.08510725 seconds)
  done (took 27.068396406 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.058236944 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.059366361 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.058725719 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.069816221 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.068976086 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.065930297 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.065345478 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.056253554 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.070780176 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.076313353 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.066069726 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.069382184 seconds)
  done (took 46.769077827 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.272380659 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.283702134 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.276394461 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.662213115 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.619923211 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.000400035 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.345401621 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.271757248 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.780021043 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.810069994 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.350124036 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.121522892 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.019467056 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 3.983536348 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.974541287 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.300498062 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.059658109 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.916408839 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325222262 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.104925942 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06080206 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.059034213 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.060733826 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.346972813 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.380835995 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.0621852 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.271294136 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.075017515 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.090658577 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.289289992 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.515870724 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.112658541 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.262217289 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.320091632 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.409917925 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.209061243 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.076912627 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.241946379 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.103422188 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.094195417 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.069649644 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.070783231 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.604551988 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.074189885 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.33318028 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.06061907 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.160911586 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.056659452 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.986541384 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.314459963 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.161563221 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.059766542 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.09633424 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.491678371 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.180352281 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.271027952 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065964305 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.23845556 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.117798288 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.252343317 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.133314367 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.124512628 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.272658936 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.985508644 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.413634818 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.171830191 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.064063827 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.067163801 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.76102964 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.303348508 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.14237462 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.314504063 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.805460236 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.061451083 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.065025271 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.07028025 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.152390792 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.061526322 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.352256223 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.056414485 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 3.982130795 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.161442739 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.459317081 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066473289 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.061082617 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.070017514 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.907310341 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.088591129 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.159631679 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.258167054 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.37258919 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.063481613 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.064218462 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.085167668 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.066204642 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.011119503 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.636809202 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.127422332 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.990602709 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.625263144 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.533310853 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.027901501 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.583738387 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.105835013 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.343260367 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.203464567 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.469296009 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.27198001 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.308433425 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.598853459 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.068789483 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.621951314 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144986402 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.138609498 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.06417533 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.62885771 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.256994539 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.300785972 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.165877422 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.0639383 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.990052671 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.074360432 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.267185959 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.543383871 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.117581704 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.063748883 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.070192421 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.062660785 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.06724252 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.177815735 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080295984 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.351508241 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.131409901 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.065462485 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.000323248 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.070134855 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.345059009 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.719147104 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.124997775 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.32508223 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.326322033 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.765289725 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.087523686 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.085689609 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.337142649 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.131411271 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.140469438 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.636516816 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.197492714 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.163464772 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.064991881 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.204385624 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.073175023 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.069268065 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.474916696 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.478044173 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.49101265 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.109336015 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.083560691 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.093385289 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.255997026 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.308330362 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.123961541 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.092591135 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.071896217 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.149121905 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.294834518 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.067735776 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.082596802 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.316970942 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.308987947 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.353455528 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.139715634 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.120576972 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.138927439 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.077213805 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.279104289 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.148965057 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.743701941 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.614389138 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.287990128 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.640297273 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.032960809 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.708351877 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.267225667 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.435549886 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.083090395 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.520578067 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.253992845 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.750228559 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.098124185 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.596279391 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 3.994637077 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.071923709 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.405289528 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.023728578 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.639261977 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.127405603 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123949641 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.070605138 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.068848592 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.07500008 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.069427115 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.168379653 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.13767168 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142334121 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.996240019 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.71899284 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.103023051 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.071389622 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.069254272 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.384419477 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.84168766 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.019960939 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.069013707 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.145480552 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.814464967 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.622330762 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.073970348 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.072796091 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.679332855 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.678210528 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.980323201 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.194159653 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.820422061 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.095672306 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.270549502 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.189653823 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.360157173 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.761729856 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.146158069 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.069632253 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.076463022 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.771952438 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.080049445 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.771428365 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.352795157 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.34005573 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.506936246 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.128681402 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.279655563 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.085178628 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.071374271 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.568488246 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.095586643 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.061878876 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.275029451 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.592095308 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.341505622 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.705214218 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.155998792 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.078829874 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.344154683 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.069739546 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.546593291 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.756142865 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.066408118 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.073429241 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.317196115 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.757107074 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.074078155 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.982377009 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.080556349 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.284467033 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.275041033 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.354109637 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.36933236 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.513513779 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.078749029 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.077921931 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.098638329 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.316757617 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.073254146 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.107491054 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.51792018 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.129714378 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.500004322 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.33417058 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.389937112 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.694507237 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.339946424 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.132796749 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.084055762 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.722256402 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.192685362 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.006278649 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192334416 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.00016873 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.753823639 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.362477523 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.091831757 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.347811651 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.048961038 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.416232254 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.364615985 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.281244979 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.10711027 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.102556168 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.074781971 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127201527 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.08735453 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.276553811 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.189802214 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.080202478 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.616446774 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113637845 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.120741392 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.078012683 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.574745623 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094500004 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.078750612 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.768514071 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.718987084 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194314249 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.14717597 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.819671734 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.583332922 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.104977837 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.963476158 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.721626236 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.349089792 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.126158849 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.527303704 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.113964544 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.47924669 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.08715048 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.287902717 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.080453604 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.664788884 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.1227369 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356205523 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033020923 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.288370714 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.282276604 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.105118168 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.062252419 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.002353489 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.183929385 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.944135295 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.061205092 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.079752704 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.103605624 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.464363699 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.292395862 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.505151911 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.897635962 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.079549649 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.42331119 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.462943333 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.710437465 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.110867552 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.079631852 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.349697127 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.830008823 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.332778606 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.358058422 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.086571434 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.735622718 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.291102906 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.204007333 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.996691168 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.560778006 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.662580436 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.784088923 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.090243983 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.281430695 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.346935676 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.366240997 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.113882021 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.151843914 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.482784535 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.352343802 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.768572867 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.005202858 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.078276622 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.472750913 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.105905645 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.175659393 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.321004609 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.394159528 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.71035953 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.559922901 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.1222592 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.457348595 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.514498186 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.492436113 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.298008618 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.446715827 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.401612063 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.962073765 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.491535359 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.292456242 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.167812872 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.369478685 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.948556063 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.790495025 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.323750546 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.085971073 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.008888217 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.287699595 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.089911254 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.538236519 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.614846149 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.084889835 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.29274898 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.541136312 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.619083242 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.279949469 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.105828747 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.046755891 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.103803611 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.100449989 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.081900651 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.562132501 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.373851455 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.095050681 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.020631381 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.751986679 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.008409003 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.293658163 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.285268668 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.11850394 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.638774609 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.286491475 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.177425584 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374821058 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.334402458 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.117592085 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.008577966 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.819762231 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.028887032 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.156411443 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.506079761 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.099868457 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.084980046 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.2856092 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.011670823 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.128981842 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.702932698 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.293033331 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.663343163 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.360224374 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.202794327 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.330927228 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.385524145 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.086242541 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042219356 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355646396 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.009876349 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.714477465 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.764176877 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.76491548 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.154828053 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.084338191 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.085975563 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.355137252 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.354248683 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.169844161 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.680647719 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.116033895 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.107565485 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.344690179 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.164955654 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.086189305 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.088944332 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.579858431 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.310843208 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.103620625 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.100373356 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.29650299 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15815159 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.280705712 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.15953903 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.586153773 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.090572436 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.090736436 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.117829204 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.033251653 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.083950818 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.787695132 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.144902321 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.108019683 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.364082675 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.735142247 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.289245802 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.478798165 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.950511357 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.290230075 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.129275439 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.089190968 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.090385801 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.468363168 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.383609078 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.085408222 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.358365368 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.129136458 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.091879107 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.092999135 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.054246305 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.087690629 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.828450711 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.974722122 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.818066623 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.482149681 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.098871412 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.117952825 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.08996873 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.013366508 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.118519919 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.128544258 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088893581 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.095722604 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.456915485 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.122429189 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.167261454 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090197046 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.088188241 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.092393627 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.299325566 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.601507367 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104033745 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.788327262 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.290418594 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.091675669 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.570438486 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.542206167 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.354955004 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.129364782 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.289773038 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.341754253 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.628324612 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.298623002 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.072746356 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314178884 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.089554716 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.360202963 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.361622786 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.089979647 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.300829907 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.56917769 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.376048314 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.113649141 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.651041511 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.148481904 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.305965046 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.051889598 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.104184745 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.089744869 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.358968925 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140223671 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.089617587 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.097889869 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.64391336 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.913019129 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.558022706 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.245302836 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.369437115 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.924369332 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.843081336 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.091124417 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.015694492 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.095442613 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.113680166 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.092848051 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.108972083 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.794301158 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.814264801 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.303595198 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.401193678 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.016748337 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.293146531 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.669294684 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.017567831 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.05943041 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.089632719 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.351223838 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.017856109 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.092779623 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.101578362 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.083103908 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.810213406 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.361135188 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.0916067 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.034495222 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.096217614 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.094501771 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.090798555 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.176321567 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.092308325 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207391441 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.360553267 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.413555904 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.188886137 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.731862426 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.787071939 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.029232312 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.134931641 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.650381416 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.659960642 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.07478342 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.861186813 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.784304205 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03589671 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.094981149 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.109675345 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.353503199 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.096924917 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.09513357 seconds)
  done (took 2283.79806185 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.158178512 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.207365565 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.224517781 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.196385524 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.231319998 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.178650001 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.177410367 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.139019829 seconds)
  done (took 59.52811537 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.092005853 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.10693343 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.530671076 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.108738495 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.129653884 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.104196194 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.380055508 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.118489839 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.103300138 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.104166134 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.102090434 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.096793493 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.434850354 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.138963586 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.098868059 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.118787047 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.117907467 seconds)
  done (took 80.941402974 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.115487676 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.412348902 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.156691628 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.112975541 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 8.880636177 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.125924527 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.052823488 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.121528815 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.122321179 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.490353409 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.416756187 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.117530301 seconds)
  done (took 93.161416999 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.121564031 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.114366654 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.114832986 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.114039787 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.113840119 seconds)
  done (took 12.620326644 seconds)
done (took 2827.639898747 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.362505194 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.172328001 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.223421937 seconds)
  done (took 6.431752601 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.263847595 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.307500996 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.421468363 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.426487154 seconds)
  done (took 11.462799818 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.406309593 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.491449526 seconds)
  done (took 6.934244908 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.537965995 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.12716259 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.514531942 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.11764304 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.120742566 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.117595667 seconds)
  done (took 23.398203172 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.117225241 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.116963873 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.114847805 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.116628201 seconds)
  done (took 10.503074228 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.11456164 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.894363449 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.119804798 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.128275878 seconds)
  done (took 22.295019745 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.273792347 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.235507109 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.887101893 seconds)
  done (took 10.434747352 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.739106728 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.558614324 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.729466074 seconds)
  done (took 10.064449499 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.971761126 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.933578881 seconds)
  done (took 7.943095199 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.25853886 seconds)
  done (took 4.296880538 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.9486838 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.428599482 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.610925457 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.677272481 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.747291939 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.355718486 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.447352635 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.395202551 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.546026911 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.578144837 seconds)
  done (took 27.773874701 seconds)
done (took 158.116568411 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.567629084 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.222934061 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.37140469 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.494066202 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.37361306 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.330054139 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.379997669 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.485270371 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.178003446 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.161473447 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.498654539 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.358067313 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.35456322 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.141892268 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.35454766 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.144798319 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.354467466 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.589596625 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.176227127 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.416237338 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.416621087 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.139320431 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.34154391 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.156803121 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.357947172 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.283949187 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.754369452 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.142885418 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.324933192 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.767800364 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.286709824 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.563059905 seconds)
  done (took 177.528201773 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.11895448 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.109091272 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.115679775 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.120335077 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.456813116 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.119788755 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.12144433 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.120305785 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.350855974 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.3353738 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.120568371 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.446369844 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.121919517 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.120227988 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.121021063 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.121435975 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.462612376 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.123531713 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.122005533 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.121330351 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.121427931 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.320994541 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.141857908 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.334959214 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.449363879 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.122030628 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.121392726 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.121955087 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.121726776 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.120806751 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.123308982 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.122469107 seconds)
  done (took 216.115338933 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.121632058 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.123434224 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.124150526 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.122502092 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.122935534 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.122260693 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.12442411 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.12143624 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.809598677 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.799899791 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.122856521 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.12176297 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.123412734 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.120650746 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.128161351 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.121638081 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.126923856 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.12954741 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.131757724 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.133941596 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.124470279 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.979339452 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.125648558 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.002609979 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.12365706 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.12968077 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.123839312 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.124471213 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.124475148 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.122814084 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.124127609 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.122476358 seconds)
  done (took 229.125808006 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.367875929 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.123556771 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.125914744 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.132162765 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.126804581 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.123982236 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.125363203 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.372399081 seconds)
  done (took 21.54389929 seconds)
done (took 646.368175728 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.481508245 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.881286163 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.255862922 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.144776887 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.374739229 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.190806043 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.136751262 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.201246933 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.798528893 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.205040076 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.559483757 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.148107735 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.87847169 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.169544744 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.254613565 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.197256658 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.507261892 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.795618715 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.277466928 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.813337689 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.291034594 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.084756846 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.221483468 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.842233803 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.570905831 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.112224667 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.180681267 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.510560653 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.145217451 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.277059013 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.796869032 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.387115837 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.156883997 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.142092963 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.194263111 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.159226487 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.349795471 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.153117879 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.252462209 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.891295241 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.806180743 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.673327062 seconds)
  done (took 110.516518522 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.129539402 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.125608484 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.126611669 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.127582375 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.13682799 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.126704728 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.126699735 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.127385404 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.127398331 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.127597136 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.127783733 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.135976033 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.127626373 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.135677569 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.128014453 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.128746265 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.128001557 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.135554799 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.127654521 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.128866694 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.12870781 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.128307021 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.12441108 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.128422088 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.127829821 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.127713485 seconds)
  done (took 57.403678409 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.126062631 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.291732887 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.360113194 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.14504085 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.124174507 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.127825065 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.153064865 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.135111604 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.126570305 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.125525242 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.223279313 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.129069902 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.137320228 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.357693381 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.142958776 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.123772101 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.12130477 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.12508667 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.299213308 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.141593252 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.156565321 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.136146902 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.154977249 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.144126481 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.126932148 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.125486138 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.111076185 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.540416629 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.140427217 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.226089367 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.184109002 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.16007548 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.490544957 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.378474917 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.183559822 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.133132884 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.123829939 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.277663809 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.14116804 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.125686365 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.15435194 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.137967421 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.367178857 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.641079885 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.142250662 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.125485835 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.54770178 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.293968772 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.17806553 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.143661962 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.376586022 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.146530649 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.125132939 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.127394343 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.163393525 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.14113335 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.126506058 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.383047169 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.14419672 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.156149808 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.136753207 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.128592515 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.308880869 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.136506836 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.29766296 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.139280031 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.133892932 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.128514871 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.367662911 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.146701832 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.650547564 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.143337702 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.126552295 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.227499856 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.302769585 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.5768095 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.147444868 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.311879435 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.507478203 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.16948094 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.142780649 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.533820088 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.145637236 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.142976616 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.127169609 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.12853583 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.127283277 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.17459799 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.155116061 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.57062952 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.653670262 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.401243899 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.170575743 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.145050618 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.129099851 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.386024078 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.142030921 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.128958286 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.361415193 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.663526683 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.14561687 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.136248804 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.629490094 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.145893067 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.159894982 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.144015801 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.379593025 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.148748878 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.175612402 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.128662116 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.136428648 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.133240229 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.160253994 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.144919772 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.130459807 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.620294804 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.293806804 seconds)
  done (took 262.580119008 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.134200776 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.129265983 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.116598396 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.128581402 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.129129146 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.130044758 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.127707975 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.12735356 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.13113556 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.128628263 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.129136144 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.12863426 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.131055788 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.13534944 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.180723447 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.131791089 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.616815488 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.131330835 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.128081646 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.131052466 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.700143299 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.139870727 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.130990882 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.131817576 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.129184434 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.129649561 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.1376907 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.177260706 seconds)
  done (took 174.862140366 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.131326096 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.186184443 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.147457372 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.179287268 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.145106828 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.131363876 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.156683488 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.151169971 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.137185832 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.131807469 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.132214906 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.163119201 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.142825701 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.228020563 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.163685195 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.165628712 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.235173624 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.137942312 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.132226386 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.132506872 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.179909408 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.147996584 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.163770816 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.198034704 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.147419957 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.186795541 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.149487955 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.1341908 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.13336546 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.248791055 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.152475459 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.164217767 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.17290169 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.156760476 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.253573171 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.248963243 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.238838161 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.164991552 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.140012149 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.133579874 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.133914817 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.134403007 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.188782263 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.147762275 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.135905943 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.252766231 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.153743109 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.134224653 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.154429267 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.134107864 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.147505818 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.152595239 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.17160984 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.265429921 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.181672067 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.164224973 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.159747455 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.156734073 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.135088591 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.231339579 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.141573108 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.251568568 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.155928217 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.136470253 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.136949459 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.138284762 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.18291239 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.175813595 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.239834654 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.143011909 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.232064556 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.190108606 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.149886588 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.137482801 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.1362391 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.190986742 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.247955512 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.190901 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.198414035 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.171415718 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.145244636 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.13584149 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.137141239 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.164486683 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.146110843 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.250883937 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.251005776 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.142808573 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.124861888 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.136364585 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.137539827 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.161844253 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.200600133 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.17872141 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.246271384 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.17452824 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.177017675 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.147696141 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.150724444 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.141387453 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.171406106 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.147248334 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.148689426 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.469565664 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.178373098 seconds)
  done (took 230.054151508 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.527577219 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.181767516 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.20982394 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.41980431 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.532169472 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.020828056 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.179371062 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.178601651 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.197124609 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.314471673 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.250230597 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.226803813 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.175399163 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.161503711 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.181646173 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.198952956 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.216925045 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.4844924 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.282896543 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.670480093 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.183223586 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.454227757 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.483084389 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.528764483 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.231038813 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.611309955 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.83201196 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.281103172 seconds)
  done (took 70.279381965 seconds)
done (took 907.743166098 seconds)
SAVING RESULT...
DONE!
