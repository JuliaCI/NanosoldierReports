cset: moving following pidspec: 5965
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.868804206 seconds)
loading group "shootout"... done (took 1.109062024 seconds)
loading group "string"... done (took 0.6572107 seconds)
loading group "linalg"... done (took 8.776533393 seconds)
loading group "parallel"... done (took 0.170406895 seconds)
loading group "find"... done (took 2.963899074 seconds)
loading group "tuple"... done (took 2.12153594 seconds)
loading group "union"... done (took 14.899193175 seconds)
loading group "dates"... done (took 1.450528417 seconds)
loading group "micro"... done (took 0.245216263 seconds)
loading group "simd"... done (took 4.783769261 seconds)
loading group "io"... done (took 1.057935735 seconds)
loading group "random"... done (took 9.526266123 seconds)
loading group "problem"... done (took 1.507932257 seconds)
loading group "array"... done (took 25.193750315 seconds)
loading group "misc"... done (took 1.891770841 seconds)
loading group "scalar"... done (took 43.562576289 seconds)
loading group "sort"... done (took 3.329711346 seconds)
loading group "sparse"... done (took 12.814438566 seconds)
loading group "collection"... done (took 18.407119105 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.529819814 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.12489753 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129683999 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122949894 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.189546923 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121451704 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131498218 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086411138 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.832637341 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13975226 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116348059 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.439930645 seconds)
done (took 5.375068622 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.179226938 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09333859 seconds)
    (2/2) benchmarking "String"...
    done (took 0.083864344 seconds)
  done (took 1.365948084 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072943777 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061148917 seconds)
    (3/3) benchmarking "different"...
    done (took 0.068080008 seconds)
  done (took 1.391042313 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065575081 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136273489 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067138551 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067627587 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067690215 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066770902 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.067064136 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.070490453 seconds)
  done (took 1.735636237 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.07292095 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068744534 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066398177 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068356623 seconds)
  done (took 1.467962062 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.066389766 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.124560189 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.066114623 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065693195 seconds)
  done (took 1.512331901 seconds)
done (took 8.923950238 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.246817448 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.102821851 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.29221448 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450150563 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.621984922 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.094503795 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075982982 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071330651 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.1303043 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.354632928 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.106387661 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.18416424 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092000955 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.175819871 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.043349895 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.12321767 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.08717814 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.125251268 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096219476 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133471974 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.402401736 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.079114858 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074475852 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.072189583 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069222139 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.648885552 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.667403533 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125764887 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087427525 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162681086 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.116945529 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.685755579 seconds)
  done (took 11.026449438 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094642602 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091077114 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069822402 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124929154 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.097244494 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.072925206 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.077575096 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068472163 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089656241 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125372397 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090966673 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099979566 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.067752189 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.06964659 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074849885 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.203473109 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.081088554 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.082424043 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068539354 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.082441547 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106591426 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.079449651 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.079300346 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07851227 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130342619 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169664928 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.097451665 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098626734 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.068314776 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079423265 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.116042129 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125873734 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.069452011 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.069305716 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120608896 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095936613 seconds)
  done (took 4.662897872 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.900604351 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.096908237 seconds)
    (2/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.096139213 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.101394761 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.65209643 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.067395317 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.152353419 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.242884881 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074899875 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.287705066 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153937727 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.113899152 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.150349714 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.119262757 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070364507 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.161808057 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.086304554 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118370124 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.552732847 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068473908 seconds)
    (20/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.065366707 seconds)
    (21/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067421351 seconds)
    (22/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.066122853 seconds)
    (23/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.068113202 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067706976 seconds)
    (25/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.06390266 seconds)
    (26/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.09330941 seconds)
    (27/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069843429 seconds)
    (28/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.096031871 seconds)
    (29/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088812678 seconds)
    (30/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.162968251 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.979633504 seconds)
    (32/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.310097949 seconds)
    (33/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068770418 seconds)
    (34/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.161701374 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.088783236 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.35838049 seconds)
    (37/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070906455 seconds)
    (38/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065675658 seconds)
    (39/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083252182 seconds)
    (40/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.473283459 seconds)
    (41/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.12504643 seconds)
    (42/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066045092 seconds)
    (43/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.166345863 seconds)
    (44/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.118091306 seconds)
    (45/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065460594 seconds)
    (46/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.122538307 seconds)
    (47/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079424084 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070192566 seconds)
    (49/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070206813 seconds)
    (50/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.495752068 seconds)
    (51/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.07031078 seconds)
    (52/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073384387 seconds)
    (53/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080239778 seconds)
    (54/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102184804 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068881579 seconds)
    (56/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066006431 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.173211499 seconds)
    (58/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065544763 seconds)
    (59/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067250199 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.067837646 seconds)
    (61/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.15078616 seconds)
    (62/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065727782 seconds)
    (63/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.14276617 seconds)
    (64/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.065305861 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069503364 seconds)
    (66/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.102645931 seconds)
    (67/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.06995539 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086826637 seconds)
    (69/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.096286541 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.336905934 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.037356113 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06882121 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.931023582 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.078854374 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.068770601 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.071818414 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067967701 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068721196 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068521887 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072318526 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070698881 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069296282 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.110603725 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066970067 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.065022555 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071254437 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067029959 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073329942 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.098586031 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.066136571 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.558031144 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.096981584 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.181904297 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.077227618 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.105776405 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068234708 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072800715 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068759939 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067739335 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.066985219 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067633812 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070817384 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097665709 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.07160053 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.11326076 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.03093997 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.073259034 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067942941 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.073807779 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070778818 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.071048991 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067732265 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069944318 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069464234 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066550496 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107822865 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.12312836 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066995261 seconds)
  done (took 22.817056197 seconds)
done (took 40.600804729 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.312689435 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.079830252 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.079752497 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.079414306 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.079624035 seconds)
  done (took 1.876954407 seconds)
done (took 3.159473562 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133252916 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.095447061 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064771836 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101295243 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069413912 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102281651 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.109221707 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105022997 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069468266 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069390141 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069710495 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102453157 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105474515 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.06914547 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098165164 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.10425661 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069766463 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064968517 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.06930107 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.06935808 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068976809 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068043072 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069527232 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069320001 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.100224155 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.06963166 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065053691 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099393839 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069568042 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099410213 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.070038114 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069429966 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069597615 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100515072 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069318661 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099946509 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06544122 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069291265 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069341536 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069143804 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.069874471 seconds)
  done (took 4.635611414 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071953301 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082580723 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084023817 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063349466 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072338993 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082793619 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062780525 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082510184 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088751392 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083784057 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.08261754 seconds)
  done (took 2.148853188 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070848177 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083865027 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.085003233 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063126668 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074493261 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084056653 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.065672094 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.084067048 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086372485 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084372356 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.083754551 seconds)
  done (took 2.142042248 seconds)
done (took 10.190860626 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.098187119 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066980955 seconds)
  done (took 1.417604286 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.650827749 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.348415385 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.06852077 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086846463 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.194466203 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093919461 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.204607941 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071957134 seconds)
  done (took 8.167988917 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.105003113 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068991979 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068453041 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068427703 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069076772 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.07056412 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069386937 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.070862842 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069816953 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.068160773 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069303576 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068441349 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068772607 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.069199731 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068989733 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069709708 seconds)
  done (took 2.510174388 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.101327192 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.09992223 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073305102 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.073260797 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071787528 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071095523 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073847549 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073785571 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070775462 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.072446815 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.074151021 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.072216378 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.072021093 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.063645734 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073354394 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.074365999 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.070507284 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073568434 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073607446 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.07489651 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.073369282 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.06315425 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.0718286 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.072854462 seconds)
  done (took 3.173742796 seconds)
done (took 16.545090544 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.177345887 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075635564 seconds)
  done (took 1.523064224 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.069178831 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.06957437 seconds)
  done (took 1.424680003 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074434907 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061355437 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080330577 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070907552 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.06251379 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061915643 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078273913 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062117821 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.062371651 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.06200649 seconds)
  done (took 1.961295283 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063892342 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.070188927 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067903396 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065873551 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067834716 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063122001 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065591867 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063575062 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.070068189 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062444356 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066514416 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083392958 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066091004 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083809095 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065936274 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066581876 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068461622 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.065891959 seconds)
  done (took 2.514992362 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061697672 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062506707 seconds)
  done (took 1.418844318 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.06536422 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062707376 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065235024 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064813777 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.063104239 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.062085694 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.063041354 seconds)
  done (took 1.735309272 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.42159568 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.12304835 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.344149085 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071917571 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.077022642 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.252608914 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.06447188 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068878968 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.069728162 seconds)
  done (took 2.827137566 seconds)
done (took 14.702217814 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082939627 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.182569288 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088297726 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.410097145 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092784357 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.068205053 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113521632 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.169133654 seconds)
done (took 2.517294727 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215412206 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.174241529 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.372531172 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.126327342 seconds)
  done (took 2.971520294 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.333639914 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078905739 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077617611 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067413275 seconds)
  done (took 1.865928001 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065405395 seconds)
    (2/2) benchmarking "read"...
    done (took 0.07186276 seconds)
  done (took 1.437593806 seconds)
done (took 7.801918015 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06447554 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.09436546 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.06453947 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 0.065496641 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064656736 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064293898 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 0.064564947 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.06485869 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.074844771 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064145884 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.064756234 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.064151472 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064352757 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064120764 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064735672 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064562209 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06433591 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064572932 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064362516 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064891083 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.066128362 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065580661 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.066222565 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.066481816 seconds)
  done (took 2.924615432 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080436787 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066607358 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067851513 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.0677174 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067802961 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067840461 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067220919 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066272732 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067391961 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065821964 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067812538 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067808332 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065776638 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067953479 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066197528 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.067981138 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067840001 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066381396 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065994631 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.069415964 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.069166599 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067791025 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.069676769 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069437898 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.069309227 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069551957 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.067607724 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06815048 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.069419896 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.070356319 seconds)
  done (took 3.366327064 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.067469958 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060915135 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061357878 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070346193 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061351296 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061287062 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061822798 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060720417 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061296993 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062456072 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061486633 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061212841 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061629146 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060771027 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060966262 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06183915 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065392577 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080436193 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060893968 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060846257 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065351327 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061261082 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.062352089 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.063055273 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.06368275 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.062582262 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.062296295 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.062962896 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.06231188 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.063266203 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.062103365 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.066398414 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.067875569 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.061835168 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.072379631 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.06766716 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.062480499 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065859704 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.062180247 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.061049815 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.061881279 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.062118463 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.062222816 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.062495522 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.072499668 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.06295518 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.063447622 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.063127528 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.06277089 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.062643346 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.062683099 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06443862 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.06794772 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.063470416 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.061986017 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063037064 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061908563 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.0627973 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.062018597 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.062003773 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.062062982 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.068817675 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.064058846 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.062932886 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.082776661 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.063765751 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.072571821 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.062080356 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.063171205 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.065918915 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.062832085 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.080403623 seconds)
  done (took 5.938010882 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.07265272 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.085173792 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.071705356 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.073455741 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070369319 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.063576083 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.071140248 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063648943 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073803156 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.083553748 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063526107 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.071380682 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073871695 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.071796284 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06492209 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.073196167 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.071140409 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070370061 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.063270124 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.071203893 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064736027 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.070971142 seconds)
  done (took 2.890919429 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.137194804 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067365644 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.108007156 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.077489619 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.071440831 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.077741237 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.068291674 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068346408 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068520877 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068940114 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.069194835 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.068475783 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070960256 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069105749 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.069067676 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.069042569 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068889505 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.068844111 seconds)
  done (took 2.687451822 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077388403 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.067089356 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.090487165 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.068960227 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.068456419 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067720344 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.072265285 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.072299316 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.067845981 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.068673223 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.072319566 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.068241694 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.068314263 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068339116 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067698233 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.068029721 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.06796114 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06843308 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.072539906 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.071650032 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.071953509 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.072139514 seconds)
  done (took 2.881446439 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077487333 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065605989 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080975308 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.067537302 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061352705 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061351616 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066547041 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065955412 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066198793 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065374197 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065974152 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061589299 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067297145 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066214318 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067309639 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065879294 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06550797 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066268516 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065454509 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.062519391 seconds)
  done (took 2.657462553 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086668191 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063997318 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063490854 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.08319946 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.064989943 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.065463507 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.084900484 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.065221254 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.0653567 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.087077106 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.065120909 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064993161 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.08482199 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.084714933 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.065725228 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083187854 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083337567 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.084238067 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.0652358 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064381193 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.08655586 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.065325708 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.08492348 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065227767 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065411437 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.065620158 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065510079 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.085315196 seconds)
  done (took 3.386267455 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064726365 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064001036 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064472469 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.065458456 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065667219 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.066035305 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.066043248 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.066144738 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.065799651 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.06608804 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.066177197 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.065985963 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.066378194 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.066126232 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.065916363 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.066116608 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065669092 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.066233595 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065985847 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066053996 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.065587004 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066676844 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.065680014 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.066762124 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066009553 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.065646453 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065718115 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.065837572 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065531324 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066007325 seconds)
  done (took 3.306044145 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.076220627 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072254356 seconds)
  done (took 1.48059539 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062855443 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.07807137 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060613111 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073167433 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070724653 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065811589 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.071997863 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.071064857 seconds)
  done (took 1.880271449 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067338822 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.091282472 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.064576174 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.065204448 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.067533737 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.134494541 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.077047123 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.075975169 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077933844 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.066384728 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064794754 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.076607711 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.063993558 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076165051 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064583529 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071700148 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.071505382 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.082050116 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075783192 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061192278 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075050485 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063864026 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061367213 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063697606 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062710535 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.06946101 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078340721 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.076601716 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.072596286 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.062596675 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.083249376 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.063081552 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.064356541 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.072626077 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.06771192 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.06312652 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.100237068 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.063047598 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067875105 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.061744916 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.074273434 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.083684247 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.077090202 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079844929 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.064874511 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.065183089 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.062419043 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064906193 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.066826067 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.073069513 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.062878408 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070809092 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.061874423 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.064521707 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.073803385 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.06330525 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.068866237 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.073060387 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.077155814 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.073477589 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.071713704 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.07864249 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.072357957 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.07118215 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.064617192 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.083067017 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.065191627 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.076648145 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.078704024 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.06467753 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.077196573 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.06261307 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.062013295 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.062531253 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.09686351 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.064930867 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06407314 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.063568172 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.062789703 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.064864286 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.073213374 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.069352291 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070476865 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06732819 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.079803417 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.072584499 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.063755324 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.070164262 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.08179764 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.066587836 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.063257753 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.080168104 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.066517582 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.062594752 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.08126443 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.073398877 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.064926181 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.064131068 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.066242875 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.07685311 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.063905353 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.061309088 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070831674 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.064131584 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.065047246 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06716851 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070444384 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.062539975 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.072577013 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.067167802 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.064253278 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.06074811 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.066181329 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062985428 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.060789442 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071071885 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.061022382 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074930398 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067370356 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074843032 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07555238 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071171165 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076060529 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060381096 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059150015 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077781676 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069551546 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.197324595 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081878511 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062873837 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073516303 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062872424 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.064584558 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072171603 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062108634 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064120739 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062155465 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066678924 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063146607 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063936809 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.06749145 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.070817084 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074333858 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063512709 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070617073 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062076036 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077933221 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072523723 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.069211043 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066926393 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.063990457 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075191215 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.070063282 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.072980304 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.062927563 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.064094824 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.062936789 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073354118 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071729323 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063898353 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069207651 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.06613085 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062680373 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062029797 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063111348 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065941558 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065318551 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063115178 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070224867 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.071229484 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.076019053 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069718411 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071309307 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061283019 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.062446969 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.064096628 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061719394 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066166738 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071001245 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077469205 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073671601 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082601824 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.062061688 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.07156361 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.063887756 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078705448 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.0753234 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062961074 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066557042 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060745191 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063386126 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070772935 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072762053 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075216357 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076455991 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066431333 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.06647532 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.06167485 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076727043 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062601618 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070313274 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071388469 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066577936 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061833644 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063496722 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070847808 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066544105 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.062058242 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077431879 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068117779 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06125355 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.076373826 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062146868 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072445224 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061188636 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065140917 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067190867 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063921931 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071373797 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077294451 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060716411 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.063019638 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.077138586 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063338042 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063230387 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069875422 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.077012424 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066462074 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069553843 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072191819 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071448167 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.066110626 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07091223 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062423771 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.071039906 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064961732 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073576165 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061432577 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079411698 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060510489 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076467702 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.062169979 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072297657 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.062226123 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070187914 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.062233316 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.07779751 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062992066 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061428201 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072457008 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.059470574 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.07008553 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060498826 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065526646 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067377129 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070470753 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.06274091 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070033737 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.062404175 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.069089554 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.064919622 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.068469622 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.069700186 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.064848676 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.059795197 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.068472287 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071202822 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.068429042 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.061898355 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.061913261 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.060748154 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070199274 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.061968677 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.061667526 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068383749 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.065054646 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.066268672 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.061648675 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.062568085 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.062099119 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.068648753 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.069596675 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.07800981 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.068865812 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.068145974 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.069611662 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.060337481 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.075910046 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061138159 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.068249488 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.059693108 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.066544016 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070375767 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.061364794 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079154544 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062845317 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.06974593 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.072332505 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069913703 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.06440791 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079910933 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.064101856 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.069231936 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069951369 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.065414696 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.067027839 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.062962418 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.072660618 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.070808041 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.070999124 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062521647 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.067608483 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.0691274 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063039539 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.06711899 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.062765098 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.07002995 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.062943943 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060646862 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065315639 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.071874664 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.065221613 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.065100921 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.061485036 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.059894825 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.059955461 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.066898491 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.064600832 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.068682571 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076021874 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060937147 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.061573066 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.060164452 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.06529062 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.078786077 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071803579 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069002298 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066404559 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061010721 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062929379 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.062877918 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062585759 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065926423 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.061206267 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061179719 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071540833 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.062885949 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065462395 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.061024422 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.061861505 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.069822987 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.064894964 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061058765 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.066776905 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.060319846 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066466345 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.060669611 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062036325 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.065839602 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060746126 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06477044 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071135538 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078041868 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.069195964 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.071444929 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.064635869 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.071545034 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.077601407 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06821825 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063172278 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.069549332 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060443033 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.080499487 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070994643 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069908287 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070409619 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061788274 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.076418257 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064800494 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.069925401 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076659689 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.06190808 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067974266 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060452731 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075910264 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.065573239 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059654713 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.069259117 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068513379 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.067555503 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071421463 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.062982466 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.068564306 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.065401562 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.063974295 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.062125197 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.06223093 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.068979728 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.076518425 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062004459 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065335998 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069295738 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.068378733 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066031018 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.07272751 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.068373809 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061545841 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.061886079 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.06385689 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.060933139 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.072265246 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.060990798 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.064902521 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.064944207 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.060752927 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.066629952 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.076910383 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.07008185 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070484252 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.062818678 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060617325 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07747583 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.064968182 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.064319486 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070110008 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.070656542 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073848748 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.069686352 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.079224888 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.061048616 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.06702654 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073062689 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.061076075 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061088678 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.064047466 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.062888708 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.070299739 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071838936 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.071084824 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.069396189 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.071705621 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.077092713 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.065174099 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.067855691 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.070082036 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.067643483 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.074631333 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.073500767 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.071721283 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063962343 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06352172 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065708661 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.072156404 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069977483 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071559596 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063227649 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.071017551 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.078494581 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.07109679 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068605088 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.064166496 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06545193 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07433778 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.069254831 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.063879614 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.067440784 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.068565946 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069300585 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.073501363 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.069634886 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.063769412 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.081363945 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.07409605 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.073145008 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.068121837 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.064831437 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066311092 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061759297 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075264918 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.064230324 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.064474122 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066099803 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.066522821 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.080057814 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070173038 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.076749638 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061307709 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.064722094 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.059782971 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070254084 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.064894376 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.060835958 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.070526306 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061312075 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077112353 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.074155553 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.068057811 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.083017826 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066879955 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.06992982 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.07701815 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071654033 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070832123 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.06542628 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.072229555 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063724707 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.073282618 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061610811 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060701524 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071801991 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069712882 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072526961 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060167986 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070022546 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06206349 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068543987 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.06882649 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.063990742 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063894744 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.064141367 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071638182 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.066487107 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.071795646 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.427077955 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.08471478 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.068010734 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07878874 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.076475928 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.078893706 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.081198458 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07981985 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.075404997 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.068054622 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.074917118 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.075394257 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.068245993 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.071412936 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.070466603 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.090880043 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.06945595 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.069239141 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.082518216 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.07409708 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.067399989 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.0745137 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.072354487 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.078435062 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.068289608 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.07876172 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.072189128 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.068107346 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.071980189 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.072338659 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.065620126 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.066095873 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.06638423 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.077115488 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.07093913 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.066446444 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.086146209 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.067929516 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.075339951 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078368587 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.073464078 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.06811416 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.065426699 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.067039556 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.079959412 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.082675297 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.070030738 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075471067 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.068073742 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.076057389 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.064937015 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.075221981 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.074857976 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075237447 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.065773741 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.066932434 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.081756737 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.082525792 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.071215993 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.075832022 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.075497036 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.06721984 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.089009606 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.075066662 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.066980645 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.077279115 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.068105623 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.064713065 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.064552432 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.067212284 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.077750912 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.065120755 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.068570542 seconds)
  done (took 42.892727317 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.104133676 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064872349 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.064081204 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064770263 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075605435 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06437482 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063519854 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064049577 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.063918811 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.066200976 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.062891062 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063096953 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074157171 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076608806 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07355604 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.067314917 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06427948 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.065728958 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.065133966 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.065786376 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075350891 seconds)
  done (took 3.006642986 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.066739395 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.066493965 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.075098622 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.074715873 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.073183225 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.062833512 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.070889935 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.063292355 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.070817215 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06343205 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.071110173 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.063059933 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.063284049 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.063423919 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.063537028 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064575872 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.071068184 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070638586 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.064059094 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.073494496 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066645338 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.073572009 seconds)
  done (took 3.004146161 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.064958125 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.064134279 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.072684129 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.065282783 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.064517549 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.069038526 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.0649104 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.069564487 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.069844898 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.069304564 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.074883289 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.065947911 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.064527631 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.070889048 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.064102787 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.065510508 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.109668818 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.065944792 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.065446386 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.064359476 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.068115206 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.074828229 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.064880554 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.065229869 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.069244889 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.068325484 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.064547167 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.067733931 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.065742677 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.068933125 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.065373688 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.064114984 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.073613817 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.073589823 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.068893295 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.068814832 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.066156765 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.066003805 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.06444485 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.064425509 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.073265249 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.066196901 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.064837747 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.066597514 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.074188249 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.064777032 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.064347676 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.074446065 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.06424016 seconds)
  done (took 4.862736844 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.073872305 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.117986889 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.070436309 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.098954821 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.078379178 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.071091683 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.070896889 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.100416192 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.065382974 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06639889 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.079347493 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.079427349 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.067542017 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.069296729 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.072234488 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067122446 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.068343034 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.066810984 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.070724252 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.067424826 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.07060833 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.072143838 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.078056125 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.077280031 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066621117 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.064804625 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.065106924 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.066759281 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.075982198 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.069377366 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.067119976 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.067652307 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.076369203 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068976668 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.065451085 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.065807705 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076757807 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065742115 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.065756473 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.064066982 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.065363953 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.067021849 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.071601076 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.078988368 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.067436837 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.072838869 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.067550886 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.065428992 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.07863257 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.067622793 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.072214943 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.080897187 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.069394662 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.068703773 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.069830099 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.079077895 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.068468563 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.066633996 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.068333425 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.07861499 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.065656815 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.068589831 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.07991208 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.068353979 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.071204141 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.079585702 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.072725786 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.068852703 seconds)
  done (took 6.570875228 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.072578192 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.098309141 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.074029516 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.074089793 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07411121 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.074222467 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.073766545 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.073597177 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.073609322 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.074307769 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.07442845 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.115480464 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069853888 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078181512 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.074182987 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.073980281 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.073990865 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.073665819 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.076866023 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.073390391 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.073698193 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.07418126 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.073485988 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.073574197 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.076602772 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.069878618 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072932591 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.073768456 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.074436698 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.076803911 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.07750618 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.076136181 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.076350312 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.077355873 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.078859649 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.076370049 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066803091 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.075913958 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.076260686 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.076468494 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.072389446 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07720017 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.076121397 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.071889096 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.076006655 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.075582159 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.076301204 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.078335412 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.08296594 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.075983391 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.075936257 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.07669854 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.075716328 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.076098292 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.075318626 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.08055214 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.074371424 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.074295249 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.076126848 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.076251838 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.07678348 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.08297999 seconds)
  done (took 6.276199496 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076926771 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.069597526 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.082054018 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062803062 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063760235 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.074235896 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.063894915 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.063943557 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.071732974 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.071551679 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.073534434 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.074116466 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.076371748 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.073216227 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.074417768 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.077058854 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.074324048 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.074340754 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.071426985 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.074578749 seconds)
  done (took 2.987721816 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.077954337 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.082153329 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.070311639 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.074719312 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.070119361 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.074313683 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.069758972 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.07035388 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.070943144 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070377925 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.076081277 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.075358931 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070462941 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.074083948 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.075171907 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.07405623 seconds)
  done (took 2.707524283 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.070019571 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.069919435 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.06947882 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.064542631 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.067829712 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.06318948 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.065502408 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.064327675 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.065049714 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.079059251 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.065889737 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.078369601 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.065452984 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.064680712 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.065308091 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.071435711 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.06502422 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.065622273 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.065896465 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.070925698 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.0730535 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.066965568 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.070170401 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.065773674 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.071276564 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.072835813 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.067225934 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.06965616 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.065530941 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.066098792 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.071839989 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.072485355 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.065391308 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.066066176 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.06445062 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.0656104 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.065738397 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.066093276 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.071801407 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.065633401 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.064186758 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.070391117 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.066001862 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.066588021 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.064700586 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.065958215 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.064934654 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.071248641 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06560292 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.070247097 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063810264 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.06567556 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.064039173 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070693454 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.066209956 seconds)
  done (took 5.254299207 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.080356967 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06881072 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.064186874 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.064267728 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.06984261 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.07026394 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.069720117 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.069587743 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070635946 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.064843848 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070469108 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.069162475 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070240189 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.070254769 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070347892 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.070223221 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.064196258 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070769203 seconds)
  done (took 2.793483203 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.075101727 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06760158 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.072575401 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.068861114 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.06927302 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.071141188 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.064420251 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.064633577 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064446891 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.068472182 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067745109 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.06709247 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06374556 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.068986891 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.06978531 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.069388064 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.068812428 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.064252464 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.069071138 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.064901513 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.069047675 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.064622317 seconds)
  done (took 3.032450357 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.090336262 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.087297887 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.130962131 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.082107795 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.091128009 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.074129329 seconds)
  done (took 2.096923851 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.09637856 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.107155563 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067721002 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.067817401 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076786284 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070802433 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070675477 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071404766 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076235868 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074546356 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071027866 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076256404 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076474955 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072582352 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076347866 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078735374 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071110534 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070998021 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.068318704 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079249007 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073269268 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078294254 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072631361 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072823686 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073058521 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074432853 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.081474761 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076747849 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071483748 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076571059 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079343875 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071049048 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076333388 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.075065322 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067648169 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076245431 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07059589 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078848571 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076396819 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072520483 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067298139 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076362204 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07722124 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074777374 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081017874 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07264282 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074189195 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072439152 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07259683 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.083736417 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078745151 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074976192 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07920375 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080912664 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.081134854 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.083026111 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.076537542 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07437569 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078519228 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.076998435 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074252199 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078375628 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074772037 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075055209 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078740103 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072694495 seconds)
  done (took 6.550858388 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.103025152 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.068458844 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071629941 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.075603216 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073109556 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07106713 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071811461 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071044642 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070990176 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.068676631 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.107138214 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071060223 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072572204 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073039856 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071176744 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070963089 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070783841 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072908487 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06832136 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080614577 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070811498 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072651589 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073132066 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073004528 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074817895 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078901239 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071253607 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07099988 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070627755 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070777514 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072468877 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0710957 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072468484 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.0683789 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074571836 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07316509 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072472819 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07453109 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072657941 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078772251 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074599557 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.081194351 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072994935 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072544947 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077028447 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072873751 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072926052 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070134091 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07158582 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06822315 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074604205 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074926543 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074905961 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072884508 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071788937 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071274465 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070731029 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071159037 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.0713389 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.079503366 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072833882 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.071271951 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.081098723 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071010489 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07111021 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072328428 seconds)
  done (took 6.434168374 seconds)
done (took 133.174971275 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.221138762 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.190911695 seconds)
  done (took 1.940695139 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.077130757 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.100598791 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.080101984 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.141222904 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.074540597 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.110099971 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.109208699 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.078048037 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073821333 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.074430905 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.074223691 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.076708798 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.155040218 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.074137974 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.074604839 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076569073 seconds)
  done (took 3.000402291 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.109630695 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.188193807 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.116560596 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.07189046 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.109363204 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.078922399 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.072691538 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.083154621 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.076197585 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.084413496 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078238442 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.077502416 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.074115235 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.079430399 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.078274878 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.080615588 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.075841165 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.081052088 seconds)
  done (took 3.170343033 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.100188532 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.089618309 seconds)
  done (took 1.749754593 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.167446711 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.108467096 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.148132917 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.335543043 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.13202299 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.130450775 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.133677639 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.129289211 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.117374629 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.124272473 seconds)
  done (took 3.078727062 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.108551677 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.182665944 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.319229694 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.124384912 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.078746206 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.102024706 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.126196325 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.084227081 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081716764 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.081650507 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.081764197 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.079766602 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.104386875 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.078152135 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.077152535 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.07897529 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.106968444 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.076152475 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076720055 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.0776456 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.108645742 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072961331 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.079212173 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.077909509 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.082261217 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.082348049 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.076219214 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.074656771 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.079835282 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.078886111 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.082758948 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.102295629 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.082196262 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.104589386 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07688633 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.102101481 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.077469604 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075873562 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.07767948 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.076511205 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.078784034 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078627912 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.081982404 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.079036262 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073999335 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.077132977 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.074238325 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072740556 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.080376732 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.073114044 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.080214567 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.07944995 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.100449045 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.07297945 seconds)
  done (took 6.47321297 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.11063151 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108780737 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.072292804 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.115910835 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.107308795 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071945928 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.106925506 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.102715893 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.110718114 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071812158 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070579015 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.071118987 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.078029778 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080874446 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.118551235 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.11054469 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.073717351 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072286593 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.109875877 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.109152889 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070348616 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.10376436 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101822531 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108426384 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.070117428 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071388456 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070136128 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070224854 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075817865 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076576179 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070328903 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077093963 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082803809 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076921393 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069919035 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070228902 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.07007635 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.077540599 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077875018 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077822675 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.076031738 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069529071 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.06967924 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070585835 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.071131986 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.071132526 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.079253272 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.080130233 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.078603975 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.072239629 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.072859779 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.071832838 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.072128144 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.079893676 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.077602834 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.07815759 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.077288076 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070173076 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.072884172 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071574281 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078026955 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078769359 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077647189 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071115091 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.078501345 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.070341682 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07962839 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082599693 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.070336912 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070841453 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070555449 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070351815 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070690214 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075996455 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.076834555 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071060203 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070203778 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070238756 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078227031 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076132371 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069943019 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075630617 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069594079 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07043598 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070621866 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070690307 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.07558382 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.077315349 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070562777 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070250679 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070274481 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070681562 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069615704 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.075764464 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.077111265 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.077847671 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.076520732 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.071131451 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.076992622 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.076625967 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.07102916 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.076358864 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070175025 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070928052 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.07116286 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076912782 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.076363366 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.078575397 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070676477 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069819186 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.076109786 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.216383305 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071290651 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076456832 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078995572 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077066 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070493404 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.07982846 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070874511 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078827178 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070463454 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079129296 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.071089448 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.077009301 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070722394 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.070065855 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070519772 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.077129653 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071249855 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070372225 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.071849031 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071160848 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.077215215 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.080325881 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.071226862 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.077258652 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.077055638 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070782226 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.077022329 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070374999 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.07819702 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.071110601 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070816949 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070372123 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079783253 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.07096796 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070517379 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070634645 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.078621001 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071132361 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079553283 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076244874 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.070453397 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080802655 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078744043 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.076710592 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.079584149 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070707917 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.07112219 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070139649 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.0709028 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.076023235 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076815509 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.071245325 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070333275 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075666331 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078277018 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069637909 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075754259 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.316204618 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076397004 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070886069 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.070045641 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.079123655 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078598255 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.0760529 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075895523 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076592451 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070145366 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076371637 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076415979 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069904789 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.082079595 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069774586 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.080068764 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.076236624 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.075333645 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076517991 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077806974 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.078495005 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078379347 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.081263317 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069896152 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06975293 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.076051586 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070031858 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069974524 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.076657018 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070867238 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070737946 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.081069757 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070572988 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078635814 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.070211586 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076739547 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06950266 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070344304 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080811054 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.070156681 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070673413 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.076111055 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070068108 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.076160154 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078738728 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.076246688 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069801655 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070854792 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.079581533 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.077104144 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.070292821 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069765098 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070485417 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.075310353 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.075293579 seconds)
  done (took 19.055997979 seconds)
done (took 40.03782639 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.212257733 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171781357 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199841075 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117835334 seconds)
  done (took 2.366596187 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.093662433 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.101812234 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.077837571 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.066788828 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.082388894 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.066684773 seconds)
  done (took 2.094267093 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.254440754 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.192400726 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.176304488 seconds)
  done (took 2.221399386 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.2225741 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.203919668 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.510182731 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.316430139 seconds)
  done (took 2.958978866 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132882119 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.079578249 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.065314866 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.075736382 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.106309243 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.135537848 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.088110339 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.109972262 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.076952151 seconds)
  done (took 2.536407752 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131773669 seconds)
done (took 13.930052334 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.2432708 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.126657051 seconds)
    (3/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.110258632 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.077821851 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074806478 seconds)
    (6/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.255206764 seconds)
    (7/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.180694195 seconds)
    (8/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.06967866 seconds)
    (9/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.216216441 seconds)
    (10/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.080168598 seconds)
    (11/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.196238018 seconds)
    (12/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.07905132 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.161461852 seconds)
    (14/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.104138002 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.094713937 seconds)
    (16/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.200643157 seconds)
    (17/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067585014 seconds)
    (18/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.076259013 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.182522134 seconds)
    (20/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.228903313 seconds)
    (21/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.078176401 seconds)
    (22/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.163083118 seconds)
    (23/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.184879165 seconds)
    (24/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.206027865 seconds)
    (25/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.184102116 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.082939254 seconds)
    (27/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.218544157 seconds)
    (28/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.080114291 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.09003961 seconds)
    (30/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.112100733 seconds)
    (31/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.137508252 seconds)
    (32/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.076275302 seconds)
    (33/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.204662504 seconds)
    (34/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.067644731 seconds)
    (35/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074975603 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.09149762 seconds)
    (37/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.065717835 seconds)
    (38/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.075692135 seconds)
    (39/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.178359103 seconds)
    (40/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.166583475 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.14652137 seconds)
    (42/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.175649095 seconds)
    (43/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071899589 seconds)
    (44/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086966286 seconds)
    (45/341) benchmarking ("sort", Bool, false)...
    done (took 0.148828175 seconds)
    (46/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.190077091 seconds)
    (47/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.076416828 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.095669447 seconds)
    (49/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.166155961 seconds)
    (50/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.074634288 seconds)
    (51/341) benchmarking ("sort", Int64, false)...
    done (took 0.068668467 seconds)
    (52/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.097213735 seconds)
    (53/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.077268323 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.090271021 seconds)
    (55/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.07490603 seconds)
    (56/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.081069612 seconds)
    (57/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067051476 seconds)
    (58/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.07681491 seconds)
    (59/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.077272423 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.095219875 seconds)
    (61/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.068684193 seconds)
    (62/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.068008445 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.07222577 seconds)
    (64/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.197340366 seconds)
    (65/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.203562182 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.09361974 seconds)
    (67/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.076361766 seconds)
    (68/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.077800077 seconds)
    (69/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.085831563 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.173607131 seconds)
    (71/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079107045 seconds)
    (72/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.097859596 seconds)
    (73/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.086088778 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.090168961 seconds)
    (75/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084240174 seconds)
    (76/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.126455261 seconds)
    (77/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.139361334 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.129157494 seconds)
    (79/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.250990263 seconds)
    (80/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067346579 seconds)
    (81/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.066928529 seconds)
    (82/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.141804612 seconds)
    (83/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069049682 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066465263 seconds)
    (85/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.227353664 seconds)
    (86/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.249941745 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.127871986 seconds)
    (88/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.229564052 seconds)
    (89/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.205198151 seconds)
    (90/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.144040164 seconds)
    (91/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070687649 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.068035674 seconds)
    (93/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.141690748 seconds)
    (94/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.074815014 seconds)
    (95/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.078723201 seconds)
    (96/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.079209057 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.089269974 seconds)
    (98/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.16614246 seconds)
    (99/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.221485064 seconds)
    (100/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.151771874 seconds)
    (101/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.240638893 seconds)
    (102/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.225531651 seconds)
    (103/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.193633671 seconds)
    (104/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.069994035 seconds)
    (105/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.075115172 seconds)
    (106/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.17480058 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.089371995 seconds)
    (108/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.075464684 seconds)
    (109/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067408952 seconds)
    (110/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067571767 seconds)
    (111/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.15620762 seconds)
    (112/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.067431754 seconds)
    (113/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.088544064 seconds)
    (114/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.082886405 seconds)
    (115/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.0687963 seconds)
    (116/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.156644617 seconds)
    (117/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.068058352 seconds)
    (118/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.079452512 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.08506342 seconds)
    (120/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069940406 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.091751491 seconds)
    (122/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.07596529 seconds)
    (123/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067995039 seconds)
    (124/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.07980861 seconds)
    (125/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.09052334 seconds)
    (126/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.164814556 seconds)
    (127/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067954125 seconds)
    (128/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.068361077 seconds)
    (129/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.155018156 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.202177046 seconds)
    (131/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.06762967 seconds)
    (132/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.146211213 seconds)
    (133/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067834472 seconds)
    (134/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.067888931 seconds)
    (135/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.182389473 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.092421259 seconds)
    (137/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.168971162 seconds)
    (138/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.076606648 seconds)
    (139/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.068957267 seconds)
    (140/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195817472 seconds)
    (141/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.07027947 seconds)
    (142/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.157038531 seconds)
    (143/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07772849 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.074864804 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076965627 seconds)
    (146/341) benchmarking ("sort", Float32, false)...
    done (took 0.139611828 seconds)
    (147/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.069831093 seconds)
    (148/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.067771556 seconds)
    (149/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.070010569 seconds)
    (150/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.068463325 seconds)
    (151/341) benchmarking ("sort", BigInt, false)...
    done (took 0.272091098 seconds)
    (152/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.070109864 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.079955586 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.069251798 seconds)
    (155/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.170818989 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.089620749 seconds)
    (157/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.078866616 seconds)
    (158/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.081559237 seconds)
    (159/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.076560983 seconds)
    (160/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.068043458 seconds)
    (161/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.085912892 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.094789995 seconds)
    (163/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067505874 seconds)
    (164/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070889009 seconds)
    (165/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.067397303 seconds)
    (166/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.067462305 seconds)
    (167/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.065858138 seconds)
    (168/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.067801 seconds)
    (169/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.067237088 seconds)
    (170/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.067797095 seconds)
    (171/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.20458166 seconds)
    (172/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.147241098 seconds)
    (173/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.173124505 seconds)
    (174/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.067266112 seconds)
    (175/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.182927614 seconds)
    (176/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06808309 seconds)
    (177/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153010065 seconds)
    (178/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.152714827 seconds)
    (179/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.070444558 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.087991472 seconds)
    (181/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.073615931 seconds)
    (182/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.069477564 seconds)
    (183/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.078496868 seconds)
    (184/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.156981981 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.153388454 seconds)
    (186/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.250344572 seconds)
    (187/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.0726254 seconds)
    (188/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.078748694 seconds)
    (189/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.070194533 seconds)
    (190/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.069860063 seconds)
    (191/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.092816345 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.142179534 seconds)
    (193/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.072004628 seconds)
    (194/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.162524752 seconds)
    (195/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.070280463 seconds)
    (196/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.070670229 seconds)
    (197/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.150399802 seconds)
    (198/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.078427969 seconds)
    (199/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.07262531 seconds)
    (200/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.077894038 seconds)
    (201/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.078558844 seconds)
    (202/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.070521088 seconds)
    (203/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.077451422 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.116921612 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.232154273 seconds)
    (206/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.072913821 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.093999331 seconds)
    (208/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.078600768 seconds)
    (209/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.070822844 seconds)
    (210/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.088295157 seconds)
    (211/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.069230441 seconds)
    (212/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.080724183 seconds)
    (213/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.082415109 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.070149628 seconds)
    (215/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.080280452 seconds)
    (216/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.07466266 seconds)
    (217/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075969044 seconds)
    (218/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.233203681 seconds)
    (219/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068645713 seconds)
    (220/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.068343515 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.067302026 seconds)
    (222/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.074785299 seconds)
    (223/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.212693 seconds)
    (224/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.075298947 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.14350452 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.068045941 seconds)
    (227/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.241025225 seconds)
    (228/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.159614842 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.100732979 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.134327561 seconds)
    (231/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.079633893 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077867614 seconds)
    (233/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.069552322 seconds)
    (234/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.17564798 seconds)
    (235/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070312448 seconds)
    (236/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.083950215 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.148508643 seconds)
    (238/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.08565905 seconds)
    (239/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.068371974 seconds)
    (240/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.068583547 seconds)
    (241/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071592746 seconds)
    (242/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.067390917 seconds)
    (243/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.075227513 seconds)
    (244/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065747422 seconds)
    (245/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.072133583 seconds)
    (246/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.068044982 seconds)
    (247/341) benchmarking ("sort", Float64, false)...
    done (took 0.138674654 seconds)
    (248/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070885773 seconds)
    (249/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.15469891 seconds)
    (250/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074366929 seconds)
    (251/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.075134572 seconds)
    (252/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.093077296 seconds)
    (253/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.06704024 seconds)
    (254/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.222167043 seconds)
    (255/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066998389 seconds)
    (256/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081706114 seconds)
    (257/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.170620312 seconds)
    (258/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.07000598 seconds)
    (259/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.069478367 seconds)
    (260/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.070685593 seconds)
    (261/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.07095222 seconds)
    (262/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.067808229 seconds)
    (263/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067714503 seconds)
    (264/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.069002225 seconds)
    (265/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070446233 seconds)
    (266/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.06776367 seconds)
    (267/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.071680125 seconds)
    (268/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.068225798 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.067038983 seconds)
    (270/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.067322364 seconds)
    (271/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.067497439 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.133884338 seconds)
    (273/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.134770324 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.0661227 seconds)
    (275/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.084110703 seconds)
    (276/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.067993291 seconds)
    (277/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.069676306 seconds)
    (278/341) benchmarking ("sort", Int8, false)...
    done (took 0.152552057 seconds)
    (279/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069483819 seconds)
    (280/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.067987773 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.11957689 seconds)
    (282/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.094938154 seconds)
    (283/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.075562712 seconds)
    (284/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.149706359 seconds)
    (285/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.080507131 seconds)
    (286/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.079291457 seconds)
    (287/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.071395094 seconds)
    (288/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.069158792 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.06829493 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.12627687 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.075306944 seconds)
    (292/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.074320026 seconds)
    (293/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.068110102 seconds)
    (294/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.083975083 seconds)
    (295/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067090251 seconds)
    (296/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066602209 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.08623069 seconds)
    (298/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.06638779 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.0938949 seconds)
    (300/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.067439483 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.068426036 seconds)
    (302/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.09448814 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.089936349 seconds)
    (304/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067315473 seconds)
    (305/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065669111 seconds)
    (306/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.078388588 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065620691 seconds)
    (308/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.243532651 seconds)
    (309/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.07040247 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.069237019 seconds)
    (311/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.072669021 seconds)
    (312/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.069591271 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.068905943 seconds)
    (314/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.076773214 seconds)
    (315/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072106293 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080133117 seconds)
    (317/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.06781746 seconds)
    (318/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068919871 seconds)
    (319/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.068110755 seconds)
    (320/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068934188 seconds)
    (321/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.06857443 seconds)
    (322/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.071665882 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093407853 seconds)
    (324/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.146230042 seconds)
    (325/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.070293627 seconds)
    (326/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.070119361 seconds)
    (327/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074946424 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.150437712 seconds)
    (329/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.068066644 seconds)
    (330/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.071447398 seconds)
    (331/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.068446368 seconds)
    (332/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075110504 seconds)
    (333/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.068100437 seconds)
    (334/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.068547391 seconds)
    (335/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.067506645 seconds)
    (336/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153641783 seconds)
    (337/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.090522644 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.067231821 seconds)
    (339/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.068348979 seconds)
    (340/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.194527761 seconds)
    (341/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.069630436 seconds)
  done (took 37.740977198 seconds)
done (took 39.361982615 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.084750917 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091835972 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.074645597 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.085836288 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.082431587 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.101878767 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.075353255 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079640849 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.083148848 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080908163 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.079879394 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073923825 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076889576 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.077070183 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.075041545 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.091313206 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.08338331 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.076828143 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.077256541 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.069201856 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.079172007 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.068505512 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066562258 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.07395474 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.079195568 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.07469044 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.07635272 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076627284 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067129478 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.067636519 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.073585501 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076828762 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.067298193 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.079426235 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075948299 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.076458278 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077323153 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080940644 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066419798 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.067906256 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078257465 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067253199 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075756181 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073672811 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.072515632 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074506617 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075652068 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078987923 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.090229257 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.072734491 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078466966 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.078612936 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.078154174 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.073107726 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072962617 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.076131793 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074605955 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.090074713 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.076554576 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071786625 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.078639374 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.07692473 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.074782221 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07610605 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075959447 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.079148807 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078836288 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074417513 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078372898 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074763669 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066841659 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075531463 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071820463 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.067640771 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.078970217 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.081388892 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06593115 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.07204511 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.075398094 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.075965589 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.067060617 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071895591 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066106292 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.072219843 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071986871 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.073091608 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072831035 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074873852 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.069157137 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.076059187 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.075237509 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075408135 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.065966388 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.079184113 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.066401383 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073950241 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.067062732 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.067535284 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066004024 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.073321046 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066965572 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071655686 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075389481 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.066302386 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07191489 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.080269503 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.066988305 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074922787 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.066049995 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.06674722 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077788826 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.078816465 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.067156199 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072363652 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06598291 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.073528314 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065981285 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.06692346 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.067435276 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067415151 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071692984 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.066985781 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072363784 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073126358 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078979305 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.066947648 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.072808707 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071855854 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.067303349 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.074184467 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.067827111 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.067543255 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.066250498 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.079992652 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071824349 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.066953531 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.073070851 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071626502 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.075606536 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.065762585 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.076009408 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.07322975 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.071265369 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.219840683 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066440654 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.078736088 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072213784 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071810822 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.06635362 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067824428 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.066092656 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067370066 seconds)
done (took 13.101096172 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068366049 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106591626 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074569441 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.084168678 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079562241 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068424282 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071153353 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.084315586 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071537752 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.087279905 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095576722 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089851729 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094571817 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.06640035 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067777927 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068939196 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066151802 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075498243 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.082128177 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.091103675 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096366021 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067661075 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.070235433 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084228076 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.079384523 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.084228424 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.069370555 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.111027386 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.070236412 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.085006769 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093400392 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.06778974 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.069077946 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081486192 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081768774 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074687547 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068407786 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07163856 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068566189 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067478301 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069283465 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081665344 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.071285383 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071548185 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068977083 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068909068 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.068562747 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070742492 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080912784 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070741728 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075452986 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079551018 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069168658 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.068293196 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065897167 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071767131 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067821129 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068599555 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.06774917 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067239858 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067980003 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070253222 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.06855112 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068186922 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.071103508 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.070167367 seconds)
  done (took 6.677450348 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083993689 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.093941997 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.083083886 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08298749 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067692261 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068340131 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068128287 seconds)
  done (took 2.278715541 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068510085 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07598666 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080191972 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080381921 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.08985303 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.07844551 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067963898 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099908601 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067410491 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.07677602 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083644041 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081738035 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071653562 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080332465 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068693924 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079956605 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068330374 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075379976 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075260732 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081505682 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.0723905 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.101282693 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081325716 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.069012629 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.081976549 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075473539 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070587322 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068411297 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068384848 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067584397 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067691702 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.090342312 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.074439688 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.080237341 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068600095 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067107587 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072515451 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068777295 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.072428625 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076977965 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071566971 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067847251 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068737544 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.068151621 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.069283721 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072709603 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.069089911 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067649922 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067875306 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075717876 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.067434286 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074880451 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.070013015 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.073190051 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072260306 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07235525 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075019559 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.068442444 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075577837 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074617869 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.068026176 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080612393 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079465899 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071287679 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079589313 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.076099345 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074850869 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071671135 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067700505 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067129641 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068600989 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07963207 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.0711917 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069820481 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.069029284 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072827768 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.072134195 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.08299608 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.083268985 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080964817 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070765821 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068563679 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.072098657 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083316032 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072947509 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067928265 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.069212291 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067206517 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072964971 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.068192614 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072949436 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067946861 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075045863 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070456163 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070192715 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07577527 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.068222053 seconds)
  done (took 8.884312593 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.071233325 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.069260461 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070640593 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.069515803 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.070020601 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069941054 seconds)
  done (took 2.185478498 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092151528 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.069685461 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080465689 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068559884 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.091152989 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075285826 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.075427002 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070491771 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084956864 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07905817 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075200083 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.078052512 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074667431 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070142011 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074490823 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.070019485 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.075071127 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071981013 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078512488 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07093914 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.082402514 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070469848 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.07095532 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080502844 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071833286 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.069503807 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069932627 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078929491 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078913511 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.070539835 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.070328609 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071711059 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.077087083 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.070306366 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074986928 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076975509 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068580044 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07379105 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.071237095 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.07160868 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.077297122 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.071308466 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070549142 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.0741919 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.070006192 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.07729022 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.074444111 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072541908 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.0747915 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.07405984 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073954411 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069220372 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.071812428 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073762899 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.077083309 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.07075341 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.079734923 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074987023 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.070020807 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.077109002 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.069067581 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071683226 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070387404 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.0720684 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.074241718 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.074412249 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.077243855 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070640404 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070761178 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068613198 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.074086793 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068540124 seconds)
  done (took 7.063299689 seconds)
done (took 28.801970224 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.550043954 seconds)
  done (took 2.260548458 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.598974632 seconds)
  done (took 2.347827682 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.676628633 seconds)
  done (took 10.426923195 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.300234807 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.348927539 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.737331943 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134585625 seconds)
  done (took 3.307491803 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.742374825 seconds)
  done (took 2.501874501 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.230659112 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.222133721 seconds)
  done (took 2.216324751 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.350131495 seconds)
  done (took 2.099926516 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.156347336 seconds)
  done (took 2.904856477 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.228222486 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.160031991 seconds)
  done (took 2.146046564 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.510784318 seconds)
  done (took 2.262285843 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.308205133 seconds)
  done (took 6.062977909 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.236785913 seconds)
  done (took 2.034783348 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233614575 seconds)
  done (took 1.992872738 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.088779745 seconds)
  done (took 3.840378399 seconds)
done (took 48.158846294 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085728307 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.08822746 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087368241 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.083094112 seconds)
  done (took 2.072816731 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075806036 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071993502 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074956063 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.076231106 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073803191 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.076640913 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.077076175 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.072380332 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.075767044 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.072578789 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070326612 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071510768 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.07416166 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.074298255 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.076058467 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.076144237 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071783211 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.072033085 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.075141958 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071340397 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074843783 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071775458 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069868131 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.074347565 seconds)
  done (took 3.524223545 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079950558 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073696514 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.077536212 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.073187979 seconds)
  done (took 2.068978172 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078886306 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078352572 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087922885 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.093352555 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.081666189 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.081163795 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.088423113 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.090440991 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.068195255 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.090714713 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069711699 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068470212 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068698304 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.088543744 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.087228621 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.066624869 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.067611712 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.079491165 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.080222828 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.081365178 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.071890845 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.068519004 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.080655444 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.08082532 seconds)
  done (took 3.662445718 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080344753 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066680556 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.07997079 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092782447 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093584489 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067090329 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080441114 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094130509 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.129388407 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067922813 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073868516 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.069597338 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.109559461 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066682895 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082279682 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110567287 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.11301794 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070801097 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099923346 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066954749 seconds)
  done (took 3.488630673 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078058405 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071464657 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071735834 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067123485 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078292475 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074680893 seconds)
  done (took 2.215150928 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.070011341 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069326727 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068150612 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.06809762 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.074220008 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.068934177 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067058119 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.069548893 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.069487233 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.068479546 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068369798 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.067257052 seconds)
  done (took 2.582332566 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.158414025 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070551653 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.072229687 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067646438 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072850603 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068603451 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082877393 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070392048 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.086301902 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068418508 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068239499 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070003719 seconds)
  done (took 2.723837298 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102139475 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102507205 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148512912 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11985063 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118052244 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098121806 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.1208661 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095664923 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.162445311 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138895415 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118215047 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094557562 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088352836 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070762934 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101657452 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102979628 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137821293 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073773648 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11450013 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.166591563 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116236009 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.114152057 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123667556 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117688437 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.083080018 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123421841 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09568856 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104045667 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126141477 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111905375 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.121013765 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099108012 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073423843 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072398392 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15153653 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.10513577 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109046482 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.095061215 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101941598 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090751172 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109506164 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070495082 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.088323118 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.108311047 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.086278069 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118607665 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.089030747 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105402569 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082413511 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.133062561 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107462601 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100022414 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.086689849 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105059714 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131445906 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096446735 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112166458 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.108481618 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083806848 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.119805189 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.102366663 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.252257483 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096574727 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083173922 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162341989 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09126436 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114593343 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115223053 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084607116 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091320137 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104533171 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133088114 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109776509 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.109922452 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116999962 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.097955352 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112126118 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.094576223 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.130860048 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095199784 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074638759 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106551094 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.131473656 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086790293 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102286754 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133177124 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093692525 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079243401 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.094174155 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.12046596 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.082026557 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097788854 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071370602 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099548667 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108911822 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09882364 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114179591 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108296428 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079982529 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.126467992 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111153837 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074179033 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.118952892 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100525732 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154777547 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097260478 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077860932 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.10143086 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09539618 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151408768 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086797701 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081483139 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099861337 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144186439 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096107801 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1729289 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09786358 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131168526 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099212743 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.089383077 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076971805 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090761192 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103833874 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109814342 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103839456 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090726364 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.078303509 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087806953 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097179852 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.250085001 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083327713 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.115879223 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103647509 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077274631 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090891881 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078617452 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.127507153 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080263953 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111369972 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127060122 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.08050199 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107874521 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100099447 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.110062375 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099816709 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109187432 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142817765 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117572203 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081681309 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.085797886 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110262138 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.145125402 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115486577 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087160528 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078974255 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.102699932 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113232189 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09970859 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.109021766 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101958946 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110926825 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098949686 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.143851971 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119632009 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092995903 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097011899 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098546383 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.125076036 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.078159836 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158720685 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096614782 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120639781 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086576779 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143740618 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.116128645 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092196041 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08646762 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09715836 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106617974 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108347931 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145736338 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097846488 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073930618 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095246403 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134116502 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07827289 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101128807 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091956047 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094937084 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120952171 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.085626265 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083811298 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069912248 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106689509 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136975167 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071091465 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.274917804 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.117273541 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107100726 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.107228755 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.07132118 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102020924 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.141056032 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10811071 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143732694 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119207789 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102833025 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120863749 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.102736608 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.112086092 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084139227 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.13175337 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.139807558 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101741045 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09468269 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139754609 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.123190748 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.138454554 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.099396602 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116700025 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107220879 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103225511 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105787492 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.10354893 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.147355655 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122806863 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.127195596 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.08775223 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108129997 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.110453634 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139381775 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08434714 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118550489 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.077066686 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113937466 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079748279 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1095481 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.081271979 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113611525 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081421505 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.10157068 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.07099239 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075509472 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143933281 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114133567 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090756455 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087730809 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.13871554 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.133168067 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082687823 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103646935 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.105999093 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102969739 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102751226 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.11056727 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086295731 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09518811 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.270873215 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081509629 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084104837 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100879957 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096957858 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1096895 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086314653 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077162251 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139132264 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106895593 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097860049 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.079534855 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097190882 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124765155 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.09188953 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089823449 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106641422 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106450249 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143617627 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09191397 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099465928 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119599511 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082586075 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.094507119 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071009602 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086746144 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.078319938 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.111852412 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.078140452 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111177914 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070528085 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13374047 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.089055517 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.094382805 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104969979 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099817226 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130866788 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094040794 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131244827 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092013773 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104020049 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11027853 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096324966 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08202622 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.105732459 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097786758 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.111870275 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.098248778 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108529202 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112564208 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095974924 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14828949 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094907795 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125433808 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10803146 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109941227 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106341688 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119356041 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139675603 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114707996 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.113650258 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077308794 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084667722 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106933654 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101691725 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148414255 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104486187 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07329119 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.087240702 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091970645 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.254990578 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108408074 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.085180822 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.145434413 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089773275 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.089438544 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116259396 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.092218243 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100680074 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078487757 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097960976 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.103471572 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096398615 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096785228 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11009904 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119448288 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115664005 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.135581116 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.101022353 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.095163147 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.12175382 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112665751 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114110295 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087962826 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091670835 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126858754 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.105064322 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.130640279 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.102916912 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096668451 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.103990714 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093235463 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101851997 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09873188 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.112464989 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082690681 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077995797 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070219541 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073757836 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.120052141 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111349138 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101338287 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100703686 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.074318402 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105958285 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101816916 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073988168 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089515745 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096627041 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.101746165 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085326653 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094583802 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11683805 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092883157 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.105693582 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101447171 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.130881489 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.102345163 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090716884 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145779211 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.130914251 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090004319 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094996518 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072862223 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080720579 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103685641 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.147283823 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119985029 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078956273 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.243560289 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.080056971 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090098636 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074408749 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.090474093 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.092304389 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106383501 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094744366 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.115106426 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105936087 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078498613 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.105245746 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099796414 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.094074965 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.09839965 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104207004 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.10741009 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.126788988 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10385975 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099484854 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078618528 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.082886586 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077587794 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081623989 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.104525314 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.079160146 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078578612 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132457242 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.093194423 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106747594 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112008351 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08708009 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077556286 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135624861 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071510776 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136736309 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073652141 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084568103 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082559525 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081913377 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096355061 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10723603 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098040339 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115663401 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108106305 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106897985 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112912012 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158747821 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.073134613 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.146585143 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07799081 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077395379 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078466236 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113809484 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092223393 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106942445 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143379768 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091367969 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094641424 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078917165 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130327088 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.100054646 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104993646 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084515064 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081087299 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130505849 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081549397 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.073078588 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088437378 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113107494 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073960925 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.10571397 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.245845602 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083064756 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11632428 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632976498 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092349245 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.078238981 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091423759 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.145070247 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.13115524 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086135511 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111809689 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.122205146 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.0923119 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086477677 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10982287 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.187545469 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076440032 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097486627 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106442124 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100618632 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095273615 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.094552926 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.090196378 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.094311023 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087999768 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.082244427 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110422219 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090269225 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093949465 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100053812 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08552421 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082375447 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.133889568 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10633388 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084009227 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091228927 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.102478938 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08961572 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093440633 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.073871823 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115711483 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092754469 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103589274 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092895629 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109657979 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.122106092 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090593693 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114045407 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090354745 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111509982 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08728049 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.07993008 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104236729 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080165425 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079634277 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119047487 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.086380388 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094282383 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106359657 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.097252853 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116352423 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121700546 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113068878 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099791841 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081224581 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088348368 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.089915911 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077886253 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.080741662 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075903844 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077844759 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.27040492 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088707767 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.086667383 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117752228 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084305824 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105732633 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.102919051 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111472567 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085564393 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103196845 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.112021592 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092689054 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.106585532 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102633951 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.13159616 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148724698 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.103361491 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.127958909 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.137021867 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.079102482 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.078461337 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071448772 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117230068 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081709658 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082994145 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.083344174 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135601509 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.084323185 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.097145303 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.234631007 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082902779 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083755217 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098622258 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071880208 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085189623 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110657955 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086747364 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082823667 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101547672 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.086026334 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119950819 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119035825 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091479994 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084806776 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083073039 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095901182 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106143469 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.130204759 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09135196 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076953687 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108794879 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105415371 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.126149264 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074502546 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082766809 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.132647221 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09422745 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105612559 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081969066 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122766344 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135773771 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.092133673 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136261301 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072957602 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.087994603 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.094087866 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.130414557 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079173121 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093096276 seconds)
  done (took 66.109157364 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.227472982 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.180579999 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.112369784 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.108274352 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.203909823 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.209781019 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.14615054 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.112004107 seconds)
  done (took 3.250472966 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.070936713 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084822348 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.103571456 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.088186942 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.068650441 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.071363154 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.209405563 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.084749754 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.06827673 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.109325064 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.07834393 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.070699896 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.370875206 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.070341505 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.072395441 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.078010303 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.069063766 seconds)
  done (took 3.692596861 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.375385476 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.631078727 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.330047817 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.077220299 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.997115397 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.094247485 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.176840926 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.141967879 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.084676282 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.534414362 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372608665 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.134518927 seconds)
  done (took 18.869069134 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.078195873 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.077443312 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.08073309 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.080313034 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.076521251 seconds)
  done (took 2.317353861 seconds)
done (took 118.356198012 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085177194 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.174874026 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.069732275 seconds)
  done (took 2.1975298 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.087368796 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083496467 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.083109263 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080339896 seconds)
  done (took 2.262248597 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076757485 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078652825 seconds)
  done (took 2.075687916 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.227614471 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178814784 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092054225 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084392566 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.082028021 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082152082 seconds)
  done (took 2.172025762 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.073940099 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073432112 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.074435901 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.074351346 seconds)
  done (took 2.204841068 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.07011764 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.06817134 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070556574 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072609682 seconds)
  done (took 2.192669798 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087816416 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.085277692 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.114352566 seconds)
  done (took 2.199661189 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.086188306 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.08501179 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.08079892 seconds)
  done (took 2.170884589 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111487612 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.099325469 seconds)
  done (took 2.124989703 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082260093 seconds)
  done (took 2.000432429 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092849772 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.10090168 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.144906176 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.1100114 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.143231235 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128965208 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079523785 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.080417805 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.076012471 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074916932 seconds)
  done (took 2.947587043 seconds)
done (took 27.043221841 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081265601 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.376377191 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36233445 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089277675 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674830992 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359611915 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.004711296 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093166926 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101815287 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070461506 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087323102 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.651744948 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.995404367 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.328272245 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.980853512 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331063104 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653966124 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070347281 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069508297 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070628083 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.987916402 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069585271 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.07018757 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070698596 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652765621 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376667529 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071157494 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331726494 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069707873 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072392242 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358711013 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071383546 seconds)
  done (took 16.550324719 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072235819 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124962619 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074606938 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.086572491 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.072612502 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.07198138 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.073023375 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070591867 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.11343791 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070694342 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087823442 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069693087 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073712697 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072019785 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090128662 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070651811 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072713341 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.072083038 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070973537 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071577624 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089559248 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.071002238 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071802243 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071488924 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.07156728 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.084368597 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072743282 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070926035 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071291204 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.074036315 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074343696 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07207315 seconds)
  done (took 4.418452492 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.124827256 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12873221 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075637298 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.11190537 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120720654 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.072559825 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.15338856 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.094137852 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.116594186 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070478233 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087479019 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.070317693 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.106125792 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.072136272 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090513738 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071203325 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072499609 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071914007 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071475899 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071378421 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089804432 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070529135 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071526196 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.072101182 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071646795 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.086032304 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.072439006 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071370426 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071444498 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.073272252 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07562426 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.072598341 seconds)
  done (took 4.695753151 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072204082 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073796846 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.082000948 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.083271551 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.069426255 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070813868 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.072281152 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068850766 seconds)
  done (took 2.538570548 seconds)
done (took 30.135911793 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081006039 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070103293 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.07627422 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.090238778 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.076153168 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072794762 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.067449172 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076948478 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073492627 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.073608791 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075420386 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068896689 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.072298489 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.067133377 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074099404 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.068195139 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074263307 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072495774 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.073723753 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.074731215 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070974801 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.074126116 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.077632414 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.073545349 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073329688 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073766483 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077659687 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.075067107 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.069516845 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071311334 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.07071332 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082804995 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.075340416 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074988171 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068939644 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.069037131 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.073217122 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070845551 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.075217132 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077809558 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070627804 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07778973 seconds)
  done (took 5.013211349 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.091260885 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.097187631 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088747283 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.084041611 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.109502853 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.084259322 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.093718905 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081906543 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079841324 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.092391986 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.076339794 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.081666535 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.08327489 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077520694 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080836322 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.07663553 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082348566 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075909165 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080721696 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.081107126 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092997825 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073979932 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081414582 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.082251268 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07625139 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082379485 seconds)
  done (took 4.149094731 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075341718 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090099622 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094865183 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.144568905 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.112802354 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084895435 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084312381 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.106188611 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103685066 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070360632 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.07464036 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.097311375 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099031885 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077574932 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.109141546 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088317109 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082675715 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07151095 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076843424 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.105052354 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.092712158 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088814362 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102241301 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089777337 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.069159489 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079580873 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076529211 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085277681 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077417507 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.082021364 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073744908 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.073320152 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070826949 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.082031405 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073992343 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067455499 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.092726752 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.082245266 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.085268179 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.108786644 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.08025547 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.071455923 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.10011019 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135921606 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069380099 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072743941 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073523682 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082060319 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.071187866 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099585068 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088121557 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069663302 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088803666 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071433152 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.07098535 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086555177 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.071710035 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071745063 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.082169938 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075761338 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090693224 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.075285598 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.091458868 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069921354 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.081119413 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071389939 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071494906 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.068367413 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.106299436 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.077119584 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122596178 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070625034 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.068004786 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082419962 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.081359575 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076533677 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069377051 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088831867 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081449264 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073748553 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081306126 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.07283811 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.073170806 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105336519 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.06900493 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067859419 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.068183263 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.072382249 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.073340192 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.070287306 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083171746 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069071478 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.075498519 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.085054102 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.06944838 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.070444702 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.072394001 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.07120331 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.069235171 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.08032169 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073621484 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071361544 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08235009 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.070669835 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.073156138 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084208991 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079497074 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.06945301 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070631518 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.07197364 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.071727324 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.074099199 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.073174804 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.07140826 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076685604 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076685576 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075378085 seconds)
  done (took 11.480897809 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164620204 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155597766 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.071382477 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149929802 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078093926 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.074679731 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150104662 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.090016366 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070709169 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071794901 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.06940602 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.099111229 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093541239 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105597441 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074757343 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070893891 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.096044035 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.104529914 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152459333 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147448656 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093823997 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077890878 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072714739 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071585383 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.072102113 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.078910081 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086542496 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078388864 seconds)
  done (took 4.721659756 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077979743 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.113698433 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074886625 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.094984556 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089923272 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.071182668 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.072842497 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071608531 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087592207 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078025726 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070546524 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074778114 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.07424132 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070789079 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.071554354 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076947891 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.077275684 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069392005 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073800406 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.075282606 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080830713 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.09640496 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074995213 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070444631 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.073065983 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070861898 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.07732553 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.080598831 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.070231428 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100779291 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067874305 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.075066595 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.085079749 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071340596 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.070332498 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.071303 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070672841 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070640978 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.07072475 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.068646259 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.06835362 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.07493908 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.069108149 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076868938 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084316959 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.07734584 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071269275 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072851193 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072937443 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.067774503 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073919832 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073831733 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.073549887 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.079342042 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.074003435 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072963165 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071857177 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.100395548 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.076321156 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069650166 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068978109 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.069285394 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.072240815 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078963016 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.087434351 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071832126 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06858114 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070741764 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074924131 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.084607518 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.070021831 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075899783 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067485287 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070687971 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072660117 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073809296 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071618096 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068752667 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.070049181 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.070507979 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.071077565 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.070313937 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069338692 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072789844 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.068077279 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.069442601 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070837804 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.072100928 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.077245592 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.069360482 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073431995 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.071702537 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.06925248 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072990684 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075800408 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.073243032 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.091054351 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.079582534 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070739319 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.06860652 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.085239 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071969052 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069122332 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075408152 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074660761 seconds)
  done (took 9.867651918 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.096144083 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.072306244 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.09035156 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097104003 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080640071 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.07594222 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084956199 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071670537 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.087401252 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069356852 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079471095 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068755442 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083806339 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079488066 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071587239 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080815132 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.073053292 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.091250453 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.084666024 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.069103244 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079908527 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.083041796 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083117943 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088238011 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088217565 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088886206 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.083013284 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072678504 seconds)
  done (took 4.281960193 seconds)
done (took 41.445620829 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 7.030420039 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.17782898 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 7.013798424 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.213258081 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.07095092 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.243141465 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.133002532 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 7.029529717 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.117614667 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.031528264 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.337438754 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.452620256 seconds)
done (took 69.857978968 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.154301882 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.159260227 seconds)
    (2/2) benchmarking "String"...
    done (took 2.235295192 seconds)
  done (took 6.347730365 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.601664065 seconds)
    (2/3) benchmarking "different length"...
    done (took 2.008012617 seconds)
    (3/3) benchmarking "different"...
    done (took 2.057472667 seconds)
  done (took 8.604129129 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.097791123 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 6.040180775 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.268917546 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 7.00719287 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 7.011937872 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.415508702 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.80963311 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.46713768 seconds)
  done (took 32.959995788 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.178507306 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.245938972 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.702025717 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.751954066 seconds)
  done (took 16.859656715 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.612179299 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.270484908 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.269303699 seconds)
    (4/4) benchmarking "different"...
    done (took 2.273162004 seconds)
  done (took 11.420514552 seconds)
done (took 88.466004206 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.032845513 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 7.00921122 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.043475021 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.039991859 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 7.017427337 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 7.011122945 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 7.012861679 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 7.010732873 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.01261219 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.093824029 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 7.007946578 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 7.021477309 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 7.010495149 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.050279799 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.63717843 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.058352803 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 7.014743104 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 7.026308828 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 7.018734755 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.010111498 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 7.010260587 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.175190344 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.519756414 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.222233777 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.651338956 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.408842299 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.504356883 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.475004009 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 7.031709606 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 7.025310444 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.091742121 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.37091798 seconds)
  done (took 212.567894091 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 7.01111118 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 4.079255795 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.149958984 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 7.049778893 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.530043121 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.22006011 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.177445242 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.562223067 seconds)
    (9/36) benchmarking "syr!"...
    done (took 7.02885064 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 7.036384372 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.23214525 seconds)
    (12/36) benchmarking "her!"...
    done (took 7.021972518 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.240593743 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.979043739 seconds)
    (15/36) benchmarking "dotu"...
    done (took 3.019805808 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.06026187 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.243900367 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.253596757 seconds)
    (19/36) benchmarking "dotc"...
    done (took 3.017424648 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.214348522 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 7.027590559 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.037656588 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.995907851 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.210169479 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.059450885 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.076205067 seconds)
    (27/36) benchmarking "syrk"...
    done (took 7.029841567 seconds)
    (28/36) benchmarking "trsm"...
    done (took 7.040547348 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.208682502 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.225328801 seconds)
    (31/36) benchmarking "gemm"...
    done (took 7.031866151 seconds)
    (32/36) benchmarking "symm!"...
    done (took 7.058395477 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.185098443 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.895848784 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 7.031761508 seconds)
    (36/36) benchmarking "trmm"...
    done (took 7.055020447 seconds)
  done (took 179.253832695 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.215294876 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 2.027016763 seconds)
    (2/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 2.032884207 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.026463892 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.080916338 seconds)
    (5/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.164902003 seconds)
    (6/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.027846939 seconds)
    (7/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.701551424 seconds)
    (8/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.03526621 seconds)
    (9/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.259343232 seconds)
    (10/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.029589852 seconds)
    (11/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 2.025405055 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.025134419 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.026555855 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.039028263 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.120897086 seconds)
    (16/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 2.026136957 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.0276324 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 2.040349012 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.027963782 seconds)
    (20/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 2.025950039 seconds)
    (21/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 2.051427265 seconds)
    (22/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 2.029373395 seconds)
    (23/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 2.025606262 seconds)
    (24/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.026771303 seconds)
    (25/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 2.026222705 seconds)
    (26/118) benchmarking ("3-arg mul!", 3)...
    done (took 2.026004019 seconds)
    (27/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.023621492 seconds)
    (28/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.026151306 seconds)
    (29/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 2.026345116 seconds)
    (30/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.961597153 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.26848736 seconds)
    (32/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 2.028772282 seconds)
    (33/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 2.027370623 seconds)
    (34/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.89121003 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.040767104 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.589948089 seconds)
    (37/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.02951915 seconds)
    (38/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 2.026294524 seconds)
    (39/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.11577658 seconds)
    (40/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.082482379 seconds)
    (41/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.117829189 seconds)
    (42/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 2.030198362 seconds)
    (43/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.246278155 seconds)
    (44/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.109658838 seconds)
    (45/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 2.027668353 seconds)
    (46/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 2.026448244 seconds)
    (47/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.088571379 seconds)
    (48/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 2.039052133 seconds)
    (49/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.02747481 seconds)
    (50/118) benchmarking ("5-arg mul!", 2)...
    done (took 2.027169098 seconds)
    (51/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.027826669 seconds)
    (52/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.033919186 seconds)
    (53/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.089821845 seconds)
    (54/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.24623115 seconds)
    (55/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.028235811 seconds)
    (56/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.166203997 seconds)
    (57/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.512794037 seconds)
    (58/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 2.026125658 seconds)
    (59/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.027092262 seconds)
    (60/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.027278997 seconds)
    (61/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.652540413 seconds)
    (62/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 2.029368343 seconds)
    (63/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.0279638 seconds)
    (64/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 2.035512853 seconds)
    (65/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.033979401 seconds)
    (66/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.027411619 seconds)
    (67/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.027802875 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.41465334 seconds)
    (69/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.098340941 seconds)
    (70/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.538694913 seconds)
    (71/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.212678212 seconds)
    (72/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 2.028948268 seconds)
    (73/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.590488957 seconds)
    (74/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.11122451 seconds)
    (75/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 2.027381544 seconds)
    (76/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.028089735 seconds)
    (77/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.028203147 seconds)
    (78/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 2.02953004 seconds)
    (79/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.028492291 seconds)
    (80/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 2.031133338 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.16586234 seconds)
    (82/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.037348637 seconds)
    (83/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.127154645 seconds)
    (84/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.111051878 seconds)
    (85/118) benchmarking ("3-arg mul!", 2)...
    done (took 2.02848837 seconds)
    (86/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.16537922 seconds)
    (87/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.030475912 seconds)
    (88/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.03241365 seconds)
    (89/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.838453503 seconds)
    (90/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.098776322 seconds)
    (91/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.065224386 seconds)
    (92/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.835265338 seconds)
    (93/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 2.031935261 seconds)
    (94/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.4004871 seconds)
    (95/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.777722178 seconds)
    (96/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.028978709 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 2.028495783 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 2.041266429 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.03097197 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.029098619 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 2.030294713 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.107811276 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 2.029648803 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.165759042 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.751140024 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.712699603 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 2.03168218 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.013837892 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 2.036250047 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.107791533 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.168154996 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 2.032086404 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.081215837 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.037745153 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 2.031403031 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.124327461 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 2.027385272 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 2.029574419 seconds)
  done (took 439.421856258 seconds)
done (took 835.442582629 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.667553751 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.632918271 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.724072948 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.657675921 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.623628319 seconds)
  done (took 15.267150301 seconds)
done (took 17.229197508 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.061072309 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 2.046930572 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 2.035839724 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.086154854 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.056333894 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 2.043577403 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.076935267 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.075265325 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.061810791 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 2.043897887 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.080000226 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 2.04739804 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.062346207 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.064786345 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.106098102 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.069059156 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 2.048251463 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 2.039199879 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.088276131 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 2.047092027 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 2.046627786 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.045662689 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 2.044314706 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.082976692 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.116317086 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.055871009 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 2.04411859 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.081698477 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 2.054851796 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.07937694 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.100261614 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.065314809 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.07840428 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.108605516 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.090948957 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.115151352 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.053408038 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.103364692 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 2.051131865 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.119982136 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.097103201 seconds)
  done (took 86.839420139 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.042883851 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.177711411 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.253778323 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.073262095 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.042265082 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.258143759 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.098237317 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.168655624 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.179892285 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.273959653 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.262965318 seconds)
  done (took 25.800494299 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 2.041215146 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.183760958 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.261361667 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.076840302 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.043730476 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.261027373 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.106236605 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.171815901 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.183132304 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.263298599 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.275758547 seconds)
  done (took 25.842803255 seconds)
done (took 140.445756314 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.419570836 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.068676584 seconds)
  done (took 6.455284774 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.058543997 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.193100653 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 2.037674749 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 2.038643219 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 2.038841393 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 2.040171104 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 2.037334591 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 2.03811266 seconds)
  done (took 18.448171955 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 2.037651905 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 2.036696939 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 2.036193469 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 2.102117171 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 2.037544881 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 2.037848616 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 2.038293547 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 2.038063341 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 2.037759599 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 2.037820601 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 2.037973383 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 2.039225534 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 2.038403705 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 2.039090647 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 2.039786736 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 2.03932737 seconds)
  done (took 34.640887673 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 2.040974811 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 2.01729668 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 2.030100751 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 2.039323778 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 2.040291146 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 2.039988992 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 2.04134424 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 2.039821086 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 2.039787381 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 2.0388046 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 2.040961783 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 2.039338714 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 2.03999318 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 2.039684951 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 2.040059448 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 2.039816857 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 2.039439561 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 2.039727768 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 2.045531157 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 2.040321253 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 2.040230381 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 2.040173505 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 2.040820667 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 2.040281574 seconds)
  done (took 50.902928727 seconds)
done (took 112.422651597 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.298522185 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.952642809 seconds)
  done (took 9.221049117 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 2.044780748 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 2.03958235 seconds)
  done (took 6.130985966 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 2.040802735 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 2.041252528 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 2.04144482 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 2.041745197 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 2.040986176 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 2.042060841 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 2.041800242 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 2.040615251 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 2.041052089 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 2.040953455 seconds)
  done (took 22.382727464 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 2.041094419 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 2.041626776 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 2.041037867 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 2.0416383 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 2.042130233 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 2.042501381 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 2.041481465 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 2.042601064 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 2.041119657 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 2.041930334 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 2.041991439 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 2.040925426 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 2.041765832 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 2.041600979 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 2.041238718 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 2.04292075 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 2.041643216 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 2.041969306 seconds)
  done (took 38.721684927 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 2.041767039 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 2.043625107 seconds)
  done (took 6.056774497 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 2.0410898 seconds)
    (2/7) benchmarking "second"...
    done (took 2.040912334 seconds)
    (3/7) benchmarking "month"...
    done (took 2.041211908 seconds)
    (4/7) benchmarking "year"...
    done (took 2.041458136 seconds)
    (5/7) benchmarking "hour"...
    done (took 2.041830262 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 2.041858183 seconds)
    (7/7) benchmarking "minute"...
    done (took 2.041354175 seconds)
  done (took 16.261484492 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 2.042563158 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.192576186 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.24444888 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.6513144 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 2.031615375 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 2.030719777 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.881073854 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 2.031985372 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 2.033296816 seconds)
  done (took 22.11031433 seconds)
done (took 122.855800012 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.884503098 seconds)
  (2/8) benchmarking "printfd"...
  done (took 7.028112161 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.255439876 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.115029487 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.100689099 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.315898111 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.041450383 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.620433218 seconds)
done (took 44.3206082 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.07896074 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.018377315 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.051442255 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.04973785 seconds)
  done (took 23.070528331 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 7.020707202 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.33947569 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.044333918 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 4.002962865 seconds)
  done (took 23.370617648 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.403815956 seconds)
    (2/2) benchmarking "read"...
    done (took 2.36667137 seconds)
  done (took 6.725327925 seconds)
done (took 62.198302589 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.022250947 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 2.022030619 seconds)
    (3/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 2.021481121 seconds)
    (4/24) benchmarking ("one", "Float64")...
    done (took 2.021076041 seconds)
    (5/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 2.021315047 seconds)
    (6/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 2.021459462 seconds)
    (7/24) benchmarking ("zero", "Float64")...
    done (took 2.021999586 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 2.021336842 seconds)
    (9/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 2.021350046 seconds)
    (10/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 2.021585143 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 2.022080567 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 2.02130995 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 2.022674755 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.021721929 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.021908458 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.021931228 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.02121357 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 2.021824556 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.022470609 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.021091491 seconds)
    (21/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 2.021837199 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.023190754 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 2.022066775 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 2.022676839 seconds)
  done (took 50.475542723 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 2.023089127 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 2.023145844 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 2.022562988 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 2.022701176 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 2.023832046 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 2.02297305 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 2.022632464 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 2.023520962 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 2.023410594 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 2.023752896 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.02374639 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 2.024804225 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 2.023882567 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 2.02379881 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02255387 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 2.023261883 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 2.024231709 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.024023189 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.024915708 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 2.024602883 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 2.023392878 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.024823922 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 2.024242694 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.023805739 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 2.025169685 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.023899915 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 2.024766295 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 2.025246009 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.024579055 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 2.02438464 seconds)
  done (took 62.668129402 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 2.024800255 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 2.024241124 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 2.023968581 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 2.0238846 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 2.025016151 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 2.025614652 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 2.02425066 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 2.024816473 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 2.024553542 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 2.024690089 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 2.025879184 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 2.026595695 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 2.025086303 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 2.026186108 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 2.026517899 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 2.024564556 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 2.024757599 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 2.026254012 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 2.026292532 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 2.026986847 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 2.024580289 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 2.025155192 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 2.025544414 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 2.026269637 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 2.025554102 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 2.026145019 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 2.026745053 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 2.026683361 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 2.026328825 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 2.027697858 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 2.026694571 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 2.027092127 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 2.027464311 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 2.028037339 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 2.027858901 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 2.027745813 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 2.027125868 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 2.027025314 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 2.027132676 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 2.02735312 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 2.02685077 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 2.027109406 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 2.02789466 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 2.026769728 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 2.027674512 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 2.027955289 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 2.028032462 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 2.027925824 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 2.027967492 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 2.02721821 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 2.027251571 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 2.027072875 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 2.028565096 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 2.028859029 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 2.028170513 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 2.027200117 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 2.028059468 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 2.029099782 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 2.028703081 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 2.027756392 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 2.028459996 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 2.028148084 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 2.028635976 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 2.027673433 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 2.017933838 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 2.028352383 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 2.029669378 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 2.029833231 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 2.030475775 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 2.028087736 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 2.028474084 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 2.029308422 seconds)
  done (took 147.886624414 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 2.029649332 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.028838888 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.030819605 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.028921139 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.029605429 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.0300345 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.029732855 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030380455 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030460689 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.030303108 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031167988 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.029597046 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.029794855 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.030188803 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.029844839 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.029588756 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.029511286 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.030044537 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 2.030411935 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.028881051 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.030754551 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.030826138 seconds)
  done (took 46.617379025 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.030496816 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.03015816 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 2.029996173 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.030148322 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.030257903 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.032115899 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.031487663 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.03102537 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.030923101 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029441223 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.029324987 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.030749608 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.031624992 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030962893 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.030697912 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.031288602 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.030480778 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.031189128 seconds)
  done (took 38.512231149 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 2.031917242 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 2.032309227 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 2.031186171 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 2.031082138 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 2.030656947 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.030819822 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.031444978 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.031237272 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 2.031586141 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 2.0308813 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 2.032504203 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031293698 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 2.030559153 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.031600465 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.031834634 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.03213975 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 2.031935511 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.031991647 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.032019844 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.033393577 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.031574504 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.031456706 seconds)
  done (took 46.655637381 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.032652798 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.033056566 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.033171382 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.033205664 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.032595256 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.033947662 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 2.032595498 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 2.032614231 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 2.033506955 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 2.032112701 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.033612181 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.032949258 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 2.033416775 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.03309915 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 2.033141985 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.033544343 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.03249862 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.032265972 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.033813289 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.03404433 seconds)
  done (took 42.623224036 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.034654263 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.021275912 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.034390261 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.035084369 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.034642524 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.034690559 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.034604172 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.03407496 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.034618651 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.035819582 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.034595757 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.034969627 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.035344939 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.035508929 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.035303547 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.035754025 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.035357183 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.03553045 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.034408878 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.034909431 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.036163442 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.035160568 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.035810334 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.035277661 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.036409798 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.023510616 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.034889238 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.036350559 seconds)
  done (took 58.921941247 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.035052984 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.033965892 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 2.03501958 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.035143566 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 2.022142789 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 2.033934258 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.022204305 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 2.035375426 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.034365232 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.035970851 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.035885113 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.035579558 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.03603214 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 2.035405235 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.03588116 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 2.036154862 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.035730107 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.036055902 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.036118301 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.036532667 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 2.036328691 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.035412095 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.036475823 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.037944091 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.03501768 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 2.037093549 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.036607569 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.035629202 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.035850299 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.035911547 seconds)
  done (took 62.982623785 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.05633843 seconds)
    (2/2) benchmarking "in"...
    done (took 2.054441725 seconds)
  done (took 6.075742796 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.036535434 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.036998693 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.036894992 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.037387992 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.037883139 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 2.036721373 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.036678436 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.036563576 seconds)
  done (took 18.261250639 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.026713819 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.04035838 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.038159129 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.03793647 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.038483491 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.045370195 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.03875983 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.03934693 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.039545278 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.039175418 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.043437917 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.041497162 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.047129105 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.043176959 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.03761775 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.038178864 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.041015909 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.041707604 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.03976156 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 2.038543396 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.042837494 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.038501245 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.037559836 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.082148458 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.039799044 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.043207082 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.052172717 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.041657498 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.048769453 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.041085032 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.048285653 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.041061603 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.040803963 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.045646491 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.040324668 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.040076117 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.047368977 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.04029559 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.04262329 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.038463612 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.039981756 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.040146074 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.042958287 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.048521229 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.038609348 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.038572984 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.037604981 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.039330689 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.044439283 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.041119688 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.04621062 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.038292553 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.037439151 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.041092286 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.039318916 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.037976445 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.037584926 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.039340745 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.044157019 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.045273781 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.041336058 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.058896573 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.047828763 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.037965422 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.037466082 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.047679547 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.063269948 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.041314772 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.039018342 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.037382778 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.045764255 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.036987264 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.0364492 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.038281627 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.051901735 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.047307181 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.038382694 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.038993303 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.038373622 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.03790299 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.038633867 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.038977429 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.039583369 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.038788023 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.0480369 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.064927151 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.038613247 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.038148144 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.038813362 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.039021238 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.044217519 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.041727916 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.039460849 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.037579296 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.039684859 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.040872488 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.039036565 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.04003228 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.038634801 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.0486002 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.039703674 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.023431084 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.042788183 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.049373311 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.039661935 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.040247176 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.042214773 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.039329512 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.048128718 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.039401972 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.039707957 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.038681476 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.037371399 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.043818923 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.039925058 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.041659728 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.050346423 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.0476511 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.041448113 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.043690327 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.043078614 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.04487931 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.049337562 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.064958786 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.039443215 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.043175958 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.047027929 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.053380165 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.043106444 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.038850968 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.042582161 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.037968645 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.036575065 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.038462857 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.035381933 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.036648796 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.034118318 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.03226939 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.032739479 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.032300728 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.034650363 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.034723634 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.033609574 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.030736981 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.034467278 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.030619576 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.035447049 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.036561876 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.031725849 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.031307168 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.030020462 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.032478345 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.031915144 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.02984967 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.028672109 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.032290219 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.028708538 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.027919977 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.02942848 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.027456946 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.028670386 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.027542235 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.030778791 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.026376857 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.025800549 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.028343452 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.025516822 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.026111662 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.027682914 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.014241684 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.029932936 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.026095694 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.029325796 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.025599416 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.025361437 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.026800095 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.024835338 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.02500979 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.028586088 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.036285574 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.032213125 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.033798103 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.023065581 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.030528141 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.024094211 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.025824092 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.023525284 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.024214125 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.023683203 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.023724809 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.025047149 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.026176735 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.04419149 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.032826276 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.024876519 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.025575539 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.027376941 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.027398412 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.027660799 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.022499745 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.02381457 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.024522811 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.022926775 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.021572895 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.021817939 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.026522505 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.021895 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.02124326 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.024594916 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.02227685 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.022258793 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.020565037 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.019605804 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.022287557 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.019976583 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.020248082 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.017517751 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.016560136 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.024147642 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.018818613 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.016419585 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.015907965 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.017656005 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.015688876 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.015099407 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.015890314 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.020574611 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.015024162 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.016070448 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.023511085 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.006112513 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.015321637 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.014823365 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.015437056 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.016796639 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.014510044 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.017579515 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.023462078 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.01831479 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.015554247 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.019239524 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.014555137 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.017670854 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.014652835 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.019856932 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.01508683 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.015559853 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.013860964 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.014241296 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.02275293 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.013374917 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.016285089 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.015676161 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.021557953 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.017917841 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.016852939 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.015576727 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.017081946 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.021986033 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.02394517 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.015129576 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.018251213 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.016152516 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.016138683 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.018717344 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.015578181 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.02905823 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.023368911 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.01621978 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.017132904 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.013496221 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.016089303 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.014734369 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.014199026 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.026214448 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.014809785 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.016036962 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.018326671 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.015270784 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.015517513 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.021804742 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.016115092 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.017283052 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.016107986 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.018307264 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.016022848 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.015232227 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.017437598 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.015494257 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.019767327 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.018125646 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.014028702 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.01447494 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.014686314 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.02687566 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.012393614 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.013378136 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.021419025 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.014885974 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.016504714 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.014523458 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.012511075 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.013393455 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.015036193 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.016936161 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.014669312 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.013607852 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.017115386 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.023298682 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.019270216 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.020480305 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.015165573 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.023685059 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.012377543 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.018192371 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.013035326 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.016034083 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.020012227 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.011957349 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.015304891 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.021235076 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.014220887 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.014148523 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.016769747 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.016355865 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.012973377 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.013316753 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.014760744 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.017554839 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.018032228 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.009539252 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.012584893 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.009285858 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.013794247 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.018391803 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.014678678 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.012729341 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.015178576 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.01198932 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.018108225 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.012884968 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.013962183 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.013684578 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.012894652 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.014333769 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.020445357 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.010329835 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.01462329 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.016648091 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.017772626 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.022729186 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.014147871 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.013746896 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.018316422 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.014754284 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.017199269 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.013655638 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.013625108 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.014098407 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.016485062 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.014164369 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.023941322 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.021898715 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.017397197 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.01728175 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.014202836 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.01505256 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.023284437 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.032674391 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.021369113 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.01715569 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.017082926 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.022536235 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.020019416 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.019481997 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.017741013 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.021416 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.017347502 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.020273901 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.017356312 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.025253468 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.01446546 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.014758386 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.015548812 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.020232164 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.017139081 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.015560955 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.01661543 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.019606082 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.017865226 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.026022573 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.015882826 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.017630332 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.018092968 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.015210747 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.015363445 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.0152582 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.017294631 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.018184944 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.015513647 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.0157422 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.018569689 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.020190319 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.018541761 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.019824497 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.023760728 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.015770528 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.017515908 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.020362076 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.017535997 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.019079655 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.017321972 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.016104081 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.02092108 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.015726196 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.017578705 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.019174184 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.023452619 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.019250976 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.016269823 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.01758563 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.02065003 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.017758752 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.019296839 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.018827903 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.02719742 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.019789171 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.026444957 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.027263656 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.017103026 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.016985931 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.024537565 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.023743988 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.017674015 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.017319884 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.017837989 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.020211142 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.020313722 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.021429214 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.018551817 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.01814576 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.023077522 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.016777059 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.020935707 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.01794282 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.01861566 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.022256906 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.020509138 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.023737688 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.018852768 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.018329448 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.017876296 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.019538263 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.025548928 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.021204406 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.019937467 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.019586124 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.020803934 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.025218729 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.023621464 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.018864308 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.018935627 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.02041192 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.024746045 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.018635032 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.018575868 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.019573825 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.019652301 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.026261173 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.025989434 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.018234071 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.020605701 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.021880404 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.027272846 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.019516103 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.020275466 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.020476687 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.021808266 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.030819917 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.020360201 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.008247413 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.020100954 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.02593871 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.026344939 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.021649908 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.020695718 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.020041893 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.02563212 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.020199439 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.023832876 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.027730586 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.024130048 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.02918395 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.027557826 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.025489657 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.02210476 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.019501095 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.024469631 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.020379182 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.02142612 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.024794315 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.022105706 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.030605801 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.021594696 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.023153349 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.021239626 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.023148494 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.024882833 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.021254926 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.024402584 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.029321699 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.031250382 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.022975229 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.023978323 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.022665535 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.024506819 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.032418837 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.022720774 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.022094564 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.023103923 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.02339044 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.023686907 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.02789895 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.02936145 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.026678784 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.022080901 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.011073923 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.023638237 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.025424857 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.031487382 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.04852943 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.025638453 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.022509862 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.023072251 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.023548817 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.024600444 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.025562578 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.023432555 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.0305198 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.024024367 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.002177467 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.032072575 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.023013765 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.023723629 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.023539013 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.023477088 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.028788055 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.025007223 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.030872924 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.023555676 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.02259952 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.023567077 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.47150425 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.023438608 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.023573845 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.023336791 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.026017462 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.023146457 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.023893241 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.032921077 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.024640468 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.0264911 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.03681411 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.034264075 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.02386662 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.024700649 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.024261806 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.024888597 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.021186781 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.021695981 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.028808903 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.029793853 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.027619722 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.030648463 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.026595554 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.026242022 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.026485138 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.025805634 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.02522952 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.038697499 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.033280997 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.025046691 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.026125937 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.030684961 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.024918139 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.032798579 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.031038134 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.025803617 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.027329913 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.025528845 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.025760075 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.026044995 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.025886803 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.027386879 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.032557684 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.026852127 seconds)
  done (took 1210.055658627 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.026494754 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02510494 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.026733757 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.02514185 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.02451493 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.025384843 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.025248258 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.017090777 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.025963178 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.027312328 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.026261309 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.026413704 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.025122822 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.026396354 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.026864428 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.027409943 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.02612867 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.026942074 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.026267348 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027017574 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.025705946 seconds)
  done (took 44.493884721 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.027045181 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.026913012 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.025414414 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.026875769 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.0280958 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.026662414 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.027237403 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.027219534 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.027109056 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.027567845 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.02807218 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.028211924 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.028625135 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.027297014 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.027953428 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.022646732 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.0280705 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.028588879 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.028414539 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.027215379 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.029422922 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.028039293 seconds)
  done (took 46.557903929 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.029550503 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.02876409 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.030000422 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.028255675 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.028037183 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.028811713 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.028076744 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.030745864 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.029615216 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.030432962 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.034802168 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.035120683 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.027886411 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.032799148 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.027568454 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.030061865 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.174033116 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.029327125 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.030216766 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.029332211 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.029615066 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.036162403 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.028561854 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.029276457 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.029984032 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.030200558 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.029473812 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.030138969 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.02974647 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.031847489 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.033341664 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.029900739 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.031587958 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.033612274 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.030884431 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.031527875 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.033639194 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.031550322 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.029875143 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.030293675 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.038740845 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.048086058 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.030434303 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.03139739 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.038858848 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.029750804 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.031037499 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.034211745 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.037134542 seconds)
  done (took 101.642569541 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.031774216 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.030232107 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.030810732 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.030134719 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.031458896 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.031393262 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.030527174 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.030142038 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.031042898 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.031316754 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.030804716 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.031306471 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.001323564 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.031429569 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.031326207 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.032776815 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.031127281 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.030877214 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.031677026 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.029119382 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.030958709 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.031826046 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.030139695 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.032114958 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.031551151 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.032099905 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.031444987 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.031781857 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.033177226 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.033314195 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.032242712 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.032795056 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.032911648 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.032805863 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.031888961 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.03485846 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.031480868 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.032026518 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.033130191 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.032141851 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.032278187 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.031469739 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.031809092 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.033078607 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.0340322 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.019404363 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.034003694 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.033914418 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.031994847 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.031956025 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.032826945 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.032454366 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.033392138 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.033951417 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.033547972 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.033957057 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.033084554 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.033026778 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.033990189 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.033907429 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.033369195 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.034247867 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.0336435 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.033223718 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.033027334 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.034021399 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.033270178 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.033854002 seconds)
  done (took 140.103373361 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.03447719 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.035062327 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.035124292 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.03580737 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.035080875 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.034542207 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.034778489 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.03546382 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.036072228 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.036174526 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.035895642 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.034859401 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.035479665 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.03481854 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.035985567 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.036632381 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.035879258 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.035429957 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.036235978 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.035715522 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.036036267 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.036453766 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.035897971 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.035519351 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.036879812 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.035743425 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.035211728 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.037382382 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.036007235 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.037174961 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.037369733 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.035947358 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.036652866 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.03628704 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.038731875 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.036989728 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.036971985 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.03884029 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.038250826 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.037040272 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.037840126 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.038373007 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.037542978 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.037104936 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.03746927 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.036793478 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.038326737 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.037664957 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.038853975 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.037856411 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.03869926 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.037751128 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.038153722 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.038658114 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.037229744 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.036461632 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.037975082 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.040120963 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.038273152 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.039210938 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.039256103 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.037826356 seconds)
  done (took 128.246361972 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.037748729 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.038520219 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.035402621 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.028993514 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.037385264 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.03942947 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.037721349 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.037483156 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.038458782 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.039144746 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039355596 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.038681429 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.039299202 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.038605543 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.038176285 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040206318 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.039453661 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.03761512 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.038567718 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.038852882 seconds)
  done (took 42.725145944 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.037974938 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.03904472 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.038689514 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.039031915 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.039619076 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.038441053 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.038706213 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.039693734 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.039796607 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.039777271 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.03885847 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.040328954 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.040868215 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.039120477 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.040686633 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.04060705 seconds)
  done (took 34.598147357 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.039679134 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.040601111 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.040631053 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.041278043 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.041348725 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.041001196 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.040751641 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.040286594 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.040095639 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.040662472 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.040276269 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.012406071 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.041860934 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.04136607 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.041348761 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.040076878 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.041558032 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.041194613 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.039906678 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.041628569 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.041570821 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.041142754 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.042850353 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.04165616 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.040695377 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.040722264 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.040714632 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.041384135 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.041213821 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.041464278 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.039920825 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.041161049 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.042345204 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.041564271 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.042120145 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.041407246 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.041991801 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.041908918 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.041953416 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.041472857 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.04219715 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.042402311 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.042520587 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.04204858 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.041566016 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.042622785 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.042335738 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.042086523 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.041328146 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.042942682 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.042546963 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.044187538 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.041915608 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.043730264 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.042111555 seconds)
  done (took 114.222282605 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.043293467 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.042333056 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.043575984 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.043542555 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.043054652 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.043051914 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.042941913 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.042696796 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.043262448 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.042405109 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.043151426 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.043193167 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.044128657 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.043153076 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.04428544 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.043471536 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.044100669 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.043852169 seconds)
  done (took 38.750249942 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.043188546 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.044893083 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.044999356 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.043886111 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.043860369 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.043893847 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.043743212 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.043941746 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.043685302 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.045486052 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.044135981 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.043919629 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.043803726 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.044734103 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.04493754 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.042658675 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.044856101 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.045857892 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.045735635 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.044650697 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.044318676 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.044842325 seconds)
  done (took 46.94839563 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.044902052 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.045752662 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.059131467 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.064216022 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.064974621 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.074446848 seconds)
  done (took 14.327037915 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045372388 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.045568933 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.0448336 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.044280663 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.045289001 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046109762 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.045550007 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.04484561 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.045145171 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046280063 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.045798246 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.045699468 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046423046 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.04719131 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.046351217 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046584999 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046962498 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046481651 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046129449 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04536736 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046498862 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04752728 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.04719293 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047091709 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.046546561 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047152093 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.046423089 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046088521 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047467442 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.046788527 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.046481124 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.046840716 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048149818 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048010627 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.047455947 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.04681584 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.046244792 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048304867 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.047527459 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.047604816 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.047244928 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047422821 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048427619 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.047471087 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.047285181 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.047719183 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049117609 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048775334 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048177169 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.047787304 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048641017 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048003352 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.048255109 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049034907 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.0485238 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049386083 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050106652 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048921299 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.048775955 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.050285776 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049330828 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.048831252 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049326715 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049298056 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049137206 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049656532 seconds)
  done (took 137.098736571 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048935026 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.047860062 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.049714909 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.048766355 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.048592976 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049407746 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049345521 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.049189883 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049445544 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049477057 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050701213 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.048724419 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.049279681 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049363541 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050120754 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.048497858 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.050054379 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049586545 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.049196798 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.049637305 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050440413 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051282146 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.050486629 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.049714012 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050450125 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.05026243 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.049750301 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.049935916 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.048398616 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050180131 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050343892 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050168039 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050398898 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.052306274 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051104352 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.051250802 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051066877 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.050969485 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.05149071 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.050996041 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050525562 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051326421 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.050760331 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.050344503 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051496407 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.052152111 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051594381 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052052914 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.051057711 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.051878142 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051519506 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.052374554 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051638219 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051889523 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.050928666 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.051820243 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.051095527 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.051594614 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05248785 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052785663 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.051750338 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.052261096 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.05108457 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.051765419 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.053080353 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.052187657 seconds)
  done (took 137.318333931 seconds)
done (took 2820.728264415 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.111950485 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.135521445 seconds)
  done (took 16.228039468 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.216786134 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.169242452 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.05444421 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.097524931 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.058269167 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.056663141 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.059753961 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.05492299 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.055492944 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.054340074 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.053764565 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.239165908 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.06829929 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.0413813 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.054757272 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.146909424 seconds)
  done (took 55.466272633 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.059658647 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.058668781 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.06945971 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.060405295 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.059387604 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.071492115 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.089471205 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.064077663 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.095709118 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.074809439 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.130198027 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.070636399 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.058376349 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.110317185 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.073876931 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.074766074 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.146238441 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.136037796 seconds)
  done (took 39.483790126 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.139539469 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.072884433 seconds)
  done (took 11.200045974 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.06586805 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.069562792 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.063762285 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.057677342 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.072213486 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.05800356 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.058134152 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.060230409 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.065149116 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.05787165 seconds)
  done (took 72.641038973 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.062315528 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.059128812 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.06060252 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.05731726 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.054707749 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.060878312 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.057682588 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.059000074 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.751994199 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.095282785 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.066311714 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.066224817 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.059216765 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.05856979 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.055641937 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.085106383 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.215837668 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.055390621 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.056165277 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.064244434 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.059449668 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.115582706 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.072385551 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.058917446 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.091118597 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.749447795 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.069636027 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.063987379 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.219721056 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.056682347 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.058388424 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.219983343 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.062911651 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.411170081 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.343908016 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.062726003 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.068097356 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.0644309 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.057453937 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.211937284 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.060143614 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.065999955 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.870113723 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.329428824 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.146625462 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.104704259 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.42497554 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.062039338 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.061470892 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.092385608 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.062117681 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.061931668 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.076308337 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.560448414 seconds)
  done (took 143.183465685 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.058477668 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.293560383 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.210406279 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.05882961 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.315216815 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.26641226 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.062191089 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.103661205 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.061286688 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.260295045 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.30600637 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.160689259 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060609507 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.059927979 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.057194691 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.058283371 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.202976559 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.12581996 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.062555012 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.057297753 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.083964236 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.258712685 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.180108493 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.06092414 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.084190225 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.265019732 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.183266402 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.160532705 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.834445072 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.058161399 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.122298823 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.064061826 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.061923934 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.058593543 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.210622337 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.151080619 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.142139563 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.063883288 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.059067332 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.059802102 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.733776652 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.258242516 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.153990365 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.184016821 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.305491319 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.273398859 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.671462239 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.058309798 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.672667409 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.223118297 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.252753719 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.269725715 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.179684595 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.06160644 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.60909773 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.059714409 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.059793212 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.283451424 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.276720722 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.158645933 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.06405598 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.060296373 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.060719956 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.298075521 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.06361025 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.15157427 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.063242172 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.059625491 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.152984654 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.162172237 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.284545656 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.279854708 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.091266811 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.381889694 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.559346 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.264529094 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.126326542 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.281640804 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.064728177 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.06114625 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.138666211 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.898382002 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.313708046 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.303263939 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.259396747 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.091837855 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.713710728 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.062261582 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.248494305 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.252001903 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.29617221 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.309596687 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.295027114 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.423325177 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.061157417 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.06140835 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.381579761 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.17927723 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.015930132 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.41532973 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.2920097 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.555108979 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.087447663 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.408666522 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.192543741 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.065710945 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.709190989 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.062376913 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.26714962 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.102502993 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.064798485 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.064342298 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.25565416 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.971837772 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.063971674 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.770860343 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.124316005 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.06968621 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.269088293 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.066706877 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.308947214 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.068131197 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.297194208 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.694258536 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.094424813 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.287842422 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.307499236 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.693143908 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.305714736 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.306789443 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.177621294 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.286942268 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.7939577 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.063590263 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.32705705 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.067021667 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.064711811 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.231460989 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.066189479 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.206844786 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.06821728 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.33037757 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.084316957 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.292320207 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.067462438 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.304851652 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.09752588 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.115097871 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.067581023 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.194517466 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.068965247 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.902630129 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.222516647 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.066365747 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.064361548 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.82641791 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.065359974 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.212341336 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.290101268 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.086281313 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.135508221 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.632312044 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.058861002 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.153101168 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.086950484 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.338881156 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.066477019 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.311839156 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.040609404 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.55181453 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.066128749 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.301548117 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.250329173 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.071046363 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.067190407 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.908557047 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.066166249 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.066711132 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.221290704 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.516525809 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.971951307 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.264412173 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.071357814 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.194884486 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.069286083 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.142596004 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.41325192 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.066868671 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.067518398 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.067946183 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.066892263 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.068303156 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.327372135 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.093773154 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.499946647 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.203670936 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.322190019 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.373637345 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.263370345 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.108680952 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.071642218 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.290576568 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.071427136 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.130421679 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.070223529 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.087883466 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.2948085 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.061835841 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.273175694 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.303670188 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.117309909 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.115031264 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.070581254 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.070021641 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.0482158 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.21336356 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.15464518 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.071048224 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.06945158 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.182902379 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.189849113 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.250166236 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.887202313 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.198601681 seconds)
  done (took 944.403782071 seconds)
done (took 1284.588647057 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.069923991 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.073360078 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.075763567 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.074874644 seconds)
  done (took 30.289903587 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.072138108 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.06381302 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.071518172 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.058652165 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.072360417 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.071941962 seconds)
  done (took 14.406850085 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.070751571 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.074896895 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.072375439 seconds)
  done (took 23.214965059 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.145745863 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.490554322 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.211269622 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.507419718 seconds)
  done (took 11.35195979 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.073445219 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.072653306 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.072446522 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.072964254 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.072654839 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.073472434 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.072713375 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.071955176 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.074037314 seconds)
  done (took 20.655686076 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.34835553 seconds)
done (took 106.265623177 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.095575823 seconds)
    (2/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.394548082 seconds)
    (3/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.234738544 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.086547727 seconds)
    (5/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.086114368 seconds)
    (6/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.473252428 seconds)
    (7/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.330333553 seconds)
    (8/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.270273957 seconds)
    (9/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.184764053 seconds)
    (10/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.090884388 seconds)
    (11/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.17939737 seconds)
    (12/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.175277793 seconds)
    (13/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.201642486 seconds)
    (14/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.086424463 seconds)
    (15/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.328138256 seconds)
    (16/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.402092584 seconds)
    (17/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.471027874 seconds)
    (18/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.223068759 seconds)
    (19/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.072536182 seconds)
    (20/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.478514786 seconds)
    (21/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.084060425 seconds)
    (22/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.80869309 seconds)
    (23/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.161026318 seconds)
    (24/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.407862769 seconds)
    (25/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.07665765 seconds)
    (26/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.07621825 seconds)
    (27/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.227494645 seconds)
    (28/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.159249919 seconds)
    (29/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.989357594 seconds)
    (30/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.712233876 seconds)
    (31/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.182651662 seconds)
    (32/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.222727308 seconds)
    (33/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.285031494 seconds)
    (34/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.267750495 seconds)
    (35/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.23941026 seconds)
    (36/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.173973222 seconds)
    (37/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.168188972 seconds)
    (38/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.15194078 seconds)
    (39/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.20031585 seconds)
    (40/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.349021428 seconds)
    (41/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.210358977 seconds)
    (42/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.07382728 seconds)
    (43/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.170008576 seconds)
    (44/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.486980724 seconds)
    (45/341) benchmarking ("sort", Bool, false)...
    done (took 2.289424315 seconds)
    (46/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.277979543 seconds)
    (47/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.086334825 seconds)
    (48/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.940200309 seconds)
    (49/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.356217077 seconds)
    (50/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.467766095 seconds)
    (51/341) benchmarking ("sort", Int64, false)...
    done (took 5.725618945 seconds)
    (52/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.116574973 seconds)
    (53/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.31951037 seconds)
    (54/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.389045588 seconds)
    (55/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.090986446 seconds)
    (56/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.075907408 seconds)
    (57/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.186241463 seconds)
    (58/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.094782346 seconds)
    (59/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.201021946 seconds)
    (60/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.510652053 seconds)
    (61/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.376016823 seconds)
    (62/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.170818072 seconds)
    (63/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.13583898 seconds)
    (64/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.262727229 seconds)
    (65/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.378550414 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.850638616 seconds)
    (67/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.090292393 seconds)
    (68/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.084850485 seconds)
    (69/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.278431033 seconds)
    (70/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.075484495 seconds)
    (71/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.095020336 seconds)
    (72/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.156301869 seconds)
    (73/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.465169549 seconds)
    (74/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.467761326 seconds)
    (75/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.908286489 seconds)
    (76/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.08264691 seconds)
    (77/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.242252355 seconds)
    (78/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.24426981 seconds)
    (79/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.489587378 seconds)
    (80/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.210426443 seconds)
    (81/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.469670089 seconds)
    (82/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.176192051 seconds)
    (83/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.293334035 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.41992601 seconds)
    (85/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.091103632 seconds)
    (86/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.579300889 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.218214248 seconds)
    (88/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 3.025430827 seconds)
    (89/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.301643617 seconds)
    (90/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.17984182 seconds)
    (91/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.140917403 seconds)
    (92/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.46411881 seconds)
    (93/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.228961553 seconds)
    (94/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.163221124 seconds)
    (95/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.371307455 seconds)
    (96/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.083434175 seconds)
    (97/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.220973067 seconds)
    (98/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.226396487 seconds)
    (99/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.326690441 seconds)
    (100/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.275531079 seconds)
    (101/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.313500223 seconds)
    (102/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.939411808 seconds)
    (103/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.077009503 seconds)
    (104/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.668018957 seconds)
    (105/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.104052041 seconds)
    (106/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.5361613 seconds)
    (107/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.975024816 seconds)
    (108/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.197350798 seconds)
    (109/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.936899639 seconds)
    (110/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.346132129 seconds)
    (111/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.126828199 seconds)
    (112/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.411327605 seconds)
    (113/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.164926049 seconds)
    (114/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.232326595 seconds)
    (115/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.228642453 seconds)
    (116/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.126616396 seconds)
    (117/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.100940383 seconds)
    (118/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.083856682 seconds)
    (119/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.41396768 seconds)
    (120/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.157626655 seconds)
    (121/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.078937997 seconds)
    (122/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 3.631562881 seconds)
    (123/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.350806784 seconds)
    (124/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.081691642 seconds)
    (125/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.149817254 seconds)
    (126/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.193043455 seconds)
    (127/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.358383313 seconds)
    (128/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.275698722 seconds)
    (129/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.11017459 seconds)
    (130/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.31553575 seconds)
    (131/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.160479395 seconds)
    (132/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.317678778 seconds)
    (133/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.084217683 seconds)
    (134/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.53723425 seconds)
    (135/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.080648172 seconds)
    (136/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.848197693 seconds)
    (137/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.445139223 seconds)
    (138/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.902618103 seconds)
    (139/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.962785742 seconds)
    (140/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.081227195 seconds)
    (141/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.182371001 seconds)
    (142/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.634637095 seconds)
    (143/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.096650648 seconds)
    (144/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.386296405 seconds)
    (145/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.336165844 seconds)
    (146/341) benchmarking ("sort", Float32, false)...
    done (took 5.741916782 seconds)
    (147/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.286661897 seconds)
    (148/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.337490529 seconds)
    (149/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.082742658 seconds)
    (150/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 4.006731599 seconds)
    (151/341) benchmarking ("sort", BigInt, false)...
    done (took 7.079557936 seconds)
    (152/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.281968729 seconds)
    (153/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.38512601 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.380903955 seconds)
    (155/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.381194621 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.935432606 seconds)
    (157/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.104784727 seconds)
    (158/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.932665823 seconds)
    (159/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.235941606 seconds)
    (160/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.414687473 seconds)
    (161/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.792219516 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.737990573 seconds)
    (163/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.439426396 seconds)
    (164/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.167036547 seconds)
    (165/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.248194997 seconds)
    (166/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.782317606 seconds)
    (167/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.097981554 seconds)
    (168/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.549051639 seconds)
    (169/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.20584197 seconds)
    (170/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.609363003 seconds)
    (171/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.313280998 seconds)
    (172/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.84258294 seconds)
    (173/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.108470979 seconds)
    (174/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.485971729 seconds)
    (175/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.249387133 seconds)
    (176/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.162870372 seconds)
    (177/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.082106353 seconds)
    (178/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.083078224 seconds)
    (179/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.550781864 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.37898786 seconds)
    (181/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.177772142 seconds)
    (182/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.263307562 seconds)
    (183/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.109780096 seconds)
    (184/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.08244279 seconds)
    (185/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.114038303 seconds)
    (186/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.083702538 seconds)
    (187/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.116838285 seconds)
    (188/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.216397304 seconds)
    (189/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.482378749 seconds)
    (190/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.180721476 seconds)
    (191/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.319055441 seconds)
    (192/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.188250125 seconds)
    (193/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.408310902 seconds)
    (194/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.038714956 seconds)
    (195/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.17519424 seconds)
    (196/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.1632486 seconds)
    (197/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.188032646 seconds)
    (198/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.100044137 seconds)
    (199/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.082102902 seconds)
    (200/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 4.261906004 seconds)
    (201/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.100357038 seconds)
    (202/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.087889428 seconds)
    (203/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.304084552 seconds)
    (204/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.205312317 seconds)
    (205/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.083177391 seconds)
    (206/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 3.000916945 seconds)
    (207/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.159821412 seconds)
    (208/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.102990356 seconds)
    (209/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.495200545 seconds)
    (210/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.554199327 seconds)
    (211/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.228828553 seconds)
    (212/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.21409549 seconds)
    (213/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.098926893 seconds)
    (214/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.214960793 seconds)
    (215/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 8.086004817 seconds)
    (216/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.663300123 seconds)
    (217/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.088357718 seconds)
    (218/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.474196311 seconds)
    (219/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.280452177 seconds)
    (220/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.3056122 seconds)
    (221/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.430220137 seconds)
    (222/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.30150913 seconds)
    (223/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.843211007 seconds)
    (224/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.321182135 seconds)
    (225/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.214342491 seconds)
    (226/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.344216628 seconds)
    (227/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.088365576 seconds)
    (228/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.206956158 seconds)
    (229/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.098906293 seconds)
    (230/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.218484012 seconds)
    (231/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.73710279 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.385261315 seconds)
    (233/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.972039143 seconds)
    (234/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.318879702 seconds)
    (235/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.880215437 seconds)
    (236/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 3.048412623 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.092959988 seconds)
    (238/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.201534514 seconds)
    (239/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.413005555 seconds)
    (240/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.092452452 seconds)
    (241/341) benchmarking ("perf_sum", Float32, true)...
    done (took 3.741079574 seconds)
    (242/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.382824835 seconds)
    (243/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.227236989 seconds)
    (244/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.170987093 seconds)
    (245/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.28652102 seconds)
    (246/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.474580832 seconds)
    (247/341) benchmarking ("sort", Float64, false)...
    done (took 5.782075467 seconds)
    (248/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.152774557 seconds)
    (249/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.085828258 seconds)
    (250/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.095310399 seconds)
    (251/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.097561542 seconds)
    (252/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.070446288 seconds)
    (253/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.183428793 seconds)
    (254/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.453096835 seconds)
    (255/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.402506927 seconds)
    (256/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.639684837 seconds)
    (257/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.197268076 seconds)
    (258/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.629605709 seconds)
    (259/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.232394834 seconds)
    (260/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.49767568 seconds)
    (261/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.166453583 seconds)
    (262/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.724065508 seconds)
    (263/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.408238009 seconds)
    (264/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.681149803 seconds)
    (265/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.495050294 seconds)
    (266/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.48771337 seconds)
    (267/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.170587574 seconds)
    (268/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.086835321 seconds)
    (269/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 4.04357093 seconds)
    (270/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.35348323 seconds)
    (271/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.239207497 seconds)
    (272/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.219940809 seconds)
    (273/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.088999107 seconds)
    (274/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.10287388 seconds)
    (275/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.216958737 seconds)
    (276/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.216489234 seconds)
    (277/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.378154225 seconds)
    (278/341) benchmarking ("sort", Int8, false)...
    done (took 5.040410757 seconds)
    (279/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.171603289 seconds)
    (280/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.165203855 seconds)
    (281/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.220611366 seconds)
    (282/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.089296373 seconds)
    (283/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.159200935 seconds)
    (284/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.088572443 seconds)
    (285/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.039851479 seconds)
    (286/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.774200073 seconds)
    (287/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.180397105 seconds)
    (288/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.090902292 seconds)
    (289/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 8.574909683 seconds)
    (290/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.179379585 seconds)
    (291/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.148778641 seconds)
    (292/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.10612507 seconds)
    (293/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.087683551 seconds)
    (294/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.208199248 seconds)
    (295/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.511910442 seconds)
    (296/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.37977459 seconds)
    (297/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.005432494 seconds)
    (298/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.381679176 seconds)
    (299/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.689216566 seconds)
    (300/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.344164522 seconds)
    (301/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.092301074 seconds)
    (302/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 4.067035495 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.985185345 seconds)
    (304/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.406303626 seconds)
    (305/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.184966841 seconds)
    (306/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.571932963 seconds)
    (307/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.105543005 seconds)
    (308/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.087240492 seconds)
    (309/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.297704021 seconds)
    (310/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.420469073 seconds)
    (311/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.37496883 seconds)
    (312/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.829095783 seconds)
    (313/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.493941375 seconds)
    (314/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.106840453 seconds)
    (315/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.375057204 seconds)
    (316/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.927974067 seconds)
    (317/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.325982616 seconds)
    (318/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.018452824 seconds)
    (319/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.182723812 seconds)
    (320/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.140396449 seconds)
    (321/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.374833884 seconds)
    (322/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.467978719 seconds)
    (323/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.688145269 seconds)
    (324/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.27993191 seconds)
    (325/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.746734293 seconds)
    (326/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.102483911 seconds)
    (327/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.113319589 seconds)
    (328/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.112766983 seconds)
    (329/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.092243969 seconds)
    (330/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.194324975 seconds)
    (331/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.500770278 seconds)
    (332/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.112091489 seconds)
    (333/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.181121552 seconds)
    (334/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.094776112 seconds)
    (335/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.326437023 seconds)
    (336/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.095393299 seconds)
    (337/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.107940123 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.30340373 seconds)
    (339/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.363161906 seconds)
    (340/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.096310401 seconds)
    (341/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.364725671 seconds)
  done (took 1166.510335799 seconds)
done (took 1168.620611341 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.126851181 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.114659707 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.099273639 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.122036322 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.213712672 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.147313439 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.112591908 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.103159229 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.149145482 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.149218546 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.098689407 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.146770628 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.102614006 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.102991877 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.100812164 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.112907849 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.46017693 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.13703953 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.11605356 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.111988384 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.115129891 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.095773776 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.148487747 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.146999898 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.103588959 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.103607313 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.100651005 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.117127538 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.209313148 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.101198688 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.103276077 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.109614488 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.461630446 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.136812544 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.096363654 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.117217941 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.111726287 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.111966127 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.103188734 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.130544252 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.611991877 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.104885681 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.100007737 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.099866259 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.101011944 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.106312927 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.093068989 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.103122056 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.114883523 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.115203364 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.598949925 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.122358825 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.105086657 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.1013166 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.114243909 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.100548633 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.104634435 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.114780297 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.120048001 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.117238958 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.444250501 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.148292049 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.101691888 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.118035217 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.108764168 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.678234722 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.120217306 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.108521939 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.612140748 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.115153287 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.679549431 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.131898055 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.104842692 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.115475385 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.133702487 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.46441172 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.140100871 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.100261568 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.109675758 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.099127914 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.117458135 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.117737716 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.1091325 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.105276525 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.118542596 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.154803869 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.087218379 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.104110268 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.117379056 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.123402918 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.112872738 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.116058814 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.109003757 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.102511841 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.116418263 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.109089993 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.108561721 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.107957663 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.11011277 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.118999872 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.61502175 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.130543585 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.10412972 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.102864177 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.105645842 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.119660293 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.615530398 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.113742211 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.128142577 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.156801034 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.107094569 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.449985477 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.148213572 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.122011507 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.118471555 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.109249847 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.104059183 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.449644629 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.643818408 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.128159203 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.106970013 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.104071355 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.12221644 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.107979758 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.103805873 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.469843348 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.139929782 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.121960301 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.228286663 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.120797802 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.137493733 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.104531605 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.088711346 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.156580346 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.123213786 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.138665157 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.110836099 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.122839874 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.124444158 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.10513241 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.118659181 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.12058182 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.105081573 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.116302977 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.106229579 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.158168543 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.122784615 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.121383469 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.129954934 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.230334862 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.106126322 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.452531649 seconds)
done (took 330.933874815 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.167004911 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.104326714 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.174406777 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.105105503 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.17729087 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.155759472 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.104817894 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.105211819 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.104906148 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.518299169 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.105255703 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.109764056 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.105342172 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.10532579 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.16136624 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.105846578 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.104416351 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.340612791 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.10629011 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.165089355 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.105663133 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.106074278 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.106023926 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.493592733 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.104728575 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.104591629 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.166153697 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.106144859 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.348147234 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.105656859 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.104215086 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.346061022 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.164688811 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.117979095 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.113128622 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.113608955 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.173500966 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.117002574 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.152337759 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.162467402 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.176311629 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.139342752 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.105857906 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.106859523 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.11202825 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.107717548 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.106440689 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.139168783 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.107159619 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.111324899 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.355358911 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.114356713 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.112872972 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.106812324 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.106410051 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.122352019 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.108252628 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.107714411 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.166916566 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.108661933 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.154314492 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.494933879 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.515184313 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.110304793 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.105973207 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.10714781 seconds)
  done (took 199.580098561 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.176109088 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.181865656 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.175384002 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.113062041 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.15688465 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.173775746 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.113352601 seconds)
  done (took 17.122364397 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.115539871 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.109246852 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.13155489 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.132092012 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.107708716 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.251690619 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.120229598 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.113952125 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.135623427 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.109158131 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.448931165 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.131728772 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.113338058 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.10942697 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.120998466 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.138990815 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.111364002 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.109616974 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.207686705 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.187579932 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.115140914 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.116409367 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.140792594 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.120591213 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.109569092 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.109860336 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.110363875 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.116755566 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.11044627 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.109418792 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.110388392 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.123586804 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.110159676 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.111304547 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.109697655 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.111082809 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.110353052 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.109927316 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.110779998 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.110142055 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.110189483 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.109304048 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.110458938 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.111826514 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.109623332 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.132490971 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.111114896 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.111355466 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.110573087 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.11097396 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.14186678 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.110489117 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.110845216 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.116191102 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.152045794 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.117888482 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.111832461 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.111182083 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.110880808 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.112194116 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.112112121 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.189396354 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.134732552 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.111605002 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.13444575 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.149959733 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.112449958 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.111494586 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.112057528 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.136366686 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.112459602 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.135756156 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.112076229 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.214347592 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.112336814 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.259537992 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.135723314 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.11531247 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.116339797 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.111344797 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.120630981 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.112876331 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.114586628 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.118529289 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.117570668 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.1121247 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.111910458 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.11448962 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.120467744 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.112490281 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.158408694 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.112858212 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.114031915 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.212992162 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.112710523 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.210833933 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.139479428 seconds)
  done (took 228.588821146 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.11833599 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.119228304 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.115703703 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.126833343 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.114204721 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.115572592 seconds)
  done (took 14.739601328 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.1154641 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.117437712 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.113928436 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.113500267 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.113458131 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.116497398 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.114792161 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.116475575 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.117357194 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.113845948 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.115310458 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.102826924 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.116068475 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.115786194 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.115159418 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.114408403 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.115461574 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.114807813 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.113726326 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.114464571 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.253648549 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.114641782 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.11466758 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.117783305 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.1189713 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.114603297 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.124033954 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.115444218 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.115219011 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.121064809 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.120056445 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.116113053 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.117917561 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.121665226 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.119147794 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.118671493 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.118504396 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.116130637 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.116301719 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.117090869 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.1152897 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.116501991 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.116314626 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.115296109 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.117587273 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.121870566 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.119953642 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.124180381 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.116671477 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.116913153 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.116087309 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.116867689 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.117308672 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.117336723 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.120832621 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.123128812 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.120523089 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.117478641 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.117136595 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.119730364 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.120297525 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.110137208 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.119022781 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.120612716 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.122695141 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.116856724 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.119644284 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.120898747 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.089041876 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.116812372 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.118315112 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.116720019 seconds)
  done (took 155.580243752 seconds)
done (took 617.665585409 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.168068546 seconds)
  done (took 9.209333172 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.189632263 seconds)
  done (took 9.321299968 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.841825943 seconds)
  done (took 12.88529677 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.151975249 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.167460006 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.134282566 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.121590835 seconds)
  done (took 30.628036782 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.304235651 seconds)
  done (took 9.346410219 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.127012008 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.117059589 seconds)
  done (took 16.35050752 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.124639088 seconds)
  done (took 9.167191573 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.147288164 seconds)
  done (took 9.202829924 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.134004817 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.126701332 seconds)
  done (took 16.321255972 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.120799934 seconds)
  done (took 9.163389754 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.916458222 seconds)
  done (took 10.047634842 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.135354898 seconds)
  done (took 9.1960326 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.121942467 seconds)
  done (took 9.164190933 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.230153186 seconds)
  done (took 10.272722229 seconds)
done (took 172.319394944 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.126684446 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.120379425 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.119142909 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.120529146 seconds)
  done (took 30.528632772 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.154269771 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.154775654 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.16230781 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.154034528 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.144743743 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.144859467 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.154667102 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.153835313 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.144525659 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.151844563 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.15479602 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.151844725 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.154341407 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.163442502 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.164061372 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.152254295 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.153886996 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.156014151 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.145210518 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.164602575 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.152991275 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.153995142 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.119507424 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.121526475 seconds)
  done (took 53.671192014 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.312725789 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.186376845 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.273975978 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.165701927 seconds)
  done (took 10.982702129 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.120400464 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.184931985 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.172312489 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.166575346 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.206750438 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.222788764 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.173856412 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.335355419 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.236292156 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.24973451 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.128897463 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.142392077 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.147669935 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.167377902 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.224410016 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.120602017 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.122105488 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.240868768 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.184164864 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.332399961 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.121921519 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.175016202 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.20660416 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.174743204 seconds)
  done (took 54.602878412 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.120867214 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.129500036 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.128855272 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.122771059 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.124078815 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.124273575 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.130266373 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.124534536 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.144900954 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.125420403 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.122859891 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.12364139 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.129094175 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.123585064 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.122828418 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.137063766 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.13796191 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.123795218 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.126656191 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.130961761 seconds)
  done (took 44.5996504 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.12068569 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.970590113 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.469146308 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.374199745 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.121875191 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.121491697 seconds)
  done (took 33.224884452 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.136401313 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.130924654 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.122459442 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.181862531 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.265552138 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.131618057 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.123417984 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.133562602 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.170423667 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.191833266 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.143779709 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.152562231 seconds)
  done (took 27.931219713 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.123819765 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.126240673 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.125841443 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.137159246 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.135532467 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.132386352 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.131527008 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.123221826 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.137591846 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.143090275 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.13417304 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.136228421 seconds)
  done (took 47.637363485 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.339138693 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.349944756 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.412208781 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.714112932 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.449961801 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.109086404 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.408540508 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.338077775 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.821562871 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.858752808 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.422031615 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.105081351 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.067441991 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.050023407 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.022769588 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.366680821 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127125825 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.986788673 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.396378921 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.174034036 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.128604796 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.125423273 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.125209656 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.423608392 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.453747434 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124270163 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.339907338 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141857193 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.125726739 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.382051526 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.571881336 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.178509376 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.32853753 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.382362665 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.465196754 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.185754838 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.233403416 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.295517911 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.169884442 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.161298063 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.135361585 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.136187053 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.669569544 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.138544778 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.397699813 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127886986 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.131718361 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.231749281 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.052959307 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.48372193 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.23981596 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.131142366 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.161865932 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.558289449 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.247429969 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.369743099 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13145263 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.297753405 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.183383226 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.416698791 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.232553894 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.228315567 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340316603 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.053290484 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.509453725 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.248148766 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.129193112 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.132417533 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.827378581 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.370070867 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.208897184 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.485029499 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.887260927 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.128277393 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.132112552 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.181100087 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.221872538 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.129169088 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.440934968 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.129464811 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.055084078 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.228023461 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.629051172 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.132692821 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.128424498 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.135159238 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.973270955 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.055033784 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.225759903 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.42341878 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.449373269 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.130005919 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.12906514 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.151439691 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.130896922 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.076823987 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.684351745 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.193558633 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.054931213 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.69438352 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.601591552 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.093833236 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.586807459 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.170559042 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.403887947 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.28589954 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.535431917 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.339484447 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.375405737 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.663863694 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.133841798 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.75035609 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.21069335 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206577756 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.135080474 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.722193662 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.307676346 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.46197096 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.244634124 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.132491964 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.059267047 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.145143064 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.336802496 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.601169622 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.187269076 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132734835 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.138924987 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.132969932 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.13695928 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.252522457 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149434168 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.434807291 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.208400988 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.134573606 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.076054881 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.138883951 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.421068572 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.788382877 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192070088 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.376579336 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.403105799 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.867542508 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.740686135 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.142514791 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.414802818 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.209457697 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.209872501 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.708235519 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.265418025 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.231402051 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.13387104 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.273132151 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.14338532 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.1381314 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.524680207 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.656613041 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.562024813 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.179664941 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.134847452 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.088184835 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.309301235 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.375883436 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.218409151 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.157429381 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.140743118 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.216963184 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.361937556 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.126398873 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.055455358 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.390888445 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.378062876 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.437054998 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.557902254 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.218722756 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.207526268 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.145632011 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.337627387 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.220191888 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.81697307 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.67828284 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.357452637 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.691377907 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.099096452 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.774409022 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.443521947 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.513670175 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.151485349 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.589980345 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.309742347 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.819639109 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.167960936 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.664307632 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.063401911 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141796682 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.468678069 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.091858726 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.464229833 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.200206541 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.191677304 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.138717119 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.136934809 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.145121376 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.082809652 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.246572703 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.206515617 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21067912 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.066584618 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.77643044 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.176454951 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.141439582 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.137902481 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.52247714 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.947876489 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.090794229 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.137364337 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.215016395 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.887780091 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.690776624 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.143064551 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.141933583 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.752355165 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.145098014 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.731041306 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.140645951 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.020223558 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.161614207 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.440343047 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.840577312 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.432309979 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.213351969 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.211651783 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.124945891 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.14363007 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.836411415 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.144535011 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.814480615 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.420336868 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.411511101 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.586812754 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.200564133 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.346287779 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.150827663 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.138259529 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.660613543 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.161797726 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.138288741 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.340646274 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.656941414 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.504271167 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 6.096689459 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.221536828 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.136883013 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.415047845 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.131380736 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.649340138 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.836816291 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.142954177 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.137129241 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.392677983 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.823742547 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.139216928 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.0842972 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.144670591 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.351941483 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.341816783 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.407686537 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.437438766 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.595136317 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.070363716 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.143240808 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.16415259 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.381621318 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.138338804 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.175550133 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.6427053 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.240768352 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.568219729 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.436213668 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.572004757 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.770082093 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.408697698 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.204168363 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.150488642 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.803378427 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.272513182 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.072329353 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.258229693 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.066392737 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.843013723 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.429429049 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.157776253 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.417022037 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.120741077 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.479686516 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.439602521 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.450994178 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.182974536 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.167790767 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.139438569 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.191329352 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.139886689 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.330139565 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.254451009 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.14670576 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.669867548 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.180144242 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.187623578 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.145548591 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.666128341 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161783453 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.142466207 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.867622353 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.165675414 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.259256851 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21208986 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.922622041 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.639348099 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.167242082 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.098405596 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.792771544 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.418425845 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.199633311 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.587379523 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.177732718 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.54652368 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.141489327 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.354794266 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.145888728 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.725153957 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.186599661 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.409297272 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.095386688 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.354920919 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.33973091 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.167339903 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.148186503 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068493504 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.254326612 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 3.013388793 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.127194845 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.145654907 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.831605488 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.587163756 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.354171163 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.618126423 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.961945091 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.144547738 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.544217151 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.558198581 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.775665738 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.174720709 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143757694 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.516428138 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.274810924 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.499804866 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.43224499 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.1514389 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.170769155 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.358650716 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270226656 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.063660915 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.640082379 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.732733385 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.845359041 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.154929235 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.347298924 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.514433529 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.433641581 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.179334189 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.218084535 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.549959162 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.422776771 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.214273784 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.070119615 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.144753934 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.545152998 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.557349643 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.242008236 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.385242699 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.454669704 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.762837583 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.612665815 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.592756393 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.561738924 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.608144051 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.54968697 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.355513684 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.506413303 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.472148064 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.033622907 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.558524218 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.360703166 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.236674495 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.441505689 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.015695909 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.855663663 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.389389061 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.151297209 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.074389335 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.35489239 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.151139763 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.616957364 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.774616636 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.396708913 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.462349431 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.617142863 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.689508473 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.331073521 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.170655049 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.111342807 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.170067776 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.166391103 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.147435004 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.641974649 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.438930706 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.160303643 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.088788274 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.819051297 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.07388015 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.361160859 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.336852299 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.182559984 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.71457827 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.463399406 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.245565727 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.467994886 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.391049347 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.182524989 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.073962559 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.926441914 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.09477172 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.250598352 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.573721914 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.164105345 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.150833811 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.352574176 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.078281391 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.194214153 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.153273861 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.345639818 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.723533537 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.430091766 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274433027 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.392053764 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.448957117 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.071911515 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.171378862 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.421249269 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.075840502 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.766037173 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.861572405 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.192958926 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.220650375 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.149228443 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.153182391 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.421380916 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.517181413 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.249462447 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.730891334 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.181449371 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.172722838 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.527413806 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.237506158 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.151384239 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.154712396 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.634519387 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.382052294 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.150130511 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.129335003 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.363847096 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.223543973 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.346209287 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.225357829 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.664629235 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.15512936 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.054340027 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.247599521 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088060852 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.150478584 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.906817964 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.211508384 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.150969753 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.432468912 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.811580498 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.355082893 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.551478003 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 3.021280802 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.346907681 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.19491359 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.154053117 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.155860612 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.537533654 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.455361055 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.150788018 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.426816774 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.200939515 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.157203765 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.819106676 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.121156501 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.152629814 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.864742499 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.106382311 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.883305114 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.552112294 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.15790866 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.190628366 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.155867963 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.078238821 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.15362603 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.331813633 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.130551647 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.158409459 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.519521764 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.52046424 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.241476688 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.158416122 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.15314739 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.159054775 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.367941553 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.667251044 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.169941219 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.853993346 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.358290551 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.162084143 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.649194864 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.603814026 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.413378379 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.192128928 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.338805699 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.393112865 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.800361107 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.341253737 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.125243747 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.381070655 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.154707189 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.42583318 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.428363097 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.155699985 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.36562664 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.627268668 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.440148432 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.520928807 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.479985644 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.220604197 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.349947386 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.091820728 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.181166016 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.161916927 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.425850023 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.210911255 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.15561853 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.16340056 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.794917646 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.956007824 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.621085696 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.308663901 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.526747581 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.092258901 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.908874843 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.157758848 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.081590314 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.154241523 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.18125645 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.159674615 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.083097439 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.887765674 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.879185314 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.370695464 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.465599073 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.082593164 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.360292008 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.748472308 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.082772626 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.125018379 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.155802194 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.415922105 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.083266367 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.159632667 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.115200958 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 4.491586231 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.88154951 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.424483366 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.155491176 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.103256702 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.162633951 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.157955164 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.155584013 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.244355047 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.158174763 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274248615 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.428654709 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.586096693 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.261513281 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.806877938 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.891257209 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.095310239 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201608182 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.720341388 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.728172584 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 4.497378688 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.286247175 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.877990443 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.102361633 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.163619665 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.175136378 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.433779511 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.162314453 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.16180245 seconds)
  done (took 2247.561576648 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.17954994 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.184150153 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.211044767 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.214792632 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.2571885 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.229219959 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.223081556 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.23565107 seconds)
  done (took 59.814204956 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.157930556 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.172829511 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.166405138 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.158772654 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.160208705 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.191408004 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.356509486 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.174596775 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.160175137 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.164310884 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.160065319 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.174281347 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 3.065039115 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.208779268 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.19097718 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.173378554 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.177585342 seconds)
  done (took 82.175674591 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.173640324 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.531295222 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.24558883 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.175583074 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.06572056 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.18355863 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.19108181 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.226321972 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.182514978 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.56505287 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.473437271 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.204521109 seconds)
  done (took 94.301223613 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.181035725 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.174488239 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.174948164 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.175154427 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.175445073 seconds)
  done (took 12.981500605 seconds)
done (took 2802.116213254 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.459924447 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.232655541 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.278895141 seconds)
  done (took 6.606672547 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.321863322 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.367279331 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.481008469 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.486183556 seconds)
  done (took 11.759627837 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.469684441 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.539826832 seconds)
  done (took 7.105731112 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.585380214 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.178697751 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.567340711 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.1778281 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.178529353 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.179780887 seconds)
  done (took 23.638685287 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.176267705 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.176476275 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.17631278 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.176841308 seconds)
  done (took 10.80261191 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.173709006 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.971491948 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.178676945 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.186883697 seconds)
  done (took 22.606912416 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.342470575 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.341300949 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.943875395 seconds)
  done (took 10.723999147 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.799194418 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.625914853 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.793243856 seconds)
  done (took 10.315519735 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.025290644 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.993314126 seconds)
  done (took 8.115208602 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.320594761 seconds)
  done (took 4.41770751 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.014512285 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.490407898 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.667965745 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.724761467 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.791261172 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.413937256 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.50540551 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.451667392 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.581808224 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.631051942 seconds)
  done (took 28.370849743 seconds)
done (took 161.35088783 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.630308568 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.316810021 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.387483623 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.56336948 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.420592788 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.38894704 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.480469477 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.552387289 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.240540296 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.222285162 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.56134968 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.42303677 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.418154283 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.203366267 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.424503358 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.204391992 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.419343539 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.656537903 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.241760671 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.482649789 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.481180945 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.202087631 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.403978187 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.222790144 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.421252184 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.343437801 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.820926026 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.207327544 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.392120483 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.84155665 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.346652703 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.628274266 seconds)
  done (took 179.649342022 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.180034772 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.179437639 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.180801625 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.180915171 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.52640042 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.181551097 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.179473953 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.180502712 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.423290042 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.409406089 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.180138571 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.513540048 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.182164406 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.18023654 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.18193076 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.18116407 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.518038686 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.181293114 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.18138623 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.181711335 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.182933214 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.390990181 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.18123771 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.408293545 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.506503766 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.182379297 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.181134621 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.181689241 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.181735385 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.182217334 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.181654297 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.18099668 seconds)
  done (took 218.147426616 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.180645188 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.183224863 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.181028925 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.180927457 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.183101984 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.183254693 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.182246958 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.17650403 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.886760809 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.871254137 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.182956793 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.183852937 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.185346809 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.183020622 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.179891153 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.182817498 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.181579065 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.18286584 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.183978466 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.183468546 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.183163831 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 7.049696167 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.184085898 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 7.06938891 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.184235988 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.18414643 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.183730575 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.18846306 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.187720116 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.183743036 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.184860358 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.183355899 seconds)
  done (took 231.108949616 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.423641843 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.184116096 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.184950017 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.195040432 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.185608083 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.183984526 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.18720664 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.434295989 seconds)
  done (took 22.082762579 seconds)
done (took 653.101701304 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.517981968 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.915953308 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.323389966 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.209637015 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.442201736 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.253103618 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.201885386 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.264347578 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.847442064 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.272860425 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.60038756 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.208050695 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.898934861 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.232622993 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.319874673 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.263219427 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.550905006 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.802580382 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.342815084 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.882778844 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.357641736 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.141768922 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.2830078 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.885965555 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.596482348 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.182616747 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.231962307 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.552261761 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.210330832 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.355472817 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.841583304 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.456295433 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.22132814 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.207802371 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.256297211 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.236157059 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.404158968 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.21746162 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.324455626 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.957208138 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.872707055 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.728080157 seconds)
  done (took 112.976820977 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.193918103 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.190478281 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.192493784 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.192048048 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.201781248 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.191938533 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.191842891 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.192025192 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.192323868 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.1922746 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.192214078 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.201405948 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.191187812 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.201376497 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.180557023 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.192144194 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.192677781 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.200997899 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.192209679 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.193035196 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.192502885 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.193512921 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.189162654 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.192956712 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.192557004 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.193485504 seconds)
  done (took 59.138661231 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.188581568 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.38036964 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.427891368 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.210651194 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.177527324 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.189231274 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.218797708 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.19747101 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.191819594 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.199890262 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.288967075 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.194944073 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.203210527 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.424942753 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.207610828 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.189315843 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.189968674 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.190554071 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.392244714 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.207017553 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.221032803 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.197366303 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.220275266 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.207107378 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.191828114 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.189951182 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.193522137 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.670776299 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.203192288 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.291144706 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.250034469 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.226136282 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.59061614 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.438924137 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.248705622 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.197685726 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.190439483 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.340996591 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.204753428 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.191390619 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.21991414 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.199444174 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.425101072 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.724406856 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.205028983 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.191206093 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.66991303 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.353526829 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.241543887 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.203101912 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.437462924 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.210398152 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.190665148 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.192729604 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.22938129 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.203880354 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.192108962 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.500765874 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.209372564 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.222419281 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.199330914 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.193291684 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.398145473 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.20150686 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.385485679 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.202458472 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.19939124 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.19310678 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.432162243 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.211394338 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.741824039 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.208374258 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.191721487 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.293311243 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.390045547 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.6936946 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.208263885 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.399645742 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.607410289 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.232961077 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.205510789 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.656549801 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.235975138 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.203721551 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.192335289 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.193105392 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.193053686 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.2409363 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.220903189 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.647262251 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.737383887 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.506721256 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.234775669 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.207074199 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.194864293 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.486094725 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.205074595 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.193511738 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.422071669 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.750673246 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.210533886 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.200859888 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.715089145 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.211508343 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.223554209 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.206337186 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.442129107 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.211498661 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.242721872 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.193816657 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.201493359 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.197344819 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.224727267 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.205933208 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.194251237 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.70675535 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.358394598 seconds)
  done (took 270.929269167 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.199199134 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.195058541 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.193985536 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.194759137 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.194167691 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.195183518 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.193812936 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.193191613 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.196121697 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.194649678 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.194502899 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.19507842 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.19502853 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.2009294 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.237568282 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.196812499 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.683332493 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.194913054 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.194534121 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.197148086 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.767564753 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.202804237 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.196020998 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.197326768 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.194359541 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.195595821 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.201065496 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.242110325 seconds)
  done (took 176.75868984 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.19635206 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.252486083 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.209625503 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.244561766 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.208805781 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.196170972 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.221852426 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.21234875 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.202450792 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.196813779 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.196353664 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.229311484 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.204951368 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.292943985 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.225487248 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.231688101 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.298746785 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.203811449 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.197301543 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.197822094 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.246331523 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.210590228 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.229996134 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.261902385 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.210808251 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.253783115 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.211125531 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.197908611 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.198594467 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.314120209 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.21625389 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.231063922 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.23542523 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.219893688 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.318904517 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.31543092 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.302431502 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.230560761 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.202449858 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.199353748 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.198517816 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.199884881 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.254762057 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.212572179 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.199972115 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.315582052 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.216456428 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.198917105 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.218060669 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.199290016 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.213087793 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.217380699 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.23678625 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.327963989 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.246815482 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.225419619 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.226060306 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.219440885 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.200038169 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.296142592 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.205961442 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.315486141 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.21863213 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.189925719 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.201065707 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.203552207 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.248830002 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.238082003 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.302355634 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.207546719 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.297636138 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.255556065 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.213617391 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.201042155 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.200714422 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.256691282 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.31071644 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.255542891 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.261453692 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.236773146 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.210085744 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.199366051 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.20149932 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.228400859 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.206393587 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.31599649 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.316632401 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.207567483 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.201220739 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.201478939 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.201951859 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.226970045 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.26635955 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.242836754 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.308964248 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.239774129 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.242103989 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.210365418 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.215901208 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.207320628 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.236902035 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.21039635 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.214456321 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.539819339 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.243966808 seconds)
  done (took 236.888230621 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.597427661 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.247721932 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.274246046 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.487345424 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.594925826 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.138596208 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.242909493 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.255605122 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.262344573 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.377705756 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.317547474 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.304731062 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.240641403 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.224733828 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.247835059 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.264080926 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.280701938 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.548571861 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.347338634 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.738045275 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.246663903 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.511029302 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.531796745 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.589735554 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.295902785 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.641828383 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.896561892 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.347826912 seconds)
  done (took 72.181189421 seconds)
done (took 930.978445974 seconds)
SAVING RESULT...
DONE!
