cset: moving following pidspec: 23061
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.863929912 seconds)
loading group "shootout"... done (took 1.106249455 seconds)
loading group "string"... done (took 0.645299254 seconds)
loading group "linalg"... done (took 8.68936975 seconds)
loading group "parallel"... done (took 0.167193077 seconds)
loading group "find"... done (took 2.844246064 seconds)
loading group "tuple"... done (took 2.060584161 seconds)
loading group "union"... done (took 15.132119021 seconds)
loading group "dates"... done (took 1.55822093 seconds)
loading group "micro"... done (took 0.222186067 seconds)
loading group "simd"... done (took 4.816330097 seconds)
loading group "io"... done (took 1.11180935 seconds)
loading group "random"... done (took 9.51252381 seconds)
loading group "problem"... done (took 1.527326082 seconds)
loading group "array"... done (took 25.118426279 seconds)
loading group "misc"... done (took 1.891453276 seconds)
loading group "scalar"... done (took 43.296642145 seconds)
loading group "sort"... done (took 3.340725077 seconds)
loading group "sparse"... done (took 12.818982469 seconds)
loading group "collection"... done (took 18.630720766 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.527971773 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.123554206 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.128442861 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.12192513 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.187391699 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121391176 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.130200523 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.086552348 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.841867629 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.13840199 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.115588989 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.435081675 seconds)
done (took 5.364443773 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.217720512 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.09247047 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082657408 seconds)
  done (took 1.368083583 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071627452 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061092821 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067821443 seconds)
  done (took 1.393232015 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065473097 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136040385 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066252072 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067460529 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067499609 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066660155 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.06671183 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066456667 seconds)
  done (took 1.733743498 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.071771511 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.067774364 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.06649473 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068220105 seconds)
  done (took 1.47087753 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068527644 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.12291633 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065356607 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065252964 seconds)
  done (took 1.516752952 seconds)
done (took 8.979399446 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.244002722 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.101896282 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.289735697 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.446992515 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.618678944 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.093872316 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075569963 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071252749 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.131518643 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.322052467 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.104609848 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.18364207 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.091416917 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.170217334 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.006342848 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.122538518 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.086670805 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.124443258 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095713929 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133590524 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.396894569 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078692112 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.073848115 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.071048771 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068972567 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.661373582 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.705282956 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.125880557 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.087385484 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.161665934 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.116549545 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.666562718 seconds)
  done (took 10.959342477 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.092783318 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.093267081 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069128795 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.123979207 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094116098 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.069901942 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075475843 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068144297 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.088881636 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.124231014 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.089881695 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.098716723 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066752544 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069771118 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074036717 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.202151584 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080226196 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081230547 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.067600659 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081133948 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.10564303 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.078648328 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078536324 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078023709 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.129777783 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169361761 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.096630301 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.101082542 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066177716 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079017181 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115796023 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125103147 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.066944858 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.066028236 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.119581642 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095420516 seconds)
  done (took 4.631552098 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.888694769 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.096290323 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.103465846 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.648408635 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066546355 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.151133921 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.241273435 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074399371 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.280192621 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.155352351 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.142964731 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.148497018 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.11874493 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.069817713 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.160675649 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.118610905 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.545793008 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.06828662 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067654343 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.066028748 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.068442284 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067833246 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064153082 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.093527449 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069454052 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.09686545 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089142778 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.168112279 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 1.076823695 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.071059629 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.307122019 seconds)
    (31/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065888127 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.085485846 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.359499959 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070223314 seconds)
    (35/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.067579534 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083075792 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.476449017 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.127643338 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066303504 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.165384901 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.117556416 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.06540004 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.122624168 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079565143 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069619496 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070115205 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.491760676 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070181802 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072676138 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080096926 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.102324762 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068599425 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066248611 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.17242981 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065294614 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066862369 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.067601613 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.153504666 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.067608312 seconds)
    (60/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.085696642 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143225041 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.064602879 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069364708 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.103050814 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069462127 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.086185799 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.094541357 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.356812758 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.089423447 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.069521142 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 0.853586939 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.079106581 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.067143043 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070726927 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069809178 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068011678 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067340723 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07253091 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.074319282 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069275207 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111738532 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066495147 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.064317906 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072485094 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.066753404 seconds)
    (86/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072474733 seconds)
    (87/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.100265558 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.066292622 seconds)
    (89/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.562094488 seconds)
    (90/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.098984568 seconds)
    (91/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066255528 seconds)
    (92/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.188878014 seconds)
    (93/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.107791798 seconds)
    (94/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06817416 seconds)
    (95/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072249722 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068290376 seconds)
    (97/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067618458 seconds)
    (98/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067035041 seconds)
    (99/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067951425 seconds)
    (100/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069920766 seconds)
    (101/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065036829 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097380061 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070322951 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113812236 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06694293 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.06755822 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070848641 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067401232 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.072912889 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070093031 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070394093 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067005936 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072578151 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069590547 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066215201 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107389291 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.120940959 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067029284 seconds)
  done (took 22.827171921 seconds)
done (took 40.508034128 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.31078977 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.078878673 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.079465487 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.078898214 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.078702548 seconds)
  done (took 1.88023319 seconds)
done (took 3.172609426 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133132633 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.08240896 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065079182 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.100980062 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.068592801 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102533321 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108591 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.104442505 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069202643 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068730784 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068959804 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102410097 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.104622648 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068890013 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.09790009 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103807175 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.068585054 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064279879 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.068635563 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.068557501 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.068594503 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064449093 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069006997 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.068932689 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099309382 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069078258 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.067867843 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099856509 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.071031513 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.101406618 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.071025493 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.070104564 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.068902236 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100122927 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069005401 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099022658 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.064524873 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069396398 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069096964 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.07009069 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.070970554 seconds)
  done (took 4.62040062 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071235582 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082126326 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083763749 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.06283684 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.072369349 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082468522 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.06228947 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.081879108 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08869952 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083000425 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082381118 seconds)
  done (took 2.148375032 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070154937 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083070918 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084943257 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062210008 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074001221 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.08409041 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062720038 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083393059 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.085917782 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.083911281 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084074106 seconds)
  done (took 2.133531281 seconds)
done (took 10.174055941 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097138204 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.069161809 seconds)
  done (took 1.428389601 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.525059135 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.439847032 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068126011 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.085576122 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.194008706 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092240801 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.198786317 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071487118 seconds)
  done (took 8.12503451 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.101251666 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068082636 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.071353767 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068177806 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.068756682 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067633902 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.067690206 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069281869 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.068875847 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.068856326 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068782935 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068222434 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.069839655 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070360781 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068340707 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069760678 seconds)
  done (took 2.504055187 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.100708367 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.100252703 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072700507 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.073049636 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071496061 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.070357165 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073325131 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073008898 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070318903 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.071898689 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.073706331 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.07197148 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.071276284 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.06276677 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073177278 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.073623938 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.069895711 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.072384918 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073170137 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.074078092 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.07280681 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.062663953 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.070992524 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.072248094 seconds)
  done (took 3.162562512 seconds)
done (took 16.500096624 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174731661 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074460987 seconds)
  done (took 1.520946855 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.0681654 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068855448 seconds)
  done (took 1.426177388 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073427921 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061122699 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078542517 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.07096353 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062011765 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061467215 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077180181 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06165028 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061310147 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.061530622 seconds)
  done (took 1.958535099 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063337597 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.068702346 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.066543048 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.064694715 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067040363 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.062436378 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065146048 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.063281908 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069274925 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061810821 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066054291 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082457299 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065773959 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.08300708 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.064931798 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.065669847 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.067807405 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.064795593 seconds)
  done (took 2.504711902 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061816557 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.061789079 seconds)
  done (took 1.418222864 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.06435507 seconds)
    (2/7) benchmarking "second"...
    done (took 0.061927619 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064349343 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064412275 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.062084267 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061173726 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062081179 seconds)
  done (took 1.729210825 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.419428277 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122788933 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.34135619 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071758314 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076197435 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.252793121 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064721251 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068736926 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.06847877 seconds)
  done (took 2.819253399 seconds)
done (took 14.6790181 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082540889 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181955468 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.08786912 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.405754522 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091437504 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.0674388 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113215492 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.166161231 seconds)
done (took 2.510740275 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.215841987 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.169343252 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.368313274 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125121265 seconds)
  done (took 2.9627326 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.335206158 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078558934 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.076967135 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067120047 seconds)
  done (took 1.869880771 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065478198 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071541007 seconds)
  done (took 1.4411888 seconds)
done (took 7.80397912 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064229851 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.093519258 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064651424 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064263639 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064130423 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 0.064251851 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.063638619 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 0.064410145 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064495155 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.074551761 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063992928 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064104096 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 0.063790209 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 0.063563485 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06398906 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064210247 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.063989906 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06402989 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064729412 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064154331 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064016436 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064110974 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064197498 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064630185 seconds)
  done (took 2.913047497 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.079462711 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066129157 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067121092 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067367579 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067697953 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067288839 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067113338 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066163344 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067392864 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065448594 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067221751 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.06731946 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.065338555 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067430541 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065301306 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068420259 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067271435 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066250529 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065903091 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.067415546 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.06676259 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066086673 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.0676383 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067323841 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067267442 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067743927 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.065854853 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066481818 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067324161 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.067955614 seconds)
  done (took 3.334963747 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.06656555 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060416282 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.060713437 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070846862 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060584822 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061235054 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061225388 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.061052405 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060791331 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061705864 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061321016 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061200387 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061516125 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060685795 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060300599 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061046899 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.064866104 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.07952411 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061004556 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060853455 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.06522137 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061013892 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061053027 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060693814 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061402086 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.060640354 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060638584 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060947771 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060219793 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.060929492 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060762768 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064699608 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.06523159 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060385999 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.07030096 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065117284 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060392925 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064594808 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061869975 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060625268 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060915261 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060460124 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060541158 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060721431 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070887504 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.060712624 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061443737 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.060765708 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060683873 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.060129595 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060577637 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062287446 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066139588 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.062567605 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.062202962 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.063004627 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.061769216 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.062744113 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.061302578 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060034237 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.06045501 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066364347 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.061867556 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061349384 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080490454 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061861939 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.07056796 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060916973 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061328222 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064131165 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.060738811 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078180444 seconds)
  done (took 5.846646292 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082033284 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.085846209 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.065983298 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.06515434 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.060914234 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061318783 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068249979 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061049725 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065512549 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.080840629 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061098287 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065398929 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065527986 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065109436 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061891035 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065846379 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068581314 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061140143 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.061133874 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065086667 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061632849 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068664558 seconds)
  done (took 2.799064661 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.134316121 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.066124576 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.104991172 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074061312 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.068446387 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.074360265 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066022749 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.06615842 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066327521 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067045129 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066915721 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066378682 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.068736156 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066833778 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066753999 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.066839776 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066543964 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066786506 seconds)
  done (took 2.645417884 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.076851286 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066477589 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.086660746 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066058493 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066289459 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06598481 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069509761 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070474538 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.065790955 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066546354 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070159045 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066039487 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.065907551 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066226979 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065700988 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066254592 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066068157 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066264988 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069848117 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069420445 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069515922 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070382708 seconds)
  done (took 2.835911687 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076734045 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.06519175 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080310752 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066589914 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.060991155 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061176675 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066589752 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.066025735 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066124308 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065264091 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065370269 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060559122 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066674375 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.06531574 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067292193 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065760193 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06495233 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065702841 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06538738 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.060822334 seconds)
  done (took 2.646677089 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086527218 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063238517 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063222364 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082575776 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06349549 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063491027 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082594418 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.063245963 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063632952 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.085143613 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.063402268 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063961947 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082407102 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.08274564 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063437854 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083390276 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.082845288 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.082706863 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063607858 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063442806 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.084668175 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.06346479 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.082887328 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063671822 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063804653 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.063703223 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063585117 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082581688 seconds)
  done (took 3.342879385 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064474761 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063594092 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064697309 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064305446 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.063990439 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064378203 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064236903 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064335763 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.063919956 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.064817408 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065168811 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.06457129 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.06461257 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064423755 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064247666 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064160602 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064123284 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.065032079 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064252132 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064444129 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.063924093 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064189882 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.063966244 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.064888384 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064104115 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064286322 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064376849 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064691384 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064191097 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064584219 seconds)
  done (took 3.261402953 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073389891 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072066158 seconds)
  done (took 1.476150685 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062288328 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.077767509 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060489597 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072535537 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069373363 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06667759 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069404239 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.068878903 seconds)
  done (took 1.872060711 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067178282 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.090913572 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062685513 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063127932 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.065814493 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132332223 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.074795535 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.073980605 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.0762283 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.064909625 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.062810942 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074577167 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062232038 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076020428 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064002332 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071352975 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070420997 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.080176139 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.075272607 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.060640211 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.074679265 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063162115 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.06136311 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063150866 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.06250739 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069003262 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077937854 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074609348 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070682259 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.0603583 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080889848 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.060915843 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062311007 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.071053058 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065546171 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061719658 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098326912 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061780108 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066494094 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060652961 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073323435 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.08197922 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076050992 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079471175 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.062836588 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063710873 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061116899 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.063178634 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064434561 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070765454 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061440642 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068562955 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060487064 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062313114 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.072365982 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061635723 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066042733 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.07057488 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.074515165 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071696541 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.069684658 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076639956 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070212667 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.068990497 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.061926035 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.080204246 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062796469 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074490745 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076007162 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062491813 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074428652 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060904691 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060442727 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061117595 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094401606 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.062712839 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062768204 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061491029 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061109678 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062962886 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.070926029 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066137658 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069352881 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064658669 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077867325 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.070897993 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061398292 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.06725709 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.078986402 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.064197098 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061127403 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.077274322 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064207042 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060496832 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078158952 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.07057995 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.062390544 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.061979436 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064620058 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.073999565 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.061749932 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.05917866 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.068807111 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062164096 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.062598759 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065089013 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068504819 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060710103 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070432884 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065115594 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062532304 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.05865787 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064540764 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.060915601 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.058974292 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069276424 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.059906455 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07379018 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066223851 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074351019 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.074643182 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070599019 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075653337 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.059897707 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059510705 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077816334 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069973343 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.197873214 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081443859 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.062424474 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.073202941 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.061833685 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.063610048 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.071271485 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061451942 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063680806 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06133027 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066491435 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063004602 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063457248 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.0669112 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069885353 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.07369978 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.062828 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.070413854 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.061936381 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077034855 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071504379 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065887504 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.0646795 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062639543 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.073771829 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.067809798 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071464627 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061154687 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.061957886 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.06430837 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072233487 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.07093847 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063508914 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068788094 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066190893 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062540957 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061728598 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.062522168 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.064926155 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.064972931 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062568954 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069189445 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070301813 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075386116 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068541253 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071031686 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061090108 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061013033 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063219417 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061176104 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065553925 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070435386 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077274151 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073405154 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082428036 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061617989 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071196114 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062875377 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07866883 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074844302 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062486839 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066182687 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060346657 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063019413 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071088522 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.072772667 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075027618 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.075993462 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066064994 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065855967 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061370356 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.076315823 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062325187 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070298791 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071138089 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.06604487 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.0617267 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063116165 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070952882 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066376592 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061489269 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.07692614 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067861853 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.06099161 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075867488 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062018215 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.071750669 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.060903097 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065196746 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066790284 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063386633 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070417652 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076700875 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.06071835 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062244191 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076863173 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.062520322 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.062548277 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069720668 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076374389 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065787725 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069300182 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072195414 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071367877 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065957713 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071094192 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062156256 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070378773 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.063607038 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.071847572 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061390037 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.077889911 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.059511006 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.07581369 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061187746 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.07171903 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061058248 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.069711897 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061213238 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077033479 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062030756 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.060720279 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.071420537 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.058708816 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.068797631 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.059177589 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.064776387 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066243774 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069416351 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.061662637 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069600535 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.200926634 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.071838332 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067678722 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.070585906 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.071600583 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.066553289 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061976412 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070695924 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073031315 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.07058759 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063217054 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063086564 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062001722 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.070975032 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063354199 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.062733352 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069911189 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066380697 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067515036 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06311373 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.063654052 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.06340024 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070017814 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071315923 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079885696 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.070556512 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069390356 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.070887316 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.061514795 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07780592 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062071654 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069278379 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060819152 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067454363 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.070569162 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06311896 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.081597275 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.062965753 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069773548 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074368762 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070811049 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065973976 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080047325 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065241711 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070242813 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069822675 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.06666932 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068525505 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063885276 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069786384 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071219191 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072335516 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062514914 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069205502 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070819015 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063198237 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069143743 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.066253533 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070287195 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063138504 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060774472 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066334269 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073167286 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.06636119 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066443632 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062037192 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060068932 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061603041 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068465853 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066380142 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070680497 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076860132 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060964363 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062215425 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061006835 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065300733 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.07955552 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071621008 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069614416 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066426328 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.060732214 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062839954 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063438986 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.062453436 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065092643 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060627296 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061231888 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072524514 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.063230664 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.065580398 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062074412 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.06242041 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071191054 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.06565598 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.061940851 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067857503 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061131986 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.066098418 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061251865 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.062836857 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066370398 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061022398 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.064799784 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.07210807 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077758017 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.067975688 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070810916 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062392569 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069635717 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076346668 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068292546 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062672266 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070435405 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060005285 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079646289 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070546499 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.069442244 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070633567 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06189651 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077255491 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.06437174 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070483577 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075207562 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061352992 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.065808348 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.05945662 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.074871754 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064464703 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059458019 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067785664 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067763508 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065491724 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.071225009 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.204865886 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070915375 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068038919 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066573157 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063950638 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063813614 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070566909 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077378353 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062625593 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.065881241 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.069675108 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070473883 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066187055 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073879418 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070470982 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062871117 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063711619 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065204511 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062510516 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073640926 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062242706 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.065767956 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.06664516 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061273676 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.06834386 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078180378 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071238002 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071520783 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061115846 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060589061 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.078997009 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.0656425 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065303833 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070207524 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071531806 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.07378941 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071195902 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078381491 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062271609 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.067671163 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074039039 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06306652 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.061412395 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065535856 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063515489 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071340724 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071409093 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069253024 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063513162 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.067979616 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075115932 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062634194 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.06624335 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066778777 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.062353049 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072118678 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069853311 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070396325 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.062882858 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061402081 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064782795 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070667791 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069163227 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070587585 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062709931 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.06848826 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.075188902 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069296571 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.06466387 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061070504 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064872385 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070657396 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066292472 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061028347 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.06633436 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065008418 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.068822004 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070945376 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066418673 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061112606 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078066948 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069297501 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.070643354 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.065989429 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063639274 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062490623 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061195 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072705159 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061472541 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063029174 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065781027 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063787882 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078699099 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.069611083 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077068557 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062292127 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.065832691 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.060894606 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071616554 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066014341 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062071147 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.071847583 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060709363 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076732205 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073262262 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066931398 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.060485569 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.086663452 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.068845832 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076610799 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.070481285 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070714115 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064166982 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070945514 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062414677 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.071389366 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.060410424 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.059640447 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.070667411 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.06937858 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.072698713 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.06016983 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070692555 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.06215066 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.068030562 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.0675531 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.061179897 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061421453 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.06176707 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069316803 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064195914 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.068960083 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.206852658 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079512128 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064263119 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.07351071 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071261556 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073053495 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075397306 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074393895 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069557044 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.062878101 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068970926 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069791052 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.062853512 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066631736 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065287713 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082861249 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063192169 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.062977166 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075974311 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.067929145 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.061584707 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.069036803 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066584198 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072339155 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063091547 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072195741 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.065848449 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062370973 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066287062 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066158927 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060675264 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061532702 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061560833 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071404429 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.065711883 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062069747 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080046715 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.062984173 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070224306 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073037786 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.06834185 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063353262 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060648209 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062755634 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074694396 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077599262 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065673105 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070511748 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063465202 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.072151528 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.062113114 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070245358 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069723416 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07019428 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.060903739 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.06209162 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076480065 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.07693228 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066246251 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.070583029 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070605993 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062918396 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.082596503 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.070601403 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062709673 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072903984 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064541038 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.06095337 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060369723 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063059163 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073012198 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061497777 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.06448817 seconds)
  done (took 42.274499473 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099874898 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062277188 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061155928 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061132399 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071778369 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.06227568 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061643661 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062131186 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062286723 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063905289 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061616929 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061509414 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072247843 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074613066 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071904302 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065189203 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061047034 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.06195243 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061479585 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062472008 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071654832 seconds)
  done (took 2.843151863 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067827741 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.075995871 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.071906091 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.077648024 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069934332 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.065671081 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072525243 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.06618452 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.072476718 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07086366 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.073139388 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.065626925 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.070649702 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.070609103 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070746091 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065802928 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.076063044 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06887037 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.065872525 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.072888471 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.066253791 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072347151 seconds)
  done (took 2.975342256 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063166812 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062295645 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070641036 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061229328 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060449138 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064360517 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060847837 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065922651 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.06547053 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065031629 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070020328 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062356407 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.060836631 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066565839 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.060415774 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.061996843 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103932569 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.061933797 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062191834 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.060778236 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063667704 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070370507 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.060753783 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061501186 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065473625 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064207224 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.060596219 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.063838069 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.06212942 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065427722 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062028092 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.06061431 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070271458 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069326946 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065346796 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065157853 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.062826694 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.061929871 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061018626 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.060652671 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.069496849 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062821292 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061297673 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.062657453 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070253022 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061401321 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.060563511 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070741432 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060908793 seconds)
  done (took 4.595836793 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071147985 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113734994 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.066891457 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094180202 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.07431988 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066925343 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067291305 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096384693 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062077117 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063205426 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074562438 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074329182 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.06404826 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065126103 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.066624899 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063827646 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064259921 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063116504 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.065948712 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063509883 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066958377 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.067619768 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.07326564 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.0738194 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065164137 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063011664 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063459367 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065123178 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074080816 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.066817393 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065427083 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065943225 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074105669 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.066813039 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063689012 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063238401 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074292907 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064027798 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.063613984 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.062064464 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.06370213 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065043268 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.067937014 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.074910757 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064099332 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.06866405 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064343759 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.061781141 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.073795069 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.066050563 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.06767282 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075238821 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.064648113 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064255513 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065311592 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.074467645 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.063685155 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062469632 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064046953 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.073527294 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.06219691 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.064634535 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074415046 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063347498 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.066906986 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.074626909 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.068225982 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065431859 seconds)
  done (took 6.241209709 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070186689 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.09566451 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072156709 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071889209 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071302211 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071505658 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071486888 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071342436 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071215399 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072204883 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071653259 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.110989388 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.067846727 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.075842995 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.071666811 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071739701 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071429629 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071240171 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071259575 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.071248354 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.071785683 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072054034 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071198442 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071833755 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074068542 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06822758 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071551284 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071172594 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071930447 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071174472 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.073866078 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.071628309 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071318915 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072754332 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074636956 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.073833171 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062732245 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071579789 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.071779328 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071329623 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068238719 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071718373 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.07136443 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068487792 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.071731303 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071369324 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.071980121 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074267398 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078156113 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.072032691 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.071725428 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072463535 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071182816 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071701689 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071803221 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078133878 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071869938 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.071983809 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.071659404 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072685313 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071881484 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078092317 seconds)
  done (took 5.983360641 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.074297188 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067864627 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.079507285 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.060779585 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.0610734 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07044515 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061554604 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061657222 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068154038 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068089955 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069595217 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.07015405 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.07265487 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070288837 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070460132 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072251173 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070210745 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070819638 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067588327 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070382252 seconds)
  done (took 2.83709787 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.07658523 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080043112 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067069296 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070389331 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066560067 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.07043537 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066766398 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066845734 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067607494 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066586689 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071532479 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071729334 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067398331 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070441547 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071134002 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070676214 seconds)
  done (took 2.571681876 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.067766055 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068432011 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068032344 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.062653732 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06639445 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.061958067 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062152232 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061217655 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06180873 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075755979 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.061970652 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.074119684 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.061797461 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.06175399 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.061732133 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067975155 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061610942 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.061746414 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062147039 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.066578018 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.068412704 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.062743671 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066148844 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.06213462 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.067491771 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.068630851 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.063595496 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066037594 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062109958 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062754675 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.067570998 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.068680196 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.061767622 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.062409342 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061243729 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.061881829 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062506528 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062447618 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.067924962 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062597944 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.060944283 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067453397 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062165477 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063353137 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061361041 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.062661538 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061344411 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.067754237 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.062839324 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067827726 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062322377 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.063964066 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062884597 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069143598 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.064575625 seconds)
  done (took 4.995633963 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078640558 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066925251 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061313157 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061065504 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066077061 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.067049614 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066282854 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066404793 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066889118 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061109136 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066842698 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066152404 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.066986864 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.066663168 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067366662 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066596506 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061397031 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066489817 seconds)
  done (took 2.654130512 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.072316631 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065988711 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071184824 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.066805636 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.065812418 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.06606645 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061828956 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.061428821 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061366538 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066837887 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065844725 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065260346 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061372849 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.065756488 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066414986 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066696016 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.065793329 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061814194 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066115955 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061634155 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066484782 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061452053 seconds)
  done (took 2.889202632 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088723152 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.088065998 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128343114 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.080437276 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.088669613 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072159821 seconds)
  done (took 2.003666612 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.095553633 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104562182 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066057959 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066080945 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074123909 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06996139 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069282885 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069969645 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074564603 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073548277 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069387464 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074459167 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07433129 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070958305 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074824954 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077082564 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069412679 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.0690828 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066667628 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077366075 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069299662 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074715876 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069318966 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06909168 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06938799 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071441587 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07739608 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.073726497 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069282041 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075271814 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077176574 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069573976 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075284347 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07301 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066651759 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07512582 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069668504 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077440617 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074540582 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071334404 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066250814 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074731204 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07506455 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071632455 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077890156 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069842174 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071141752 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069784257 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069788851 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07912206 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074492916 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071207435 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075118006 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077437653 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.076835835 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.079465816 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073193136 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071217901 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074906066 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073396603 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071014398 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07438772 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071185322 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073486117 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077573597 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071388921 seconds)
  done (took 6.309510805 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102577166 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067169121 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069513082 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073509664 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071216963 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069891391 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069879623 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069607279 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069884215 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.066825188 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.104923444 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06988513 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071107495 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071120244 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069775863 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069626052 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069762271 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071550897 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067388386 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079534081 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070082475 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072020729 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071697975 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071361025 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073254536 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.0775274 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069504017 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069585681 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070064902 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069534378 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071528697 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069905387 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07138739 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066958877 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071134368 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070143643 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069567615 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071511836 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069507124 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074885059 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071562771 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077271043 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069751663 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069649591 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073643338 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069609566 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069785399 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.06754304 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069978954 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.067072583 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073474696 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073302056 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073913409 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071835609 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070249323 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070181423 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069890242 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069808067 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069942484 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077398044 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071050836 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069788999 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078969547 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069549556 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069643534 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071072677 seconds)
  done (took 6.233068075 seconds)
done (took 129.691799405 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.246653968 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.218607119 seconds)
  done (took 1.901336446 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.076040816 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.098585565 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.076599085 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139082794 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073222043 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.108742147 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108255002 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.076934534 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073205927 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.072436586 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.072288071 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075109433 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.142306222 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073224115 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.072586491 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075105281 seconds)
  done (took 2.879181711 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.109179068 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.185529839 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.114704525 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071045472 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.110959113 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077315644 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.070480705 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.081744558 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074296318 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.082889543 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077210649 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.075900678 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.072814002 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075903854 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.074493653 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.077374762 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.072523479 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077201202 seconds)
  done (took 3.054858278 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099226905 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086167971 seconds)
  done (took 1.662331389 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.15692647 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.105593244 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145546091 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.33066775 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.130055614 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.126607094 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.13035888 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126026896 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.110740694 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122739123 seconds)
  done (took 2.952748534 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.10763754 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.177902652 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.314844296 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.123372905 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077047664 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.09895238 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124334058 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083290406 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.080481814 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.07999104 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.08035566 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.077803799 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.102312506 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.077005023 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075320718 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077966939 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.105381078 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075199386 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.076027309 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076355684 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107182568 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.072282248 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076792287 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074849341 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.078435968 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078517061 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073481402 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071936483 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076602762 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.076084505 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078331786 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.096966502 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078484203 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09932602 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.076204533 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100789761 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.075781453 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.074447652 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076242968 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.07489708 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.077581323 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077255089 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.081178875 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.077908303 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073191754 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075747817 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073363842 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071829004 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079599482 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.072261881 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.07968791 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.078681333 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099027331 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072657036 seconds)
  done (took 6.285014939 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.108494974 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.106790068 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070705633 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.113444334 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105963716 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070869242 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105167295 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101344369 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109380645 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070251311 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069698547 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069814862 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076595884 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079541372 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116964349 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.10884964 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.07249068 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070272097 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108056321 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.107420194 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069013009 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.102684745 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100590946 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106409724 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.068665679 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070432619 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.068618838 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069013484 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.073806362 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075322962 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069778536 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076279031 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.081157352 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075767066 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068837039 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069363401 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068931872 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07604494 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07693197 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076550346 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.074887651 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068511916 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069491141 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069999499 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.07024821 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.068973981 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074935154 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076002105 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075121702 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069220092 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069379927 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.06924866 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069926699 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075776269 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075378091 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.076856225 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076184469 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069224329 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069139552 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070594129 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077404646 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077318174 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076007201 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070281442 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076816866 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.068935989 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077644827 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.08068634 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069055521 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069633637 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069162127 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069284983 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069931309 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075008336 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.074919202 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069843428 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072534044 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068827501 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077258518 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075523694 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069111833 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074135373 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068480504 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069254644 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069292113 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069678202 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074277951 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076213992 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069474312 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.06890156 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069067723 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069248889 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.067914185 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074019513 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075171879 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.07568811 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074812279 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069160671 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074718632 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074955366 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.0685385 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.073490192 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068531542 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068180684 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068371468 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.073253869 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.07290612 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.07464648 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068129145 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067747373 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073475745 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.21378206 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.07110979 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076495718 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079160084 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076698206 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069737934 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078781131 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069805674 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077645231 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070204415 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07794644 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069932759 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075426942 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069933054 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068829899 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.069607671 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.075665724 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070699618 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069503821 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070114312 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069451654 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076193651 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079168179 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070196127 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075366587 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.075464634 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.069826412 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075598069 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070140082 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076628799 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069980851 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069903934 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.068897219 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078129466 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.07003568 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069438561 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069519692 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077191519 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070202598 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077941732 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075282379 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068965041 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079749212 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077183324 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075232658 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078073667 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070306789 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069963204 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069523273 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069799853 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.074698622 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07699511 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070735443 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069787194 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.074583549 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077252597 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069118529 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075232428 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.075052352 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.308523373 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070032398 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069312414 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078138853 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.076760776 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075138035 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075087865 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.07536855 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069336357 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.074708901 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07525723 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069486048 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080909303 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06914054 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079007467 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075552262 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074356105 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075540075 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076888432 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077241023 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.077916149 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.079185482 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068672152 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069705949 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075040512 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.068803877 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.068934781 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.074872137 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.069834584 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069731225 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.079616306 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069695431 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077413364 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.068308381 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075616932 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.06884254 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069569245 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079600379 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069380487 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069678554 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.074708202 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069032946 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.074491743 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077099131 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.074072633 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.068240463 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.068561162 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.074068537 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.073756505 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.067627033 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.067554794 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068267795 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.072582517 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.072923755 seconds)
  done (took 18.648263336 seconds)
done (took 38.871228099 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210106853 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.16976585 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197493982 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117088689 seconds)
  done (took 2.278027482 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.092447782 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.100506599 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.076830937 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.065968137 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.083717913 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.06626501 seconds)
  done (took 2.008585315 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.250771239 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.189257226 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.174186408 seconds)
  done (took 2.129709977 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219360822 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.19582217 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.504147364 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.310230183 seconds)
  done (took 2.850413978 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.130283994 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.078515834 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.064665835 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.074858501 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.104662932 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13244351 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.08614184 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.107477121 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.075694252 seconds)
  done (took 2.435014153 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.129487104 seconds)
done (took 13.381627937 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.242515519 seconds)
    (2/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.108390362 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.151731204 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.107156066 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.12255997 seconds)
    (6/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.094024074 seconds)
    (7/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074179486 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.137173592 seconds)
    (9/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.203438926 seconds)
    (10/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.081457566 seconds)
    (11/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.244469387 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.133417249 seconds)
    (13/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074624306 seconds)
    (14/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070675808 seconds)
    (15/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077038647 seconds)
    (16/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.124176314 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.126261348 seconds)
    (18/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.079915517 seconds)
    (19/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.095207725 seconds)
    (20/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077384042 seconds)
    (21/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.074995133 seconds)
    (22/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.179208194 seconds)
    (23/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.07508679 seconds)
    (24/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.178906604 seconds)
    (25/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.150609992 seconds)
    (26/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.177580654 seconds)
    (27/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075343689 seconds)
    (28/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.189748258 seconds)
    (29/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070082171 seconds)
    (30/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.166826404 seconds)
    (31/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.189795938 seconds)
    (32/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074758238 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.0673156 seconds)
    (34/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.076992781 seconds)
    (35/341) benchmarking ("sort", Float32, false)...
    done (took 0.137888169 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15695086 seconds)
    (37/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.075575533 seconds)
    (38/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.172439895 seconds)
    (39/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074263888 seconds)
    (40/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.078707222 seconds)
    (41/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.064952408 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.077575763 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.092088732 seconds)
    (44/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.160270348 seconds)
    (45/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.17652283 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.090900234 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.086694348 seconds)
    (48/341) benchmarking ("sort", Bool, false)...
    done (took 0.143626377 seconds)
    (49/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.218552708 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.210658028 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.095479077 seconds)
    (52/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.074688117 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.094053998 seconds)
    (54/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.083208432 seconds)
    (55/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.197506844 seconds)
    (56/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.078869028 seconds)
    (57/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.240382362 seconds)
    (58/341) benchmarking ("sort", Int64, false)...
    done (took 0.06761302 seconds)
    (59/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.202021416 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.083167689 seconds)
    (61/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.147418325 seconds)
    (62/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065826253 seconds)
    (63/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.07538295 seconds)
    (64/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.183520363 seconds)
    (65/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.201603761 seconds)
    (66/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.074185574 seconds)
    (67/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.154382693 seconds)
    (68/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064063113 seconds)
    (69/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.145202218 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.139828709 seconds)
    (71/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.158227348 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.126301818 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.087072939 seconds)
    (74/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.078517788 seconds)
    (75/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.064098609 seconds)
    (76/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.165977775 seconds)
    (77/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.14530604 seconds)
    (78/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.076940812 seconds)
    (79/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077198532 seconds)
    (80/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.072245478 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.122477579 seconds)
    (82/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.219863839 seconds)
    (83/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.068201838 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.094294174 seconds)
    (85/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.199381385 seconds)
    (86/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.203536116 seconds)
    (87/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.0759891 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.180651786 seconds)
    (89/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.192926536 seconds)
    (90/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.145561751 seconds)
    (91/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068676251 seconds)
    (92/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.066289924 seconds)
    (93/341) benchmarking ("sort", Float64, false)...
    done (took 0.138966798 seconds)
    (94/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077230866 seconds)
    (95/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.167716023 seconds)
    (96/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.075261234 seconds)
    (97/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.067114991 seconds)
    (98/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.077998265 seconds)
    (99/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.07525942 seconds)
    (100/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.174287614 seconds)
    (101/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071473236 seconds)
    (102/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.19173802 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.08594185 seconds)
    (104/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.074772372 seconds)
    (105/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.067011555 seconds)
    (106/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.154460584 seconds)
    (107/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.173720392 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.089091165 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066439228 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.088192152 seconds)
    (111/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.080627146 seconds)
    (112/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.066487932 seconds)
    (113/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.074841947 seconds)
    (114/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073493744 seconds)
    (115/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.06718333 seconds)
    (116/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070024865 seconds)
    (117/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.066511245 seconds)
    (118/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.200766616 seconds)
    (119/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073904892 seconds)
    (120/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.201784087 seconds)
    (121/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.196567412 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066297874 seconds)
    (123/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.143711227 seconds)
    (124/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.155961043 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.067668478 seconds)
    (126/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.087542829 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.09209136 seconds)
    (128/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.085059016 seconds)
    (129/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.217446536 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.089071346 seconds)
    (131/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.196152995 seconds)
    (132/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.168831917 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076871103 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092364734 seconds)
    (135/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.143039233 seconds)
    (136/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075557588 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.065316994 seconds)
    (138/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074301887 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.11752052 seconds)
    (140/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068253785 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.151945049 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.087556772 seconds)
    (143/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.085151356 seconds)
    (144/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075358287 seconds)
    (145/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.147047062 seconds)
    (146/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.06598387 seconds)
    (147/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074992417 seconds)
    (148/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.075886725 seconds)
    (149/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.152829064 seconds)
    (150/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.09613645 seconds)
    (151/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.071556912 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076213392 seconds)
    (153/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.06857436 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.081483979 seconds)
    (155/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075292755 seconds)
    (156/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.159885664 seconds)
    (157/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066361101 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076203113 seconds)
    (159/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.066483859 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.235675405 seconds)
    (161/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.065132739 seconds)
    (162/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.064743781 seconds)
    (163/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073450928 seconds)
    (164/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.177500493 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066179876 seconds)
    (166/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074155003 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065694606 seconds)
    (168/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.090717848 seconds)
    (169/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.065709016 seconds)
    (170/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.073103775 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.146928197 seconds)
    (172/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.06890416 seconds)
    (173/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.06683666 seconds)
    (174/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.199308883 seconds)
    (175/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067670312 seconds)
    (176/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.064974566 seconds)
    (177/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.223655213 seconds)
    (178/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153413439 seconds)
    (179/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064196581 seconds)
    (180/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.081620529 seconds)
    (181/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.067018722 seconds)
    (182/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.094201483 seconds)
    (183/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.074040742 seconds)
    (184/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.071766692 seconds)
    (185/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.301344663 seconds)
    (186/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.088387029 seconds)
    (187/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.067961693 seconds)
    (188/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.067031787 seconds)
    (189/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.068527637 seconds)
    (190/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079938188 seconds)
    (191/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.077388351 seconds)
    (192/341) benchmarking ("sort", BigInt, false)...
    done (took 0.269760311 seconds)
    (193/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074486753 seconds)
    (194/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.076033684 seconds)
    (195/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.07679874 seconds)
    (196/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.16756498 seconds)
    (197/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.068437391 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.152037034 seconds)
    (199/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067815854 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.193749169 seconds)
    (201/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065236467 seconds)
    (202/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.06549914 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.065722048 seconds)
    (204/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.177600838 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.097080898 seconds)
    (206/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065451209 seconds)
    (207/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.079164797 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.153882698 seconds)
    (209/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.065865784 seconds)
    (210/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.083410901 seconds)
    (211/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.06840288 seconds)
    (212/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.226628816 seconds)
    (213/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.067403364 seconds)
    (214/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.161434171 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066873794 seconds)
    (216/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.07052686 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066593843 seconds)
    (218/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073961427 seconds)
    (219/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068993992 seconds)
    (220/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.196261373 seconds)
    (221/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.06609547 seconds)
    (222/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.084084083 seconds)
    (223/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.068656275 seconds)
    (224/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192604338 seconds)
    (225/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.065703659 seconds)
    (226/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.080799638 seconds)
    (227/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066232935 seconds)
    (228/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.081702262 seconds)
    (229/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.083903265 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.066017323 seconds)
    (231/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.067146361 seconds)
    (232/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078339515 seconds)
    (233/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066027021 seconds)
    (234/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.078832722 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134450637 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068580151 seconds)
    (237/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.067378673 seconds)
    (238/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.065701752 seconds)
    (239/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067273239 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.12412434 seconds)
    (241/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.067124575 seconds)
    (242/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.070958775 seconds)
    (243/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073919227 seconds)
    (244/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.065734399 seconds)
    (245/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074861082 seconds)
    (246/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066619508 seconds)
    (247/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.085506882 seconds)
    (248/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.067839217 seconds)
    (249/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.06652982 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078623091 seconds)
    (251/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065583683 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077134467 seconds)
    (253/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068464869 seconds)
    (254/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.066670715 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147609698 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153733307 seconds)
    (257/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067957928 seconds)
    (258/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.069364007 seconds)
    (259/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.066957295 seconds)
    (260/341) benchmarking ("sort", Int8, false)...
    done (took 0.149785962 seconds)
    (261/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067790294 seconds)
    (262/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.067247175 seconds)
    (263/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.065471734 seconds)
    (264/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.070089349 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.153083146 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.115508247 seconds)
    (267/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074579092 seconds)
    (268/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.067422151 seconds)
    (269/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.067543772 seconds)
    (270/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066518449 seconds)
    (271/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065180192 seconds)
    (272/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.067359526 seconds)
    (273/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.07115217 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066753317 seconds)
    (275/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.069080364 seconds)
    (276/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068246318 seconds)
    (277/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.131304469 seconds)
    (278/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.214845257 seconds)
    (279/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.064895791 seconds)
    (280/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.06880425 seconds)
    (281/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067652682 seconds)
    (282/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.067049456 seconds)
    (283/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.065192998 seconds)
    (284/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.064671695 seconds)
    (285/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.082774618 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065864636 seconds)
    (287/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.068584321 seconds)
    (288/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.065029401 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.088333123 seconds)
    (290/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.139040852 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.065417512 seconds)
    (292/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.066473048 seconds)
    (293/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.074030366 seconds)
    (294/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.066590718 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.123282685 seconds)
    (296/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066002126 seconds)
    (297/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.07039319 seconds)
    (298/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.076427247 seconds)
    (299/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.068383226 seconds)
    (300/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.064163083 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.064896005 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.088069489 seconds)
    (303/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.065820479 seconds)
    (304/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.06581281 seconds)
    (305/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.072757956 seconds)
    (306/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.082761213 seconds)
    (307/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.064644862 seconds)
    (308/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065212588 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.087002961 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.12310581 seconds)
    (311/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.245942288 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.070901833 seconds)
    (313/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.072318457 seconds)
    (314/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.067654664 seconds)
    (315/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.069438182 seconds)
    (316/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.076689482 seconds)
    (317/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.070391713 seconds)
    (318/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.069030394 seconds)
    (319/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.06815862 seconds)
    (320/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.067622507 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067964471 seconds)
    (322/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.071385351 seconds)
    (323/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.070776521 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079542485 seconds)
    (325/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.149788201 seconds)
    (326/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.066422115 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.149898868 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.097298368 seconds)
    (329/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069493997 seconds)
    (330/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065946995 seconds)
    (331/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.07087706 seconds)
    (332/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.07566209 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.068039181 seconds)
    (334/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.07444566 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144178909 seconds)
    (336/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06593235 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.06766225 seconds)
    (338/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.066838606 seconds)
    (339/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.06847386 seconds)
    (340/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066961827 seconds)
    (341/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.06682339 seconds)
  done (took 36.759975047 seconds)
done (took 38.29792769 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.083872822 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.090110887 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073689648 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.084553147 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.081463911 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.099744276 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074150095 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078822355 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.081463626 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.08044969 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.07924238 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073280964 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075754497 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076103655 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.073738539 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.08896744 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.081790829 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075234352 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075350535 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066018407 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.07515967 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067157575 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066092614 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073682796 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.078820136 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074412306 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.076399728 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075898722 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067075558 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.066792103 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071830036 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.076054801 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066695045 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.078620577 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075149963 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075221382 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076711994 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079903144 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066095076 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.067009917 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077984624 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.066657653 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074828604 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073300348 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.072007114 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074605283 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075460234 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079040745 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089673457 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071415948 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078293439 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.07835704 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.078069634 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072584968 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072736044 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075009208 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073878696 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.089313632 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075702731 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071583565 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077910664 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.075709758 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073558965 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.0745764 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075036029 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078613247 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.077567557 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074010063 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077597172 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.073835226 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066547009 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075147164 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.07199488 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.066559262 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.07835385 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.080945717 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065132366 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071490538 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07506833 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.074850724 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.066233797 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071076495 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.06569207 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071539707 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070948693 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.073304577 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072305382 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.07467192 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.065751752 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075604137 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074294087 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.07522092 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.065290367 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078234103 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.066538785 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073663183 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.066807983 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06694427 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065959498 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072438104 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066628241 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071818781 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074725745 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065228099 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071444944 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.079407444 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.069450843 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074757863 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.065429617 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.065859332 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077198593 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.07767049 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.06663872 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.0713265 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.065834619 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072183797 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065669715 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.066615668 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066192072 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066647694 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.072115006 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.066787261 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071450033 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.073420363 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.078248602 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.065867718 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.07142149 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.07110886 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.066473211 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.072973745 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066649613 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.066384026 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.065331668 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078206204 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070129426 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.065904435 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.071655332 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070231039 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073721404 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.063943187 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074782237 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.071729702 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.07020353 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.220273206 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.06612429 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.07805487 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072400879 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072179945 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066023769 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066964154 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.065741677 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066581412 seconds)
done (took 12.908921632 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067866069 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.105487029 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.073880896 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082827096 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.078749856 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068074699 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070631589 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083361948 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.07070775 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086447564 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094874169 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089139901 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093280919 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066353332 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067348203 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068382018 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.065697656 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074679095 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081626997 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090566825 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095675404 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066753023 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.068928356 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.083299189 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077328014 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082750444 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.067952143 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.067675798 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.110912202 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083551093 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092059121 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066986327 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067783288 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080200451 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.080961373 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073707191 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067826808 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071541634 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.06793983 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067157782 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068993337 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.080843089 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07023102 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070796945 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068090174 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068072946 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067354203 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070624279 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080319137 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070257025 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074508943 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.078837432 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068759184 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.066762596 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065572012 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070941544 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067074639 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067936841 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067554569 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.06678211 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067327006 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070180297 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.067681719 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067630989 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070598411 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069562391 seconds)
  done (took 6.551091 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084275439 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092566088 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081741715 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082484958 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067017476 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.067908332 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.068163165 seconds)
  done (took 2.201844811 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.069359749 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075207042 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079587337 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080117495 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.088893765 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077304958 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067570888 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.099603855 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067176523 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076274198 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083071094 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.081033882 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071045141 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080092579 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067674272 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079058856 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067546765 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.074740111 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075522329 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.080382601 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071652149 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097028489 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.080767107 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067916962 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.080346538 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074538497 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069309317 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.067565048 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067660951 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067444581 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067348799 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089105361 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073687526 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07888958 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068192482 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066479084 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071799844 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.067960541 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074218142 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076500354 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070896983 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067120349 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.067353472 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.067616546 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068712894 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071739832 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068697322 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067362873 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.0671563 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.074716349 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066690336 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074018452 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.0694679 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072640142 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.072192065 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071552194 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074762409 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067675396 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074977422 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073587365 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067120505 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079811778 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078717599 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070796127 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.078929135 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075907846 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073459871 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.070612969 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067215674 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066824424 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.067803422 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078810192 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070933045 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069523585 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068041366 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072016588 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071064614 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082737056 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082231187 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080876339 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.069541269 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067413285 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.071370326 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082265644 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071960645 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.066997726 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068140609 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.066670954 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.071743895 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067671724 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072072807 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067248223 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.07440075 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.069575787 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.06968214 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.07526235 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.067409185 seconds)
  done (took 8.738725024 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.072036564 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.06892033 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069496252 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068538806 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068938094 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.068906831 seconds)
  done (took 2.101560626 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092283347 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.067890808 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.079864725 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068313303 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.089745519 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074568381 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074430749 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.075749558 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083793023 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078035881 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074740656 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.076930618 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.073922455 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069517489 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.073767271 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069052078 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073572515 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070545941 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07744086 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069803797 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.080772326 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.069629516 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069639094 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079437054 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071132145 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068930412 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068930063 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078069111 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077650221 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.075611354 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069672133 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070341638 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.07601563 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.075475106 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.073778069 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.075638447 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067523387 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073455675 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069855033 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.071121297 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.075794421 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.069686691 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.069982753 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073154903 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.075595372 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076032765 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073206323 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071241902 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073633293 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.072963516 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.072854906 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068234646 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.07045277 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073526536 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076228188 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.075550162 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.07735471 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.07348915 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069342826 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076178075 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067616641 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.070718363 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.074926865 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070416598 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072385619 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.072855732 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076740854 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.06978488 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069760873 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.067734094 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.072866771 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067960969 seconds)
  done (took 6.939814878 seconds)
done (took 28.177159514 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.548300112 seconds)
  done (took 2.170304002 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.582908503 seconds)
  done (took 2.248312672 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.519180412 seconds)
  done (took 10.184402415 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.310575197 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.333618856 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.734209986 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.133504644 seconds)
  done (took 3.221001625 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.753178152 seconds)
  done (took 2.429304644 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.231250371 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221227844 seconds)
  done (took 2.1365514 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.346715372 seconds)
  done (took 2.012838818 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.148810654 seconds)
  done (took 2.81044075 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.227729833 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.15924412 seconds)
  done (took 2.064149278 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.513831681 seconds)
  done (took 2.183710689 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.311661348 seconds)
  done (took 5.990678062 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.23572807 seconds)
  done (took 1.956029971 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.233658229 seconds)
  done (took 1.907453233 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.07980438 seconds)
  done (took 3.749514707 seconds)
done (took 46.74165307 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.086870144 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.089560965 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087866924 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082412904 seconds)
  done (took 1.987689856 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.077617016 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071383711 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074835988 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074691627 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073064275 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073460525 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074661276 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070189595 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072507479 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071475832 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070123562 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071376583 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073788047 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071392028 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.073738439 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075410431 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071147906 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071487366 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.074003332 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071101966 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073961426 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.070927183 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.07030633 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.0708781 seconds)
  done (took 3.411142923 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.081659236 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073359035 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076183648 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.071612457 seconds)
  done (took 1.980454178 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.080184021 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.077592333 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086579819 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091429628 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.07820109 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078175436 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085141021 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.085680875 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066930462 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088368183 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069406329 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067811335 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.06758703 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.086470219 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084280691 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.064162677 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06477517 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078401687 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077507538 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080561742 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.069824727 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.066477653 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077983202 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078435599 seconds)
  done (took 3.52903707 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.082864671 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.066742563 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.078903249 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092175313 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093147359 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066781812 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.0799161 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093809654 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127563726 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066809123 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073144965 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067253365 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105194271 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066254738 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081669165 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.110108195 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112326534 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070457855 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099312144 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066360951 seconds)
  done (took 3.389828574 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078870607 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.070433196 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071365076 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066341319 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077853225 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.073986987 seconds)
  done (took 2.130750179 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.071178169 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069002484 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068095347 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.067506283 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.073200422 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.068704583 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067034393 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.069026305 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.068868939 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.068590569 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067567462 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.067242802 seconds)
  done (took 2.511472642 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.159190053 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.07075507 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071355325 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.066973688 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072818696 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068121072 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082715631 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070058454 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.085464216 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068040066 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.06858845 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.069736775 seconds)
  done (took 2.639539233 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103689172 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101744085 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.146418655 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118135742 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115609785 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097070028 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120673579 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094733651 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.160893782 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137020586 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116976426 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.12584851 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087593827 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070443949 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100802978 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102002043 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136251507 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.073832258 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113686976 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.1963624 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115777933 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113302356 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122966842 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117319098 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082250598 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122470567 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094872515 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103225501 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.155300489 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110502302 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119713512 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.09863514 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073280474 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.071954566 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.150040581 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101657141 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138137384 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094385947 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100984144 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.090091712 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107969046 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070185424 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087470725 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106854905 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085193435 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11745782 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088192448 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103598171 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081459553 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130859341 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106274492 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099031138 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088765158 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104325683 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130141273 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095815244 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111007057 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106523465 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082179954 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116787346 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.099817748 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.252428159 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.095691552 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082098352 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.160950157 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090393659 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113879095 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114017272 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.08425613 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091029445 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103805252 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.130908188 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107623502 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.107414431 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115091028 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125892605 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110654067 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.092287724 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129761488 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093977083 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073909336 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.105038754 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129417368 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086282974 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.100620862 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131083557 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093364076 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108465946 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.092927662 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.118608353 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08154864 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097267219 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070864858 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.098439707 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107837173 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097964365 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112293331 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108029385 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079374729 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125567498 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109073461 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074070891 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117891751 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099463102 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.152896354 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096342848 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077098019 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101117959 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094146769 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.15008627 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085597917 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080633411 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099007489 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141945291 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094746598 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170628466 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096576072 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129364513 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0975992 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.088173892 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.075683902 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.089849701 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10099708 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106664533 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101185791 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088614112 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077229479 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.086619723 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094689449 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.091443661 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.080216012 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.111919079 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.099895408 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.074012626 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.086340768 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.075417877 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.122423104 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.076878058 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106683851 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.121393702 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.078047461 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102528872 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126742517 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.136233904 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.095714189 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104981466 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.133747504 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.110618534 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.077717521 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.08149908 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102786987 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.133936906 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.116503325 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087479968 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.079569521 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.101064701 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115447793 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.101337684 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.140719124 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129936158 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.111925185 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100180224 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142661358 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121582659 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093724641 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096722496 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098681389 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.126455942 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10953501 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158044293 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095233569 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121076763 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.116841623 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.14368318 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.111679718 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092548108 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.087163898 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096780562 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.108229887 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106950994 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.1460632 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.098730205 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.074326644 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096071485 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.137009914 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076949247 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102306024 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.092387663 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094208442 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123798232 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.089159589 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084209842 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069563185 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105193839 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.139533354 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.071247533 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.112390414 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.39336283 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106316646 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.109710332 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.07400995 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.104102386 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.148446471 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109514108 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144551875 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.119909166 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104392422 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.122585558 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.102512897 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.108956346 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.083039623 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.132243832 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.137920317 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098648997 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093518426 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136938939 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120720616 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.137334448 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.098403337 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.116513093 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107225292 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101380675 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105035126 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102602712 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145802908 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122251516 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125990767 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.117488128 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107451439 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109450818 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137958179 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083736489 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118441078 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.077172612 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112508083 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.079305938 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108712944 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080553894 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.113046843 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080928562 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101249526 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070668513 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075288098 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142327281 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.113516206 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090024066 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087134212 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136757557 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131914329 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081853082 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.103106041 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135824293 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101772247 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101829603 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109832808 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086323547 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095529671 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.307533422 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.080920859 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083266312 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101528087 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096063927 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108131071 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.086028933 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076431111 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.13763908 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105571239 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096050807 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109918198 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09714791 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.124095045 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.090964278 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088939258 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107079451 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104989945 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141045431 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.091454556 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099177856 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119151674 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082040065 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093797348 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071297387 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086614906 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077549913 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110576347 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077604382 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109356687 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.07052364 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.130982086 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.08740458 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093257143 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103329181 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098510897 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12922623 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.094084303 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129354487 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090891383 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.102574898 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109115854 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095352273 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112018695 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104593447 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.096648257 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110403937 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097541338 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10720324 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.11136241 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095112038 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.14176862 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090904051 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121486088 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106319161 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107095156 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104563268 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117350349 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137526223 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.112705779 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142959776 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077013328 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084275174 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105842495 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100560275 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.1467183 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103004981 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.07333456 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117794456 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.09120754 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095959631 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.270986329 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083995376 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14312979 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088188953 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088351188 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114095493 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.090239822 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099085413 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07817805 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096580911 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102082164 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095797368 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095405957 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135017406 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11793464 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114647485 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133421987 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100533996 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.093801899 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119816882 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111557048 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111599215 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087187694 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087633619 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124954627 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101956921 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.129076209 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101105546 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095525229 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101944103 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091988454 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100702971 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097623313 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.11080124 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081339989 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077661468 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.070122779 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.073859013 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.119607067 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110200302 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103383788 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099964467 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073682172 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104674377 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.098463027 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073252625 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088610489 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095180651 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.127452191 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084791067 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093827857 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.114911164 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092287229 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104309633 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131050666 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129309804 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.101451635 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089845915 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.142885888 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128636126 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08834058 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093695731 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.07278621 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080069728 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.102173529 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14668167 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119618392 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.078294016 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084333325 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.078508825 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.246421144 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.073202061 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089537759 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.090384615 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104586742 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.120554444 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113472808 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104935326 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076532286 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104354233 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09796409 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093593488 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.097175579 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.103247454 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106451832 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.124594008 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1019191 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098725413 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078673628 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081699435 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077022397 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08091292 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.103226441 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078857099 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077643823 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130674581 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092611515 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105988293 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109778391 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086450281 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076763943 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134330211 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070298514 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134947566 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072413341 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08335118 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.081574971 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080519513 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09482533 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105782536 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.095842217 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.113743032 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106906428 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105573722 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112110527 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.155389195 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072166729 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.150271377 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077223789 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076682903 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077288932 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11231806 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090668173 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104510144 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.140986137 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090659869 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093436888 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078000617 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129005431 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09925366 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103740546 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.083477628 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.079619867 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128390055 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080328203 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072135303 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087884776 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112970764 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.073545272 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136196748 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115625273 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.243418272 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.114494227 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.631921129 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091731068 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077663274 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09092257 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.149031774 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129903541 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08433076 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109727598 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120357611 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091180628 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116171043 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.1087151 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.18667647 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075681998 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095716696 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.104516874 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099722557 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093471239 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093898646 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088570588 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093072018 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.087086352 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081122419 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108545922 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088873538 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.09321924 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129832597 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084358021 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081484483 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131212732 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.104679549 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083689602 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08970192 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101362493 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088857732 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091802242 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070799743 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145617028 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122919212 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102518971 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.091639565 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.10887488 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119310817 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089701334 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.11310463 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090057165 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110416665 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.08634923 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079472385 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102769927 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.07893829 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079047682 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.117860987 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.087287955 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.093817483 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105328557 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096615221 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114975962 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118598679 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111479452 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.098964125 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079936058 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086802664 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.08892908 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077023684 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079098554 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075516672 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.076960146 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107442318 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.248649496 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115272582 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114569419 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083582485 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.104385257 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.101506377 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110471062 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084526087 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102438732 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.110034727 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092106189 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105051005 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10164377 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129114645 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146189351 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.100410686 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124800323 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133985377 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.081174346 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.079020896 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071119428 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147262391 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080581156 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.081934074 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112448934 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133868293 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082802817 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.09607002 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.234801218 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081751068 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083039966 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097559376 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.070880189 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084150935 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108775271 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.085941005 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081442609 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099781484 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115017592 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.119146626 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112952473 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090772656 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084379507 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082260499 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.094907683 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105279099 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.12970981 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.090859258 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076625431 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106992488 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104406874 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12493977 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074210853 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081917798 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.129815835 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093145655 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.104718158 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081182527 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121080082 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.132040848 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091022322 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.133085045 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071960778 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084245152 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090175277 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.125717115 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075560266 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088612873 seconds)
  done (took 66.284260611 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.156900872 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143844092 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.116426252 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.130196221 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.218662031 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.231208157 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.15361415 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.129253563 seconds)
  done (took 3.187475985 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.07077572 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084265187 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.102322868 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.084761423 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.06738792 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.069875409 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.205524685 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.083623639 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.067538415 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.108573824 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.076979356 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.070708203 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.362866785 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.067958362 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.069542067 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.077556248 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.068716866 seconds)
  done (took 3.605601241 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.369018552 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.63211364 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.325359331 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.075854125 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.95153439 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.090144144 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.192178223 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.138357268 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.083744075 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.532677354 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371726231 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.133256369 seconds)
  done (took 18.770058891 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.078119645 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.076006131 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.07981829 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.079497049 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.075542533 seconds)
  done (took 2.261405679 seconds)
done (took 117.3902834 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085532098 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.172462885 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.068746659 seconds)
  done (took 2.148137336 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.085020602 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082784855 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082700663 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.078828292 seconds)
  done (took 2.204957042 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.076989403 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.077695209 seconds)
  done (took 2.023202811 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.224112436 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.176890831 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.090853577 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084765204 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081006784 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081664791 seconds)
  done (took 2.129833642 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074062302 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.072842194 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.072997611 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073478488 seconds)
  done (took 2.16116808 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.072825928 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067925033 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.069378576 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.071945853 seconds)
  done (took 2.152561659 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088261062 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.083958661 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.112981176 seconds)
  done (took 2.15620644 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085047744 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084502528 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079541635 seconds)
  done (took 2.130302531 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111423213 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.09770985 seconds)
  done (took 2.083989519 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082301857 seconds)
  done (took 1.958372869 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.09178673 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099180385 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.141249652 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108012291 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.141742851 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.127211125 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.077975681 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079283122 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.074444903 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.073969061 seconds)
  done (took 2.886824844 seconds)
done (took 26.485606375 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080661576 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.374274354 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.361104813 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.08836456 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.673617414 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358129588 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.0051771 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092009858 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.100536268 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069182957 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086280488 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.650083266 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.994948471 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331750129 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.987039903 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.329778378 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653200248 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069955032 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069368209 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070036641 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.99366897 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069185441 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069799017 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070282167 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652584881 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375370372 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.07001069 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331437238 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.068910751 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071745203 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358099626 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.070813121 seconds)
  done (took 16.497789138 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.073026836 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.124026783 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074130183 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085460263 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071354837 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071354126 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.072158369 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070424672 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.111383739 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070075363 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086881669 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069316952 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073592687 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071213532 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089732541 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070137539 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071073378 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071425675 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.06994204 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070588824 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088821494 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069829708 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070265226 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070869063 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070590803 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083485824 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071704831 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.07003336 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069971881 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072768227 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073300527 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071445 seconds)
  done (took 4.340843514 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.123784162 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.1267021 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.073995595 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.110060157 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119420393 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071115569 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152521784 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092175508 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.114793224 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.0703278 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086995022 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069279447 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.104884793 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070934588 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089529927 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070185329 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071712496 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071101309 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070358903 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070683192 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089898359 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069466449 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070634015 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.070847164 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070887642 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085542456 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070923961 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070157144 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069727951 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072499184 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074472005 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071266447 seconds)
  done (took 4.613076865 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072044747 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.072734497 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.080819138 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082234079 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068083449 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070265991 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071043779 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.067884838 seconds)
  done (took 2.485267581 seconds)
done (took 29.835169241 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081958471 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069889251 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072578036 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088806986 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075021643 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.071840816 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.065762124 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075917507 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.072475321 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072362756 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.074680897 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068573846 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071755222 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066004364 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073961262 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067420537 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073318427 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071377016 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072227944 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073741991 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.07290754 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073539177 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076419162 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072706466 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072889999 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072862849 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077026673 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074355129 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068296796 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070889589 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.0697289 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.081513664 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074508236 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074061204 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.067830076 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.068338567 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072454091 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070150819 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074106544 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.076783374 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070526459 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077030939 seconds)
  done (took 4.926782494 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090070323 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.094059852 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.086673675 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.082880993 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107274492 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.08380222 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.09120164 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080572899 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.078965355 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.090561081 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075102971 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080477495 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.082555407 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.076757966 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079671366 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.076049069 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080812794 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074920461 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079925486 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079420985 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090766701 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073247344 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.080264148 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081447193 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075509625 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.082003094 seconds)
  done (took 4.062994331 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075424751 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089353021 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.09347661 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.142642647 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111271798 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084138654 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.083461439 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.103579541 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102881283 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.069868168 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073471813 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096105733 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098011314 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076812811 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.108203166 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087726308 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.081737247 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.07103765 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07547321 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103810396 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.091974015 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088219863 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101319382 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089537995 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068766395 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078345327 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.075595537 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084492245 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076696835 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081262865 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.072791606 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072899783 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069458942 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081109922 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073617101 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067063983 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091090851 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081271396 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084263089 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107047764 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.079223686 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070627408 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098924365 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.13442171 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068456368 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.072195543 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073255469 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082064113 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070141556 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098832378 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087124721 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.068896323 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.087826543 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070344517 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070872824 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085713026 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070715272 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.070809029 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081698213 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075305535 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090843545 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074265494 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090215881 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069161821 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080514524 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07071831 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070374087 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.067697276 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105200168 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076780628 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121602786 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070081778 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067293945 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081978474 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080195713 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.075585086 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068619325 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.087690018 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081205708 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073051004 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.08153423 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.071816299 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072696934 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.104779644 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.067728992 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.066968967 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067069986 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.070945168 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072328674 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069346436 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.081923261 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068219738 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072390426 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084078283 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.069277281 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069936058 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071764158 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070026749 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068731631 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080044026 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073085901 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071398893 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.08124864 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069980059 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072324136 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.083669531 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078668731 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068642305 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070276535 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073962641 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070958467 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073259535 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072777263 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070977305 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.07569936 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076644968 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.074390906 seconds)
  done (took 11.333099429 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164849749 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.153451859 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.07072822 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149600057 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078199606 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073904597 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.149164013 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.08856099 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.069824664 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.070900236 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069311213 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.098125298 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.093535692 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105038684 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.074059146 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.070447376 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095773507 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.10324051 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152265205 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.146596168 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092905462 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.07713712 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.072004025 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070903011 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071235671 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07892722 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.085695184 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.077785006 seconds)
  done (took 4.652172344 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.07782436 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.112008455 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074231158 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093101411 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.088497549 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.069982774 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071912135 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.070886938 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086835353 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076783787 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.069895182 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074128609 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073343727 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070676371 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070808751 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076510148 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076080753 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069161855 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073790836 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074774 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080168164 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095326627 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073942176 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.06999581 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.071969304 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070005961 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076458442 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.079867522 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069015014 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.099913264 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066884421 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074159094 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084318236 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.070526693 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069319557 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070609444 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.069924553 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070121707 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.07042634 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067951767 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067826884 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074045234 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068044765 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.075849856 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.08377608 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076731157 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.070706053 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072107912 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072251239 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066433398 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.072833169 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073434905 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.071767003 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078084569 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073309609 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072259178 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071007645 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.098448794 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075679146 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.068830972 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068323325 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068112929 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071610255 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077727748 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086774322 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071311593 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068311323 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.069732111 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074387058 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083386537 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069376662 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074945529 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066836746 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070243921 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.071935286 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.073231967 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071121324 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068066961 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069397147 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.06953411 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069482601 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069074769 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068703219 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072674688 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067276211 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067947081 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.069947004 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.070733448 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076422908 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068498971 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.0725058 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070592018 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.068126969 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072245613 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074581922 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.07267258 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089324904 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07842717 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.069997565 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067746515 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084016865 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071604748 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.06903671 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074795405 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074453847 seconds)
  done (took 9.7277547 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.093603158 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.070564823 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089475273 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095388972 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079721383 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.074735843 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.083757463 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070659848 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086433362 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069155713 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.07853018 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068308672 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083011399 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.07898676 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07112095 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079641547 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072144834 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090276342 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.087482107 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.068407374 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079278219 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082030925 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082442728 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.08818572 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.086877561 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088633728 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081929617 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072312447 seconds)
  done (took 4.206214616 seconds)
done (took 40.801194149 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.98991796 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.139901346 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.974239025 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.18487461 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.269605905 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.086438284 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.108305823 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.971708611 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.211346913 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.997501774 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.294630121 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.375289018 seconds)
done (took 69.573165619 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.048017467 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.122339742 seconds)
    (2/2) benchmarking "String"...
    done (took 2.196684913 seconds)
  done (took 6.232674014 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.577993618 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.978408189 seconds)
    (3/3) benchmarking "different"...
    done (took 2.026148147 seconds)
  done (took 8.492705319 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.067865132 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.934954164 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.228042018 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.967928733 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.973376615 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.379087748 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.776769138 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.459639911 seconds)
  done (took 32.62229248 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.100435652 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.17310835 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.673787151 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.699384626 seconds)
  done (took 16.585838584 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.574690005 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.232195433 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.233858352 seconds)
    (4/4) benchmarking "different"...
    done (took 2.227646507 seconds)
  done (took 11.223794946 seconds)
done (took 87.269670227 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 7.010888923 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.96854751 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.025428848 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 7.008008032 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.97727586 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.970311789 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.967705343 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.970209571 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 7.01713096 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.0158845 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.969106279 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.987685502 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.970505311 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 7.017338273 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.712662288 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.03037364 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.986096389 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.983778276 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.989644749 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.011660831 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.965743183 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.969768648 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.446203007 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.157103438 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.589647479 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.331578331 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.482772256 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.405847198 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.972951705 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.966583881 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.011223518 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.333502333 seconds)
  done (took 211.12563224 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.966983799 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.773917126 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 3.877521735 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.973529614 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.209804634 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.163372015 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.109246055 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.339750769 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.97025522 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.971749407 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.083333862 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.970277121 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.127573692 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.910837976 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.962311083 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.061559845 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.125976747 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.142971711 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.965492607 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.144864914 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.988610716 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.966396069 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.894675274 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.065919992 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.000109532 seconds)
    (26/36) benchmarking "herk"...
    done (took 6.996837751 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.987397181 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.970290707 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.150333911 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.085346406 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.979581252 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.988432656 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.117522243 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.831757229 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.976859426 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.995747552 seconds)
  done (took 175.746532775 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.132447421 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.975708679 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.968941089 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.022838972 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.10611208 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.969911108 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.641447816 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.976561123 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.245007998 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.970609488 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.965352516 seconds)
    (11/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.96771014 seconds)
    (12/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.96804865 seconds)
    (13/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.981368498 seconds)
    (14/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.055798977 seconds)
    (15/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.970895236 seconds)
    (16/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.981849347 seconds)
    (17/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.969190958 seconds)
    (18/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.994541683 seconds)
    (19/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.969814303 seconds)
    (20/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.966238175 seconds)
    (21/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.966294245 seconds)
    (22/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.9660685 seconds)
    (23/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.968238996 seconds)
    (24/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.967274761 seconds)
    (25/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.96764899 seconds)
    (26/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.968415432 seconds)
    (27/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.514940525 seconds)
    (28/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 12.169634751 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.209642748 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.969516118 seconds)
    (31/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.967857407 seconds)
    (32/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.979185716 seconds)
    (33/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.175453802 seconds)
    (34/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.969921831 seconds)
    (35/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.967429033 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.058049992 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.024224806 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.061993959 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.969225144 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.185849687 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.05320826 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.969843503 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.970627342 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.030196353 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.980599946 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.968825973 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.970240217 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.968961982 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.980136055 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.033653207 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.201553827 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.971032217 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.10646491 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.465859888 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.970822714 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.96911427 seconds)
    (57/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.9690078 seconds)
    (58/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.581585996 seconds)
    (59/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.971933647 seconds)
    (60/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.971283341 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.970497743 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.976628107 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.97665865 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.972382165 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.969758444 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.357563255 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.041003529 seconds)
    (68/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.208100234 seconds)
    (69/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.814611806 seconds)
    (70/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.971466359 seconds)
    (71/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.567456296 seconds)
    (72/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.049355739 seconds)
    (73/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.970405847 seconds)
    (74/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.970543237 seconds)
    (75/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.970823522 seconds)
    (76/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.971564416 seconds)
    (77/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.969827238 seconds)
    (78/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.973892991 seconds)
    (79/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.110605214 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.983915445 seconds)
    (81/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.070806838 seconds)
    (82/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.053896434 seconds)
    (83/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.971561817 seconds)
    (84/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.111967457 seconds)
    (85/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.977664228 seconds)
    (86/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.980760849 seconds)
    (87/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.786081632 seconds)
    (88/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.039818187 seconds)
    (89/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.010359469 seconds)
    (90/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.785028309 seconds)
    (91/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.973629279 seconds)
    (92/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.345986735 seconds)
    (93/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.725758729 seconds)
    (94/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.975404256 seconds)
    (95/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.973846553 seconds)
    (96/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.985848999 seconds)
    (97/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.973174898 seconds)
    (98/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.975430208 seconds)
    (99/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.973209798 seconds)
    (100/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.051730679 seconds)
    (101/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.971976283 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.973147305 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.109257865 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.715568761 seconds)
    (105/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.977690498 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.677757237 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.975352213 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.974339624 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.983051953 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.053745306 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.114302427 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.976125423 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.038572533 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.982134008 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.976013302 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.079434764 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.976930864 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.978069331 seconds)
  done (took 432.787805187 seconds)
done (took 823.740044818 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.631229158 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.638963177 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.721840035 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.599313401 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.56884697 seconds)
  done (took 15.068352424 seconds)
done (took 16.978667452 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.004325409 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.993751692 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.982896472 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.028842359 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 2.002617611 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.989171767 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.022333733 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.021093038 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.005394948 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.988703055 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.025103439 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.993505059 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.005666393 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.010731854 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.052312716 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.013521654 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.996722633 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.984384608 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.032290772 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.9935213 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.993271052 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.991331161 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.988088654 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.027099266 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.060786429 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 2.000516405 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.989664517 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.029192804 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.999681105 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.023017004 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.047241339 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.012595982 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.02316981 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.053488122 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.034904084 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.059393454 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 2.002454298 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.050497508 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.996572723 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.062680533 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.036969741 seconds)
  done (took 84.523623633 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.985693118 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.121390754 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.195059785 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.015272357 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.987654808 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.205988714 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.038762395 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.115323617 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.122312736 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.19969084 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.202237374 seconds)
  done (took 25.106969613 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.987528285 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.12035056 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.20120461 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.022027185 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.989945228 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.230470262 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.047757205 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.116801871 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.13927681 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.200763781 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.226860922 seconds)
  done (took 25.199728782 seconds)
done (took 136.737983404 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.357891175 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.013184933 seconds)
  done (took 6.281527091 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.999747262 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.13583479 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.982316638 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.980801821 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.979819629 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.980970189 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.981424093 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.980192185 seconds)
  done (took 17.930539346 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.979889707 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.978953869 seconds)
    (3/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.980026259 seconds)
    (4/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.981414041 seconds)
    (5/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.979548445 seconds)
    (6/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.981583513 seconds)
    (7/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.980209614 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.97906113 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.98096487 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.980998707 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.980431942 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.981648231 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.981573627 seconds)
    (14/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.981756908 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.982436718 seconds)
    (16/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.980900669 seconds)
  done (took 33.600680895 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.982401027 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.982891582 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.983411521 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.984705013 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.983877227 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.982017133 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.981129148 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.982590234 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.981317984 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.981952928 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.98207068 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.982322657 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.98172434 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.982759435 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.983486621 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.982222336 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.981686324 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.984800698 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.985757189 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.981687679 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.984467801 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.981757417 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.984188137 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.985303177 seconds)
  done (took 49.503738921 seconds)
done (took 109.23668785 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.235799623 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.820307065 seconds)
  done (took 8.968309535 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.984933345 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.983672237 seconds)
  done (took 5.948406166 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.983328512 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.983292864 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.981878461 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.982219836 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.985286853 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.982523183 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.983837949 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.981787604 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.984540111 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.983424073 seconds)
  done (took 21.744925988 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.982574849 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.985634543 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.983418295 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.984652778 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.98300793 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.982755543 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.983629886 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.983329819 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.983273442 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.985945013 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.986397763 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.986475477 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.986096565 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.985629945 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.986270055 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.986475023 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.98674661 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.988003486 seconds)
  done (took 37.645401477 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.98628558 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.986515135 seconds)
  done (took 5.889127439 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.987051437 seconds)
    (2/7) benchmarking "second"...
    done (took 1.986894795 seconds)
    (3/7) benchmarking "month"...
    done (took 1.987538177 seconds)
    (4/7) benchmarking "year"...
    done (took 1.987492161 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.986867186 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.986486571 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.987830963 seconds)
  done (took 15.827514948 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.987656862 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.134420891 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.179548914 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.610709775 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.988522286 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.989854732 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.857012709 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.99000516 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.991362973 seconds)
  done (took 21.645773101 seconds)
done (took 119.586582532 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.849899399 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.990267606 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.22475158 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.07867774 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.065599733 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.285122192 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 7.017297951 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.582627581 seconds)
done (took 44.015173217 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.047090522 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.983874822 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.020441817 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.016815376 seconds)
  done (took 22.937623058 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.987275032 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.335460731 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.00918651 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.910078104 seconds)
  done (took 23.173965926 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.364671297 seconds)
    (2/2) benchmarking "read"...
    done (took 2.33324764 seconds)
  done (took 6.618012074 seconds)
done (took 61.698536079 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.984730845 seconds)
    (2/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.986613127 seconds)
    (3/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.9878334 seconds)
    (4/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.986609952 seconds)
    (5/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.987038801 seconds)
    (6/24) benchmarking ("one", "Float64")...
    done (took 1.98764397 seconds)
    (7/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.985306724 seconds)
    (8/24) benchmarking ("zero", "Float64")...
    done (took 1.987702962 seconds)
    (9/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.987111365 seconds)
    (10/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.986809175 seconds)
    (11/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.985785498 seconds)
    (12/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.986845211 seconds)
    (13/24) benchmarking ("zero", "Float32")...
    done (took 1.987456941 seconds)
    (14/24) benchmarking ("one", "Float32")...
    done (took 1.987374967 seconds)
    (15/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987770374 seconds)
    (16/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.98877468 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.987308251 seconds)
    (18/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987925259 seconds)
    (19/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.987835974 seconds)
    (20/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987233836 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.98957708 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987916325 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.98894057 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.987987409 seconds)
  done (took 49.613221732 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.988007674 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.989699956 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.974891604 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.988677928 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.989014134 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.987262414 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.98743306 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.989076828 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.988923733 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.98933828 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.988926805 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.988557631 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.987730772 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.988851582 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.986187926 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.987831439 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.988793752 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.988407988 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.988341688 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.988993943 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.99013383 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.988967522 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.990861231 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.988564693 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.990310308 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.989904691 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.989105481 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.989616552 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.988380191 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.987013924 seconds)
  done (took 61.566209004 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.989142433 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.990818962 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.990123146 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.989065971 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.990087977 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.989740613 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.989886758 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.990455928 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.991536755 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.989892519 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.990413063 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.992155712 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.990546124 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.991601701 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.991238519 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.989858657 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.989807988 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.989861093 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.991211831 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.990028806 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.990748163 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.989736109 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.99061531 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.989691622 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.989249731 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.98774708 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.991500494 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.989861238 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.991064432 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.992888667 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.990061971 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.992918254 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.991314466 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.990178683 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.990437544 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.994806921 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.991729864 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.992235208 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.992484419 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.99250651 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.991286013 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.99230137 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.992831101 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.993823504 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.993354032 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.995030661 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.994333642 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.992804519 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.994260934 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.994363002 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.99180791 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.992165323 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.994624888 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.992190645 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.993093796 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.993710286 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.993641388 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.994865363 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.994429934 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.994588975 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.994518417 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.991707297 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.993127146 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.994164183 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.993542813 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.994764938 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.994051613 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.995108735 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.992514374 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.994096778 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.993057681 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.994321093 seconds)
  done (took 145.345077658 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.995475715 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.994371708 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.995043854 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.993272237 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.995181822 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.993221152 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.992938286 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.994294689 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.99356705 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.994180987 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.994310221 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.994514892 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.995101002 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.994138728 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.995170241 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.994743653 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.993184526 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.994429405 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.995114123 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.994282597 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.994595671 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.994246082 seconds)
  done (took 45.796787624 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.993538433 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.995190316 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.99137194 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.99151871 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.996154988 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.99284747 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.997972221 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.995598822 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.995259171 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.994647987 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.996320026 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.99841474 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.993514327 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.994606517 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.996793782 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.994775938 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.995423697 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.996367377 seconds)
  done (took 37.833041258 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.997884561 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.995111819 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.99632817 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.995901081 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.996885906 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.996909701 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.995970081 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.998804972 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.99809819 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.997142455 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.995845073 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.995169855 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.994752742 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.995379231 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.994382046 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.995006245 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.998400538 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.997898603 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.997646851 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.998782871 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.996949506 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.997069906 seconds)
  done (took 45.849613423 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.99993559 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.9961439 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.99741832 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.997072331 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.996246886 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.997308451 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.998530573 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.997615697 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.996481226 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.997597768 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.996187656 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.997272732 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.99832835 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.998988271 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.996266576 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.999467239 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.998465788 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.999078602 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.998340171 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.999305953 seconds)
  done (took 41.882242241 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.001329867 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.998788518 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.999496396 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.000836093 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.997362811 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.998930076 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.001225204 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.99975363 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.001079282 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.003026546 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.999287918 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.000537078 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.00063829 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.000063208 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.000444125 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.000065298 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.998837938 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.998434217 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.998065325 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.001245487 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.00046901 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.99974273 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.000251338 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.999775726 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.001463529 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.002428555 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.999441144 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.999595721 seconds)
  done (took 57.929048057 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.000729616 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.999254737 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.998238107 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 2.000954775 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.998452925 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.999805705 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 2.00032012 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.998693943 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.998735026 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.000407599 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 2.000981471 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 2.001872455 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.001388206 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.997924917 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.998121786 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.999677591 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.99907928 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 2.000382246 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.001115184 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.000158192 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.999964414 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.999991985 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 2.000949882 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.000324917 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.001166195 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.999354996 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.000826062 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.000970724 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.000264245 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.982930877 seconds)
  done (took 61.911273311 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.018000201 seconds)
    (2/2) benchmarking "in"...
    done (took 2.022613672 seconds)
  done (took 5.971144241 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 2.000532101 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.000850856 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 2.002697092 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 2.002769846 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 2.002678551 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.999557983 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 2.001728828 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.002452799 seconds)
  done (took 17.943457044 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 2.003202318 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 2.007189355 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 2.003890787 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 2.001518148 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 2.000427469 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.010533581 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 2.004937579 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 2.003583547 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.003740059 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 2.004354913 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 2.006942474 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 2.008163877 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 2.010827587 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 2.006796348 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 2.004045551 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 2.00374626 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 2.003398078 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.003905491 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 2.006413841 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.988853339 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.007103264 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.003786242 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 2.004933421 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 2.003184379 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 2.004478133 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 2.007440709 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.015365337 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 2.004099334 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.007383286 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 2.003384791 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 2.014127143 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 2.006042198 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 2.004854903 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.00479864 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 2.004505724 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 2.003433219 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 2.012497311 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 2.006037418 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 2.003230219 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 2.004705768 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 2.007485127 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.00722776 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 2.008186657 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.012760893 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 2.005974332 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 2.004953184 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 2.006254141 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 2.006425358 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 2.004744667 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 2.010045226 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 2.014266839 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 2.004594752 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 2.005712832 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 2.004844944 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 2.0086838 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 2.006259362 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 2.005937861 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 2.00748335 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.012635754 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 2.013055783 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 2.01028293 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.027870647 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.015240378 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 2.006393243 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 2.007289189 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.016953665 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.031629373 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 2.009092661 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.008159941 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 2.006309098 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.014778845 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 2.005079584 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 2.006213104 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 2.006914537 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.02069937 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.016698864 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 2.008790929 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 2.006256424 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 2.006632367 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 2.007708364 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.007290329 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 2.007195712 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 2.004604848 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 2.007229474 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.016528382 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.033113724 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 2.009117242 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 2.007913423 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 2.009383145 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 2.009381939 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 2.012389152 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 2.00902955 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 2.008293764 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 2.00870475 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 2.009742069 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 2.010290903 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 2.007521931 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 2.008888291 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 2.007795058 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.018743269 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 2.00921896 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 2.007476242 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.012824484 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.016376055 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 2.007454585 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 2.008591355 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 2.010412156 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 2.00888065 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.015439324 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 2.008866829 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 2.010300415 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 2.007738204 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 2.011335959 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 2.013877192 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 2.008840789 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.013111203 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.019027372 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.016897341 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 2.011378782 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.014504327 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.012172414 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.01200103 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.0196242 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.0353608 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 2.009330831 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.013368867 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.016231724 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.021890673 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 2.015045533 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 2.010279813 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.012877512 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 2.011837335 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 2.0096678 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 2.012214256 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 2.010640019 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 2.010545358 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 2.009580358 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 2.011235831 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 2.010074452 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 2.01004074 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 2.013520931 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.012283236 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.013051267 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 2.009477013 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.014741009 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 2.008612351 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.013459306 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.017737879 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 2.011055349 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 2.010941604 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 2.011069372 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.01263257 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 2.012504369 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.012120146 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 2.010997346 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 2.011484567 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 2.011309923 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 2.012801413 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.012894905 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 2.011344863 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 2.011326721 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 2.012571846 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.015794295 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 2.011269126 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 2.011912338 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 2.013271651 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.012202931 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 2.012570964 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.014036453 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.012413451 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.014515987 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.012369394 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.017175722 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 2.010862543 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 2.011630593 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 2.012755502 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 2.012682302 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 2.012920907 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.016719225 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.02344658 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.016304834 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.023513991 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 2.013860068 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.022103632 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 2.014059197 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.016110217 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.014076471 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 2.012097258 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.013018679 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 2.014874577 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 2.016475076 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.017656811 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.037451326 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.025845294 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.01444874 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 2.015599404 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.020456337 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.018608532 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.019734511 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 2.014878018 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.01631459 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.014998257 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 2.01461657 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 2.014389473 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 2.014222742 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.018678783 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.014079936 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 2.014781026 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.017376808 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.015474495 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.015514187 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.014357805 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.014928445 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.016719399 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.01442564 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.01564738 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.014270753 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 2.015527729 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.022374651 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.017565533 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.01546117 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.016989275 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.017768569 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.016443071 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.016593788 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.016752393 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.019753453 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.017054816 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.016660406 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.023655895 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.017208537 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.016130796 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.016288642 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.017104796 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.018095537 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.016037548 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.019637859 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.025428066 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.019697302 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.015897193 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.023018556 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.015201672 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.019935601 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.018074394 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.017069749 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.017837518 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.019187415 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.017026242 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.017541937 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.023369968 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.017458079 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.018609696 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.018204968 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.021493771 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.019977721 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.020049307 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.018088464 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.021834279 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.026221697 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.024961876 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.017559628 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.019494859 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.021725969 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.019041386 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.020858629 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.018970721 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.032799083 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.027974827 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.016771995 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.01845171 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.017668067 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.021275865 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.018731081 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.017271076 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.026198872 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.020433807 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.02094993 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.02198046 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.01727036 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.019607794 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.026869762 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.019619115 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.022226983 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.019832922 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.020251026 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.020150716 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.020579092 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.019676192 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.018712495 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.020889883 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.024882112 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.01803792 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.020076283 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.020108474 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.028677178 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.019906596 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.021017006 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.028155048 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.022072085 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.019793913 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.021016192 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.019460568 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.020060369 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.02040514 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.020393469 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.022455239 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.021162406 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.023957796 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.032432543 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.024854544 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.030594716 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.021159614 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.030658037 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.020287274 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.019421035 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.021202726 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.02502084 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.029637663 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.019268742 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.020189424 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.02911476 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.021346805 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.009671176 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.026032096 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.019887841 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.015651145 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.021478888 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.023299743 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.026793282 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.024634384 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.021327199 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.02144414 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.020892476 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.021454057 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.024274686 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.00982913 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.023315282 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.021989547 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 2.021773155 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.022660288 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.02195803 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.023786381 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.022440332 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 2.02233545 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.022469356 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.031341175 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.023679152 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.024920147 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.060274687 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.022561619 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.031305606 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 2.023081595 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.023759526 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.035542417 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.022802638 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.026780513 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.02220651 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.023133466 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.033013204 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.020673873 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.022002766 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.032840608 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.028836213 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.027386861 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.022572761 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.020991548 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.022808053 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.035177707 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.043642106 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.021168649 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.023496877 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.025198317 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.032681556 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.022415311 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.026422611 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.023367897 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.028204057 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.024484489 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.020439315 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.023556771 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.034515242 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.020240847 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.022290888 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.019020481 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.02457786 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.02305745 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.02091567 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.027565998 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.02329821 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.022388952 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.031788066 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.020356343 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.023215772 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.020471259 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.020363695 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.023107387 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.021458036 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.023221168 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.02170865 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.019965814 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.020947556 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 2.021732652 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.025713699 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.019542061 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.023625903 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.028574326 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.020353202 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.022033319 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.02214453 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.019153212 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.019840007 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.019945208 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.02046451 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.022944215 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.019514263 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.020393698 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.0228941 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.032408003 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.021108232 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.017661935 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.020000392 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.023467841 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.020528583 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.020267379 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.019589129 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.030534325 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.022074176 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.031597845 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.025721007 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.018660284 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.018780627 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.026569067 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.027843085 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.017357828 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.017984708 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.017906304 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.022703154 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.023796269 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.018629553 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.016817033 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.020157376 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.024034599 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.023505361 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.01607596 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.018321581 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.016200729 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.019519609 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.019714896 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.02266052 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.015852033 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.017017737 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.014328298 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.018331714 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.017563837 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.019457274 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.017009929 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.017153086 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.022491894 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.019215013 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.021694621 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.01812503 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.004603403 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.020587124 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.016876462 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.017190092 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.018462923 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.021879071 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.01684722 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.021886505 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.024010971 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.017261875 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.02241378 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.018531873 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.022043604 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.014927367 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.015706116 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.017574967 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.016728507 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.024771404 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.015841553 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.017401278 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.017695331 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.015662424 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.023150723 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.018525725 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.020467145 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.019813493 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.019214969 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.018690288 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.020965087 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.027451507 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.027377404 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.989687695 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.022908763 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.022594922 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.016484202 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.022136135 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.016412459 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.017500509 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.013449731 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.021417937 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.018395448 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.014571894 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.012414231 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.010733034 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.011015324 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.020814747 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.011460587 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.012520081 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.015554707 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.019274128 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.025661031 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.012517355 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.012199341 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.013175948 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.014856524 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.025614117 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.012858068 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.014912001 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.009591501 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.012842161 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.018276271 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.016575831 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.017756015 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.015385967 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.009305081 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.021676091 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.027530781 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.013473966 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.021203385 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.040164546 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.017725054 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.00452851 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.997595326 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.008019411 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.007698993 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.018288727 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.010828109 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.016921129 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.008160418 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.009471514 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.022182372 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.011984262 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.013141042 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.008439961 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.011351938 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.017489441 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.008500414 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.017294281 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.013471672 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.008003571 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.011521331 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.011901576 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.007240079 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.00866229 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.00936334 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.011118514 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.008003427 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.00795798 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.018452862 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.010132106 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.015973527 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.022347539 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.020513335 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.009090149 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.45817562 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.008713166 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.013059452 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.01154385 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.008323868 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014792043 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.015996099 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.01094404 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.016534116 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.008445316 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.014464328 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.00882786 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.01002723 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.00810548 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.021308492 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.02203282 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.008828702 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.010112178 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.015021648 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.009860836 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.025628007 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.014141188 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.00810561 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.011153201 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.009866521 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.011072507 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.007160791 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.00801882 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.012930671 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.01690543 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.010563865 seconds)
  done (took 1204.248023891 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.008710922 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.008652698 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.009280051 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.026546977 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.008804804 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.01095461 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.010582871 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.008411759 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.014825941 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.009264067 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.009969427 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.00890913 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.009891349 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.017463947 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.009235476 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.007884167 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.009446047 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.010170732 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.017223957 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.009923955 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.009487864 seconds)
  done (took 44.170491906 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.008823492 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.01274643 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.012414009 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.012450543 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.00934965 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.009121056 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.015034604 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.011573222 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.01211069 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.011437062 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.0123117 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.016846905 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.013521519 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.010290556 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.013709536 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.015188998 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.016375231 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.014115333 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.014097169 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.010328457 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.013851146 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.014457105 seconds)
  done (took 46.215451303 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.016700004 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.017633891 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.01846971 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.018116765 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.01631371 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.016750214 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.013971182 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.019874579 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.023122251 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.013495607 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.021547517 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.01925378 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.0159047 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.023336621 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.015389265 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.016469015 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.16075907 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.013884994 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.017007341 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.013229835 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.013231841 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.018175664 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.011716384 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.015274817 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.015253195 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.012272 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.012974782 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.012335394 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.016508494 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.012750719 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.017056367 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.012332369 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.016533244 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.022706816 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.016310926 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.021393695 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.027989457 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.023428651 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.025279115 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.019967134 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.028781971 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.04261405 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.021442386 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.023719772 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.027229003 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.019960121 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.02065581 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.020332395 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.029389223 seconds)
  done (took 101.014843916 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.021440117 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.020882784 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.019716712 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.024435921 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.017370035 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.022069765 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.019237688 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.023070729 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.024373592 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.01621613 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.015644791 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.020797473 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.020275938 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.018968474 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.015315128 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.016213874 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.015184285 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.015612739 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.014575257 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.012159025 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.012608036 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.013755419 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.011276734 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.017576785 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.015226591 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.016050086 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.014554434 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.015697939 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.018166439 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.015042997 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.013993371 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.013736833 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.01909545 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.013981458 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.015016145 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.01437374 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.012692289 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.019922415 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.015115787 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.01599767 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.014768172 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.016656444 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.018181353 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.016488785 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.015753119 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.018694813 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.015835456 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.023073561 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.01618071 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.02176882 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.01722253 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.018118237 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.019902847 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.017496856 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.015081134 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.018229842 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.02106153 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.017529208 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.018756109 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.018044267 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.017089686 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.017694596 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.017869642 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.019406565 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.018935079 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.016860333 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.018818426 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.021478092 seconds)
  done (took 139.128969052 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.025412293 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.022444063 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.0229717 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.027282173 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.026645725 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.026520096 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.026242069 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.025067598 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.025214682 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.027046633 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.022922404 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.025313819 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.023884274 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.025861194 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.025309057 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.025770692 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.026418836 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.023914681 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.029019348 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.026577319 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.025243281 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.025453103 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.026201207 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.029753197 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.028064438 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.028554424 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.025773565 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.025381795 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.030012621 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.026211967 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.028128765 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.026280928 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.027274342 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.028196754 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.027880458 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.025149993 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.027850617 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.028028682 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.030990969 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.027896644 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.027963962 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.027036932 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.026581995 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.026793052 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.027818629 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.028576118 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.02698409 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.028366894 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.028733948 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.026513717 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.029148463 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.029140468 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.027582619 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.028259707 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.026975785 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.027615531 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.026566397 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.031047618 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.029272572 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.02826905 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.028963751 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.029232823 seconds)
  done (took 127.628525979 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.027649305 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.028181556 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.028695428 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.027547511 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.029462136 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.028172139 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.028866124 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.029770824 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.028370215 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.028773082 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.02864767 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029514801 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030874781 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.028372299 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.030479985 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.030088448 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029653404 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.029189139 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.028445831 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.029053141 seconds)
  done (took 42.537322894 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.02899869 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.027927929 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.028966059 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.031064093 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.027514039 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.02814849 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.028951952 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.031000925 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.030028368 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.02532521 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.031848266 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.020154486 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.026151944 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.030592849 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.029029091 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.029842858 seconds)
  done (took 34.411076419 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.027059795 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.031087677 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.031867182 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.030238898 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.029951536 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.031861608 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.031198002 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.028979643 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.029491478 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.031462698 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.030195753 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.03151789 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.030651732 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.029633614 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.03075763 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.031219383 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.030815227 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.031360779 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.030996608 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.030091893 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.032008707 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.030377369 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.031436815 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.031688085 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.031567499 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.033021524 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.033725954 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.03240994 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.032543867 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.030058796 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.032793951 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.031641997 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.034313441 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.031089019 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.031620943 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.031733901 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.031251147 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.032299209 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.032800816 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.032554916 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.034468899 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.032063641 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.032499982 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.031842873 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.032008957 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.036207685 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.033747814 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.032016985 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.032570309 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.034358933 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.038723381 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.033325405 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.032648233 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.032886357 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.031552144 seconds)
  done (took 113.702041565 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.031468299 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.033783319 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.032745346 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.033176362 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.03572328 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.032657905 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.033364187 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.03275288 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.034375807 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.037851579 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.03399802 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.031737117 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.032914609 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.033836881 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.035106464 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.033305926 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.034825004 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.034245175 seconds)
  done (took 38.57076654 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.037349457 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.032082329 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.034543681 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.032485334 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.03517953 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.040300725 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.035068779 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.035105156 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.03428292 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.034128715 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.038653657 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.035116076 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034867415 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.03473133 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.036880916 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.036528525 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.036175767 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.035716607 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.038083403 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.039999057 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.034652114 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.034343168 seconds)
  done (took 46.747787417 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.036031941 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.039163473 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.048590362 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.05323821 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.052147238 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.063709293 seconds)
  done (took 14.255394776 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034094241 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036279136 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.035685812 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036384822 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.033832452 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.0355491 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036237556 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035912017 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03498231 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037758164 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036926109 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035717184 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037039562 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03709463 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035451655 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036008907 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035821658 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026234003 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.025950969 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.03847305 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03526923 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037929575 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037901591 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037190457 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034993162 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036674222 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035976325 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023383407 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034869511 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036738871 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035926993 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035666839 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036654229 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038997675 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039360802 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036970466 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.036528423 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038086945 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.037459152 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.040248741 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.037599715 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036899905 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.037500001 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038514686 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035488544 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037041432 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037166616 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.038145348 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035659909 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035076204 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035676399 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034347811 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.037054056 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.039019136 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036610064 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033572679 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.036739232 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.015669055 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038211853 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033835861 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.037154843 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034598868 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.034034869 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.037319154 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.030955878 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033060981 seconds)
  done (took 136.310697507 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035303059 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.032991076 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.031897758 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.03255751 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.033709859 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031792772 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035072565 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.032227454 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.031848196 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.031454399 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.032944406 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031917424 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.032831344 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.033321387 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034390421 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.03206278 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.035805752 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.032890152 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.032087304 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03226029 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032933798 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.03497113 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033529411 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033153317 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031938328 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.032080692 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.032675328 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.034003249 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.031867808 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035133737 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034374272 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.025508745 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.034828639 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.034231583 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.033980371 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033293805 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.035990516 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.03605927 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.034273211 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035199294 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.035538107 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.034396084 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.035317038 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033745459 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.036605372 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.033472563 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035515492 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.033550064 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.035796901 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035639395 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.039781612 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037036584 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.03530583 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.034968728 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035370796 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.036096579 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.035926817 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.038332897 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036427999 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.036045212 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.038998374 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.04082019 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.035007903 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.035477177 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.036613128 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.037837097 seconds)
  done (took 136.227312682 seconds)
done (took 2798.737548944 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.122413662 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.09202672 seconds)
  done (took 16.17739317 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.199651202 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.152521411 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.040034985 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.043332189 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.039330022 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.062944819 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.061567168 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.037179517 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.037491377 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.038686274 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.0373384 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.223185191 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.100423739 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.038013004 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.038769925 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.129426578 seconds)
  done (took 55.243453896 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.042002676 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.046364935 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.051117596 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.044396629 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.042845959 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.056351344 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.075188661 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.047746266 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.080009506 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.060358317 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.1118251 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.050046817 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.042823 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.093078417 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.05723348 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.059308224 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.137177055 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.11548194 seconds)
  done (took 39.171755491 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.120750578 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.047744858 seconds)
  done (took 11.132700363 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.069612677 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.047886787 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.049304002 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.034626737 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.048848128 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.06488518 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.073177941 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.05501703 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.041110361 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.069150007 seconds)
  done (took 72.536489469 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.050011184 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.042948233 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.045666801 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.041434032 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.036757166 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.041388223 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.039396895 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.044483512 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.733019959 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.077285672 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.053099447 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.053447921 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.042314799 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.044861567 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.039765527 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.071482031 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.205594334 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.037905141 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.038388749 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.047163615 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.044865362 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.119738902 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.052817139 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.042414523 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.073267432 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.732565286 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.051844358 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.048547984 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.190120817 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.039804207 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.043878521 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.201444092 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.047813565 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.485327964 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.367981692 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.045541103 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.05361312 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.050502566 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.040831341 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.22442284 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.046442779 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.049341402 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.977912085 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.353925486 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.138077043 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.08782516 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.411277586 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.049656081 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.046883362 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.076540015 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.054186297 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.047597659 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.062376689 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.563430367 seconds)
  done (took 142.674471113 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.045591226 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.277438723 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.197031422 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.041081072 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.299325732 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.249473346 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.044497757 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.087367868 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.047165496 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.246962526 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.297188965 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.146624479 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.043598546 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.045836914 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.043038537 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.04074339 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.190770762 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.113614056 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.042848579 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.040121434 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.068914333 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.244246375 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.164048623 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.05111414 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.071636729 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.251616752 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.165155103 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.15058836 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.850876922 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.046667579 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.107203098 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.047107347 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.046025175 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.045531563 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.195495763 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.141527421 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.127133401 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.045488636 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.044728015 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.047342986 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.717928652 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.243032599 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.140950108 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.169191232 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.297526995 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.263975495 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.65874316 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.046232262 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.677077672 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.211326556 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.254375433 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.253199387 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.163889805 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.050667385 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.346552928 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.048135021 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.050847891 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.267998409 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.265085083 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.149615485 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.046900474 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.048742104 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.046278811 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.28645197 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.051504208 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.140311865 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.051985704 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.048893901 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.141540629 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.150272289 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.276516678 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.266093196 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.077570677 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.366434229 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.545497398 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.253967537 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.1120928 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.267206795 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.053732395 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.047347627 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.12634055 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.886854939 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.305419325 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.291374903 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.249724627 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.07654661 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.700682106 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.049969183 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.237093314 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.237189938 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.283127221 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.29984686 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.289180967 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.416079369 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.048001682 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.049314206 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.363428943 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.168980163 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.993645062 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.387646237 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.279208465 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.575540266 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.076582427 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.336077028 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.183612338 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.034746982 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.68129329 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.049625887 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.24931784 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.088678297 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.052500326 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.050703976 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.240342922 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.955897677 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.050343751 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.757246524 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.112039955 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.05064451 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.253992846 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.051796156 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.294642923 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.053528956 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.284190345 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.93141975 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.080978411 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.225248912 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.299276898 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.677476982 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.364495528 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.292416756 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.165518708 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.270132805 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.852147807 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.047990979 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.313495281 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.059356875 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.051157239 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.219971577 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.051249963 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.191225768 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.055939857 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.317184399 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.073082082 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.278446834 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.054280949 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.294961583 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.083244983 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.099004657 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.054250416 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.171432622 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.056035602 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.90167548 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.213986981 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.050959075 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.054936679 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.637904887 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.054340531 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.205340868 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.278063942 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.073099691 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.123601731 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.61733715 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.052042607 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.140289608 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.07192759 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.68024222 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.052442526 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.303985466 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.010470791 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.526836653 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.053253155 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.288851483 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.238451483 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.056710213 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.051657008 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.896978086 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.054564191 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.052613232 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.20580417 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.462973754 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.95817758 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.251124642 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.06162977 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.178335668 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.053504717 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.136820097 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.393023913 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.051644902 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.052434941 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.054863694 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.054850536 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.053545996 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.259571194 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.08179466 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.486953391 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.186821487 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.306157323 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.35852681 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.252879291 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.092490108 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.057164441 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.272116425 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.059286081 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.112916155 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.052936036 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.07395552 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.280673182 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.054681561 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.255540825 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.291401823 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.942582633 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.099808871 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.061358094 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.053177757 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.961169393 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.197255566 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.129454965 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.053159442 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.053735213 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.172372387 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.176806277 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.236863321 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.866746147 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.220059653 seconds)
  done (took 941.311149933 seconds)
done (took 1280.21322917 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.056651268 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.056223534 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.055608238 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.054552932 seconds)
  done (took 30.197444589 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.05971469 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.054019423 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.058177973 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.056268677 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.055161893 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.055359264 seconds)
  done (took 14.314856904 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.056401405 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.055429982 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.056450695 seconds)
  done (took 23.145433639 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.130611023 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.470510749 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.200557291 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.487987874 seconds)
  done (took 11.269974352 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.057464349 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.05465108 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.056371381 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.056449537 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.059818828 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.059206664 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.060331777 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.057661025 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.060294954 seconds)
  done (took 20.50335996 seconds)
  (6/6) benchmarking "26942"...
  done (took 5.255816867 seconds)
done (took 106.669675176 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.188053588 seconds)
    (2/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.691973136 seconds)
    (3/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.183859127 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.070271086 seconds)
    (5/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.435247096 seconds)
    (6/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.055351893 seconds)
    (7/341) benchmarking ("perf_sum", Bool, true)...
    done (took 3.302596111 seconds)
    (8/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.183177497 seconds)
    (9/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.304196488 seconds)
    (10/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.054875411 seconds)
    (11/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.107695892 seconds)
    (12/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.198981877 seconds)
    (13/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.299732782 seconds)
    (14/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.116296436 seconds)
    (15/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.070893295 seconds)
    (16/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.068582029 seconds)
    (17/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.646998532 seconds)
    (18/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.194273798 seconds)
    (19/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.192072887 seconds)
    (20/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.152661465 seconds)
    (21/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.233664853 seconds)
    (22/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.153286923 seconds)
    (23/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.070448014 seconds)
    (24/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.20164785 seconds)
    (25/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.142037252 seconds)
    (26/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.291595358 seconds)
    (27/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.068988086 seconds)
    (28/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.793180279 seconds)
    (29/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.263699808 seconds)
    (30/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.159321532 seconds)
    (31/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.135836419 seconds)
    (32/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.153921808 seconds)
    (33/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.058774534 seconds)
    (34/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 3.692753607 seconds)
    (35/341) benchmarking ("sort", Float32, false)...
    done (took 5.711301083 seconds)
    (36/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.087626359 seconds)
    (37/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.075840781 seconds)
    (38/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.441420903 seconds)
    (39/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.200429238 seconds)
    (40/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.703230776 seconds)
    (41/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.160299581 seconds)
    (42/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.201829358 seconds)
    (43/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.798152964 seconds)
    (44/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.311299326 seconds)
    (45/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.133967332 seconds)
    (46/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.053040363 seconds)
    (47/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.479012838 seconds)
    (48/341) benchmarking ("sort", Bool, false)...
    done (took 2.275368735 seconds)
    (49/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.057988394 seconds)
    (50/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.821432237 seconds)
    (51/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.074532441 seconds)
    (52/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.192750717 seconds)
    (53/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.907179834 seconds)
    (54/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.213282144 seconds)
    (55/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.353845656 seconds)
    (56/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.049761504 seconds)
    (57/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.593300423 seconds)
    (58/341) benchmarking ("sort", Int64, false)...
    done (took 5.675896931 seconds)
    (59/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.244932511 seconds)
    (60/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.309429006 seconds)
    (61/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.062370856 seconds)
    (62/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.210420583 seconds)
    (63/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.077077844 seconds)
    (64/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.259918001 seconds)
    (65/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.06174481 seconds)
    (66/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.161043983 seconds)
    (67/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.090578483 seconds)
    (68/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.148121363 seconds)
    (69/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.151873035 seconds)
    (70/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.184395466 seconds)
    (71/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.322066301 seconds)
    (72/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.183792705 seconds)
    (73/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.371339945 seconds)
    (74/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.066060415 seconds)
    (75/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.434963978 seconds)
    (76/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.57989049 seconds)
    (77/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.769348061 seconds)
    (78/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.166659347 seconds)
    (79/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.075987961 seconds)
    (80/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.062132045 seconds)
    (81/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.062167621 seconds)
    (82/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.856644466 seconds)
    (83/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.432456371 seconds)
    (84/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.448746605 seconds)
    (85/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.369083811 seconds)
    (86/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.490641717 seconds)
    (87/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.141973827 seconds)
    (88/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.062473981 seconds)
    (89/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 8.203538283 seconds)
    (90/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.241273657 seconds)
    (91/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.27627435 seconds)
    (92/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.383575619 seconds)
    (93/341) benchmarking ("sort", Float64, false)...
    done (took 5.775287431 seconds)
    (94/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.193308694 seconds)
    (95/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.161151219 seconds)
    (96/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.144736195 seconds)
    (97/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.314800805 seconds)
    (98/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.455381977 seconds)
    (99/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.072820675 seconds)
    (100/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.026407562 seconds)
    (101/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.149602498 seconds)
    (102/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.046422652 seconds)
    (103/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.190476202 seconds)
    (104/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.129542232 seconds)
    (105/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.475075343 seconds)
    (106/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.017516475 seconds)
    (107/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.066784988 seconds)
    (108/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.413085846 seconds)
    (109/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.463485351 seconds)
    (110/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.947300074 seconds)
    (111/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.614160487 seconds)
    (112/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.211143256 seconds)
    (113/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.848367712 seconds)
    (114/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.180941548 seconds)
    (115/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.061220954 seconds)
    (116/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.459100641 seconds)
    (117/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.222216543 seconds)
    (118/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.310931925 seconds)
    (119/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.075334828 seconds)
    (120/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.26858214 seconds)
    (121/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.346349152 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.388275485 seconds)
    (123/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.327243836 seconds)
    (124/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.098655652 seconds)
    (125/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.426434675 seconds)
    (126/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.080289213 seconds)
    (127/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.832436533 seconds)
    (128/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.771175245 seconds)
    (129/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.357632167 seconds)
    (130/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.935591672 seconds)
    (131/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.465541839 seconds)
    (132/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.405023855 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.36551251 seconds)
    (134/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.753694465 seconds)
    (135/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.180213839 seconds)
    (136/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.076982054 seconds)
    (137/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.069216182 seconds)
    (138/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.334071337 seconds)
    (139/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.197015746 seconds)
    (140/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.939978713 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.535452224 seconds)
    (142/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.985609434 seconds)
    (143/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.335831281 seconds)
    (144/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.08240059 seconds)
    (145/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.520817394 seconds)
    (146/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.067991412 seconds)
    (147/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.251824089 seconds)
    (148/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.077930876 seconds)
    (149/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.940765465 seconds)
    (150/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.077222145 seconds)
    (151/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.282528 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.319506812 seconds)
    (153/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.657085466 seconds)
    (154/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.389596985 seconds)
    (155/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.07659607 seconds)
    (156/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.325683863 seconds)
    (157/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.76770852 seconds)
    (158/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.358307409 seconds)
    (159/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.065348003 seconds)
    (160/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.14351583 seconds)
    (161/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.305264657 seconds)
    (162/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.151388334 seconds)
    (163/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.2000544 seconds)
    (164/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.068218375 seconds)
    (165/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.404972692 seconds)
    (166/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.081876944 seconds)
    (167/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.364385319 seconds)
    (168/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.086467702 seconds)
    (169/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.406334845 seconds)
    (170/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.30170586 seconds)
    (171/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.096426561 seconds)
    (172/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.343357081 seconds)
    (173/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.542321619 seconds)
    (174/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.38203042 seconds)
    (175/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.073934006 seconds)
    (176/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 4.127140851 seconds)
    (177/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.436747548 seconds)
    (178/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.068814741 seconds)
    (179/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.088108371 seconds)
    (180/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.151300857 seconds)
    (181/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.068474708 seconds)
    (182/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.121129585 seconds)
    (183/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.904392645 seconds)
    (184/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.179414672 seconds)
    (185/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.205715978 seconds)
    (186/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.991621502 seconds)
    (187/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.478555601 seconds)
    (188/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.362433232 seconds)
    (189/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.29853386 seconds)
    (190/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.546544894 seconds)
    (191/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.910438221 seconds)
    (192/341) benchmarking ("sort", BigInt, false)...
    done (took 7.177056993 seconds)
    (193/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.0935622 seconds)
    (194/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.078369067 seconds)
    (195/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.083487041 seconds)
    (196/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.672604029 seconds)
    (197/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.49998267 seconds)
    (198/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.077824256 seconds)
    (199/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.485139461 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.375722497 seconds)
    (201/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.199257022 seconds)
    (202/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.213165675 seconds)
    (203/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.469160146 seconds)
    (204/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.27843102 seconds)
    (205/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.663391891 seconds)
    (206/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.225637942 seconds)
    (207/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.542384111 seconds)
    (208/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.080186619 seconds)
    (209/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.253156873 seconds)
    (210/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.184481284 seconds)
    (211/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.071473429 seconds)
    (212/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 3.881672148 seconds)
    (213/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.331111848 seconds)
    (214/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.251901718 seconds)
    (215/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.368652935 seconds)
    (216/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.137714912 seconds)
    (217/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.284570965 seconds)
    (218/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.088374554 seconds)
    (219/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.863842113 seconds)
    (220/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.075916355 seconds)
    (221/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.46120322 seconds)
    (222/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.446138032 seconds)
    (223/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 8.113981955 seconds)
    (224/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.134277618 seconds)
    (225/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.153111669 seconds)
    (226/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.881203064 seconds)
    (227/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.272232022 seconds)
    (228/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.864678306 seconds)
    (229/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.974285503 seconds)
    (230/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.184470923 seconds)
    (231/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.254757303 seconds)
    (232/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.079379333 seconds)
    (233/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.616855655 seconds)
    (234/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.092356614 seconds)
    (235/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.173797986 seconds)
    (236/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.047917229 seconds)
    (237/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.227109952 seconds)
    (238/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.332493858 seconds)
    (239/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.299932364 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.027422819 seconds)
    (241/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.39300866 seconds)
    (242/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.206196901 seconds)
    (243/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.312186206 seconds)
    (244/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.180688607 seconds)
    (245/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.089600491 seconds)
    (246/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.075888574 seconds)
    (247/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.574021794 seconds)
    (248/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.441756602 seconds)
    (249/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.208900913 seconds)
    (250/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.817502541 seconds)
    (251/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.156024785 seconds)
    (252/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.378517761 seconds)
    (253/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.043957987 seconds)
    (254/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.365027022 seconds)
    (255/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.074399773 seconds)
    (256/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.079592482 seconds)
    (257/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.379232767 seconds)
    (258/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.080053438 seconds)
    (259/341) benchmarking ("map", identity, Int8, false)...
    done (took 3.615614832 seconds)
    (260/341) benchmarking ("sort", Int8, false)...
    done (took 5.029030036 seconds)
    (261/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.196104867 seconds)
    (262/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.172195144 seconds)
    (263/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.499391417 seconds)
    (264/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.464009725 seconds)
    (265/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.075031502 seconds)
    (266/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.206968061 seconds)
    (267/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.080719929 seconds)
    (268/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.07096127 seconds)
    (269/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 9.680703627 seconds)
    (270/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.37448369 seconds)
    (271/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.216526702 seconds)
    (272/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.395300244 seconds)
    (273/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.242762698 seconds)
    (274/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.332308542 seconds)
    (275/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.140133301 seconds)
    (276/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.668476556 seconds)
    (277/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.084731251 seconds)
    (278/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.073752013 seconds)
    (279/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 3.914692023 seconds)
    (280/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.159562665 seconds)
    (281/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.171991236 seconds)
    (282/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.190800228 seconds)
    (283/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.354366613 seconds)
    (284/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.096491388 seconds)
    (285/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.226005098 seconds)
    (286/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.473730476 seconds)
    (287/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.883218132 seconds)
    (288/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.326448555 seconds)
    (289/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.212874997 seconds)
    (290/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.181117049 seconds)
    (291/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.831963245 seconds)
    (292/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.370105079 seconds)
    (293/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.099215088 seconds)
    (294/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.315382558 seconds)
    (295/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.083663362 seconds)
    (296/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.243086754 seconds)
    (297/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.091562728 seconds)
    (298/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.074772 seconds)
    (299/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.189598988 seconds)
    (300/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.386254349 seconds)
    (301/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.428711328 seconds)
    (302/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.960366867 seconds)
    (303/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.718734495 seconds)
    (304/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.228004892 seconds)
    (305/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.100612052 seconds)
    (306/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.181061284 seconds)
    (307/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.217538463 seconds)
    (308/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.167267266 seconds)
    (309/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.447913312 seconds)
    (310/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.61898406 seconds)
    (311/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.258600388 seconds)
    (312/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.403446814 seconds)
    (313/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.146326486 seconds)
    (314/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.360337944 seconds)
    (315/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.173679065 seconds)
    (316/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.09412193 seconds)
    (317/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.714275926 seconds)
    (318/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.333639947 seconds)
    (319/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.078731626 seconds)
    (320/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.390739941 seconds)
    (321/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.338670552 seconds)
    (322/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.153432603 seconds)
    (323/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.362647322 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.901920633 seconds)
    (325/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.074008429 seconds)
    (326/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.282618062 seconds)
    (327/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.099609421 seconds)
    (328/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.062921546 seconds)
    (329/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.158746888 seconds)
    (330/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.254789909 seconds)
    (331/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.290560626 seconds)
    (332/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.086177569 seconds)
    (333/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.846631208 seconds)
    (334/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.093919353 seconds)
    (335/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.214164758 seconds)
    (336/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.262732719 seconds)
    (337/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.369642271 seconds)
    (338/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.741079728 seconds)
    (339/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.182246742 seconds)
    (340/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.172846219 seconds)
    (341/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.338471959 seconds)
  done (took 1160.572289839 seconds)
done (took 1162.671245177 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.109704132 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.103864714 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.087177342 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.1062592 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.196858611 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.131078927 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.094391281 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.089850549 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.1326725 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.13628823 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.088172128 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.129826144 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.089975362 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.085991068 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.082583677 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.10298071 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.44314382 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.123596842 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.103145977 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.097830913 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.10047538 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.083904118 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.135663869 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.136996236 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.090629764 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.090903448 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.089184426 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.10576381 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.200102067 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.0890785 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.088652339 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.101890134 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.448204203 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.12122505 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.085485873 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.103004377 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.099404569 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.099352386 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.088591292 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.125005164 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.593617253 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.094589832 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.085681242 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.087300477 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.089432833 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.095619143 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.087459341 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.09864176 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.109423304 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.104557927 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.581021955 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.111574318 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.090181702 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.085018327 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.101048136 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.084611146 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.09804294 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.108377013 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.105558735 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.107638963 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.426336649 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.137816972 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.096809152 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.105683689 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.098368881 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.661420902 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.106219857 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.096253932 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.599319985 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.10273583 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.660339712 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.119736867 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.093684963 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.104834487 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.125798676 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.447004093 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.126369399 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.090499506 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.099168709 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.089904403 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.102974359 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.107062722 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.095139028 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.095852855 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.106924224 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.145028774 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.102199373 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.098672254 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.102515418 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.10880721 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.096874067 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.102896323 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.096528569 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.089767072 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.10696253 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.096631961 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.098994135 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.096566071 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.096888675 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.106869266 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.597774552 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.115512275 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.08883009 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.091340556 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.092598963 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.107734265 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.599039957 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.101974996 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.118788602 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.142617886 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.089469536 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.427618857 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.130388433 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.10757704 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.100133173 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.091853899 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.086364361 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.428445353 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.622300166 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.108680303 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.090647424 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.087015624 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.109325294 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.090050723 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.085759912 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.448274753 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.12935045 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.10677513 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.211552805 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.1030163 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.121484132 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.088428304 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.09376012 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.138259296 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.107954169 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.122443035 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.090181561 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.108401385 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.106488265 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.085710689 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.099676065 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.101124919 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.089871655 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.097832482 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.086237019 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.139116746 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.106307495 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.10785562 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.112165731 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.215174718 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.088008178 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.430853944 seconds)
done (took 328.842445886 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.145839675 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.084295874 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.154038332 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.086071569 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.151264704 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.136647339 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.085210171 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.08468549 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.085474766 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.467255728 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.084382358 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.091711156 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.084884944 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.087031982 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.134547812 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.085135715 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.086506853 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.316812312 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.087031043 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.141676224 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.086055431 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.088115452 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.086576294 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.474208173 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.083948052 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.084984822 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.144407616 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.087075266 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.325891905 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.085634488 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.085352251 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.326331677 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.143685374 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.097375705 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.096644953 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.091558494 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.152982946 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.095181459 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.132235885 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.133763386 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.156893359 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.118898637 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.085835166 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.087093425 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.090559508 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.089196327 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.088338664 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.118347459 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.085222228 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.093349327 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.318599562 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.093215193 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.094390022 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.089530646 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.088970849 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.099996983 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.088988652 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.088321599 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.146181475 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.089139431 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.134332941 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.476855718 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.469449442 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.088110672 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.088379221 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.088202176 seconds)
  done (took 198.143476846 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.154312206 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.163008499 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.155139323 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.092691716 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.139091823 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.157327684 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.093145536 seconds)
  done (took 16.960324066 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.09506388 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.090029029 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.11173011 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.111100933 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.089885885 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.228992807 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.100183518 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.094242022 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.1168303 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.089975249 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.425664857 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.111617167 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.096884829 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.089500031 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.100115416 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.117440242 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.091087559 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.091060983 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.186308124 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.166719155 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.094962813 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.098164796 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.120180313 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.103191806 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.08989358 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.092377466 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.090908124 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.09867247 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.09048569 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.090449245 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.089994528 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.10347041 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.091791104 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.091416534 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.090742481 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.09191247 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.090365138 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.091962709 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.089675458 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.090605399 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.090044814 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.091757632 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.092519445 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.090612353 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.09109456 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.114962239 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.093067952 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.090678362 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.091595179 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.091485707 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.121850934 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.093287822 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.090219823 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.095951757 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.13300279 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.098949512 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.091056968 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.091126981 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.092711649 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.0909179 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.091448421 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.170786302 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.115845932 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.091814132 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.116182823 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.132250935 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.091567706 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.091985438 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.091337557 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.118556629 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.093051701 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.115591199 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.091223775 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.192701894 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.094618493 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.234676028 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.116333708 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.095852198 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.095009392 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.092246358 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.099716791 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.094119164 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.095545522 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.100116039 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.097416107 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.092861318 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.094116403 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.093721784 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.100575819 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.091267835 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.144660899 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.095120106 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.094491213 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.191324171 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.093659855 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.189842659 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.120465324 seconds)
  done (took 226.664480469 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.099219342 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.098526624 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.097958968 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.107037318 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.094169699 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.094131194 seconds)
  done (took 14.602143426 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.096580048 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.098219379 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.093607269 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.092594183 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.093314762 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.094647792 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.094017753 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.097184061 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.098207474 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.094352303 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.095640868 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.095588362 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.095730129 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.094943313 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.094773988 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.094716772 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.094854148 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.094739477 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.093751866 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.09454108 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.232818124 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.096646153 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.095028168 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.098943101 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.099736469 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.095173137 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.103237472 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.095324008 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.095770993 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.103485446 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.101534597 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.096925239 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.100888082 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.101331599 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.099848647 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.099147419 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.099719941 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.096205784 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.095551623 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.096980139 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.097466364 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.0958522 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.097614059 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.098378657 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.097974218 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.103277941 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.101333589 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.105763058 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.098256223 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.097177681 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.096424897 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.096541748 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.097515424 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.097852191 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.101840383 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.104300164 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.102187906 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.097295146 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.098511208 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.099408314 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.101004495 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.097558753 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.098961618 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.102110856 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.104614262 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.097627609 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.100001264 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.101968946 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.098962465 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.097020733 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.100422205 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.097545213 seconds)
  done (took 154.20134713 seconds)
done (took 612.607106241 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.17303329 seconds)
  done (took 9.187062129 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.20154062 seconds)
  done (took 9.312408233 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.638715458 seconds)
  done (took 12.657121308 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.115298313 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.112781224 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.123055267 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.102814565 seconds)
  done (took 30.48199057 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.332105912 seconds)
  done (took 9.347847584 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.11124541 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.094465094 seconds)
  done (took 16.289253349 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.140895098 seconds)
  done (took 9.157873421 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.107890936 seconds)
  done (took 9.144404182 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.112201412 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.10877253 seconds)
  done (took 16.258010691 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.100632999 seconds)
  done (took 9.117588635 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.876158033 seconds)
  done (took 9.979172893 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.114196832 seconds)
  done (took 9.150930303 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.131869654 seconds)
  done (took 9.148396984 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.13255091 seconds)
  done (took 10.150492719 seconds)
done (took 171.401785914 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.105403595 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.101284864 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.098312077 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.0969213 seconds)
  done (took 30.41784851 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.134548381 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.135061128 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.142695604 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.132931739 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.124328597 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.125698573 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.134366362 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.134949093 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.125482543 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.132772356 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.136114356 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.132499468 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.135254653 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.14491527 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.144819765 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.133064142 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.134946764 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.136176468 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.12544664 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.145109058 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.133657742 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.133228825 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.096316529 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.093132626 seconds)
  done (took 53.165023139 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.292668417 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.165147635 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.255732389 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.146525819 seconds)
  done (took 10.876427485 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.101106915 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.164401264 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.152308664 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.14633786 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.195439054 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.204324803 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.153806041 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.306088485 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.219702676 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.228337326 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.10860917 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.12264062 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.126969911 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.149158089 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.205720643 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.10087267 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.101029729 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.216922771 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.163625394 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.311128759 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.102287795 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.15539047 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.186361641 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.154454811 seconds)
  done (took 54.095850696 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.1020772 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.111045634 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.110474158 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.103830575 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.104576774 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.104741243 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.111178985 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.105671654 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.125976894 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.104553183 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.102945689 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.104091431 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.109517557 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.104775406 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.103883582 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.116831263 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.118843828 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.10453056 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.108545067 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.110461489 seconds)
  done (took 44.187483803 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.100903633 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.95052436 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.449637138 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.3551773 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.101029831 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.098986175 seconds)
  done (took 33.076299596 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.11619219 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.109242301 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.104130533 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.162003963 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.239804195 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.107172413 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.104919014 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.11403578 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.148055452 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.166899449 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.121349109 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.130702229 seconds)
  done (took 27.647318379 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.121084687 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.102202299 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.102929029 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.113988868 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.115240159 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.110083014 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.110281184 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.103495436 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.116249185 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.121659466 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.113784358 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.11542584 seconds)
  done (took 47.372918567 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.317699923 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.330977213 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319483592 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.634609001 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.832006363 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.086237071 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.387683448 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.31716051 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.810566454 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.838480019 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.398156298 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.160798986 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.053157359 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.027526443 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.000336274 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.346375718 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106567492 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.960480422 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.35805647 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.156670928 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106288464 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.106222154 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106761262 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.404200315 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.431989074 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107137185 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.317953608 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.120230164 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.136495581 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.329414299 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.500287383 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.154102785 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.309295159 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.363067854 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.444113025 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.165417481 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.228251099 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.18676094 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.144544072 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.140938272 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.115267104 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.116179714 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.648068863 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.119112021 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.377826093 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108498013 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.106260056 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.214760424 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.031099197 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.420336459 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.213055429 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.105027655 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.141542719 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.542421924 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.227549721 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.350017053 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.110281701 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.193571833 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159448156 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.366832362 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.209092095 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.216289991 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.319952563 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033122522 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.505896874 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.223698906 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.109448801 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.111433666 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.807987257 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.351217448 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.190028783 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.427066094 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.857080326 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.108893834 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.109484472 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.110456011 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.205812208 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.105574431 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.401615208 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.098177073 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.033897299 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.207360967 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.502086842 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.111190965 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.108550943 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.116840441 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.954862324 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.131599256 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.205100744 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.362921553 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.423623397 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.110490395 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.109854239 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.130642769 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.111577608 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058309292 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.603363406 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.167169039 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.036475952 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.670747119 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.504189523 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.068921095 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.510059741 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.144813251 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.385444382 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.253426273 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.515484893 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.320021695 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.353938997 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.640863092 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.114718384 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.667793628 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.19219824 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.185133681 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110211283 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.673339589 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.199469663 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.403490348 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.218193179 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.110695041 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.035493314 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.121944135 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.31281275 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.549143038 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.160538567 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.108826978 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.115653612 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.110738884 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.113614317 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.273407388 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.127668444 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.403915356 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.183990386 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.11212135 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.047722766 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.114105124 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.398976412 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.651251168 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.164622865 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.364473434 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.379188421 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.811213275 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.115676852 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.135748549 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.381083839 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.183312441 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186125995 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.680946238 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.242641134 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.208858624 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.096692492 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.249326999 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.116634797 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.114643331 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.39304418 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.524058118 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.538626799 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.156068357 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.119541127 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.11598344 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.196963814 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.347984398 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.216960661 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.139994719 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.116759741 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.197232611 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.339831189 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.113005942 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.118382756 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.364532358 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.35590563 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.407987822 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.18518177 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.220834151 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.182629378 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.122816683 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.32730373 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.199660192 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.770335117 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.658241565 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.332332371 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.598753152 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.073241996 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.752283932 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.38449079 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.487791313 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.130992115 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.563314992 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.202879707 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.705157642 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.139830653 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.641928183 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.041451055 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.119635074 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.449790388 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.071215847 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.873739747 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.173453875 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188202963 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.116930442 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.116352651 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.121975924 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.121362699 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.214849762 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183430794 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.188870472 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.042266687 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.688088424 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.147479446 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.118980359 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.115373476 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.484808265 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.932051879 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068285695 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.115724935 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.192181191 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.864668029 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.666450182 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.118033829 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.118742653 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.721638329 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.753080641 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.70475952 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.118406744 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.004903374 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.143092453 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.378657356 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.209618054 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.421503095 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.873155912 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.19311823 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.116879697 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123492634 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.819431535 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.1272537 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.817681782 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.403821529 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.392086343 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.564105908 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.177016377 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.32898147 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.131455675 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.117759685 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.665496759 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.140738192 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.118644637 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.322466308 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.635719 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.438204653 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.753036663 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.202582133 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.148960635 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.388442646 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.119166402 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.512481358 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.796210813 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.119686747 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.122149915 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.355768446 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.802951169 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.118767897 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.086759205 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123395174 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331009225 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.322849093 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.388618062 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.416437802 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.56631074 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.129831621 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123439571 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.161177729 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.362985659 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.119466833 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.154932826 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.568617025 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.206914005 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.547158582 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.405739908 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.50989231 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.745846834 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.384764612 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.182794215 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.130919806 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.768251902 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.244549774 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.049337919 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.237215077 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.04734735 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.891512623 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.408355236 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.134813548 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.387665837 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.09706319 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.456576041 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.416344517 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.375527416 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.161944729 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.146301669 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.120552306 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.172102559 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.138952973 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.221262576 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.232255313 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.125404376 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.571243608 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.156295794 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167496494 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.124856989 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.639906259 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.140874066 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121642884 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.81590077 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.824812411 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.239977646 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.193737402 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.895141167 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.545145708 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.144555694 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.008027877 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.768216464 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.391170259 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.176138486 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.570356316 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.159907224 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.526583528 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.130921321 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.334850306 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.125351859 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.628813916 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.162322634 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.390847324 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.077279097 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.332344604 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.321990103 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.149639547 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.126234144 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.048192388 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.283233231 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.991814205 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.101090456 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.125412149 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.125366045 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.544795961 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.236673748 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.582411419 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.942981961 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.124653126 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.493576548 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.521008446 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.67501729 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.149438864 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123855699 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.451184196 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.927237733 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.428565309 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.387707411 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.131579469 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.812489523 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.3361037 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.248008186 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.042536777 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.603113009 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.708349019 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.824393258 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.131079017 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.328197849 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.452967368 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.314990622 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.15485222 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.196918537 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.528640983 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.390728147 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.866195205 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.049594708 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.124542627 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.519637422 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.12386049 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.221053948 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.363377544 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.436396329 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.635308503 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.526263675 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.164895845 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.53498693 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.532951808 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.520758144 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334203942 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.490837571 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.4470653 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.007491879 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.53733233 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.338324169 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.226573823 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.400255256 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.995386507 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.834791849 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.367629166 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.129569961 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.05424476 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.333546331 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.132859832 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.501474748 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.64676304 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.141873817 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.435692661 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.593138244 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.664469004 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.223509335 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.147458916 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.090683767 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.149451994 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.146042113 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.12593104 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.606052139 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.41368642 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138586394 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068147197 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.796120457 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.052920311 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.339693218 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.21558877 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.159137697 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.683498592 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.393128864 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.224616215 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.427184104 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.273651806 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.158987108 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.051749465 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.868685556 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.073854432 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.215751625 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.53758527 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.123176313 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.130001628 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.329962163 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.056425843 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.172429482 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.770216233 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.327982469 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.70965939 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.39736235 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.252368666 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.372230156 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.429173621 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.130350338 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.087755604 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399880986 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.056814637 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.680704829 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.830471369 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.863628486 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184194758 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.127547018 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.130564661 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.399997394 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.450956071 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.218887561 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.636064944 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.158094743 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.152812015 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.451137647 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.214094023 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.129708358 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.1328116 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.536632207 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.358762279 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.151936659 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.14967556 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.342908395 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.201649393 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.325660046 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.20435917 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.643219593 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.134427419 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.136814509 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.163039686 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.077826636 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.114289188 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.871591006 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.189772046 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.13481536 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.402607627 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.791367306 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.331453647 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.524516595 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.997813854 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.229779282 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.167963854 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.132249203 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.140907198 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.521233851 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.432013111 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.128954542 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.401843113 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.176882521 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.134448545 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.145455614 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.099460169 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.131317607 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.840823133 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.017601226 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.85853259 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.525025038 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.138523907 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.180447105 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.133253226 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.056711738 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.156388749 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.148520206 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.11663803 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.133324491 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.501674701 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.213908235 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.215405166 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.132847964 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.132546042 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.13615214 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.343893377 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.645728807 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.147909171 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.832787254 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.334728984 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.134023169 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.613827683 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.575672056 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.299911828 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.16950889 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.234149344 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.372098579 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.672090181 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.233436889 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.106631883 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.35888383 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.134653533 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.403852225 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.406759421 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.13459125 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.346021407 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.53276045 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415257033 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.137025103 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.897986672 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.198551036 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.243547947 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.028167158 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.132872225 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.135335142 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.400862072 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.188976323 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.131717066 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.142318502 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.690473802 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.902484593 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.599529168 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.287010638 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.454258523 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.995107647 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.886162566 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.136015329 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.059796199 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.135939301 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.157015879 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.13698164 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.149013861 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.847598443 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.854161113 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.346606675 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.404499806 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.060329629 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.336896721 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713243896 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.057551474 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.102875167 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.132495877 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.398933947 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06036641 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.13772971 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.157577906 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.174471864 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.778401789 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.402636861 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.134717628 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.080834067 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.137112886 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.137593463 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.133911387 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.219867633 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.134635419 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.251335222 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.401934006 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.504188439 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.23538556 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.774303911 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.845181555 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.070548607 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177192711 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.692019243 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.703312698 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.187440307 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.959049521 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.85016372 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.079962928 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.137060773 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151438776 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.393113615 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.139007508 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.138170651 seconds)
  done (took 2310.204972309 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.149760965 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.275581994 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.169476158 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.210952346 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.213430147 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.264747705 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.231087795 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.168584271 seconds)
  done (took 59.735654146 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.136953749 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.170284569 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.143949314 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.17352809 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.142472687 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.139599951 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.336112818 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.153682974 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.170254199 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.145718464 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.142112089 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.137508501 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.453675341 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.171624852 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.140241592 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.137747116 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.690751836 seconds)
  done (took 81.681639328 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.160331206 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.595064712 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.217139641 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.166315152 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.062141406 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.164256238 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.230320024 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.195064304 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.167670124 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.542920765 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.459248657 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.171342157 seconds)
  done (took 94.208011666 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.167739979 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.16174486 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.160179406 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.162189549 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.161638399 seconds)
  done (took 12.896247238 seconds)
done (took 2861.646531948 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.408701189 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.219994568 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.26830225 seconds)
  done (took 6.565411379 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.309634288 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.354451789 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.468090541 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.472856464 seconds)
  done (took 11.690432589 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.457183453 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.523426193 seconds)
  done (took 7.056837471 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.579375408 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.178652696 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.552360118 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.162828823 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.164340783 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.161316193 seconds)
  done (took 23.573149921 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.162806876 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.162919279 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.164752881 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.162213221 seconds)
  done (took 10.732325537 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.162907472 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.902310371 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.162227532 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.172580791 seconds)
  done (took 22.477042764 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.301516405 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 2.22452778 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.928829293 seconds)
  done (took 9.532578333 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.787185556 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.618217423 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.779714239 seconds)
  done (took 10.262257729 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.001085231 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.981099663 seconds)
  done (took 8.060019219 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.30669598 seconds)
  done (took 4.384709333 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 3.02221423 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.477145624 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.637034545 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.68235141 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.749427526 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.386003096 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.498095308 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.443373555 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.556686046 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.577830733 seconds)
  done (took 28.111357504 seconds)
done (took 159.246216543 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.594122871 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.212364637 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.380896512 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.552717146 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.408285994 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.381146872 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.571612704 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.548834055 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.230149012 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.206257255 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.550865748 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.402549457 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.520567968 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.210346707 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.522572371 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.210916607 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.405301837 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.619718955 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.232109942 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.44478593 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.577844879 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.190440754 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.393573055 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.211078214 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.401514699 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.3309033 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.792043408 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.213892812 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.383028998 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.809196421 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.331117424 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.59414967 seconds)
  done (took 179.514572639 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.166512768 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.163737423 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.165143158 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.163847754 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.437860834 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.164225238 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.167113825 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.164433932 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.414228442 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.379773718 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.163966048 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.413321297 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.16555908 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.165338192 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.167573016 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.164843592 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.548801811 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.166404873 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.165891014 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.166085024 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.165451328 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.284593752 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.165145424 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.30837895 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.495898864 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.16507708 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.165932098 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.164942141 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.166280635 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.166790305 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.167137162 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.165663609 seconds)
  done (took 217.338876959 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.168093445 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.16633677 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.176822904 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.167304674 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.16880921 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.168793266 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.177395315 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.166873757 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.991509227 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.96697243 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.169206739 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.167549349 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.170157625 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.167252228 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.168395896 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.16641728 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.16590405 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.169556281 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.168881856 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.167436724 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.17012956 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.846818879 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.168305154 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.876723254 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.168736068 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.173429357 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.168856035 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.173629265 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.173474332 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.172765245 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.168878 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.168724707 seconds)
  done (took 230.515635497 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.410389162 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.17051433 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.172731052 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.183032735 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.171726738 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.171479522 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.176508505 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.425413809 seconds)
  done (took 21.968724288 seconds)
done (took 651.433475568 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.518459698 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.909023527 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.311357824 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.197315057 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.427526747 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.243879894 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.189508918 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.251211036 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.855697368 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.261268228 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.612631055 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.198006553 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.919360457 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.221276998 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.311046246 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.246396876 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.568327737 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.827644416 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.327490893 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.866102388 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.34597173 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.151812444 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.270007373 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.888481634 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.626686505 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.174714806 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.233245819 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.573063258 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.195663407 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.341464898 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.806052366 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.464338406 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.207435495 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.192945981 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.243254973 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.223778879 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.404932032 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.203911352 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.306429602 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.94922106 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.863534797 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.728243688 seconds)
  done (took 112.74523645 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.180630995 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.177980226 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.178461123 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.17853261 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.187691607 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.178624377 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.179696412 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.178821407 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.179744011 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.179190801 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.180235582 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.188061518 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.181210568 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.189858286 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.178673834 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.179462145 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.179841115 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.187973185 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.181420285 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.179002906 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.179178945 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.179582556 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.176732709 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.178595813 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.180236052 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.179980193 seconds)
  done (took 58.801075087 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.17465879 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.346157789 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.415372789 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.196388151 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.176954438 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.177763649 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.206150683 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.181255786 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.179156413 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.177900967 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.296726002 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.178095827 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.190187605 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.411187604 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.190486047 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.177038656 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.175010249 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.176498656 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.354472753 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.191761945 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.204965332 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.182670768 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.206154687 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.189797296 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.17669355 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.176884805 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.178004309 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.601235462 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.18724359 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.295974646 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.2384855 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.210593001 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.528535687 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.425407238 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.233558299 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.183893298 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.177361441 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.347735552 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.188380229 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.17760502 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.206166624 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.183453282 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.420713038 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.70693974 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.193995412 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.177067631 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.596940906 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.359215098 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.225387073 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.187345945 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.429344029 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.19438926 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.178187735 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.178553552 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.213938922 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.186690884 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.176762433 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.437293653 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.192904648 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.207746352 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.186780157 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.178676545 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.36039639 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.187178961 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.349262157 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.188729949 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.186263974 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.177820522 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.420614816 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.196450743 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.711822547 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.195267435 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.178430049 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.299260778 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.356684262 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.625873002 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.192661236 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.363601574 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.546705378 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.215567001 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.189221496 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.585830424 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.219325775 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.187977227 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.180266865 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.179063828 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.1797374 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.225620407 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.206475674 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.62478518 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.716860202 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.457025982 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.218432349 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.190962093 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.180194156 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.438938117 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.188890261 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.180874511 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.416665457 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.729192026 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.197851546 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.187772924 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.694965965 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.19918007 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.21146102 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.190932025 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.435184577 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.200133489 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.225490937 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.180714525 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.187971281 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.185902754 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.211990183 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.190223271 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.181084881 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.68869048 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.371651785 seconds)
  done (took 268.786506041 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.18543456 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.180284075 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.182002892 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.178106013 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.179894526 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.182009567 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.18107372 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.181082101 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.182877794 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.182100093 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.179405873 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.182966676 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.182110095 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.189238271 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.228313374 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.183727904 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.667864511 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.181928948 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.181341162 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.181954417 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.765479358 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.18849681 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.18090765 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.180530886 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.182692201 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.18088184 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.190786058 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.224752016 seconds)
  done (took 176.372611191 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.182207332 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.239146353 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.19435172 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.231026678 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.194453187 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.185672728 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.207386358 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.198043098 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.189526867 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.184291806 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.184098835 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.213441766 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.188924927 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.282065218 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.212742968 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.217740485 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.284178869 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.188757497 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.184057003 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.184998202 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.232049591 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.195115545 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.215002475 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.244352275 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.194371826 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.23918929 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.195888933 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.185590966 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.185250479 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.296888989 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.201243206 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.216647635 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.21697158 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.201515904 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.302345613 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.298575871 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.285745074 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.214202164 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.186062943 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.1861302 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.185480739 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.1867693 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.240538958 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.195484467 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.186066757 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.301675996 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.202051182 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.186081436 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.205856818 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.183564095 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.199065754 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.201498319 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.218294417 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.308413284 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.228240441 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.208305837 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.208855943 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.200462214 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.186942835 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.283784539 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.191732398 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.300202934 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.204340665 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.186867934 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.188136808 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.190440129 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.235023911 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.221873277 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.286232887 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.166494315 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.277060032 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.238841786 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.197547681 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.187975764 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.186226406 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.242452618 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.294969483 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.239502236 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.246457939 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.221067886 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.195761314 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.187421837 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.189922745 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.215355092 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.192859345 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.301478903 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.300703178 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.192429735 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.189678332 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.187947869 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.187664526 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.212688027 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.250880255 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.226064295 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.294998213 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.223963017 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.226126983 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.195720076 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.20375467 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.191359647 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.31544834 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.195857691 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.201353242 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.525733434 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.228801661 seconds)
  done (took 235.397010604 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.549847362 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.231411397 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.25970791 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.464090929 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.555146154 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.082800028 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.226930868 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.245507928 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.248105616 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.367824884 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.298509818 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.291107422 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.224260849 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.209949443 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.23057299 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.248837941 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.274446475 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.539688222 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.34196685 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.74331487 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.232365191 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.53083693 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.544007239 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.593344941 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.27899706 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.614747341 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.853075719 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.328481363 seconds)
  done (took 71.725155787 seconds)
done (took 925.919095306 seconds)
SAVING RESULT...
DONE!
