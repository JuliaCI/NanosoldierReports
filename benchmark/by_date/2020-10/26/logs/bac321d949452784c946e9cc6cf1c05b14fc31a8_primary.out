cset: moving following pidspec: 25162
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.875145783 seconds)
loading group "shootout"... done (took 1.237557698 seconds)
loading group "string"... done (took 0.660321183 seconds)
loading group "linalg"... done (took 8.599547716 seconds)
loading group "parallel"... done (took 0.169172009 seconds)
loading group "find"... done (took 2.929296456 seconds)
loading group "tuple"... done (took 2.078258294 seconds)
loading group "union"... done (took 14.887361776 seconds)
loading group "dates"... done (took 1.451345126 seconds)
loading group "micro"... done (took 0.221836617 seconds)
loading group "simd"... done (took 4.816775278 seconds)
loading group "io"... done (took 1.090607603 seconds)
loading group "random"... done (took 9.511164077 seconds)
loading group "problem"... done (took 1.527695942 seconds)
loading group "array"... done (took 25.121701268 seconds)
loading group "misc"... done (took 1.889591424 seconds)
loading group "scalar"... done (took 43.39811377 seconds)
loading group "sort"... done (took 3.345428523 seconds)
loading group "sparse"... done (took 13.055731039 seconds)
loading group "collection"... done (took 18.364374089 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.530223938 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.124604402 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129268286 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.122384746 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.188781284 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121615295 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.131038571 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08635819 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.82552939 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.140446495 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116525839 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.438631516 seconds)
done (took 5.39238642 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.210211532 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093464734 seconds)
    (2/2) benchmarking "String"...
    done (took 0.082475442 seconds)
  done (took 1.396995391 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.071864986 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061677608 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067707149 seconds)
  done (took 1.420578964 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.065991568 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.135927129 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.067136417 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067179127 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.067417361 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.066585493 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066592563 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.066635382 seconds)
  done (took 1.765491143 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072672618 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068331669 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066703139 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068113063 seconds)
  done (took 1.50318348 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.068515619 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.122831138 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065401546 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065998402 seconds)
  done (took 1.547657192 seconds)
done (took 9.146350274 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.244765554 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.103027444 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.294327384 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.448492374 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.619763369 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.094154822 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075249171 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071629627 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.130258267 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.332170081 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.10496154 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.183763637 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.091322104 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.169630768 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.018958137 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.122434335 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087555063 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.124082762 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.095478932 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133396462 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.398153664 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.07869182 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074128697 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.071174394 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.069135798 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.656441553 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.692166688 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.122481435 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.086484838 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162464447 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.11713024 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.698219795 seconds)
  done (took 11.033281118 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.093844855 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.093792251 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.069478703 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.124540591 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094129663 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.070843285 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.075876092 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068308978 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089274774 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.12383286 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090743217 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099311079 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066639953 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069698626 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074684854 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.202297218 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.08090318 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081692776 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.06807861 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081412256 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106101671 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07824764 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.078939754 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.078483295 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.130451142 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169312889 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.101044111 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.09846981 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.06640586 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079103972 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115904935 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125512103 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067518809 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.065856644 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120110636 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095924973 seconds)
  done (took 4.67439416 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.892995338 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.116269848 seconds)
    (2/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.06811579 seconds)
    (3/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.096231067 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100076186 seconds)
    (5/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.646671834 seconds)
    (6/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.066919922 seconds)
    (7/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.151389692 seconds)
    (8/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.242027536 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074009548 seconds)
    (10/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.291096504 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.153053515 seconds)
    (12/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.112488109 seconds)
    (13/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.149232878 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.118647628 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070373035 seconds)
    (16/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.15099437 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.117989122 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.552579143 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068972554 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.067576342 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.06634371 seconds)
    (22/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.068627719 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068275696 seconds)
    (24/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064228768 seconds)
    (25/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.064237099 seconds)
    (26/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069291295 seconds)
    (27/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.096642025 seconds)
    (28/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.092639828 seconds)
    (29/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.088086645 seconds)
    (30/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.17120448 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.985805555 seconds)
    (32/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.305687921 seconds)
    (33/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068206216 seconds)
    (34/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.159998607 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.08589687 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.357416206 seconds)
    (37/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.070356703 seconds)
    (38/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.086333176 seconds)
    (39/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.473876118 seconds)
    (40/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.123924135 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066020431 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.165540461 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.118277604 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065419087 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.121961686 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.080028419 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.069224467 seconds)
    (48/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.06981106 seconds)
    (49/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.491946989 seconds)
    (50/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.069710051 seconds)
    (51/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073020302 seconds)
    (52/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.079831613 seconds)
    (53/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.101816179 seconds)
    (54/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068508035 seconds)
    (55/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066443491 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.173346809 seconds)
    (57/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.065325596 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067235468 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.067865749 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.150494896 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.064942667 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143287888 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.065216787 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069939035 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.10302371 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069288866 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.085980263 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.09504679 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.335471342 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.092845994 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068735515 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.262237426 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.078763361 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.066988253 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073523148 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067378163 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068560351 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067997481 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.072395807 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.075056101 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.068612461 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111263696 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.066948297 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.065231973 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.074416214 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067204422 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.072540779 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.097579366 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.065786494 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.563926168 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.099923035 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066747099 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.194359301 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.106080884 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068794026 seconds)
    (96/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.064979924 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.0722024 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068260971 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.068239769 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.06753656 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.067926118 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070038342 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.098361163 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.070584218 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.114010529 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.04977495 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.07024303 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067037904 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.073697146 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070253968 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070621773 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067767992 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.072760455 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069014013 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.065971602 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.107143939 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.121438787 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.066951799 seconds)
  done (took 23.237442367 seconds)
done (took 41.066221481 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.311118065 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.079229391 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.078832371 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.079734827 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.079222267 seconds)
  done (took 1.909535094 seconds)
done (took 3.225401511 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133029232 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.085767733 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.064703191 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101020733 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069059302 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102484332 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108328099 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.10453516 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069014828 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.068903634 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.069273929 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102453088 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105574884 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.068984019 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.097665958 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103319096 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069546847 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.064793496 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.0690358 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069129367 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069753857 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.064586557 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.068844828 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069047147 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099559202 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069238076 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.068012737 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099257992 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.068954905 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099011783 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069181365 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069002719 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069025238 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.100335693 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069500253 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.100331408 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.06504398 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069194792 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069183347 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069008733 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.068923114 seconds)
  done (took 4.64711538 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071408331 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082251475 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.08321784 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062703798 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.07196306 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.082275298 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062375712 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.08214347 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088030508 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082587859 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082732638 seconds)
  done (took 2.17404002 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.070615012 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083849865 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084782432 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.063347431 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074384922 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084264224 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062780192 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082980819 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.086335968 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.084112655 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084053114 seconds)
  done (took 2.165851023 seconds)
done (took 10.283956789 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097064301 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.069166148 seconds)
  done (took 1.458445838 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.528161276 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.430251572 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068036995 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.08604451 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.193500371 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.092474612 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.202164083 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071435621 seconds)
  done (took 8.149640866 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.103554203 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.068822343 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069265267 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.07048805 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.068365422 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.067705738 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.067443154 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.067974136 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068449785 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070167694 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.068254185 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.070740082 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069070876 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.069047668 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.070050254 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.0684256 seconds)
  done (took 2.536198036 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.101027206 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.099774356 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.072321128 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.073316101 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.071746447 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071099923 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.073579623 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.072789361 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070824511 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.071898326 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.073762581 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.071939497 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.071748679 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.062669091 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.073321319 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.074263284 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.069908852 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073091528 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073699596 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.075009954 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.072843752 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.062508102 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.071085522 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.071891703 seconds)
  done (took 3.197462636 seconds)
done (took 16.647297038 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.174648943 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.074684017 seconds)
  done (took 1.551648745 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068441985 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.068782429 seconds)
  done (took 1.456096802 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.073407989 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061088118 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.078731115 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.070289281 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.061788038 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.061759027 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.077431261 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.062348591 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061693857 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062322204 seconds)
  done (took 1.988676314 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063674898 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069093114 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.067143639 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.06543006 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067735139 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063159662 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065216469 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.062651217 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069239522 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.061654315 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066174181 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.082983411 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.065503054 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.083536568 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.065378276 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066229788 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068464735 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066043736 seconds)
  done (took 2.538807682 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.061851659 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062190363 seconds)
  done (took 1.446991628 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.064903667 seconds)
    (2/7) benchmarking "second"...
    done (took 0.062724898 seconds)
    (3/7) benchmarking "month"...
    done (took 0.064954421 seconds)
    (4/7) benchmarking "year"...
    done (took 0.064739629 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06214475 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061333559 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062038366 seconds)
  done (took 1.760091931 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.421012971 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.121877276 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.341052844 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.071787136 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076686297 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253409102 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.063914692 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.06878831 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068381599 seconds)
  done (took 2.848821037 seconds)
done (took 14.920195088 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082613542 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.183380099 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.088121802 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.40628388 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.091760699 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.067805749 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.11324133 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.166778217 seconds)
done (took 2.539290503 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.216103307 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.169042223 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.368817038 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.125141333 seconds)
  done (took 2.989879301 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.333714583 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.078491141 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.077207006 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067555958 seconds)
  done (took 1.893867297 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065608192 seconds)
    (2/2) benchmarking "read"...
    done (took 0.071875456 seconds)
  done (took 1.468854782 seconds)
done (took 7.908347373 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064345752 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064484948 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.064752206 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064230545 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.064577366 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.064523221 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064059581 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.063983547 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.104449052 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.064634409 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.06424766 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 0.065332575 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 0.064118455 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064194195 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064301769 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064162146 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06385286 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064243434 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064209631 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.064019649 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064240751 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064368641 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.064557712 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.064406458 seconds)
  done (took 2.94325754 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080376709 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.06597167 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.067682369 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067608062 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067561963 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067081744 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067021922 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.065784242 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067638682 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.065431252 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067523242 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067524219 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066009876 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.067657528 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.065725179 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.06747972 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.0676364 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066327214 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066289192 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068205504 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067185808 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066777993 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.067793209 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.067040424 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067424884 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.067954588 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066194751 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.066725184 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.067529365 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.06773166 seconds)
  done (took 3.372344385 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066809276 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060520092 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061529279 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070198212 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.060617972 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061444053 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.061092831 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060697611 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.060859224 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.061906447 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.061425344 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.060533617 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.06159014 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060704017 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060768032 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.06132206 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065095964 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.079411135 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.060788701 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060599888 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.064777568 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.060443581 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.061188855 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.060671936 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061272854 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061286035 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060468 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.06090403 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060227681 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061250624 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060457341 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.064474508 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065193358 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060248308 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.070725308 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065090359 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060397248 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.064948139 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061793125 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.060500759 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060277009 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.06057787 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.060090488 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.060283807 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070397533 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.0605073 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061455272 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061539577 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.060833392 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.06014796 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060427771 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.062630267 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.065987461 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061892937 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060073849 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.06145015 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060173339 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06125418 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060522116 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060411707 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060164201 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.066884832 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062303558 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.060890391 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.080405363 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.061718488 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070996263 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060813236 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061082216 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064019277 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.061236529 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078186499 seconds)
  done (took 5.870184062 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082524237 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.086824486 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.066065537 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066090317 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.061450413 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.061348998 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068916938 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061286958 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066122298 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.082045223 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061440855 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.065466283 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066070229 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065139393 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06182662 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.065804446 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.068762873 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061389722 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.060878494 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065165639 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061447914 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.068371866 seconds)
  done (took 2.8340999 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.135877234 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067034572 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.105806418 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.074877041 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069431631 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.075448994 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066563947 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066689215 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066917697 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06692128 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067465036 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066643193 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06932119 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.067023394 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067006341 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067218899 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.067085805 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.066714971 seconds)
  done (took 2.684656996 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.077014446 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066746644 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.086871723 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066197063 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.066635495 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.065903737 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069820284 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070523213 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066043658 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066175377 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070773718 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066097243 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066144182 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066406197 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066168939 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.067000057 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066237709 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066255836 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.069904954 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069589002 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069929349 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070465906 seconds)
  done (took 2.867864637 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077547919 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065369031 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.080702611 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066940263 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061227853 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.0608904 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.06651724 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065909705 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066410708 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065135041 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065907876 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.060826764 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.066859609 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.065878538 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067243567 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065582507 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065446779 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.065772157 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.065301125 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.06109997 seconds)
  done (took 2.678576959 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.086576849 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063815954 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.064181457 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.082643218 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063697682 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.063729295 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.082815693 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064061514 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063428271 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.084675437 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064041484 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.063464444 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.082757527 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.082651194 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.06395103 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.082928785 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083207379 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083154958 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.063789979 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.064097164 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085398404 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.063788598 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.08277725 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063656853 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.063487619 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.06363762 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.063497731 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.082865537 seconds)
  done (took 3.377182601 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.064890674 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.063775714 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064605164 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064829466 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.064610115 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.064324113 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.064836132 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.064860577 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064350539 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065041879 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.064305854 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064676173 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065154441 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064481507 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064110243 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064003734 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064200197 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064804945 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.065303141 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.06458038 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064247101 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064436668 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064416768 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065067538 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064673311 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064063678 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064839715 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064359913 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064258718 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064635469 seconds)
  done (took 3.295663046 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.073910492 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072013378 seconds)
  done (took 1.505813409 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.063049714 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078149006 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.060850144 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.072927883 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069306055 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.06724182 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.069553938 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069638424 seconds)
  done (took 1.904849118 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067463523 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.09063536 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.063388815 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063002803 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.06617507 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.132613848 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075252525 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074164292 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076101138 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.06511768 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.063326206 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.074550121 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062453424 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.07541919 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063870297 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.070982587 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070123428 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079535331 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.074976425 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061228857 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07461935 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063085153 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.060927694 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063389532 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062256763 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069074546 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.077687208 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.07476084 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071188058 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060592678 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080425564 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061582375 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062231145 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.07095451 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065202831 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061528893 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098013497 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.061728724 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.066686689 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.060804891 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073120384 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082434697 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.075836279 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079051707 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063533379 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.06336213 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061314253 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.06316763 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.065013487 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.070692536 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061093328 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068857459 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.060550875 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.062845885 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071847017 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061100271 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.066577238 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.070631422 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.0745845 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.071843736 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070166057 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.076778651 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070221002 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069089348 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062235203 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.08110336 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.062928076 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074284321 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076637348 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.062811145 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074954558 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.061271281 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060394153 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.061260614 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.094724926 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.063655616 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.062896758 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.0618864 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061623443 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.062888706 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071240157 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.066625705 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068889774 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064833012 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077724185 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071122267 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061446454 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068215358 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.07919977 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065192514 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061390577 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.07731837 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.064538566 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.060830509 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.07889492 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.070609928 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06274337 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062247042 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064281288 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074834348 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.06217226 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059704668 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069502212 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062771491 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063699161 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.065556641 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.068873814 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060591576 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.070714995 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.065405481 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062480759 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059866715 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.065053192 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.062146813 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.05945651 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.069862965 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060783657 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.074851269 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.067497688 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.075461737 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.075581724 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.070713796 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.075334954 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060002039 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.058933357 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.077550631 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.069582714 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.200396213 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.083694407 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.064604247 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.075430362 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.063572216 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065852505 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072944027 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.062607728 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.06440182 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.06201235 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.066689279 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.063298959 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.063900771 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067498229 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.069997614 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.073987956 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063508769 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071083997 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062075871 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077541482 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.071388817 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.065971466 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064847926 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.06231249 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.07323128 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068499159 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.070485583 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.061250673 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.06272196 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.064463741 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.072357388 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071435834 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.06410766 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.068703347 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066022559 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.062503756 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.061937616 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.06281093 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065414073 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065124374 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.062514258 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069557196 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070187212 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075342894 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.068278893 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.070386293 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.060930605 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061341629 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063851258 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061363489 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.065705102 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.070702123 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.076767429 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.072929255 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082338527 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061346987 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071388804 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.062811196 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.07805141 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.074824945 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.062427888 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066312833 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060522989 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063201095 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.070748308 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073020804 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075015405 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076407024 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.065603975 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.065652391 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061485848 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07681838 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.061669401 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07015098 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.070287204 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.065768016 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061525524 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063158836 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070376036 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.06563414 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061194287 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.076975888 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.067216013 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061403997 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075617693 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062134062 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.072155718 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.06093191 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.064721549 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.066364793 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.06312269 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.070828826 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.076684791 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060749376 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.062335002 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.076609953 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.063050898 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063176055 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069195872 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.07670818 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.065756764 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.0695346 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072358527 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.07180686 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.06569481 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.07044441 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062037004 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070451297 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064241045 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073022235 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.06135647 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079179277 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.061031509 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.075856881 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061380345 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.071450421 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061653674 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070557827 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061871024 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.078537779 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062614641 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.062173143 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072924223 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.060082347 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070810005 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060691282 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065289425 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.066865771 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.069452047 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062021517 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.069682742 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.203774055 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.07254236 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.068023528 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071520697 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07217322 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067118967 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.061728039 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070649768 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.07375214 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070138856 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.063173703 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063690709 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062628892 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.071739529 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063665215 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.063190786 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070414272 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066217919 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.068108733 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.063846001 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.064140024 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.063507732 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.071086293 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07179379 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080067145 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071344227 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069350433 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.07131061 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062151989 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.07723995 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.061899151 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069355157 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060535701 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.067600727 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071393824 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.06254751 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.082814416 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063573733 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.069522774 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074462046 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070373203 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.065779143 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.079746717 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065757676 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070669973 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.069855502 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066328027 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.06831998 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.063680039 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.069917898 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071102052 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072026983 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.062412435 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069094283 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071026637 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063035556 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.069535195 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.065860996 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070102206 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.063811495 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.060983891 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.065979116 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.074163074 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066207906 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.066568531 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.062166631 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060541472 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.061970341 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.068608566 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.0664939 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.070453138 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076941665 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.060439992 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.062829852 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.061023926 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065507462 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.079846467 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071235755 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.069795874 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066207387 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.06081202 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.062966789 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.063281761 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.061848149 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065158661 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060741799 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.060947806 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.072015217 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.06329759 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.066054281 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062237923 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.062959975 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071243182 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066407376 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062093796 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.068284006 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061485574 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067169267 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061325038 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.06346696 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.066073119 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.060693221 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.065247541 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.071994208 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.077374774 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.06810492 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.07062331 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.062778129 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069134004 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076867931 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.068316766 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062358692 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.070472452 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060374393 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079172308 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070691206 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.07012484 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.071052458 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.061807866 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077108898 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.064795248 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.071029722 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.075769741 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061866199 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.067363304 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.060141788 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.075876096 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.06486667 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.059585752 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.067741632 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.067536352 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.065484875 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07141155 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.20745755 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.070624373 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.067838286 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066241776 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.063633952 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063451892 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.070731726 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.077846457 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.062660808 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066285155 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.06996038 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.070651613 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.0661482 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074668077 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.069962128 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063111044 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063767849 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.065327613 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.062872244 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.073743084 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062426816 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066058433 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066540035 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.061678081 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069376881 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078380216 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.072038489 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071614296 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061469952 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060810512 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.079803821 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065347475 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.066039663 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.069807299 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071591479 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074360759 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.071083427 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078508494 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.062762465 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068214372 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074011981 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.06312185 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062026152 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065816532 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.063581316 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.071119668 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.071925422 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.06955643 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063968613 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.069061713 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075261174 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.062642832 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066248018 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.066551314 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.06238947 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.072232944 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.069997144 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070576258 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063169077 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.061314729 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.064896929 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.070753589 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069093626 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.070590519 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062656364 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068249731 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.074936525 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.069250806 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064992271 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061154744 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.064657355 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.070510816 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.066220144 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.0615348 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066134835 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.065525844 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069292242 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.070938944 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.066526108 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061538818 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.078198253 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.069736751 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.071036429 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.066053914 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063378798 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061805501 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061010015 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073236753 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.06110759 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063145441 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.065761244 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063424028 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.078905813 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.07006989 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077754057 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.062551033 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066107133 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.061212572 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.070872214 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066485165 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.061864849 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072050763 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.060998886 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076674935 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073240465 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.066900096 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.081638041 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066440695 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069031689 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076478843 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071219397 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070722265 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064811787 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.070809835 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.062727125 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072338634 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061069319 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060213458 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.07111136 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069442001 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073220169 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060269158 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070847423 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062356417 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069090629 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068650404 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062274101 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.061866743 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.061741407 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.06918175 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064121876 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069275469 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.208937135 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.079677553 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064119139 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.073304089 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.071231442 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.07286214 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.075610149 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.073870802 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069509679 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063182799 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069888354 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069481877 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063077785 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.067310398 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.065086148 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083005498 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.063614492 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.063186093 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076310306 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068197827 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062188765 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068376104 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066401279 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.072021289 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.063964776 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072563926 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066445513 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.062502014 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066130853 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066217134 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.060902448 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061586243 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061289053 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.072052703 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066011872 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062202183 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.08009151 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063991494 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.07015991 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.072279359 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068346972 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063449281 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.061153708 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.062844858 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.074667875 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.076941534 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065348472 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070627239 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.063563799 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.071168117 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060612677 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.070459635 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069428712 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070867485 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061511052 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062163332 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076417304 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077082014 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.066981031 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071001373 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.070732411 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.062944777 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083161346 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.07030267 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.062794834 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072474447 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.063981752 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.06089083 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.060660607 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063594543 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.073806812 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061326296 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064717716 seconds)
  done (took 42.427037117 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.099298421 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.062380472 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.061086213 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061633111 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072067234 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062514944 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.061261412 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062221351 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.062078401 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.06417168 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061399617 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.06145317 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072651884 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074531994 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.07134666 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065453771 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061349315 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062195243 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061712809 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.0625741 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.07161296 seconds)
  done (took 2.870224226 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.067881441 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.076068135 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.072700397 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.077703968 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069576269 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.065342289 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072338775 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066000388 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.07341712 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071177436 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.073001698 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06576648 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.071104532 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.071904426 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.070962856 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.065756464 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.076044249 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069571819 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.065666063 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.072541331 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.065594754 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072770837 seconds)
  done (took 3.003513327 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.063310434 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.062438445 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070449487 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.061165221 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.060809584 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064845627 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.060923523 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065436403 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.066098971 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.066235613 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.070359219 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.061740236 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061094883 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.066744149 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061134632 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062325476 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.103668801 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062628594 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062105868 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061007909 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.063974564 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070636535 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.061244821 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061198219 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065564549 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.064580421 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061016714 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06378623 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.061443635 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.065626652 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062670596 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060938224 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070852233 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.069506517 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065361583 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.065651377 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063027116 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.06208468 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.060973467 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061030189 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070013578 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.062564802 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.061319793 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063066008 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070218306 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061274815 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.06050445 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.070903282 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.060878311 seconds)
  done (took 4.630221867 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.071579809 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.113433093 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.067177388 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.094674998 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.073886682 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.066724636 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.066558392 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.095440261 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062202123 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.06318105 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.074894722 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.074863847 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064337485 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.06576576 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.06666658 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.063988653 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064709677 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.062943782 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.066539768 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.063643286 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.066467594 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068358543 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.073497168 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07413937 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.064603324 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063398403 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.063574814 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065237001 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074074708 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.067245026 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.065312751 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065730354 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.074393716 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.068648243 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.063694993 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063833081 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.074852309 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.065064814 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064184257 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.06260978 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063844686 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065503989 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.068166125 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.075397712 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064292629 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.068381028 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064321792 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.062007405 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.074358637 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.063780598 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.067801662 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.075166744 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065654314 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.064410705 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065984179 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.073941416 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064164887 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.062843975 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064511801 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074081108 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062184306 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.06472557 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.074987614 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.063516091 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.06680152 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075041602 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.06840257 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065018599 seconds)
  done (took 6.279541997 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.070448963 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096302767 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072372039 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.072607403 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.071752573 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.071612734 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.071569477 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071989478 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.071961689 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072038473 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072165926 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.111125245 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.068405739 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.076111944 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072050569 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.071818136 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.071818024 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.071544877 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.071884092 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.0720445 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.07219569 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072181061 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.071135878 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072261433 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074207867 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068507982 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.071556061 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.07176488 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072220104 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.071224609 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074501203 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.07152865 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.071279168 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.072467752 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074155407 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074128802 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062646591 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.071661007 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072037516 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.071507302 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.068393532 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072080751 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.071299319 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068439561 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072289282 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.071798136 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072267079 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.074119914 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.078799767 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073203897 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072086691 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072236716 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.071783896 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.071565109 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072521947 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.078480373 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072483627 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072980188 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07183503 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072411298 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072589236 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.078581017 seconds)
  done (took 6.027373354 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.07481871 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.06828206 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.080250875 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.06148428 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.061280378 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.070420524 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061071124 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061541909 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.068480165 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.068226176 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.069740658 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.070416298 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.072522771 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070398873 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.070582143 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.072644614 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.070971826 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.070886399 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06831525 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.070847562 seconds)
  done (took 2.868488773 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076722106 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.080692688 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067178391 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.070483363 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.066581209 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.07029969 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.066010252 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066845843 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067496231 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067155093 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.071627695 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.071889026 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068150095 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.070451123 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.071799528 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.070598279 seconds)
  done (took 2.596976254 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068233049 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068490496 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.071171139 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063029295 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.066499888 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062175137 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062322623 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.061435453 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.062193803 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.075158011 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.062452486 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.074470602 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062249596 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.061629368 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.062010755 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.067702104 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.062358638 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.06237741 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062789883 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.06679924 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069093639 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.063227013 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066335682 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062074192 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.0675156 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.069249984 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064181898 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.066558362 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.062043123 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.062934692 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.06816623 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069065309 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062142533 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063316354 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061551448 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062379054 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062707693 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.062604695 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.068243128 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062936588 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061168456 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067353543 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.062732779 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063593753 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.061722785 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063316913 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061971627 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068010299 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.06272529 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.067975732 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.062013428 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064054849 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.062684266 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.069123158 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065054524 seconds)
  done (took 5.036616363 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.079162232 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.066669943 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061298835 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061508385 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.066640479 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.06771495 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067061164 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.066519009 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.06787303 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061169667 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067182575 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066173772 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067489113 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.06668009 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.067170217 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066534296 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061239252 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.067166229 seconds)
  done (took 2.680314284 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.072949504 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.066644007 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071920247 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.066724386 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066231578 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065963351 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062632046 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.0617315 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061673734 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066755023 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066863294 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.065881758 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.061569268 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.066092441 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066298853 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066739545 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.066093573 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061517438 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066081441 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062039834 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.06581335 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.062026085 seconds)
  done (took 2.917414429 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.088655982 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.088081837 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.128565916 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081311056 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.089582383 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.072550815 seconds)
  done (took 2.027406726 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094806558 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.104188341 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066210221 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066314131 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074916039 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069918847 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069582734 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069793837 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075041634 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073106315 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069305065 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074430214 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074753765 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071113244 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074743368 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07721795 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069529697 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.06966423 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.066204163 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077495922 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06998908 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075306339 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.07011828 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069314096 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069355606 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070844251 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077130185 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076817494 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069457286 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074733966 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077135931 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069529183 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074744783 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073403613 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.066337774 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074654406 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069385868 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076788629 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075567683 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071485598 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066039114 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075086741 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074893364 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071514756 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077276646 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069939362 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071308986 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070112429 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070020259 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.079261676 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076054447 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071184542 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075094733 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077419977 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077281764 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07918011 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073783881 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071238482 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075283588 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073422831 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071797047 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07483041 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071870252 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.073699617 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.07771836 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071644105 seconds)
  done (took 6.342801248 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.10100955 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067409226 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069530067 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.073449517 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07164456 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069430982 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069677279 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069621789 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069328068 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067763833 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.105700014 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070026612 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071662453 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071715002 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070020864 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069636079 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069925515 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071525845 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.06734423 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.079377566 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070126242 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07156009 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.071201985 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071173604 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.073289538 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077179174 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069164609 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.069720174 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06957441 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069106515 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070952992 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069795606 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07105096 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.06712759 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070838763 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069693104 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.069616196 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070783146 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069988012 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075485143 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071622615 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07781325 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069844405 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.069922539 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.073619477 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.069319928 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.069462809 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067271837 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.069541238 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.066870079 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.073545681 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.073305288 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.073331421 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071531145 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070372141 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070198019 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.06975443 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069734446 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070076632 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077433292 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071516884 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06947922 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07978892 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070028534 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.069792736 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.071371294 seconds)
  done (took 6.259210363 seconds)
done (took 130.634228958 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.234313864 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.206822094 seconds)
  done (took 1.910699565 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075753495 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.099300001 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.076433605 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.139204233 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.073083739 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.109479221 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108033895 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.077137349 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.073147553 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073527015 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073572625 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075530713 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.143931706 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073458766 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.072755938 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.075816942 seconds)
  done (took 2.914630201 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.108236054 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.18644283 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115412702 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.070851711 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.111265207 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077370564 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.071263093 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.081653363 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.074473134 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.083179818 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.077846676 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.07580326 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.073092435 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.075936846 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.075193777 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.077421423 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.072961155 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077651373 seconds)
  done (took 3.081872158 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.098815682 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086773687 seconds)
  done (took 1.687573478 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.158892327 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106527761 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.145825534 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.333079924 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.132287732 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.127281561 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.130680502 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.125781239 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.111479114 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122570585 seconds)
  done (took 2.990571225 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.107142621 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.177303395 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.316248477 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.12373027 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077233957 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.099628066 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.124656498 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083775273 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.08080059 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080338487 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.081097696 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.07827125 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.10249545 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.077154245 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.075530807 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.077984532 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.105246626 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.07494864 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075932726 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076339929 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107028411 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071716082 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.076931936 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.074774811 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079201947 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.078399669 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.07352584 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071641052 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.077046711 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.07604625 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.078953759 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.097090523 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.078570753 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.09892869 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.075626133 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100869019 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.075972884 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075127752 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076219008 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075221235 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.077960056 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.077758893 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.080864294 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.077878282 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073428041 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.075778377 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073340409 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.071881752 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.079873277 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.072885947 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.079619673 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.078912026 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.099884748 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072545752 seconds)
  done (took 6.320263186 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109059493 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.107142962 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070781305 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.11448452 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.105991382 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.07048944 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105289227 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101431323 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109233544 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070839583 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069904307 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07044972 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.0773246 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.079902923 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.116722937 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109710623 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072321849 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.071057785 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.108932812 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108188599 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069588199 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103232871 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.100937943 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.106895005 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.069810546 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070750241 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069042167 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069613427 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.074653665 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.075446796 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070462223 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076611456 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.082042423 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.07625351 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.0690356 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069199995 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069323998 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.07654361 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077290601 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077027776 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.075642384 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.068759565 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069096487 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070066699 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070468064 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069173133 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075199047 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076128058 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075534477 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069471298 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070156849 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069145216 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069974434 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076252184 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.075524008 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.077191129 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076812266 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069606711 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069670119 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.070929513 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077712556 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077052942 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076062682 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.070498854 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.07717099 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069434938 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078458977 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.081524793 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069569602 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.069883744 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.069634634 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069726744 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.069998144 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075413727 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.07531409 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069708986 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072516498 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06944041 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.077415203 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.075617734 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069437226 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.074846955 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.068565102 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069900614 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069867858 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069848829 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.074609038 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076042348 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.069945572 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069237528 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069285282 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069187265 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.068430771 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074516848 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.075249806 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.0754289 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.074270368 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069115378 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.074958955 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074737337 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069759899 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074317117 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068521292 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069599751 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069224405 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.07436934 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073015114 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.075339303 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068155485 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.067539438 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.073556548 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.215400615 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.070496318 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.076236458 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078313184 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.076322486 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.069480401 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078881186 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069617225 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077463989 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070065514 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078735932 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070008539 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075924036 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069934958 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.068817965 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.07020643 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076457729 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.07023543 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070006757 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070559815 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.069631239 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.075961902 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079608911 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070891762 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076009149 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.07636786 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070428675 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.076083052 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069820527 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077511562 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070487759 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069889636 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.06911045 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078826797 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.06948097 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.069806208 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069623016 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077759975 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069819039 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.07800443 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075571346 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069392455 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.080000603 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077806303 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075495811 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078048917 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070550648 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.06975162 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.069909622 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069639439 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075013452 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076204651 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070106782 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069672729 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075386766 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.077381937 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069235009 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.075125825 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.305053509 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.075141912 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.06984733 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069125499 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078716257 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077436263 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.075225005 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075499336 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076006407 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.06954252 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.07457029 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07536788 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069463842 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081486903 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069507885 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.079503127 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075744719 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.074598632 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.075983527 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.076807184 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077568656 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078293094 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080086892 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.068965484 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.06918794 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075278089 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069368497 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069660525 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075351033 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070230227 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070039208 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080088781 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069497491 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.077887935 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.06904566 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.075577278 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.068939603 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069774997 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.079826214 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069238047 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.06955081 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075465845 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069087868 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075166628 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077552997 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075133091 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069241709 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069534767 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.0754782 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075963429 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068811916 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068264371 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.068876403 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.073119177 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.0728512 seconds)
  done (took 18.737522615 seconds)
done (took 39.150774651 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.210837064 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.171112806 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.197290004 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.116387404 seconds)
  done (took 2.308206087 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.09268002 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.100713568 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.077219293 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.06623718 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.084517623 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.065853911 seconds)
  done (took 2.036506804 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.25181299 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.189042058 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.173798376 seconds)
  done (took 2.156325897 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.219285352 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.197070899 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.502573932 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.309821714 seconds)
  done (took 2.874918171 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.131045687 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.078665783 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.064526339 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.074373813 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.104352114 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.133366345 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.086171234 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.107872971 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.075879718 seconds)
  done (took 2.461153157 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.130083884 seconds)
done (took 13.542815354 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.242831003 seconds)
    (2/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.231945036 seconds)
    (3/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.107127396 seconds)
    (4/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.073972216 seconds)
    (5/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.240028552 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.158751066 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.123029704 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.202083979 seconds)
    (9/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.154532422 seconds)
    (10/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077346052 seconds)
    (11/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.08001065 seconds)
    (12/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.218000379 seconds)
    (13/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.109326501 seconds)
    (14/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.074829951 seconds)
    (15/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.181890996 seconds)
    (16/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.200798276 seconds)
    (17/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.07515983 seconds)
    (18/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.157139778 seconds)
    (19/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.143747024 seconds)
    (20/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.190649193 seconds)
    (21/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.201035641 seconds)
    (22/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.075777549 seconds)
    (23/341) benchmarking ("sort", Float64, false)...
    done (took 0.138225561 seconds)
    (24/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.173324459 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.096714333 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.209328144 seconds)
    (27/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077484096 seconds)
    (28/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.076517041 seconds)
    (29/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.203941898 seconds)
    (30/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.179984281 seconds)
    (31/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.079519056 seconds)
    (32/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.158783241 seconds)
    (33/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.077623057 seconds)
    (34/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.188854749 seconds)
    (35/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076792282 seconds)
    (36/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.075221501 seconds)
    (37/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.100602626 seconds)
    (38/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.229904979 seconds)
    (39/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074406415 seconds)
    (40/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.093969304 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.090621131 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.091519587 seconds)
    (43/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.074946018 seconds)
    (44/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.064993291 seconds)
    (45/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.076317932 seconds)
    (46/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074834312 seconds)
    (47/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.233975436 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.144226274 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.127771647 seconds)
    (50/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.215187758 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085895729 seconds)
    (52/341) benchmarking ("sort", Bool, false)...
    done (took 0.142284974 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.088489272 seconds)
    (54/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.095464353 seconds)
    (55/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.079971002 seconds)
    (56/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.193758812 seconds)
    (57/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.078157994 seconds)
    (58/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.06603824 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.089694899 seconds)
    (60/341) benchmarking ("sort", Int64, false)...
    done (took 0.067092065 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.075976347 seconds)
    (62/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.066203804 seconds)
    (63/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.084606166 seconds)
    (64/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.065477057 seconds)
    (65/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.075387795 seconds)
    (66/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.071642079 seconds)
    (67/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.064992135 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.072809125 seconds)
    (69/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.064764898 seconds)
    (70/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.136761367 seconds)
    (71/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.151317579 seconds)
    (72/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.066087077 seconds)
    (73/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.073985847 seconds)
    (74/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.068455356 seconds)
    (75/341) benchmarking ("sort", Float32, false)...
    done (took 0.136166046 seconds)
    (76/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.075004007 seconds)
    (77/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.13734829 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.145351626 seconds)
    (79/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.132753555 seconds)
    (80/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.082473417 seconds)
    (81/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.077244638 seconds)
    (82/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.064519612 seconds)
    (83/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.138014713 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.085883166 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.250071562 seconds)
    (86/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.136317845 seconds)
    (87/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.220221476 seconds)
    (88/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068484566 seconds)
    (89/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.155097037 seconds)
    (90/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.238851149 seconds)
    (91/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.075408573 seconds)
    (92/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.096878817 seconds)
    (93/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.067319748 seconds)
    (94/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.075045039 seconds)
    (95/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.068598734 seconds)
    (96/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.068665737 seconds)
    (97/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.167310268 seconds)
    (98/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.074092217 seconds)
    (99/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.152244943 seconds)
    (100/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.06693142 seconds)
    (101/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.191973126 seconds)
    (102/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.071111786 seconds)
    (103/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.089051058 seconds)
    (104/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.219606173 seconds)
    (105/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067590316 seconds)
    (106/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.202630447 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.092946668 seconds)
    (108/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.06592866 seconds)
    (109/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.160970141 seconds)
    (110/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.078333496 seconds)
    (111/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.145267603 seconds)
    (112/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067144169 seconds)
    (113/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073593355 seconds)
    (114/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.14303018 seconds)
    (115/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.073848126 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087814306 seconds)
    (117/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.084207282 seconds)
    (118/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.175965821 seconds)
    (119/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.066994119 seconds)
    (120/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071466975 seconds)
    (121/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.21683079 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.066378108 seconds)
    (123/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.154736953 seconds)
    (124/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.15429456 seconds)
    (125/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076318159 seconds)
    (126/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.084742163 seconds)
    (127/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075618251 seconds)
    (128/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.07015375 seconds)
    (129/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.14364425 seconds)
    (130/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.202923324 seconds)
    (131/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.066044399 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.152104483 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.07659039 seconds)
    (134/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075763348 seconds)
    (135/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.067030752 seconds)
    (136/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.074253963 seconds)
    (137/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.160413922 seconds)
    (138/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.193261643 seconds)
    (139/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.074081732 seconds)
    (140/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077952956 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.0661932 seconds)
    (142/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.066753063 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.134418295 seconds)
    (144/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067210691 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092810254 seconds)
    (146/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.066665824 seconds)
    (147/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.065561477 seconds)
    (148/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.076136545 seconds)
    (149/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.078474904 seconds)
    (150/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.06574207 seconds)
    (151/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.084555216 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.083591773 seconds)
    (153/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.070293145 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.131313229 seconds)
    (155/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.076634077 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.096329515 seconds)
    (157/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074489506 seconds)
    (158/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098925148 seconds)
    (159/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.082740713 seconds)
    (160/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.073269099 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.148143918 seconds)
    (162/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.066621044 seconds)
    (163/341) benchmarking ("sort", BigInt, false)...
    done (took 0.266186778 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.065631494 seconds)
    (165/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.070269745 seconds)
    (166/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.067850868 seconds)
    (167/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.083388436 seconds)
    (168/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.06490762 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.068316934 seconds)
    (170/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.167170408 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.086453668 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.089707936 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.120668378 seconds)
    (174/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.065006338 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.065839969 seconds)
    (176/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.150258737 seconds)
    (177/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.064950758 seconds)
    (178/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.090137908 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066585532 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.065332837 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.149261679 seconds)
    (182/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.066025001 seconds)
    (183/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.064083073 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125364413 seconds)
    (185/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074415299 seconds)
    (186/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.140845213 seconds)
    (187/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.089225681 seconds)
    (188/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.067438264 seconds)
    (189/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.310086101 seconds)
    (190/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.067856418 seconds)
    (191/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.086197243 seconds)
    (192/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.075513112 seconds)
    (193/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.195213208 seconds)
    (194/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.071235278 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.155555868 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.074713022 seconds)
    (197/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.158627556 seconds)
    (198/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.170432726 seconds)
    (199/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.146228988 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.066207068 seconds)
    (201/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066826794 seconds)
    (202/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.20224358 seconds)
    (203/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.077840352 seconds)
    (204/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.161504464 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.066818328 seconds)
    (206/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.068489134 seconds)
    (207/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.067074019 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.144765796 seconds)
    (209/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067175303 seconds)
    (210/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.09528531 seconds)
    (211/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.162394743 seconds)
    (212/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.073490508 seconds)
    (213/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.073974839 seconds)
    (214/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069304644 seconds)
    (215/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067345976 seconds)
    (216/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.077380006 seconds)
    (217/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.067237263 seconds)
    (218/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.079037367 seconds)
    (219/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.06747863 seconds)
    (220/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.067019262 seconds)
    (221/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.073989394 seconds)
    (222/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070234113 seconds)
    (223/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066620135 seconds)
    (224/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.067671739 seconds)
    (225/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.073946463 seconds)
    (226/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.073917199 seconds)
    (227/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.074670157 seconds)
    (228/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.066232613 seconds)
    (229/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.079789651 seconds)
    (230/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.069352102 seconds)
    (231/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.074537926 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077076104 seconds)
    (233/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078101895 seconds)
    (234/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074759827 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.090955253 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.066962213 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147291207 seconds)
    (238/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.0653268 seconds)
    (239/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.066566819 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.141275761 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.067909595 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.085536787 seconds)
    (243/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.078051657 seconds)
    (244/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074875831 seconds)
    (245/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.06725656 seconds)
    (246/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.065541406 seconds)
    (247/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.065717616 seconds)
    (248/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.066609766 seconds)
    (249/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.081334816 seconds)
    (250/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.068563277 seconds)
    (251/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.06779763 seconds)
    (252/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074672733 seconds)
    (253/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.066351459 seconds)
    (254/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.160731605 seconds)
    (255/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067260462 seconds)
    (256/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.069499041 seconds)
    (257/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.065161587 seconds)
    (258/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.17388529 seconds)
    (259/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.172300803 seconds)
    (260/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068569945 seconds)
    (261/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.068389622 seconds)
    (262/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.06525972 seconds)
    (263/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.065542376 seconds)
    (264/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.065679745 seconds)
    (265/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065000911 seconds)
    (266/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.065092062 seconds)
    (267/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.07898569 seconds)
    (268/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.06695326 seconds)
    (269/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.071304313 seconds)
    (270/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.065125422 seconds)
    (271/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.083474554 seconds)
    (272/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.194621739 seconds)
    (273/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.066057512 seconds)
    (274/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.077071658 seconds)
    (275/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.219760749 seconds)
    (276/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.065883794 seconds)
    (277/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.0666446 seconds)
    (278/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.066054644 seconds)
    (279/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.225179243 seconds)
    (280/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.067130513 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066044251 seconds)
    (282/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.066683813 seconds)
    (283/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068200421 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.115106769 seconds)
    (285/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.067139564 seconds)
    (286/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.065495478 seconds)
    (287/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.065178013 seconds)
    (288/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.06655774 seconds)
    (289/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.069863603 seconds)
    (290/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069894406 seconds)
    (291/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069930258 seconds)
    (292/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.06503464 seconds)
    (293/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.069074544 seconds)
    (294/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15114494 seconds)
    (295/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.0653692 seconds)
    (296/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.066470488 seconds)
    (297/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073654611 seconds)
    (298/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.177686609 seconds)
    (299/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.082999464 seconds)
    (300/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.081622134 seconds)
    (301/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.06625963 seconds)
    (302/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066075082 seconds)
    (303/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.074138 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.065758731 seconds)
    (305/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.080064653 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.065946395 seconds)
    (307/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.064890146 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.064113956 seconds)
    (309/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.067262602 seconds)
    (310/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.068574223 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.109604917 seconds)
    (312/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.066220623 seconds)
    (313/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.066420288 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.35282916 seconds)
    (315/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.06859197 seconds)
    (316/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.093918189 seconds)
    (317/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.067157979 seconds)
    (318/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.071465898 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.080390741 seconds)
    (320/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.173036446 seconds)
    (321/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.124639334 seconds)
    (322/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067241816 seconds)
    (323/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.0674049 seconds)
    (324/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.168829767 seconds)
    (325/341) benchmarking ("sort", Int8, false)...
    done (took 0.150665696 seconds)
    (326/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.066853001 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087033839 seconds)
    (328/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074114421 seconds)
    (329/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.092815856 seconds)
    (330/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.0675689 seconds)
    (331/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.065606967 seconds)
    (332/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.070765254 seconds)
    (333/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.06585942 seconds)
    (334/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.066115852 seconds)
    (335/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.078568802 seconds)
    (336/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.066407299 seconds)
    (337/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.066954836 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066288419 seconds)
    (339/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.068985545 seconds)
    (340/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.085037168 seconds)
    (341/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.065847602 seconds)
  done (took 36.774323779 seconds)
done (took 38.328622848 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.08423965 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.090798705 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.073619996 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.085207523 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.081812804 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.101206515 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074244734 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.078912311 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.081569818 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080580952 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.079275215 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.073339136 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.076037949 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.075576412 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074087678 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.089500934 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.082060847 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075192345 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075536215 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.065953273 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075019334 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067204795 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.065671781 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.072787585 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.078011794 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.073464122 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.075445375 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.075790151 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.067260799 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.066696358 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.071590456 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075394263 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.065750268 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.077848259 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.076344385 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075525534 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.077598904 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.079672397 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.065192329 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.06654438 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.077509979 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.06663176 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.074819959 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.072876528 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.071437157 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074327643 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075211253 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.078509648 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089451843 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071536139 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.077688653 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.077530886 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.077798131 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.071957544 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.07243503 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.075127872 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.073683154 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.088937705 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075274962 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071534758 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077139778 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076068344 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073347287 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.07489898 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075349614 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078356777 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078234028 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.073808166 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.077591834 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074251458 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.065678818 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.074919076 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.071740121 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.066463189 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.077973161 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.080354933 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.06542347 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071412501 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.074225778 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.075049754 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065507974 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071321026 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.065379588 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071562402 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.070773491 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.07252007 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072272332 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.073715809 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.06571932 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075256504 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074319113 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.074664654 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.065597947 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078507801 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.066221299 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.073460267 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.06666461 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.06679621 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.065405798 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072872637 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066826151 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071090059 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.074977881 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065498224 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.07183614 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.079754526 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.068967947 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.074194513 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.065368032 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066080349 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.076697118 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.077339371 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066274503 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071983354 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.06572715 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072648778 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.065781564 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.067172897 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.066597099 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.066751167 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071336854 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.06670701 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071110471 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.072941144 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.077991113 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.06622649 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071760262 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.070950931 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.066199743 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073561772 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066817579 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.066570998 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.065342193 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.078795811 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071315582 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.066498923 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.0725331 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.07064815 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.073756466 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064813565 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074242446 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072202997 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.070544055 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.220533693 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066271201 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.078643715 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071861843 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071651724 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.065761226 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.066675457 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.066004025 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.066731259 seconds)
done (took 12.926081738 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.067465047 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.10588301 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074142141 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.082976683 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079059368 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068594902 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.070643867 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083237638 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.071055409 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.086352608 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.094902746 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.089094829 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.093396868 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066176695 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067610689 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068217508 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066160738 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.074891399 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081598694 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.090205308 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.095514952 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.066669868 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.069147188 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.082747775 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.077011371 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.082931051 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068471512 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.06769116 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.108973959 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.083927484 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.092469404 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.066718793 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.067854018 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.080487985 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081177651 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.073723127 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.067867541 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.071194281 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.068227562 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.066824341 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.068628639 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081130587 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.070810635 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.070587009 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.067975218 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.06871326 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067327377 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.070132369 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080171025 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070491293 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.074941968 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079226629 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.068669689 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067287246 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065294237 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.070584919 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.068004724 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.067942892 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067261104 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067680286 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.067070692 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.069558813 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068100969 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.067594794 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.07028748 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069707215 seconds)
  done (took 6.575681026 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.083336709 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.092989272 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081578694 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.08263006 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.066751013 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068231932 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067396463 seconds)
  done (took 2.221321532 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.0680074 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.075766382 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.079631066 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080177444 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089295079 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077042648 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.068125932 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.09953332 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.066814647 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076366576 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.082883912 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.08099977 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.070555617 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.079279161 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.067955124 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079957438 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.067960825 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.0750073 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075205872 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.081037057 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071916248 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097930742 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081078743 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.067820837 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.08089277 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.074706059 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.069502069 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.068069277 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068447549 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067353352 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067393322 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089438299 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.07468231 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.07939052 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068022541 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.066899643 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.071742627 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.06815769 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074318437 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.076026875 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.070850197 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.06715134 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068329122 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.06733098 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068596748 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.071758574 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068490331 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067201158 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.066670764 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.07479272 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066729596 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.073747901 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.069524724 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072437894 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.071871863 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.071869192 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.074657953 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067913734 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.074785824 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.073730989 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.06777653 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.079773857 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.078636117 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.070863369 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079248348 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075836548 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.073781776 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071215779 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.066976546 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.067481781 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068278433 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.078907316 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.070616067 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069296017 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.06813334 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072362348 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071663834 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.082565857 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082129605 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080877079 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070336663 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.068065736 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.070853891 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.082822098 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072678115 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067243215 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068275007 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067104921 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072467024 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067764861 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.07218461 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.067808306 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.074788718 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070379335 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.069910362 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075510577 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.0678028 seconds)
  done (took 8.777847421 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070171494 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068600118 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.069236061 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068434866 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068862662 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069350384 seconds)
  done (took 2.129581069 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.09156251 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068970372 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080145069 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068653556 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090042804 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.074970244 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074876161 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.06990283 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.083998052 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.07858928 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.074650447 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077036533 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074313956 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.070082455 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074112596 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.068903688 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.073879219 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070943789 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.078104415 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070185636 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.08134359 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070268494 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070323577 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.079714736 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.070956178 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.068881261 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.068801184 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.079132977 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.077694154 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069311092 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069376946 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.070746608 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076362214 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069494596 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074859031 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076450461 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.067935999 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.073774406 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070823714 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.07086724 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07712875 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070152966 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070572746 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073123021 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069958513 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.076327992 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.073386739 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.071235908 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.073809272 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073292319 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073436894 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.068549405 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.070674876 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073050742 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.075930686 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.068782455 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.077336807 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.073645693 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.06964596 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076372143 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.067723368 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.07045341 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070441307 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.070659149 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.072830649 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073329243 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076355837 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070393538 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.069903608 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068111081 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073247565 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.067512845 seconds)
  done (took 6.955174123 seconds)
done (took 28.318432307 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.552951448 seconds)
  done (took 2.211543863 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.582651954 seconds)
  done (took 2.279582089 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.585960684 seconds)
  done (took 10.273143517 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.3098695 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.335010814 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.734155008 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134247967 seconds)
  done (took 3.241418533 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.751315089 seconds)
  done (took 2.452717199 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.229824969 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.21988713 seconds)
  done (took 2.160542955 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.345386013 seconds)
  done (took 2.038301655 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.144189976 seconds)
  done (took 2.832609764 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.226369842 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.159840989 seconds)
  done (took 2.087979428 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.511117315 seconds)
  done (took 2.205151325 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.332742815 seconds)
  done (took 6.031415508 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.236778586 seconds)
  done (took 1.976694752 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.23206747 seconds)
  done (took 1.936442067 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.063241005 seconds)
  done (took 3.762709197 seconds)
done (took 47.193843257 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.085064854 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.090272307 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.087942688 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.082515329 seconds)
  done (took 2.021327894 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.076806984 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071400688 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.074895253 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.074915067 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.072724929 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.073750443 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074528769 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070087782 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.073177731 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071083421 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.069896557 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.071209126 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.073862578 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.0712151 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.07363737 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.074798185 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071669673 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071153682 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073512604 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071455039 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.073863376 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071096998 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069874538 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071290571 seconds)
  done (took 3.447052048 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.079774078 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.073428502 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076602145 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072345313 seconds)
  done (took 2.016777498 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078485267 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.078071172 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.086904161 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.091524918 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078087898 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078383525 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085562172 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086141919 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.066774865 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.088462876 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069719101 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.067940703 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068621655 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087185281 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.084710747 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063617737 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06484269 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078031454 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.078094029 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.080750308 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.06979574 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.06677763 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.077993823 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078300557 seconds)
  done (took 3.569598626 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.08070729 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067158002 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079407451 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.092513865 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.093695093 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.066925414 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080009838 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.093978095 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.127611739 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.067097322 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.073196345 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.066738837 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.105204993 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.066581298 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.081812189 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109260031 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112619765 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070708273 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.099644851 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.066091106 seconds)
  done (took 3.422504177 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.076619047 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071208565 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071537343 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.066867625 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.077409537 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074603449 seconds)
  done (took 2.163644778 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.069642906 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.068914074 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.067884872 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.067634767 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.073543403 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.068333902 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067191775 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.069014766 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.068587535 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.068650129 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.067823228 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.067135672 seconds)
  done (took 2.541416185 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.155929571 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070604131 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071334411 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067332371 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.07233367 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.067407291 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.082492991 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070092958 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.08566465 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068561999 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.067992999 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070167582 seconds)
  done (took 2.669487141 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101104486 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10238105 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.147496352 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118075544 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.115621329 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097756056 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120079876 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.094277596 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.1610268 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.137265471 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11732188 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.125303883 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088021983 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.071006264 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100696974 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10285429 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.136619578 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.07360925 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11395889 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.195958803 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11522954 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.113015132 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122624448 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117028759 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.081827777 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.122104367 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095584242 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103218901 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.15551126 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110356027 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.119676666 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.098397078 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.072848429 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072119653 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151027514 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.102041013 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.138134277 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094413779 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.100967141 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08991338 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107952876 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.070555455 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.086951749 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.106467136 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085321133 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.117261923 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.0880887 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103887343 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082251248 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.131505335 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107820286 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099893983 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.088822138 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104165236 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130467182 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095681802 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110895237 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107533413 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082769591 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.116919508 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100015708 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256039526 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096121761 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082285084 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.161091381 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090936874 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.113526234 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114934764 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.083890872 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.090887865 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103907349 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132231682 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108264816 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.108164525 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115670467 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.125891185 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111762118 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093748901 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.129608449 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095347009 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.073974411 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.10623575 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.129335067 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086331776 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.101939455 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130697448 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093784019 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.1087252 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.093485424 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.119518087 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081868239 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097146854 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.070546626 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099079239 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108482184 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098475568 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112842185 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108209145 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.079261809 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.125143899 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110169789 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073950566 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.117939297 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099792969 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.153887255 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096626186 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077865116 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.100760996 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094465371 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.150639458 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085930872 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080878605 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099518222 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142351084 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.094898417 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.170252674 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.097389111 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.129356922 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097840441 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08852395 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076251891 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090728981 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102464814 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107300009 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101091771 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088668453 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.077566573 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087604685 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095420005 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.254608934 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083841831 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116348578 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103231084 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.076758466 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090749528 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.078618016 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.126480441 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.079205696 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110036062 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.126675018 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.079579494 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106726928 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.129548717 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.140020671 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099265151 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10832031 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141160006 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117067268 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080771483 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.084649021 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109137159 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.143034344 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.114409252 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087416329 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078060612 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100869856 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112784825 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098349131 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.138675337 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128119642 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110081485 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.098796937 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.141263125 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118569242 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091849086 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096256589 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097583991 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.123799497 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107504086 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15596386 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095614017 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118856801 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11498786 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.141290341 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.114749974 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.090959551 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.085549169 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096420755 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.105339855 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106423646 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143412931 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.096262223 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.073606912 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09437433 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132875964 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077353333 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100529951 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091080383 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094161454 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119829065 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084470059 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081826397 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.06912029 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102082186 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.13475561 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070212789 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11108344 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.278366818 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10495868 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.10579706 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071184203 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101015643 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145066555 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106630834 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.142242237 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117384968 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101167515 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.11958642 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.100770034 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.106724637 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081272067 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.128971075 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.135919259 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097150918 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091289279 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136299665 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.119347243 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.135259436 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.097232966 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115633381 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.105632872 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10040016 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104105133 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.102013208 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.14444689 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121859881 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.125874714 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116870097 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107273263 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.108258565 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138277447 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083211305 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.117210898 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076668663 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11240842 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078492056 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.107783208 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080675946 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112509271 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080856845 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.100757018 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070852199 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.075264464 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.142304965 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.112990467 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090195593 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08718089 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.136810449 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13181543 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.081579455 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102532849 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136144807 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102331088 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102249651 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.108930213 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.085455122 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093925187 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.303620774 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08115767 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.083911843 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.100399712 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096002777 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108313404 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08598091 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076634128 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.136998795 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105416328 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096328023 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.109858342 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.096770593 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.122980219 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.091480306 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.088388295 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106531069 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.104707848 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.140976601 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.092515204 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.098733294 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.118474482 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.081503214 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.093869298 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071133456 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.085937739 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.077368823 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110470951 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077736278 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.109820872 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.070552351 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.131085961 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088637482 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.093473441 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.103977859 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099062863 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.12945452 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093155473 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.128982649 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091425913 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103099596 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109424746 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095277869 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112644395 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104514714 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097029575 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110514558 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.097149022 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.106572608 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110856047 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095427686 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.142021386 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091086969 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121426078 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106709845 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107532305 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10532386 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.117579136 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.137921191 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.114029048 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143683194 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075824328 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084144103 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106122603 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101059174 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146743417 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102727212 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073183399 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117666753 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091240993 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.096058815 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.266891754 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084863921 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.144867014 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08895381 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.088476628 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11495024 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.091316913 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09885516 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078023273 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097050847 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.102278988 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.095755697 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.095921901 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.134155022 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.118305936 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115697541 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.133995386 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.100572018 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.094336732 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.119937241 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111486349 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112457332 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08810773 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.088114163 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.125027379 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101953078 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.128635201 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.101338191 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095769919 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101818973 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091535683 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.10058349 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0981535 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.110665911 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081698997 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.077833119 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.069461196 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.07362074 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.118416756 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109906026 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10314433 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099773602 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073636131 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104777109 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.099472897 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.073145026 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088932114 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095700328 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126697705 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.085325422 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.093852749 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.11517945 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.092620567 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.104491812 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.130892468 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.129834273 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.100993584 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089738984 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.143665135 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.129088435 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088872499 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093975941 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.072839095 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08006289 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103062172 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146097014 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11801533 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.07788121 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084173742 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.078067804 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.250811412 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.074132079 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.089580131 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.091247498 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105500856 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.121294129 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.113805709 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105254667 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07697476 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.104554211 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.099083208 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093816012 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.098029197 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.102807867 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.106911277 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.125155188 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10229145 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098378349 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077653582 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.081808298 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.076681381 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081122467 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.102962089 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.078758317 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077730465 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130726129 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.092302293 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105853111 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111028079 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086454578 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077004462 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133393576 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.070492129 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135314727 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.072862686 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.083554099 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.082094851 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080574873 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095202912 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.106673244 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096428246 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114265338 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107194524 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105790513 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.112151395 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.156228892 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072107044 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.150726814 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07720547 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076851982 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.077123273 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112682785 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091120314 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.104795887 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.141832098 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090719997 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093908722 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078722399 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.129259875 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.099361656 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.104289537 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084355448 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080447147 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.128758515 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080318208 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.072492518 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.087666037 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.112793134 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.07383613 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136391647 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114776213 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.080583371 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.278901752 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.632976794 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092924902 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.077649836 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.09121101 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.149798989 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130112679 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085456867 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109686513 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.120494275 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.091671423 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116024567 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.109179936 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185783655 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075873899 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096530202 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.1056414 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.099952638 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.094183954 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093556789 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.088873149 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.093858152 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.086841822 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081841534 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108798964 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089111876 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093195125 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.125002627 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084260442 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.081858948 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.131676558 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.10563577 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.083259984 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089886263 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.101474361 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089161266 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091923114 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.070439711 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145679491 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.122538927 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102729453 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092269148 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.108780816 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119027808 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090387362 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113299215 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.08946386 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110799429 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.086219891 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.079754917 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.103376188 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.079718437 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078869324 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118291405 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.087828658 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094047686 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.10566677 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096681034 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.115528175 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118545949 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111896556 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099205468 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080904586 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087421484 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.088513127 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076507459 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079515358 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.075546479 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.077244691 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107917191 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.251263744 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114810572 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115737755 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.083781732 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105990887 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.1028525 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.110379386 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085298992 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103258249 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.11078616 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092092375 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.104732455 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101552466 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.129293705 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146456898 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101054607 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.124728442 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.13397501 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.078370878 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077444947 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.070509464 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147645965 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080825135 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.083139744 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.112824829 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134269023 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.082837116 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096238295 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.234204582 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.08157771 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083100362 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098134257 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071563045 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084163517 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109580807 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086084222 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081445057 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.100222507 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114099952 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11844881 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113292494 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.0905309 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.08416488 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082455801 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095237701 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.106278363 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.129681464 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091235229 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076717898 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108011065 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.104709409 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124328378 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074305461 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081827501 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.130572849 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.093760569 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105311182 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081126245 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.121660034 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.131682583 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091257407 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.134396881 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072204379 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.084841676 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.09060666 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.126658404 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.075787315 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.089404256 seconds)
  done (took 66.409218894 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.14962992 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143962378 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.095860769 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.122726515 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.208206051 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.21046368 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.132540205 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.108629073 seconds)
  done (took 3.073902727 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.07002185 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.08429314 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.103022342 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.084233392 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.068327599 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.069544848 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.206897444 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.083109349 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.06845733 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.108577249 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.077012251 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.069868089 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.36253934 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.067243492 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.068377218 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.076067858 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.06844248 seconds)
  done (took 3.598195229 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.368748353 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.626334561 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.326261739 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.076222774 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.922405094 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.092962878 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.142074041 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.141171424 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.083876725 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.531915199 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.371600035 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132341708 seconds)
  done (took 18.683041122 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.077497565 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.076901373 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.079874263 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.079638578 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.075492828 seconds)
  done (took 2.254445862 seconds)
done (took 117.590497334 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085181358 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.174415677 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.068734991 seconds)
  done (took 2.140483215 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.083861815 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.082617721 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082132832 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080163092 seconds)
  done (took 2.193868106 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.07608834 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.078143207 seconds)
  done (took 2.012936929 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225566885 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.177486464 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.091653357 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084113621 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081423104 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.081867719 seconds)
  done (took 2.120529322 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074022154 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073458231 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073668193 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073567511 seconds)
  done (took 2.154632987 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.071805935 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067657531 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070385739 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.072405016 seconds)
  done (took 2.142783581 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.087155747 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084629728 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.11361891 seconds)
  done (took 2.147981486 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085126261 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.084644547 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079434115 seconds)
  done (took 2.114671073 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111123731 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098175311 seconds)
  done (took 2.070872587 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.08166674 seconds)
  done (took 1.946988567 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.091463835 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.100530879 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143027468 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.108633962 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142593195 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.129344176 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.078444306 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079442262 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075093492 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074031683 seconds)
  done (took 2.883995799 seconds)
done (took 26.364894471 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.080301826 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375476723 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.379755405 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.088574531 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674243087 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.358713274 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.007877935 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092359384 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101082763 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069468089 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086774602 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.651696167 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.00004124 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.331763357 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.985024209 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331431648 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653232319 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.069983198 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069067981 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.069870651 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.98941238 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.068668466 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.069109998 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.069836005 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.651167508 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.375464683 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070400481 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.326652714 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069127916 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.071665041 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.357763547 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071214575 seconds)
  done (took 16.504977321 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.071900293 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.12503 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074269068 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085703327 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071540825 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.070971906 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07235285 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070177844 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112365792 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069467134 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087151418 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069239383 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073052166 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.07047667 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089531411 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.069904803 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071275827 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071145713 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070133386 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070762881 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.088311563 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.069921019 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070625299 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071120128 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.070971957 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083087541 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071342166 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070100915 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.07046729 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072388525 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.07360875 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.0712376 seconds)
  done (took 4.332671462 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.122899853 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128043647 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074768923 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111049597 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.119856786 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071816806 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.152873615 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093338911 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115321622 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.069894285 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.086636954 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069408071 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105010165 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070861702 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.089790343 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070265107 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.071848164 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071045574 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069751845 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071293773 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089635532 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.07014244 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070803881 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07102576 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071193932 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.085140225 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071222974 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070701463 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070678611 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072572286 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.073874084 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071092374 seconds)
  done (took 4.607332449 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.071214092 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.073046616 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.08151675 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082441101 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068487334 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.070294101 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071667868 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068262226 seconds)
  done (took 2.472947782 seconds)
done (took 29.794600689 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.080951843 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.069999196 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.072902856 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.088815675 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075513525 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072289735 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066370132 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.075990835 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073178469 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072622549 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.07486159 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.068859216 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.07141228 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066019992 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.073277476 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067312873 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.073842718 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.071623163 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072803257 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.073958292 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.073481081 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073277502 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076728723 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072387191 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.072858531 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.072895772 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077112689 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.074103706 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068844707 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.070776552 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070127826 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082079142 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074255264 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074661033 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068095828 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06842727 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072631954 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070129484 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074287799 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077144164 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.069694983 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.07686927 seconds)
  done (took 4.92279527 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.08882653 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095978038 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.087643676 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.08293697 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.107609266 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083258485 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.09073507 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.080622419 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.079133399 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.089797183 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075869956 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080155229 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.08160914 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077073931 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.079472429 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.075687071 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.080789027 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.074652339 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.079499628 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.080138704 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.090863491 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073585748 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081267524 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081945677 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.07519113 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081275696 seconds)
  done (took 4.051565209 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.074560217 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.089870211 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094324117 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143416914 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111050655 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084194478 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.0840385 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.103503167 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.102461624 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070170056 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.073561365 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.095602344 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.097973801 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.076028746 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.107318268 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.087467122 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082145581 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071444627 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.07608476 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103645927 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09132518 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.087801271 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.102111054 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089395307 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068293666 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.078524415 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.0760138 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.084269086 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.076707412 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081563894 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.073032789 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072567761 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.069878294 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081202997 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073032851 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.0676183 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091322775 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081823953 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084392171 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107348353 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.078988513 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070986416 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.098979131 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.134535321 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.068405408 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.071543506 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.0732571 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.081294909 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.07005734 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099370459 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.087628993 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069062554 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.088044824 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.070518315 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.070881385 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.085822663 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.07084371 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.07127435 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081548589 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.07557974 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090313919 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074848798 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090122485 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069111516 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080483447 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.07078011 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.070616383 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06780976 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105825395 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076452162 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.121477722 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070500582 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067485269 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.081552216 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.08084659 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.076102289 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.068658263 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088394621 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.081450096 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073043531 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.080896513 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072082295 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072616802 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105418704 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068498808 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067158032 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067195626 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071378919 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.07244788 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069845711 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.082625539 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.069031617 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072500483 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.084308641 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068565755 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069902865 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071707124 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070494436 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.06835153 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.079570159 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.072809489 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071281239 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081311022 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.069907293 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072523855 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084077021 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.078950407 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.068267671 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.070412972 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.073650707 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070443773 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073025815 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072282998 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.070684917 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076201538 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.076045329 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075318297 seconds)
  done (took 11.329254991 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.164574844 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.155401665 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.070489963 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.149290617 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.077573336 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073794785 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.150509032 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.089490093 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.070150154 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071309846 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069264174 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.097881149 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.092620583 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.104827887 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.073968373 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071317826 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095535314 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103805684 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.153091465 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.147385796 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.092954899 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077113003 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.071960926 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.070928114 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.070956111 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.07873943 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086084437 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.078023493 seconds)
  done (took 4.644984326 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077846754 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.112615275 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074225471 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.093962504 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089328326 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.07049754 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071956374 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071311914 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.086929155 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.076968884 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070189315 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.073850534 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073510399 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070065189 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070806657 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076232965 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.076657852 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.068510263 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073414848 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074247768 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.079887532 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.095587845 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.073970227 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.069686917 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072374475 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.069961679 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.076687601 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.07982003 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069012936 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100038595 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.066841725 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.073615606 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.083499206 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.071189594 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069790272 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070353585 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070090369 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.070033489 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070034197 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067792042 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.067777228 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074405591 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068236355 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076517298 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.083477167 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.076841751 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.07107559 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072483047 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072119918 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.06698018 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073150533 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073084105 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072071045 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078067148 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073468953 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072172883 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.070808317 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.097872185 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075645779 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069270032 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068471146 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.067971254 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071219826 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.077711088 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086372352 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071332787 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.068351351 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070421525 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.074275702 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083599734 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.068863082 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.074464905 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.066975379 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.07011744 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072057327 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.072795619 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.07066329 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068107196 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.068950029 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069995695 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069611346 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069590008 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.068980425 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.07246039 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067355942 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.067705601 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070070787 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071239613 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076322615 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068660908 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.072471698 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.070836539 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.0685041 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.072538883 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.074557673 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072291362 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089167186 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.078527661 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070037351 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.067099851 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084420461 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.071360506 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.069055743 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.074914749 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.073508328 seconds)
  done (took 9.719498192 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.092584759 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.071188366 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089751227 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.095996072 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.079983158 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075748805 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084227739 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.070775254 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.08589921 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069297649 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.078474111 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.068643666 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.08349966 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.078534175 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.07155394 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.079530499 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072077318 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.090314257 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.087454058 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.06833434 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.07962955 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082125648 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.082697808 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088337105 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.087846221 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088642203 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.081985913 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072333659 seconds)
  done (took 4.20238182 seconds)
done (took 40.743351892 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.9572349 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.127990557 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.962064894 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.136535599 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.254173402 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.070066221 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.090384666 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.957134605 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 8.003638576 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 6.988208418 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.280885858 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.374431525 seconds)
done (took 69.157036783 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.048984692 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.097162759 seconds)
    (2/2) benchmarking "String"...
    done (took 2.176080177 seconds)
  done (took 6.171981304 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.556515429 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.944992775 seconds)
    (3/3) benchmarking "different"...
    done (took 2.005944884 seconds)
  done (took 8.398007891 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.068240099 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.972243761 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.218902586 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.956660015 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.962867747 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.369000665 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.759563051 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.434685624 seconds)
  done (took 32.567604397 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.040374568 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.173772054 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.645519673 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.658740628 seconds)
  done (took 16.447415456 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.559578996 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.220386898 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.220006586 seconds)
    (4/4) benchmarking "different"...
    done (took 2.212193565 seconds)
  done (took 11.154964394 seconds)
done (took 86.837626393 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.994682779 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.959937711 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 6.961352018 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.992700914 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.968104208 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.960451159 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.963659733 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.963107825 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.989612826 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.022740544 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.96012414 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.971804488 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.962306194 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.99560088 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.694443711 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.020888038 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.971991122 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.970262389 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.984502154 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 7.002230223 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.96402708 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 6.964963688 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.437789129 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.146738632 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.585833254 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.400788962 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.526778315 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.389764462 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.975606947 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.956878314 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.040697744 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.287518284 seconds)
  done (took 210.881452032 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.958191409 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.998002025 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.044685817 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.962487157 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.565294979 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.148918101 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.109988909 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.596581628 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.96233693 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.973796497 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.149823557 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.959965927 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.179932609 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.904431875 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.955614719 seconds)
    (16/36) benchmarking "herk!"...
    done (took 7.01082064 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.175965891 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.187357903 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.930899838 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.152106468 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.963673681 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 3.970702098 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.935375779 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.131064738 seconds)
    (25/36) benchmarking "symm"...
    done (took 6.960977343 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.008669746 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.970640029 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.982487184 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.133099532 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.141673413 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.989505617 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.98665473 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.126113116 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.81188527 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.966099567 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.972176538 seconds)
  done (took 176.872922496 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.136483377 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.961880505 seconds)
    (2/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.960966599 seconds)
    (3/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.96813476 seconds)
    (4/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.961501814 seconds)
    (5/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.016871158 seconds)
    (6/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.097568035 seconds)
    (7/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.963223428 seconds)
    (8/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.620387428 seconds)
    (9/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.972481466 seconds)
    (10/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.28330566 seconds)
    (11/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.967235268 seconds)
    (12/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.959792716 seconds)
    (13/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.9605968 seconds)
    (14/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.964003099 seconds)
    (15/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.972790748 seconds)
    (16/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.0507799 seconds)
    (17/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.967686453 seconds)
    (18/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.977066589 seconds)
    (19/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.962298292 seconds)
    (20/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.986440508 seconds)
    (21/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.963466854 seconds)
    (22/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.948104305 seconds)
    (23/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.9603671 seconds)
    (24/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.963052444 seconds)
    (25/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.960551212 seconds)
    (26/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.955427412 seconds)
    (27/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.962673698 seconds)
    (28/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.961235246 seconds)
    (29/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.954750816 seconds)
    (30/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.92818601 seconds)
    (31/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.203048705 seconds)
    (32/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.964766613 seconds)
    (33/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.96225433 seconds)
    (34/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.546305182 seconds)
    (35/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.975127921 seconds)
    (36/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.050104704 seconds)
    (37/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.967230043 seconds)
    (38/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.052654121 seconds)
    (39/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.019022356 seconds)
    (40/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.050511129 seconds)
    (41/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.962200676 seconds)
    (42/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.179760682 seconds)
    (43/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.048652122 seconds)
    (44/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.964684844 seconds)
    (45/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.963113454 seconds)
    (46/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.025828837 seconds)
    (47/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.9744711 seconds)
    (48/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.964416848 seconds)
    (49/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.962636524 seconds)
    (50/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.967076601 seconds)
    (51/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.971058063 seconds)
    (52/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.026674384 seconds)
    (53/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.195471307 seconds)
    (54/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.964057135 seconds)
    (55/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.100404693 seconds)
    (56/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.458229449 seconds)
    (57/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.963242223 seconds)
    (58/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.963501659 seconds)
    (59/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.963796452 seconds)
    (60/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.570243275 seconds)
    (61/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.963786383 seconds)
    (62/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.964954724 seconds)
    (63/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.972130112 seconds)
    (64/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.971005891 seconds)
    (65/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.963470247 seconds)
    (66/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.966235893 seconds)
    (67/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.35069256 seconds)
    (68/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.035288422 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.037565627 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.706091651 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.965402677 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.434892672 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.044674296 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.96321651 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.964055155 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.964030038 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.965182275 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.963800026 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.967396371 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.100660349 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.973298471 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.04542512 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.045793617 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.964535921 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.101855 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.967754173 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.975945553 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.780848572 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.032158407 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.002240386 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.77777642 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.964582686 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.339776249 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.718756301 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.965993065 seconds)
    (96/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.965230782 seconds)
    (97/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.964915581 seconds)
    (98/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.977442241 seconds)
    (99/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.965741667 seconds)
    (100/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.966831394 seconds)
    (101/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.966765591 seconds)
    (102/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.044222555 seconds)
    (103/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.965986757 seconds)
    (104/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.101526728 seconds)
    (105/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.711058467 seconds)
    (106/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.409731343 seconds)
    (107/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.968995394 seconds)
    (108/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.937657643 seconds)
    (109/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.974065987 seconds)
    (110/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.0465238 seconds)
    (111/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.103355961 seconds)
    (112/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.967300147 seconds)
    (113/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.030103514 seconds)
    (114/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.974069313 seconds)
    (115/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.96887249 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.052376016 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.966803023 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.967082391 seconds)
  done (took 430.949190534 seconds)
done (took 822.766781061 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.646773338 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.666783351 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.741609795 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.621359897 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.595048777 seconds)
  done (took 15.161293795 seconds)
done (took 17.058991144 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 1.996566614 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.983682962 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.972446623 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.020740062 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.990843116 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.978530167 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.013488304 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.013084851 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 1.998879268 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.977864434 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.017143829 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.983900157 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 1.997988398 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 2.003475974 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.04376613 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.006606843 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.984970209 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.97577174 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.023819607 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.984823769 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.984826208 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.982434603 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.981304585 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.017306712 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.050675541 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.99192301 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.980215307 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.018929656 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.991127524 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.01645026 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.036704067 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.002829957 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.01547414 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.047428711 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.030528488 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.051012846 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.991643274 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.041043033 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.9876892 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.054769001 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.026759863 seconds)
  done (took 84.174489927 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.977700734 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.112268861 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.190842563 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.011557516 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.97744637 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.195099546 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.034263777 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.106607336 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.110725787 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.223224744 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.233410788 seconds)
  done (took 25.083409315 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.977339056 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.119623532 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.215420978 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.014113248 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.001297855 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.195566856 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.042530421 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.106235984 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.114331838 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.194536064 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.214198182 seconds)
  done (took 25.110033588 seconds)
done (took 136.267024111 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.351393893 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.005241538 seconds)
  done (took 6.261570349 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 1.997721867 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.128982071 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.974484964 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.974870205 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.974667486 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.976159097 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.976832703 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.975933519 seconds)
  done (took 17.886970467 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.974086461 seconds)
    (2/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.973229711 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.974269063 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.973447685 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.974671273 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.975375998 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.974549445 seconds)
    (8/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.974492093 seconds)
    (9/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.97511678 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.974518201 seconds)
    (11/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.974867386 seconds)
    (12/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.973247052 seconds)
    (13/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.974253486 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.974958284 seconds)
    (15/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.974690446 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.975158075 seconds)
  done (took 33.500329493 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.97718915 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.97414012 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.975931876 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.975697902 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.975810522 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.975318022 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.976489403 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.9737844 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.975102367 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.975422276 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.975208639 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.975988774 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.974337278 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.975575059 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.974355822 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.975108613 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.9754276 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.972135126 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.978801012 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.975047824 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.976601438 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.976143004 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.975317472 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.979722742 seconds)
  done (took 49.323995667 seconds)
done (took 108.884792971 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.305294077 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.928365495 seconds)
  done (took 9.143240174 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.979456308 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.976135542 seconds)
  done (took 5.943191772 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.976704045 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.976759757 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.976244263 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.97799431 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.976446107 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.975353394 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.976891191 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.977725417 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.976881939 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.978061022 seconds)
  done (took 21.678035266 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.976951915 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.976058545 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.977723896 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.977165264 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.97775962 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.977597559 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.977008119 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.976796646 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.978232366 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.968560533 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.977761134 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.977164505 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.977677253 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.978075443 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.977501624 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.977258169 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.977911473 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.977322009 seconds)
  done (took 37.495481194 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.9772165 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.976571993 seconds)
  done (took 5.863911094 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.97733959 seconds)
    (2/7) benchmarking "second"...
    done (took 1.977756675 seconds)
    (3/7) benchmarking "month"...
    done (took 1.978064695 seconds)
    (4/7) benchmarking "year"...
    done (took 1.979245586 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.977857017 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.979154026 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.977857196 seconds)
  done (took 15.758214968 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.979158989 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.12613006 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.181566354 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.590341398 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.980145755 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.98213869 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.869981911 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.981299356 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.982827751 seconds)
  done (took 21.584961847 seconds)
done (took 119.373583496 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.830226288 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.980467198 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.204765182 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.064632558 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.04682269 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.275569152 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.989221457 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.57453372 seconds)
done (took 43.87505755 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.06663044 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 6.977768004 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.010213914 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.006532772 seconds)
  done (took 22.906354193 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.978358672 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.31309408 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 7.000901204 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.885090644 seconds)
  done (took 23.106287903 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.35783944 seconds)
    (2/2) benchmarking "read"...
    done (took 2.336853014 seconds)
  done (took 6.611356829 seconds)
done (took 61.601547886 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.979938823 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.979681256 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.98053131 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.979745464 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.981145582 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.980454429 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.980381136 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.979247973 seconds)
    (9/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.979221193 seconds)
    (10/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.980638274 seconds)
    (11/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.980058073 seconds)
    (12/24) benchmarking ("zero", "Float32")...
    done (took 1.980196966 seconds)
    (13/24) benchmarking ("one", "Float32")...
    done (took 1.980520865 seconds)
    (14/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.98086496 seconds)
    (15/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.981262358 seconds)
    (16/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.979589353 seconds)
    (17/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.979957173 seconds)
    (18/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.980841312 seconds)
    (19/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980418857 seconds)
    (20/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.980660832 seconds)
    (21/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981695466 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981307633 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.981040187 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.981177113 seconds)
  done (took 49.445371089 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.982056262 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.981188084 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.980795351 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.981216676 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.980431848 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.981466065 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.982224456 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.983999047 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.981539131 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.981216227 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.981815491 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.982527145 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.981883123 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.983030605 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981038596 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.983070765 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.982302067 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.981786506 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.982803614 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.983419323 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.981288938 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.98199682 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.983067247 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983374212 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.983136124 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.983167043 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.98191928 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.983371944 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.982497654 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.983150226 seconds)
  done (took 61.381208529 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.982187895 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.983761154 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.983683037 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.984256643 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.983162193 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.983816478 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.984012559 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.984585529 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.983197739 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.977118822 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.977506565 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.9761048 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.963573068 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.977282665 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.977185339 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.976200604 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.977316558 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.977162512 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.977861425 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.977023525 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.976817978 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.978419491 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.977533949 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.963561019 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.976716681 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.978007486 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.976925527 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.977909964 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.97805577 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.978330442 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.978914067 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.977659372 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.978152925 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.978722039 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.978126017 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.976374892 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.979412346 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.975213915 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.976994013 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.978593973 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.97886757 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.979031739 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.978346705 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.979021747 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.978379666 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.978144898 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.978071365 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.977994124 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.979207975 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.978651112 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.979681133 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.977917793 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.978431123 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.978724031 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.979261089 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.980257597 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.978808408 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.979407997 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.979363968 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.979661489 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.97946889 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.979605145 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.980996688 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.980213258 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.980202778 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.978696488 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.979072412 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.979756238 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.980326414 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.980025802 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.97941847 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.979218456 seconds)
  done (took 144.38020947 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.980021382 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.981176296 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.980704795 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.980272545 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980388521 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.981281569 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.980321143 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.981991379 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980516321 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.980934603 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981134402 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.981380974 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.979560726 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.980391703 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.981082761 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.980247176 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.98066391 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.981685304 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.982330144 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.981077194 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981427367 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.981893426 seconds)
  done (took 45.492916778 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.982293259 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.981933367 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.981324506 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.980858825 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.981637105 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.98137741 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.98206565 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.982070031 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982610346 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.981328068 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982493978 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981884289 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.981683198 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.982228301 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981499065 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.982537614 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.98225359 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.982610315 seconds)
  done (took 37.589928397 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.981854518 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.983243321 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.982007663 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981760717 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.983212217 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.983368449 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.983634837 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.98249458 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.982933812 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.983215343 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.982750158 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982890931 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.98311648 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.983578413 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.983377831 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.984574427 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.984230775 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.983689407 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.983433066 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.98382265 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.984073241 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.984213405 seconds)
  done (took 45.547241117 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.983671164 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.983923927 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.984077981 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.984289809 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.983664589 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.983928698 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.984176097 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.984569476 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.984028801 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.984589265 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.983152992 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.984324643 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.983962992 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.984354471 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.984323586 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.984105863 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 1.984685386 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.985162105 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.984695884 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.986600838 seconds)
  done (took 41.602816966 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.986731659 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.986424053 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.986122047 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.985478023 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.98473878 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 1.984779802 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.984707292 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.986061174 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.985038144 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.987246893 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.986169005 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.985809782 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986852241 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.985282757 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.986489055 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.986397969 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.98780378 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.987575997 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.986520926 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986605448 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.987327848 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.986856571 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.986861299 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.987287662 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.985392163 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986683711 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987123862 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.98772248 seconds)
  done (took 57.536235308 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.986609801 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.987533289 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.986464251 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.986869608 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.986128454 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.986016754 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.986692772 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.989085088 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.987653735 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.986290728 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.98701607 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.986127655 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.986840096 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.987210129 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.987373984 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.986330239 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.987323401 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.986687661 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.986866249 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.986832866 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.987685609 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.987052852 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.987390774 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.987157276 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.987888621 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.987171888 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.987089044 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.988271956 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.987825906 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.989485781 seconds)
  done (took 61.534646768 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.009622926 seconds)
    (2/2) benchmarking "in"...
    done (took 2.008144453 seconds)
  done (took 5.937928757 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.988367406 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.987985271 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.987598844 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.988603982 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.987726818 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.988558197 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.988393655 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.987614213 seconds)
  done (took 17.826037887 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.988776514 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.993902673 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.989303897 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.988918367 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.989581849 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.99793998 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.989039711 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.991666911 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.992305568 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.989905038 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.99410195 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.993966008 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.997862312 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.996735164 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.989512724 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.989535638 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.992948205 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.9940472 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.992434665 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.989541614 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.993916266 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.991074134 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.989844144 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.989703211 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.989827434 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.99685034 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 2.001818023 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.992575683 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.993364271 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.989710062 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.999678946 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.990802614 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.990174845 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.993561923 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.9909575 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.989551028 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.998039751 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.992243377 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.99103917 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.990581556 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.994848021 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.99544171 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.995776362 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 2.000365642 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.991929683 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.991598769 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.989983014 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.992446427 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.99128501 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.996523914 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.999575417 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.993881725 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.991110511 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.991328502 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.995844736 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.992471999 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.99241758 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.991452487 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.996439448 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.99995459 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.992669747 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 2.015966358 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 2.003178704 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.991097092 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.993246005 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.003851924 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.017902409 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.995222648 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.995209875 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.992243308 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.001818788 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.991768012 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.992393673 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.991451331 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.008213856 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 2.001017334 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.992215792 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.992246716 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.991581713 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.993268125 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.996036878 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.993152115 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.99521071 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.99457251 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.004355158 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.021372288 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.994052704 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.993631584 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.997762693 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.994186986 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.998666398 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.998326145 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.995424726 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.994174852 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.996748502 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.997010312 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.994740747 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.994819993 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.993842262 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 2.005391328 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.994487263 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.993656122 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.000186001 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 2.003587644 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.992767577 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.994384408 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.996711495 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.994646792 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 2.004199817 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.994963593 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.995245724 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.994849012 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.996206582 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.999408398 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.994127304 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.000495023 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 2.004972823 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.00603154 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.988237133 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 2.00176696 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 2.000106846 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 2.000003195 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.006896846 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.020634625 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.995372273 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 2.001477474 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 2.002631421 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 2.009171792 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.994543183 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.995339113 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 2.000517881 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.995548111 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.995917716 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.998754445 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.995515166 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.997100472 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.996137529 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.99742519 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.996191817 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.995780055 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.998726075 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 2.000233375 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 2.000869414 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.99000905 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 2.001158644 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.996845562 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 2.000879749 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 2.005360186 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.997005746 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.998231543 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.995740383 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 2.000434365 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.998524787 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 2.00053447 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.996407449 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.996218032 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.99866092 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.999576061 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.002774464 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.996937743 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.997038497 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.999555851 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 2.002379623 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.998171468 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.998509632 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.997668017 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.998495989 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.998826726 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 2.001269301 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 2.001384406 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 2.001753521 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.999033166 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 2.004288835 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.998068598 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.997942925 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.999249005 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.997770878 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.9981325 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 2.004321461 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 2.012496952 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 2.004199716 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 2.01080899 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.998719798 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 2.007318313 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.997978488 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 2.00317792 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 2.001223149 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.999459343 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 2.000034276 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.998487161 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.998550599 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 2.004540897 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.023051505 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 2.012125862 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.994120327 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.999615045 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 2.004911492 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 2.003954029 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 2.007462094 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.999715857 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.001178288 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 2.003404083 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.999898066 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.999723413 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.99967859 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 2.004695798 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 2.000795227 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.998912029 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 2.00553163 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 2.000955146 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 2.000327469 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 2.003077718 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 2.000186041 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 2.004545067 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 2.001229014 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 2.001144995 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 2.000921261 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.999625315 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 2.009785172 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.004996049 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 2.000187083 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 2.000220264 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.005288637 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 2.00205771 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 2.00138429 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 2.003973778 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 2.006710634 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 2.001274421 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 2.004687354 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.010362777 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 2.002076313 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 2.00295323 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 2.00162138 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 2.001715468 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 2.005310295 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 2.001843062 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 2.007849366 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 2.010344007 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 2.007970466 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 2.001233799 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 2.00975061 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 2.001946204 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 2.007476749 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 2.003490404 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.005258205 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 2.002716496 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 2.005384523 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 2.004351096 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 2.00200745 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 2.011686276 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 2.00225925 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 2.005091493 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 2.003004668 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 2.006195977 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 2.006325791 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 2.010829219 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 2.003012722 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.009206373 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 2.012776993 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 2.011249547 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 2.003868348 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 2.007151905 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 2.007802193 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 2.004341362 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 2.008704243 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 2.007518498 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.018696634 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 2.003113298 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 2.002609226 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 2.004503241 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 2.005530052 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 2.008495839 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 2.004318935 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 2.005468143 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.014426023 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 2.004971396 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 2.006578549 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 2.008822742 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 2.004974738 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 2.003858597 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.013972642 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 2.00653761 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 2.010079554 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.008077653 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 2.007569204 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 2.006568796 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 2.005083054 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.008990101 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 2.006671181 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 2.008521441 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 2.010331072 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 2.00523424 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 2.008081972 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 2.005963896 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 2.01647426 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 2.005571215 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 2.007435691 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.014519854 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.00823984 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 2.004708461 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 2.007644976 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 2.005624038 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 2.007698629 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 2.009674981 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 2.005700238 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 2.007935231 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 2.006826831 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 2.012210481 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 2.018921418 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 2.01276449 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 2.014231037 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 2.009114056 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 2.019693296 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 2.007561206 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 2.005913645 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 2.007810841 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 2.011714459 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 2.016202063 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 2.006189474 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 2.006213131 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.016953381 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 2.007308892 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 2.008365769 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 2.011376799 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 2.006783598 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 2.007621914 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 2.007522273 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 2.00930881 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 2.014570164 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 2.013999768 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 2.007141332 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 2.007526811 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 2.007823697 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 2.006474006 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 2.014053045 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.012315513 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 2.01100151 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 2.008927135 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.978758132 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 2.007404601 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 2.008804469 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 2.008088908 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 2.008207463 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.998096867 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 2.008342226 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.017409262 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 2.008887052 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 2.009671802 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.014414929 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 2.009245286 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 2.019494856 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.997637536 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 2.009189458 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 2.01020862 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 2.008048625 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 2.011903161 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 2.00761335 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 2.007850883 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 2.007874035 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 2.005378262 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 2.009826822 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 2.021110815 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 2.016755276 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 2.011315236 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 2.011275876 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 2.009747635 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 2.010875473 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.021769652 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.032723025 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.0071574 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 2.011788197 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 2.011418671 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 2.016615162 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 2.01092315 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 2.015507284 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 2.013856062 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 2.016101436 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 2.010292121 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 2.007907737 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 2.013081964 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.022872813 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.008824543 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 2.00836695 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 2.007695276 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.014445125 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 2.008855611 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 2.005696566 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 2.007051391 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 2.010996318 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 2.006762868 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 2.018948892 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 2.00619079 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 2.007022175 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.00741671 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 2.00563534 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 2.008750553 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 2.006796967 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 2.009360427 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 2.010863651 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 2.006092958 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 2.005301802 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.998982138 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 2.014818358 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 2.005795905 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.011535325 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 2.020426448 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.006765226 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 2.007402127 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 2.009138674 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 2.008148004 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 2.011231439 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.007998468 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 2.006707605 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 2.009349355 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 2.007431807 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 2.007326198 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.012965925 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 2.018915665 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 2.011097448 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 2.007098213 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 2.007465942 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 2.013119858 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 2.00783419 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 2.008540637 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 2.009981235 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 2.019161181 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.014448226 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 2.02192538 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 2.02019068 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 2.008524107 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 2.010027117 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 2.018300766 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 2.017944476 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 2.008722486 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 2.007784974 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 2.008753395 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 2.013037201 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.012004503 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 2.012452354 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.008579287 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 2.010696246 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 2.016661715 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 2.008726071 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 2.00909801 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 2.009398571 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 2.00830377 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 2.013388631 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 2.013050777 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 2.017551681 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 2.009068113 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 2.008865085 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 2.009762304 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 2.011304501 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 2.011834839 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 2.013800062 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.009976419 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 2.009703043 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 2.013775661 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 2.013966632 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 2.015674646 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 2.010200911 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 2.009231277 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 2.013499882 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 2.009676113 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 2.010285045 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 2.010407931 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 2.011273654 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 2.011119805 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 2.015121694 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 2.019164859 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 2.011526792 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 2.012924866 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 2.012094234 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 2.016241268 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 2.01143047 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 2.011011087 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.011146364 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 2.010929716 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.02030639 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 2.009111714 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 2.011712776 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 2.011929382 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 2.011031769 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 2.018665509 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 2.015012887 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 2.018360689 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 2.011685991 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 2.012606305 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 2.011053771 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 2.017970453 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.021648229 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 2.018370048 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 2.017045506 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 2.020570429 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 2.018977011 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 2.017081701 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 2.012894155 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 2.01215265 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 2.013539338 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 2.014122835 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 2.018981698 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.015666691 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 2.016846447 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 2.01383768 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.015810977 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 2.013113803 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 2.017069841 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 2.013789054 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 2.012213478 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 2.018132096 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.023524616 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.025241395 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 2.013543869 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 2.016180541 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 2.013007243 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 2.018371178 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.025538995 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 2.013661337 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 2.014380161 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 2.014723465 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 2.016302672 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 2.015830701 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.024291065 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.0231779 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 2.019548196 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 2.014865506 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 2.02047209 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.034076626 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 2.018962138 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.025515087 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.047525769 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 2.016910665 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 2.015909049 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 2.016057266 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 2.015466669 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 2.014568807 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 2.017258244 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 2.014219824 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.023163405 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 2.014521967 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 2.013962078 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.024788049 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 2.014676877 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 2.014360325 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 2.016139452 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 2.01580344 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.023012287 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 2.014737003 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.024162392 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 2.015225166 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 2.015929636 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 2.016170083 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 2.018236956 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 2.014928983 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 2.014881733 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 2.015089659 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.0203028 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 2.015634854 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 2.016618507 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.018331052 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 2.012565832 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.018581324 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.031757455 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.028262639 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 2.513450106 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 2.015111443 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 2.016629721 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.023173509 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.021085114 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 2.015243333 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.021425949 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.025136831 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.022126644 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.023984377 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 2.019347146 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 2.019408008 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 2.018881206 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 2.016576204 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 2.016029723 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.032155641 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.030254854 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 2.017269625 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 2.018081424 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.026343089 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 2.017133811 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.025789049 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.025224834 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 2.01753028 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.023898469 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 2.017695213 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 2.015860774 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 2.017958063 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 2.017337591 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.023011825 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.025342596 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 2.017192947 seconds)
  done (took 1198.546721676 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.016071348 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.017711113 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.013293721 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.011061491 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.01352263 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.015527097 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.012765598 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.015786085 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.01529468 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.01635418 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.013850178 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.013586569 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.013559957 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.015673002 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.002960404 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.010785985 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.016767276 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.015466094 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.016634043 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.01266645 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.013212309 seconds)
  done (took 44.241535946 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 2.014839303 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.015277767 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.014733388 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.016081549 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.015776298 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 2.016667591 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.015791153 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.012837456 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.015720519 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.013815034 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 2.017578954 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.015635855 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.015495325 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.018705071 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017049998 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.017274621 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.013322227 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.017471957 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.01630309 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.015855121 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.017451759 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.016199334 seconds)
  done (took 46.295081101 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.015487082 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 2.016833635 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 2.020263942 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 2.01577926 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 2.01865014 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.017270808 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.017953669 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.018254257 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.019706465 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.019150349 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.026363849 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.026082241 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.019637197 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.022002931 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.017403923 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.019295477 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.162484666 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.018797281 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.018186186 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.020551069 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.017927759 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.024782238 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.021949733 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.017490017 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.017509346 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.019888721 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.0161594 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.018726883 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.020602504 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.02021504 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.02163679 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.020299248 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.023464614 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.025299389 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.018214421 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.019625387 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.022241243 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.017713361 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.019309231 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.018654685 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.032911464 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.050160105 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.018256755 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.019833309 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.02846871 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.018965414 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.018095624 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.024601569 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.028892252 seconds)
  done (took 101.117991847 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.017531636 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.016558765 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.01969168 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.018684205 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.015501049 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.02003533 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.018183644 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.020269877 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.01991534 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.019461392 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.019679605 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.0209742 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.017432187 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.018006194 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.020583788 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.019613266 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.020934933 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.021017985 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.005930929 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.021555854 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.018000233 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.018588161 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.02172782 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.022518874 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.020976436 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 1.993318193 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.01875773 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.021314636 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.01943623 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.021309839 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.023703519 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.022359259 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.019359057 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.020673975 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.022185623 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.019568244 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.021345277 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.022701195 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.021617216 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.020052704 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.012614777 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.022604125 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.021689694 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.022424905 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.019976055 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.021009895 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.0206601 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.023092101 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.022681373 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.01863751 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.015205251 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.023457286 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.022380959 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.024700035 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.022806988 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.021786597 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.022116909 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.023604254 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.02500777 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.016484678 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.021436509 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.02239704 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.023722325 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.02025074 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.020735307 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.022134895 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.023842687 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.024303172 seconds)
  done (took 139.312637251 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.024297744 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.024581222 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.025479175 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.02603573 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.024567491 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.021677877 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.022922437 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.024743465 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.024926616 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.026945033 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.026246815 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.023937885 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.023285911 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.025889805 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.023796618 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.025596629 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.025176466 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.024844012 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.022223985 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.023671232 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.023632373 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.026151357 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.025793228 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.02516615 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.026334817 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.025803118 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.027000954 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.025267335 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.027058274 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.023973501 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.024630707 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.023809914 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.026767821 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.027629625 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.026158176 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.02548771 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.025357032 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.025077672 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.027633777 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.024498812 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.011436247 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.024160329 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.027362034 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.025324104 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.026302231 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.026811146 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.027382526 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.024582432 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.026402121 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.027561896 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.026868058 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.026144655 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.026449179 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.025258523 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.027132082 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.026513637 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.027248675 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.026838385 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.026145256 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.027330161 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.029325735 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.028332366 seconds)
  done (took 127.530064176 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.029275756 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.025843988 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.027338249 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.027462727 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.028448936 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.027116013 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.024903672 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.025508331 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.025483795 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.024063522 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.028121293 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.029258294 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.027581464 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.026235445 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.019576577 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.02652698 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.028316887 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.074246422 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.028827026 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.022431601 seconds)
  done (took 42.534997696 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.025667743 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.042626104 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.033398356 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.032784579 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.034119268 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.034344542 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.045878065 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.033694077 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.035231573 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.034843551 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.035302435 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.037564889 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.035984297 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.03562243 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.034694701 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.0353346 seconds)
  done (took 34.52414521 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.034232139 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.03359576 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.033251019 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 2.039400267 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.031799803 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.033784034 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.034838855 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.032634754 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.037275003 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.028150605 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.030816884 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.030980156 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.03055211 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.030780061 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.020899698 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.022032985 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.021811574 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.020970118 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.030595342 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.020406732 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.021339761 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.022115468 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.021673099 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.0292682 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.024147046 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.022651129 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.021029548 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 2.023694524 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.023239047 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.022474499 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.021173906 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.021386341 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.024433991 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.023266203 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.022330418 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.021576956 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.020378222 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.019928495 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.022505549 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.021087858 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.022754061 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.022618859 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.023832794 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.022034863 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.022751563 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.021966036 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.022563127 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.023385555 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.023115797 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.021159933 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.021911505 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.021712138 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.022311794 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.021989401 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.023027588 seconds)
  done (took 113.354421291 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.021163406 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.023688172 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 2.024053614 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.021043514 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.024178777 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.022136771 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.022828975 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.025253676 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.021728151 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.021910679 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.023370342 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.022133424 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.029326374 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.022032707 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.021303233 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.024529758 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.022817103 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.032689641 seconds)
  done (took 38.374475117 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.021986301 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.022180767 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.023024754 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.028936988 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.022125293 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.023671451 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.021610979 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.021302548 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.034536747 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.025565327 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.025343053 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.024459385 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.013580982 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.030384879 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.025929802 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.025119005 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.025200415 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.027138708 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.034706272 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.025961444 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.026794981 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.024796051 seconds)
  done (took 46.502055 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.027490956 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.026790927 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.043467143 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.052230982 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.050913232 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.067361891 seconds)
  done (took 14.22023335 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025892405 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026138211 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.026492337 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026786222 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.028902559 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02812709 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026726293 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026791079 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026857153 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.027104367 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.026666694 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027607319 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.026411955 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.026203185 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02621323 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.027397453 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02796989 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.027534586 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.028340613 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.027887842 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.027310337 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.029768981 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.037973366 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026761604 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.026653294 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.028231716 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.030375247 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033025986 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.027933196 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025380798 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027730335 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.025473608 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.0293076 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.025457063 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024354813 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024483875 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025508115 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.03030595 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023373416 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024628832 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.024277188 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024506028 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024222619 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021726303 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023181447 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.022891052 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.024145637 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023565131 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023769055 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023809379 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022687375 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023778161 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023532581 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022229531 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023507588 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02457679 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024006177 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023926162 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024261563 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.024736249 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025216645 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024050302 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023584029 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025608816 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02454633 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023819874 seconds)
  done (took 135.669559275 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024460271 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.02532461 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.026496476 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.026130843 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02520047 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.031245184 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023971041 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02460867 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.023539287 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.033194755 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022662479 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023457031 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024069631 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020399402 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.030054302 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023638727 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022927772 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023955924 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02369244 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.027899167 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019836975 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022300859 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021778967 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022282403 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021591503 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.02111265 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021047086 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.021785737 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02203871 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022046256 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01952871 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020478535 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021043395 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.02085591 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022604919 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021006079 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019494624 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019473024 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020460453 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024724818 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020003152 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020600701 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.020396723 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021364016 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021952469 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021573158 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.019786336 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021220475 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021042306 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019923468 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020680178 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020016128 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020308844 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020284173 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.020956644 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019675925 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020131477 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018265481 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018402419 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022577765 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018181536 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.018466842 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019190845 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.01833429 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021031515 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017979686 seconds)
  done (took 135.406263779 seconds)
done (took 2787.821419646 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.041267302 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.067635823 seconds)
  done (took 16.052680738 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.186305514 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.138165753 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.022672465 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.077970273 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 2.019998157 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.02476414 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.025147864 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.019702015 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.024756601 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.023348448 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.022330628 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.209246302 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.088749357 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.020125732 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.025025313 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.113800759 seconds)
  done (took 54.997344096 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.032754179 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.026368981 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.037873662 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.028329572 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.030876309 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.04324047 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.057465975 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.032441449 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.065159756 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.044724829 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.105653214 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.037391133 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.029085629 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.0789244 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.040418955 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.045088018 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.121199169 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.104785681 seconds)
  done (took 38.909020058 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.108217119 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.024697054 seconds)
  done (took 11.088748448 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.027411045 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.043669534 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.0212941 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.025502257 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.014097517 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.037596118 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.028217708 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.025606649 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.044901807 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.042072528 seconds)
  done (took 72.263028349 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.029215209 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.02560269 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.025741819 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.021958696 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.023856658 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.02224375 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.020694601 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.019960813 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.720154252 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.043954592 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.032981985 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.030738242 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.021385112 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.020686573 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.017109953 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.047085356 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.179637863 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.017020994 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.019606274 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.025676305 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.015336016 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.095236919 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.034370726 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.023261695 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.054621201 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.720061356 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.016935918 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.027098005 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.181144896 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.019249036 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.021217427 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.18189523 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.027639093 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.376351255 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.352847004 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.027141776 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.030680316 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.02771104 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.019356379 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.173985532 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.023559916 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.027382625 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.955582308 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.332057116 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.111889677 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.054633872 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.415198013 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.024050722 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.023604791 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.054828326 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.026046498 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.022837038 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.021833446 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.536500814 seconds)
  done (took 141.370303399 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.019186508 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.257348603 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.171983274 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.021209951 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.274857915 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.232369958 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.019115984 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.064545178 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.017707763 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.220990563 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.267193142 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.124507896 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.01816798 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.019781722 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.017660284 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.016113347 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.163674645 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.090556226 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.020547482 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.017866794 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.044581521 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.224309754 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.142511577 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.024008171 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.042263219 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.228145206 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.140298483 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.123367463 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.792570965 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.019354049 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.082889122 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.020882442 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.023990167 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.015994237 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.172744584 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.113793037 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.101126434 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.02098785 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.018952501 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.017989196 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.693160848 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.220295605 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.084049086 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.143877598 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.265265815 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.232982517 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.630113975 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.019683054 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.645358871 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.185365234 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.227947234 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.230742431 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.139312742 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.02242796 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.58006459 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.019773802 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.019737129 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.242353854 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.237566946 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.120495417 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.017092912 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.023609082 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.005958625 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.245010135 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.022474334 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.111825708 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.024514397 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.020938428 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.114919539 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.121329836 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.244860742 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.24313306 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.050337244 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.343300095 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.526165954 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.225375824 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.084929588 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.241033157 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.023790952 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.019311093 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.102553236 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.845186503 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.274507465 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.264236485 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.217370956 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.052177607 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.676187819 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.023597343 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.209055273 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.20943887 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.256529015 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.271526273 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.256000481 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.509467919 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.024164258 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.023491818 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.324416029 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.138782953 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.96841483 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.374869702 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.249907949 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.51447176 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.05006561 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.369780005 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.151459323 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.026553947 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.671483173 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.024646586 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.227405276 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.065570737 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.026996837 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.024275902 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.212881201 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.928207744 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.026012069 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.720189673 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.085418153 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.025235048 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.228437341 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.02750674 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.266562352 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.026018692 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.257613322 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.643358268 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.052851442 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.251076925 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.271862938 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.659013173 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.265366522 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.265683301 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.136506932 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.246488559 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.752282572 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.025088271 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.286959156 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.025953985 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.026634975 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.195330125 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.02752972 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.170067472 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.029031185 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.291137589 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.04443752 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.25819432 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.026994261 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.263070803 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.056065267 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.077003508 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.028772755 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.1524993 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.028363705 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.859656836 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.182916419 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.031393851 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.024000813 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.752052357 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.027725865 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.174863865 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.253150637 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.044879039 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.095694639 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.58912744 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.022749682 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.115856189 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.047918443 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.30418639 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.027487253 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.274233249 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 6.990662928 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.507772845 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.025458313 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.263819018 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.210490262 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.031537802 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.024235254 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.87864973 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.028155083 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.027219017 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.181831191 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.490050458 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.932027344 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.22631022 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.030908125 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.154622568 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.027240388 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.104799515 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.372526362 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.02663687 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.02870035 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.027915234 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.027367235 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.026964995 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.289136659 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.05238878 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.464059846 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.165031346 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.285361342 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.332544347 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.225861771 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.066590777 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.035137263 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.250204797 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.028802862 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.090101925 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.028673769 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.050092367 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.257728018 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.0313726 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.234140831 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.264419162 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 3.081081636 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.076072058 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.031402357 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.028919225 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 7.002002943 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.177704685 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.115787557 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.030318998 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.030454281 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.144189616 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.149605803 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.212766104 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.852743624 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.163466593 seconds)
  done (took 935.564176387 seconds)
done (took 1272.187844964 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.031961053 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.028778884 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.034382162 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.027254867 seconds)
  done (took 30.078056945 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.033394486 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.031370427 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.033301264 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.032930189 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.033339619 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.033538103 seconds)
  done (took 14.155221611 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.031758074 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.029381346 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.032777451 seconds)
  done (took 23.051834915 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.107549604 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.452346514 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.170378213 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.473303144 seconds)
  done (took 11.160519152 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.03315911 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.033518337 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.032185144 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.033875417 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.034018088 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.034462174 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.033900376 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.033956558 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.03691325 seconds)
  done (took 20.265354051 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.350570411 seconds)
done (took 105.014255552 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.408652284 seconds)
    (2/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.294682479 seconds)
    (3/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.047005426 seconds)
    (4/341) benchmarking ("perf_sum", Bool, true)...
    done (took 2.046982574 seconds)
    (5/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.236904454 seconds)
    (6/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.03365275 seconds)
    (7/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.80933568 seconds)
    (8/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.176584804 seconds)
    (9/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.501344181 seconds)
    (10/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.048942947 seconds)
    (11/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.139688357 seconds)
    (12/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.065247904 seconds)
    (13/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.69564469 seconds)
    (14/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.191647972 seconds)
    (15/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.235540006 seconds)
    (16/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.339991078 seconds)
    (17/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.04417735 seconds)
    (18/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.775018264 seconds)
    (19/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.040137562 seconds)
    (20/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.234259981 seconds)
    (21/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.215878786 seconds)
    (22/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.144471561 seconds)
    (23/341) benchmarking ("sort", Float64, false)...
    done (took 5.738034928 seconds)
    (24/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.111238698 seconds)
    (25/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.645433779 seconds)
    (26/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.791101735 seconds)
    (27/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.115322901 seconds)
    (28/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 8.424765463 seconds)
    (29/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.459949731 seconds)
    (30/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.609993515 seconds)
    (31/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.274486122 seconds)
    (32/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.174117737 seconds)
    (33/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.437141946 seconds)
    (34/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.032197943 seconds)
    (35/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.046344138 seconds)
    (36/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.112317448 seconds)
    (37/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.049719995 seconds)
    (38/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.31070949 seconds)
    (39/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.181892701 seconds)
    (40/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.032930272 seconds)
    (41/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 4.991534768 seconds)
    (42/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.335585838 seconds)
    (43/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.048365771 seconds)
    (44/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.127093618 seconds)
    (45/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.036770996 seconds)
    (46/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.045979712 seconds)
    (47/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.034085358 seconds)
    (48/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 3.800492237 seconds)
    (49/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.037903481 seconds)
    (50/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.096874073 seconds)
    (51/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 4.381865144 seconds)
    (52/341) benchmarking ("sort", Bool, false)...
    done (took 2.266647043 seconds)
    (53/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.386788717 seconds)
    (54/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.037062179 seconds)
    (55/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.575227805 seconds)
    (56/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.040944261 seconds)
    (57/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.035416211 seconds)
    (58/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.505333365 seconds)
    (59/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 3.008233702 seconds)
    (60/341) benchmarking ("sort", Int64, false)...
    done (took 5.685361011 seconds)
    (61/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.286060577 seconds)
    (62/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.036082281 seconds)
    (63/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.303470924 seconds)
    (64/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.147171651 seconds)
    (65/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.054766497 seconds)
    (66/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.134521434 seconds)
    (67/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.421788056 seconds)
    (68/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.047446932 seconds)
    (69/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.115177141 seconds)
    (70/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.120674755 seconds)
    (71/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.037898609 seconds)
    (72/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.796755241 seconds)
    (73/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.044384249 seconds)
    (74/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.513380664 seconds)
    (75/341) benchmarking ("sort", Float32, false)...
    done (took 5.708992204 seconds)
    (76/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.95671604 seconds)
    (77/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.287297691 seconds)
    (78/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.040152912 seconds)
    (79/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.136210783 seconds)
    (80/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.12195985 seconds)
    (81/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.054370037 seconds)
    (82/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.115366609 seconds)
    (83/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.186094631 seconds)
    (84/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 2.964003272 seconds)
    (85/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.288907416 seconds)
    (86/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.163390361 seconds)
    (87/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.037109528 seconds)
    (88/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.279284366 seconds)
    (89/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.093568276 seconds)
    (90/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.039581165 seconds)
    (91/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.069021296 seconds)
    (92/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.037153264 seconds)
    (93/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.141093296 seconds)
    (94/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.050575304 seconds)
    (95/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.919375588 seconds)
    (96/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.261489165 seconds)
    (97/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.393308654 seconds)
    (98/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.333599851 seconds)
    (99/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.037402561 seconds)
    (100/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.204353499 seconds)
    (101/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.041659958 seconds)
    (102/341) benchmarking ("perf_sum", Float32, true)...
    done (took 3.7414545 seconds)
    (103/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.045320076 seconds)
    (104/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.858082788 seconds)
    (105/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.463514148 seconds)
    (106/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.282468739 seconds)
    (107/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.43234447 seconds)
    (108/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.39834835 seconds)
    (109/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.132548775 seconds)
    (110/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.043669034 seconds)
    (111/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 2.29154297 seconds)
    (112/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 7.039285408 seconds)
    (113/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.128054584 seconds)
    (114/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.139813902 seconds)
    (115/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.044807471 seconds)
    (116/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 2.960438052 seconds)
    (117/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.415388559 seconds)
    (118/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.240472775 seconds)
    (119/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.172352819 seconds)
    (120/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.175218225 seconds)
    (121/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.28675568 seconds)
    (122/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.384118653 seconds)
    (123/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.951986555 seconds)
    (124/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.086374125 seconds)
    (125/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.070641701 seconds)
    (126/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.737220552 seconds)
    (127/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.04102843 seconds)
    (128/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.101272173 seconds)
    (129/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.119073627 seconds)
    (130/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.226586417 seconds)
    (131/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.289743207 seconds)
    (132/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.066145556 seconds)
    (133/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.341744974 seconds)
    (134/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.050937837 seconds)
    (135/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.44884628 seconds)
    (136/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.052105668 seconds)
    (137/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.137007907 seconds)
    (138/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.221078254 seconds)
    (139/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.193966538 seconds)
    (140/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.693439224 seconds)
    (141/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.340373347 seconds)
    (142/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.177249194 seconds)
    (143/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.178734643 seconds)
    (144/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 7.088119573 seconds)
    (145/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.701685129 seconds)
    (146/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.04981025 seconds)
    (147/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.201492853 seconds)
    (148/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.060721606 seconds)
    (149/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.590593689 seconds)
    (150/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.139168753 seconds)
    (151/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.141363554 seconds)
    (152/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.293874315 seconds)
    (153/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.401566706 seconds)
    (154/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.165416286 seconds)
    (155/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.334021306 seconds)
    (156/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.637966957 seconds)
    (157/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.062710436 seconds)
    (158/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.027361926 seconds)
    (159/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.863818755 seconds)
    (160/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.063568935 seconds)
    (161/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.062415229 seconds)
    (162/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.384571196 seconds)
    (163/341) benchmarking ("sort", BigInt, false)...
    done (took 7.046395697 seconds)
    (164/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.429453434 seconds)
    (165/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.24404825 seconds)
    (166/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.098183447 seconds)
    (167/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.298951084 seconds)
    (168/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.061211061 seconds)
    (169/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.632354105 seconds)
    (170/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.128893908 seconds)
    (171/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.070768863 seconds)
    (172/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.1756972 seconds)
    (173/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.177501182 seconds)
    (174/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.045049935 seconds)
    (175/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.34567964 seconds)
    (176/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.046154187 seconds)
    (177/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.801003333 seconds)
    (178/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.055966471 seconds)
    (179/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.108201204 seconds)
    (180/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.35536152 seconds)
    (181/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.04368414 seconds)
    (182/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.38064317 seconds)
    (183/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.31123547 seconds)
    (184/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.117733414 seconds)
    (185/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.237556156 seconds)
    (186/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.418466056 seconds)
    (187/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.811214971 seconds)
    (188/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.049302011 seconds)
    (189/341) benchmarking ("map", abs, Float64, false)...
    done (took 4.1819322 seconds)
    (190/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.439146499 seconds)
    (191/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.124875508 seconds)
    (192/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.286021325 seconds)
    (193/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.046708488 seconds)
    (194/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.10214372 seconds)
    (195/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.044257901 seconds)
    (196/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.313634367 seconds)
    (197/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.692101607 seconds)
    (198/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.517640541 seconds)
    (199/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.137812398 seconds)
    (200/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.366279227 seconds)
    (201/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.253272797 seconds)
    (202/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.468062777 seconds)
    (203/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.841579553 seconds)
    (204/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.483809383 seconds)
    (205/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 7.042849447 seconds)
    (206/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.056566363 seconds)
    (207/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.407327596 seconds)
    (208/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.18630731 seconds)
    (209/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.475138222 seconds)
    (210/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.083255046 seconds)
    (211/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.143039446 seconds)
    (212/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.202184844 seconds)
    (213/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.051465739 seconds)
    (214/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.123144113 seconds)
    (215/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.321897985 seconds)
    (216/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.046650853 seconds)
    (217/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.269289187 seconds)
    (218/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.072687475 seconds)
    (219/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.281556276 seconds)
    (220/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.431181969 seconds)
    (221/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.179015203 seconds)
    (222/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.320040584 seconds)
    (223/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.351109777 seconds)
    (224/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.360633942 seconds)
    (225/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.286321853 seconds)
    (226/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.18271387 seconds)
    (227/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.184227976 seconds)
    (228/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.346108155 seconds)
    (229/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 2.948502063 seconds)
    (230/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.130623808 seconds)
    (231/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.056654223 seconds)
    (232/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.347772571 seconds)
    (233/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.749219749 seconds)
    (234/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.062558803 seconds)
    (235/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.920515476 seconds)
    (236/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.455975233 seconds)
    (237/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.04833137 seconds)
    (238/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.244836953 seconds)
    (239/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.696313987 seconds)
    (240/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.170280102 seconds)
    (241/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.046039519 seconds)
    (242/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 4.448645462 seconds)
    (243/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.052168539 seconds)
    (244/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.118108131 seconds)
    (245/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.348326283 seconds)
    (246/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.195153231 seconds)
    (247/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.43831133 seconds)
    (248/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.285232529 seconds)
    (249/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.443011197 seconds)
    (250/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.328588106 seconds)
    (251/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.052708274 seconds)
    (252/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.160040466 seconds)
    (253/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.745289793 seconds)
    (254/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.151812174 seconds)
    (255/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.280158133 seconds)
    (256/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 9.192939577 seconds)
    (257/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.304856203 seconds)
    (258/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.051355963 seconds)
    (259/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.004058356 seconds)
    (260/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.640446938 seconds)
    (261/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.191578422 seconds)
    (262/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.14700637 seconds)
    (263/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.126075132 seconds)
    (264/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.795407213 seconds)
    (265/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.125251755 seconds)
    (266/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.174294032 seconds)
    (267/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.050808308 seconds)
    (268/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 7.100057331 seconds)
    (269/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 4.019970556 seconds)
    (270/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.060290283 seconds)
    (271/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.179715312 seconds)
    (272/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.225777283 seconds)
    (273/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.362661655 seconds)
    (274/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.183083335 seconds)
    (275/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.047597101 seconds)
    (276/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.168192989 seconds)
    (277/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.153227865 seconds)
    (278/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.23448259 seconds)
    (279/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.436919612 seconds)
    (280/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 8.244868708 seconds)
    (281/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.490871946 seconds)
    (282/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.05091741 seconds)
    (283/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.077224191 seconds)
    (284/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.190891785 seconds)
    (285/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.458435125 seconds)
    (286/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.3545927 seconds)
    (287/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.375730294 seconds)
    (288/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.057390615 seconds)
    (289/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.603980097 seconds)
    (290/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.108564928 seconds)
    (291/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.136334938 seconds)
    (292/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.265488869 seconds)
    (293/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.119069759 seconds)
    (294/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.075197207 seconds)
    (295/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.443038919 seconds)
    (296/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 8.205126271 seconds)
    (297/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.193503447 seconds)
    (298/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.048033399 seconds)
    (299/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.155746057 seconds)
    (300/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.548832183 seconds)
    (301/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.210149741 seconds)
    (302/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.381198876 seconds)
    (303/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.063026962 seconds)
    (304/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.259062831 seconds)
    (305/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.870768843 seconds)
    (306/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.462745105 seconds)
    (307/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.557533484 seconds)
    (308/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.346507108 seconds)
    (309/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 7.052160114 seconds)
    (310/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 4.393429018 seconds)
    (311/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.172552465 seconds)
    (312/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.312962695 seconds)
    (313/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.049003965 seconds)
    (314/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 8.540708437 seconds)
    (315/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.351009025 seconds)
    (316/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 2.067624686 seconds)
    (317/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.049954739 seconds)
    (318/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.398781736 seconds)
    (319/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.934683399 seconds)
    (320/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.048131872 seconds)
    (321/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.332879938 seconds)
    (322/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.39898626 seconds)
    (323/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.177302059 seconds)
    (324/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.569338488 seconds)
    (325/341) benchmarking ("sort", Int8, false)...
    done (took 5.003667977 seconds)
    (326/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.187285712 seconds)
    (327/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.193590215 seconds)
    (328/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.065777066 seconds)
    (329/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.432702617 seconds)
    (330/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 8.423527678 seconds)
    (331/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 2.424341207 seconds)
    (332/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.13759987 seconds)
    (333/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.2575276 seconds)
    (334/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.355994814 seconds)
    (335/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.55316963 seconds)
    (336/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.331198031 seconds)
    (337/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.05210192 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.314742656 seconds)
    (339/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.053186871 seconds)
    (340/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 4.721010635 seconds)
    (341/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.243741302 seconds)
  done (took 1156.381305191 seconds)
done (took 1158.446157942 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.088032435 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.081233542 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.057394733 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.079564139 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.171049883 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.106812241 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.072451647 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.061836579 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.108471987 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.108013235 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.056383543 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.105934351 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.059315882 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.059161731 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.058394974 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.080818423 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.42918229 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.105713854 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.077503052 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.070981691 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.077465458 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.057708954 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.108756973 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.10783811 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.062964569 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.06503006 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.066054566 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.079874681 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.171637073 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.064661211 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.066867021 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.074493637 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.429438371 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.106482856 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.059668934 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.081737109 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.074162485 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.074741058 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.065402067 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.09478388 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.59052885 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.065496618 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.062689986 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.05973648 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.061456245 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.068966168 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.060998438 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.069402 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.083177436 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.084824367 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.577413513 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.084783243 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.067039051 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.06236106 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.075946821 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.063026921 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.064777397 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.084421829 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.083010289 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.084455079 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.412201347 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.114962422 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.066265984 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.08055427 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.071953823 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.658468688 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.083143812 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.071242149 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.592108482 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.077610099 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.657356297 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.092591181 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.066593519 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.077693442 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.095837635 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.430327258 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.106640423 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.06194955 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.073153033 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.061731471 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.074544674 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.085073997 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.067697893 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.063014479 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.087308247 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.11187522 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.07714645 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.06458252 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.075995572 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.083792328 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.072589046 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.078341814 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.067375124 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.062213612 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.078143554 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.068562664 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.0689459 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.068098903 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.069962031 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.079235905 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.591980889 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.096124096 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.065121245 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.06301903 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.066347815 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.080902717 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.590919852 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.073198099 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.090327288 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.115461544 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.067604463 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.414467247 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.112489237 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.089306757 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.077169587 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.068447446 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.064253254 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.415915994 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.626444876 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.087703389 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.065021813 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.063280517 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.089173854 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.068094011 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.06349797 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.435332631 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.113611194 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.0887124 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.190266121 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.079734923 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.100165099 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.065175378 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.069285866 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.11558881 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.091135043 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.099617409 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.069325508 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.089815997 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.083532714 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.063971413 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.079994102 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.08158089 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.06689762 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.074421111 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.064725917 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.114967309 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.087843293 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.088389942 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.089001953 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.189623413 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.064626915 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.414764304 seconds)
done (took 325.304808233 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.128493747 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.060015068 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.136377062 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.063173942 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.1297907 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.116117307 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.063081566 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.063140116 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.063085582 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.45724193 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.062325794 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.069026334 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.060116948 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.063097714 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.113622193 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.06237993 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.065246888 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.299390433 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.06600537 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.125091545 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.06257419 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.063053439 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.06245808 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.463319688 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.061013822 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.061899804 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.124163821 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.064548283 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.309361566 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.064360327 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.057015313 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.310050193 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.124592059 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.075041565 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.074277775 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.068843172 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.132234308 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.07308107 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.112693594 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.112514595 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.137682449 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.096944726 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.065035733 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.062407458 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.068269108 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.066143016 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.064679831 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.099681756 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.064497296 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.071771125 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.301626429 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.070428481 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.071658406 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.066236786 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.067271045 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.081234629 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.06552354 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.067733699 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.125731108 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.066502369 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.113832643 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.465366881 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.463677969 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.066293133 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.065281732 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.064675569 seconds)
  done (took 196.751312664 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.133009339 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.139326231 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.13434102 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.072086682 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.115888338 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.135676486 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.07243618 seconds)
  done (took 16.790642792 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.072296724 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.067494479 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.090172746 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.091450663 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.067049823 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.20798418 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.079261619 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.071281526 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.093513948 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.067375318 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.404690321 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.090644786 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.073871934 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.066788884 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.084706629 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.099730602 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.072568137 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.070288944 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.167169301 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.146347482 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.076198315 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.078555695 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.100995825 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.083190895 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.069816103 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.070189532 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.07060379 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.078070778 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069939897 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.071027842 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.069694714 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.083762245 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.070390677 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.070058364 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.069993505 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.071729724 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.070896307 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.07034957 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.072037732 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.071264598 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.070388784 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.069469912 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.072372239 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.069684982 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.071244694 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.094939482 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.062070672 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.07209108 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.070267919 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.060569553 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.101611073 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.071919422 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.070731751 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.075961434 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.113586893 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.078032286 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.072319921 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.072650674 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.073119841 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.072068014 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.072888914 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.152345993 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.095402335 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.07276579 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.096262413 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.108424119 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.072607016 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.073364871 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.072215066 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.097595285 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.075118545 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.095961053 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.074978275 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.174181464 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.073722527 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.217855959 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.095810864 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.077743343 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.077442642 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.072581469 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.082793541 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.07377157 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.075463801 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.08210642 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.078285701 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.073243496 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.076036807 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.076140022 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.081501324 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.073359259 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.121705555 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.074546888 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.07360203 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.172731297 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.073598399 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.170917803 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.102021725 seconds)
  done (took 224.689983463 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.080934683 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.079691466 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.077514906 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.088627927 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.076756525 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.075957872 seconds)
  done (took 14.474647501 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.077391545 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.077970672 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.073752582 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.076083727 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.076047656 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.077156905 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.075357396 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.078515442 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.080050776 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.076569847 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.077168855 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.075850188 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.076096224 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.075623405 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.076406289 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.075755014 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.075319729 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.075831871 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.076798425 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.076603557 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.212716177 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.076128575 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.076093793 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.081102604 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.080759415 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.077925406 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.084388054 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.075903027 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.074966725 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.083484547 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.080162645 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.077354478 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.080354579 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.083848628 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.08062784 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.07982688 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.081145509 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.078984162 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.07699016 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.076947055 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.079920244 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.07771444 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.077176458 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.078302859 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.079242194 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.083450232 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.081263126 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.084963528 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.077188511 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.076079752 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.078997574 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.048668875 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.078922798 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.076648088 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.083574525 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.083592989 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.08248705 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.077797468 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.079000669 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.082843123 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.082268004 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.078882557 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.080133246 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.084445767 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.08606948 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.080024591 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.083052281 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.081548006 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.078759522 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.080408711 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.078916474 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.077744818 seconds)
  done (took 152.789010535 seconds)
done (took 607.508724471 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.111886255 seconds)
  done (took 9.108917844 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.147104796 seconds)
  done (took 9.230941116 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.913448912 seconds)
  done (took 12.915225531 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.085039772 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.127759352 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.074482113 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.079893361 seconds)
  done (took 30.362405396 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.249584257 seconds)
  done (took 9.24997148 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.090142208 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.074018534 seconds)
  done (took 16.229426115 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.169306961 seconds)
  done (took 9.171387498 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.57008631 seconds)
  done (took 9.588556734 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.084451615 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.106010012 seconds)
  done (took 16.213358431 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.082421547 seconds)
  done (took 9.083228 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.963091937 seconds)
  done (took 10.048858236 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.087602035 seconds)
  done (took 9.107472279 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.151853025 seconds)
  done (took 9.153235739 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.241658234 seconds)
  done (took 10.243257088 seconds)
done (took 171.701851657 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.088929737 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.077883785 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.076917855 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.075480227 seconds)
  done (took 30.319096004 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.114825581 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.116301941 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.123981242 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.115655905 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.106447171 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.107731177 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.114831314 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.115640429 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.106853464 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.113841857 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.116845196 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.114244949 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.115753194 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.123744815 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.125892059 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.113890608 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.116998566 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.105498281 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.105656818 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.124484018 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.114015002 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.117484405 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.081888441 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.083319776 seconds)
  done (took 52.697370655 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.272248846 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.149325407 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.236022125 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.129365281 seconds)
  done (took 10.787800648 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.081650501 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.14646485 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.133261166 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.128878674 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.166575638 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.18533752 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.135035168 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.290745616 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.196545784 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.211310077 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.090177433 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.10450403 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.110224494 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.130601053 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.184381847 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.083146283 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.082089782 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.197034289 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.143547025 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.293004967 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.082618826 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.136724362 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.168432454 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.13492419 seconds)
  done (took 53.619481291 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.084010766 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.091544478 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.090160266 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.085177037 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.085658158 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.085823222 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.092518006 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.086533154 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.107030014 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.086669531 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.084022459 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.083660692 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.091049194 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.086020969 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.083456308 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.097859452 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.100617593 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.0853126 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.088692828 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.091872626 seconds)
  done (took 43.791188055 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.082477385 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.932284811 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.423263542 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.335693342 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.084565192 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.084788433 seconds)
  done (took 32.947389704 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.097832489 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.09486425 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.085221964 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.144277891 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.22232067 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.089797287 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.085602155 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.096333342 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.135124368 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.151847246 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.103504325 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.113915904 seconds)
  done (took 27.414344129 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.086271119 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.08305978 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.084278676 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.095965085 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.096218435 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.094186075 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.092807398 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.083958117 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.097330264 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.104900049 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.094944307 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.096679146 seconds)
  done (took 47.121735509 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.30082093 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.311736398 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.294982659 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.757393482 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.744082323 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.06638429 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.372712245 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.299465797 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.837985067 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.87099423 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.380219674 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.156804346 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.024176812 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.007870736 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.002526288 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.328185898 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.08951982 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.947181174 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.334798824 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.159636497 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.085287504 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.085504714 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.08956424 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.381174537 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.411408093 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.089596085 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.301644709 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.101442822 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.110411658 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.319579587 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.588851695 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.142711164 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.29046717 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.352093536 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.422206344 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.187446157 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.089250213 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.325228856 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.133399374 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.121645522 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.094796239 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.097505164 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.630327399 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.099508307 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.359211603 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.088950733 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.13976301 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.067945352 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.010058008 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.377589802 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.194198936 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.091223478 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.122578911 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.522074724 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.207820746 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.330409748 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.092858127 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.332366411 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146239923 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.318575665 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.252579948 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.088569171 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.301884099 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.016543336 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.45880968 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.20478597 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.091987403 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.094303851 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.787523798 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.332443266 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.158517738 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.383010577 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.844772108 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.090110674 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.092491136 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.108775396 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.192418776 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.086506646 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.405007564 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.087351459 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.013818481 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.189892909 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.595776628 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094809959 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.087439628 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.098111529 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.937290263 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.119089809 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.185855533 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.32229173 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.407905914 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.091195349 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.090998242 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.112499357 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.093309916 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046621054 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.752316718 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.159772254 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.018185416 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.652569903 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.607714543 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.058666035 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.599214661 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.135245589 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.385175168 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.237218049 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.494105074 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.302050322 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.33802125 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.623450039 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.097195955 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.653085258 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.172305692 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166987913 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090897184 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.095094265 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.333415821 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.363602729 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.198012704 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.090337186 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.01810702 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.081401145 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.28971482 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.604308686 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.148775184 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.081986969 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.095351761 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.090049534 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.094316982 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.258079015 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108285193 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.387257858 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.161800377 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.092607407 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.03665134 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.093108835 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.377772265 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.842607289 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.148896228 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.346674701 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.356446336 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.841261745 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.107273209 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.109748964 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.357113719 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.167102284 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.166751196 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.665018774 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.227393155 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.189605745 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.094401703 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.221052826 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.098008297 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.096686125 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.592862707 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.617335515 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.523710718 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.138550158 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.121710897 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.094492159 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.332794212 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.336599346 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.179139859 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.120184915 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.099770707 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.184056733 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.322066841 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.095305516 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.099345971 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.340995112 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.339208079 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.384452274 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.165232349 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.179621467 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.165013291 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.103833073 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.30805165 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.184768742 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.758964572 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.665671577 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309933909 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.712116494 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.059561244 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.732419604 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.329847473 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.46989169 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.113453361 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.546240101 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.336717557 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.850720556 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.124307458 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.622981147 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.021982781 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100440249 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.429453651 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.050521458 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.73896171 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.151632146 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140568717 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.095341882 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.096200971 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104335225 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.094298721 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.204216587 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.165164076 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167301804 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.024276186 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.800969608 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.136945372 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.100495163 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.09549646 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.437611683 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.893342431 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.049465941 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.094747407 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.173174661 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.86936416 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.648473222 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.098411705 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.099011029 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.706164865 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.733485699 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.691181676 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.173212861 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.855869883 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.121028178 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.322123568 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.190589261 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.398762049 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.800642797 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17292055 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.099562795 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106139424 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.800158296 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.108644175 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.798754904 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.382345465 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.370589538 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.535964244 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.157990066 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.309431102 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.113516265 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.099407514 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.634851331 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.121807316 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.100983448 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.303166949 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.619312945 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.39319169 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.734106258 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.185402584 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.103387293 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.365359993 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.089704747 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.605777853 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.776226532 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.095817464 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.123806974 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.345318383 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.785088658 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.10048385 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.081896942 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.105700682 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.315139392 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.304584594 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.370983181 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.400373695 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.551921825 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.104167316 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.105291273 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.125831517 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.344662466 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.099545721 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.138689566 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.610243069 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.192477933 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.526250298 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.386907344 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.45343844 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.729402241 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.370756724 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.16496283 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.111992255 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.742018814 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.223811165 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.032615429 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.218705069 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.029313136 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.793418798 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.388610622 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.117815192 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.353371777 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.068902989 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.431968246 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.39779976 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.343564251 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.14786795 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.126920492 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.103330217 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.141902302 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.109818812 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.356904808 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.217548502 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.109528839 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.689247594 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.142284902 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15046161 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.109518404 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.652818916 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123170918 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.10416315 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.845399056 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.751744374 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.221471947 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.175114778 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.876183853 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.636806985 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.143318325 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.998890318 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.755890088 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.368189141 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.157542946 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.550967949 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.143481424 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.50836952 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.128537252 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.318031548 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.107199872 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.74517624 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.151155954 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.377184399 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.060760567 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.313922407 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.304510857 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.134660488 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.10714777 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.032892859 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.213503122 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.976302495 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.087210305 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.107970303 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.120241863 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.513641449 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.371591645 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.544910177 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.922372071 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.10785179 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.503041557 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.506537499 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.799428482 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140579654 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.107850926 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.399342816 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.892797197 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.391359268 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.412076928 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.112547554 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.79430384 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.321108924 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.232192366 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.026673058 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.583983977 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.660889626 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.808261643 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.116764438 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.310720622 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.417041557 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.447436435 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.142315319 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.18047283 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.512638291 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.368230722 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.824460038 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.03275351 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.106221276 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.505302358 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.117410431 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.203704678 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.348613173 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.422115717 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.844764645 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.633242892 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.155864578 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.496870493 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.603467264 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.526057318 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.323240397 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.474439608 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.435154667 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.994873904 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.522156262 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.322139865 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.208521298 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.382973822 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.976826395 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.817715415 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.353292341 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.113559155 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.036699131 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.316890248 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.111297047 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.709313716 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.739472723 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.139201616 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.348714213 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.616864241 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.650394794 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.359176713 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.133973996 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.078727702 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.131843171 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.130644978 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.107375159 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.590662452 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.396259486 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122297894 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.06079179 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.776793999 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.035447329 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.324948329 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.356357726 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.146571208 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.677265816 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.35008067 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.21010362 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.414690867 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.417964062 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.1469865 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.035909665 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.870020111 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.054368151 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.207315734 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.533894561 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.126263031 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.113343507 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.314863865 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.039294828 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.156945005 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.746830802 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311072219 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.713630708 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.375880588 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236144365 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.358518926 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.413284444 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.116568522 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.072938187 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.384134627 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.03801797 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.781651827 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.801093838 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.839292343 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.181752739 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111397768 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.116036454 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.379828842 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.408589235 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.204918752 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.746062735 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.145175327 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.136021356 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.430897977 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.196110255 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.113567915 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.11559856 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.636008346 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.348724244 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.12999929 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.134235314 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.328366695 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.184911103 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.311040026 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.178053887 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.626912189 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.117576049 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118143689 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146013275 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.051177769 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.110079057 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.824724866 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.171032132 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.129543614 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.382942702 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.769716798 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.318167964 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.512340053 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.979518603 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.427772909 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.159738608 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.117144996 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.12381609 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.515392252 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.415503796 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.110588477 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.383703864 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.161204923 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.119275127 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.117901649 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.084594763 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.113748599 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.892672319 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 2.992650697 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.843995073 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.517102704 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.123024926 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.164089222 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.118053125 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.041051454 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.134868586 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.130434111 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088612222 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.117246589 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.49411706 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.135203486 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.199656324 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.116262163 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.116493225 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.120290324 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.329105402 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.629919013 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.131780665 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.815298304 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.318518722 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.118595061 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.597077632 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.554243346 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.435875863 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.154551964 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.382202909 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.359428627 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.769050617 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.379757004 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.088235342 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341225959 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.118184588 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.389500018 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.389652886 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.118949247 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.329750576 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.674273722 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.404343091 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.124540284 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.763806899 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.178826026 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.383255731 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.008355471 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.118344325 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.120630773 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.387745558 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172115747 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.116945556 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.125210786 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.759949828 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.89086582 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.581181415 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.274233868 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.410949008 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.97593855 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.857803819 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.119788988 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.045143808 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.1445717 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.139805359 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.122067009 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.133019835 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.829479903 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.839385796 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.332894343 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.43319509 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.044763116 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.32283338 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.706534726 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.042306973 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.087758376 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.117783714 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.36738545 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046685827 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.123176236 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.143292988 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.122170861 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.866885926 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.392797267 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.11923024 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.070142864 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.120212419 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.12091251 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.118809236 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.211180578 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.118852445 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.236858244 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.386061484 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.475143216 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.219167372 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.769720267 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.819421844 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.054990207 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158898052 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.680120241 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.688379441 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.119465583 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.912727988 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.822575176 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.062503262 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.125871157 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.136657459 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.386196344 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.122322969 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.122866299 seconds)
  done (took 2305.68567845 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.186730206 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.194637429 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.255439007 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.163352224 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.156485908 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.197828531 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.140563591 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.202457866 seconds)
  done (took 59.539550499 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.119820103 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.158704718 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.128238151 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.120307538 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.165102654 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.123701938 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.317586796 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.136683713 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.175979315 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.125892342 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.121295571 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.117959983 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.435618402 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.156216543 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.121214628 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.121250792 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.638171858 seconds)
  done (took 81.343637024 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.134242043 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.56112109 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.189459309 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.135446164 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.060760636 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.142397609 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.196483879 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.151500004 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.140204346 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.510861374 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.431265841 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.146443405 seconds)
  done (took 93.854476916 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.141828128 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.13544045 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.134938676 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.13531049 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.135607619 seconds)
  done (took 12.743708053 seconds)
done (took 2853.925781859 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.382316972 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.193546168 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.238850865 seconds)
  done (took 6.487054997 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.284432522 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.331826288 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.440640145 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.447393897 seconds)
  done (took 11.569044302 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.429186256 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.498007565 seconds)
  done (took 6.983786931 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.553730465 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.160472279 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.525969706 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.136561481 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.135027148 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.137213156 seconds)
  done (took 23.47239526 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.135753245 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.136903188 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.136475113 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.136874089 seconds)
  done (took 10.603171487 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.135128556 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.859033753 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.132971079 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.147343589 seconds)
  done (took 22.329438143 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.312722253 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.262413801 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.904061899 seconds)
  done (took 10.535905067 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 3.013119014 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.588029969 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.750578166 seconds)
  done (took 10.407304703 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 2.996218853 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 2.957202299 seconds)
  done (took 8.009500833 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.278580542 seconds)
  done (took 4.331827676 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.969743214 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.449000931 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.616641543 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.663093283 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.731587443 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.361042971 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.470759065 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.419060893 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.551095354 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.583181158 seconds)
  done (took 27.874421937 seconds)
done (took 159.277769254 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.569087679 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.185878072 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.353082122 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.521025615 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.379801063 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.35263613 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.425808008 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.515590909 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.198096597 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.175779784 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.517425917 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.406744537 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.366165872 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.184806899 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.374678269 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.181492393 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.378383459 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.595625146 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.194300673 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.435571146 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.428065473 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.162106657 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.360164878 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.17985439 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.381051119 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.298762905 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.761823601 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.182260398 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.347817355 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.780124702 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.307337926 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.590020929 seconds)
  done (took 178.149766165 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.133628701 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.13815002 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.139237148 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.137187327 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.502953485 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.136122784 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.139664349 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.138048647 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.346014176 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.328737433 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.13761081 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.507100708 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.135948206 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.137554195 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.139827278 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.137960587 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.461073079 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.135225989 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.137124596 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.139827178 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.127680086 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.363335157 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.138665386 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.378130573 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.438678684 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.137348348 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.137818546 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.137342123 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.137716267 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.138410054 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.14029263 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.138165181 seconds)
  done (took 216.683753157 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.142809694 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.140674436 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.138104103 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.139610918 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.139091 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.133643671 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.138620303 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.138653484 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 6.943606226 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 6.927217747 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.138405137 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.14004392 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.139868493 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.137599365 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.140243991 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.139129531 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.136833818 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.14104974 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.140505744 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.138284053 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.138168222 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.806103151 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.141649757 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.842919355 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.141223792 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.14763739 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.14034151 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.140282047 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.138589075 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.14044912 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.141335277 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.139095075 seconds)
  done (took 229.495564464 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.382830498 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.142418345 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.144388129 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.153869268 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.143606725 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.141492932 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.14718891 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.394884832 seconds)
  done (took 21.71609032 seconds)
done (took 648.114970744 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.5286333 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.901023657 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.278241933 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.166864637 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.428487484 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.217272708 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.16304236 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.223079694 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.817705121 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.233570817 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.5799821 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.170514024 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.903493204 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.19222889 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.279189053 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.218505867 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.514533043 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.770467566 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.310571911 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.835605595 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.318272042 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.077260391 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.242669924 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.852956461 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.589539684 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.111278291 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.178420085 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.51266483 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.168031995 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.31400341 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.813513369 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.420121914 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.179845501 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.165913563 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.215515079 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.194708179 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.365994872 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.175875423 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.278378868 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.885203061 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.846135261 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.693602879 seconds)
  done (took 111.398084915 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.151076888 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.148757933 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.151950582 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.150226588 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.160282829 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.151800667 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.151378036 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.151447713 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.149393383 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.152675364 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.150777972 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.16041711 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.149436184 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.160486174 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.152213928 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.15122675 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.150589075 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.159824687 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.153033532 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.152200678 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.151965876 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.150448569 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.146558556 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.151883195 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.152480506 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.151930588 seconds)
  done (took 58.041700277 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.150174386 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.342437754 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.382351982 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.169157042 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.145751046 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.148859976 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.177352178 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.153049726 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.149034409 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.148923936 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.266521465 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.154821361 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.162174864 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.383160271 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.164315517 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.147184474 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.147631107 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.148399297 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.351514313 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.163704843 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.180237293 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.153133244 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.178875963 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.161085557 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.149963553 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.150942046 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.152905595 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.626016356 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.132053151 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.268971512 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.214870532 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.176779337 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.55158764 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.393999173 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.20598722 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.157754653 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.135333315 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.317266925 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.159168248 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.150122478 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.178928742 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.156375342 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.38629762 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.678394652 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.163750952 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.150696681 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.623337772 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.328028096 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.196261876 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.165602912 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.3977636 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.167748375 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.149028516 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.152050152 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.187051965 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.165421663 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.150936304 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.445499319 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.164604932 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.181541872 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.154908982 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.149492739 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.357853612 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.160730991 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.344659008 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.158105633 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.156565071 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.151274926 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.387949067 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.167419886 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.69651629 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.16595324 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.14960159 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.27137467 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.350275676 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.650169707 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.165168084 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.360843226 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.570833342 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.186308106 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.159293885 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.611918905 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.189750026 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.15755892 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.148863314 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.152737755 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.1530196 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.197113288 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.179619028 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.601102529 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.691338242 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.465576346 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.19223746 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.164170361 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.153756322 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.444908556 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.154842274 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.124787154 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.381539726 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.698889583 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.165268362 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.15996708 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.669099391 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.167312754 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.182135704 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.160877459 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.402986138 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.169053694 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.200321678 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.151955352 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.159507183 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.174882633 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.182904601 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.162710146 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.151848721 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.666298182 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.336088487 seconds)
  done (took 265.97536515 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.157445869 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.149805076 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.152100372 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.146851776 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.151420172 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.153817954 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.151825212 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.153872631 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.15259968 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.154478777 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.15177288 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.152353563 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.154467931 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.155442606 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.207346726 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.155234206 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.639337655 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.153480411 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.155489288 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.153648569 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.725152034 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.159342036 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.154575914 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.152819747 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.137521206 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.153038881 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.152269352 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.194627562 seconds)
  done (took 175.511238765 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.154661928 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.210715381 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.165568884 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.202311853 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.165579402 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.155466816 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.181417199 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.167741767 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.161832091 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.156289755 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.157465132 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.18753621 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.160796153 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.2516968 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.185588279 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.190041875 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.253489445 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.159877964 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.158031584 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.15543776 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.204258195 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.167860578 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.18947959 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.215675893 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.167521015 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.211866391 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.168507101 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.157880262 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.15716415 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.269733948 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.174491588 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.188238803 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.190960591 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.174117427 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.273400195 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.268652504 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.257178905 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.185950425 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.159686819 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.157067325 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.156280547 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.159377786 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.214011475 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.169229507 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.158750944 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.274069055 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.174320654 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.158219476 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.17984382 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.15772264 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.172437894 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.175102008 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.19495625 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.282201148 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.200490842 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.180034116 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.182862208 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.175705322 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.158225595 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.254568141 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.162026865 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.271243092 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.175216747 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.159351386 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.16084476 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.162330534 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.2053689 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.196902022 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.257123204 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.164054588 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.253260748 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.211722655 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.170857433 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.158056751 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.158894665 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.213217909 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.266674886 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.212251127 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.219085161 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.194473771 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.16697806 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.158157962 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.16073399 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.18548081 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.168905962 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.273711384 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.271604557 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.163718727 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.160716303 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.159868365 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.160758962 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.185803365 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.225236203 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.201956902 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.269650302 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.195596618 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.198728976 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.169626085 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.174366445 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.166839905 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.194439219 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.169679849 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.171768075 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.498098778 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.200369949 seconds)
  done (took 232.40436089 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.537110966 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.203969109 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.235345295 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.451998496 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.542211891 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.088633035 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.201945791 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.209838902 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.219572619 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.338764703 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.270854998 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.254739199 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.196332484 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.185091917 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.204047706 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.224948069 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.243084905 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.514680233 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.313227942 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.74723924 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.204390908 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.48179142 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.50911726 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.544259862 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.248490393 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.591057062 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.820003825 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.299062642 seconds)
  done (took 70.968718819 seconds)
done (took 916.3599546 seconds)
SAVING RESULT...
DONE!
