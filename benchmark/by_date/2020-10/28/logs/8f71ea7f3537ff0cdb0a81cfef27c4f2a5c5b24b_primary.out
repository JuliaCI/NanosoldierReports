cset: moving following pidspec: 15814
cset: moving 1 userspace tasks to /user/child
cset: done
LOADING SUITE...
loading group "broadcast"... done (took 1.881642924 seconds)
loading group "shootout"... done (took 1.227919799 seconds)
loading group "string"... done (took 0.658386922 seconds)
loading group "linalg"... done (took 8.646183885 seconds)
loading group "parallel"... done (took 0.169633975 seconds)
loading group "find"... done (took 2.944596896 seconds)
loading group "tuple"... done (took 2.086137124 seconds)
loading group "union"... done (took 15.030148998 seconds)
loading group "dates"... done (took 1.456797557 seconds)
loading group "micro"... done (took 0.22243801 seconds)
loading group "simd"... done (took 4.810054322 seconds)
loading group "io"... done (took 1.184208572 seconds)
loading group "random"... done (took 9.635945498 seconds)
loading group "problem"... done (took 1.519221673 seconds)
loading group "array"... done (took 25.240171746 seconds)
loading group "misc"... done (took 1.900839387 seconds)
loading group "scalar"... done (took 43.55773923 seconds)
loading group "sort"... done (took 3.342989144 seconds)
loading group "sparse"... done (took 12.81118271 seconds)
loading group "collection"... done (took 18.453347608 seconds)
FILTERING SUITE...
WARMING UP BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 0.530194992 seconds)
  (2/12) benchmarking "fasta"...
  done (took 0.125175377 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 0.129338666 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 0.123132826 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 0.189604018 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 0.121829466 seconds)
  (7/12) benchmarking "nbody"...
  done (took 0.13047132 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 0.08600141 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 1.861741809 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 0.141118906 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 0.116790647 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 0.440114506 seconds)
done (took 5.405683372 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 0.194997747 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 0.093797065 seconds)
    (2/2) benchmarking "String"...
    done (took 0.08421086 seconds)
  done (took 1.370411257 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 0.072399793 seconds)
    (2/3) benchmarking "different length"...
    done (took 0.061281834 seconds)
    (3/3) benchmarking "different"...
    done (took 0.067994455 seconds)
  done (took 1.389668718 seconds)
  (4/7) benchmarking "replace"...
  done (took 0.066109091 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 0.136529111 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 0.066733955 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 0.067143597 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 0.06778926 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 0.067169322 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 0.066612228 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 0.069881835 seconds)
  done (took 1.733428949 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 0.072889004 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 0.068500382 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 0.066226177 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 0.068807509 seconds)
  done (took 1.469461864 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 0.065796104 seconds)
    (2/4) benchmarking "equal"...
    done (took 0.123285971 seconds)
    (3/4) benchmarking "different length"...
    done (took 0.065495568 seconds)
    (4/4) benchmarking "different"...
    done (took 0.065399719 seconds)
  done (took 1.510228052 seconds)
done (took 8.944179208 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 0.245421851 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 0.103001327 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 0.291827967 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 0.450293693 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 0.622025083 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 0.094939706 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 0.075808087 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 0.071141519 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 0.131541146 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 1.324850798 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 0.106244277 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 0.185144743 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 0.092195421 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 0.17079557 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 2.01346515 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 0.123384175 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 0.087453336 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 0.12509019 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 0.096001779 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 0.133407583 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 0.398902559 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 0.078861836 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 0.074414466 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 0.071542237 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 0.068837217 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 0.673158008 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 0.678850647 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 0.128941227 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 0.085964871 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 0.162757536 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 0.117090853 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 0.670725564 seconds)
  done (took 10.981484487 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 0.094637084 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 0.091393875 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 0.06967624 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 0.125035417 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 0.094603231 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 0.071206027 seconds)
    (7/36) benchmarking "scal!"...
    done (took 0.07594149 seconds)
    (8/36) benchmarking "gemv"...
    done (took 0.068252112 seconds)
    (9/36) benchmarking "syr!"...
    done (took 0.089405332 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 0.125429285 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 0.090546429 seconds)
    (12/36) benchmarking "her!"...
    done (took 0.099978206 seconds)
    (13/36) benchmarking "trsv"...
    done (took 0.066706802 seconds)
    (14/36) benchmarking "dot"...
    done (took 0.069912648 seconds)
    (15/36) benchmarking "dotu"...
    done (took 0.074952446 seconds)
    (16/36) benchmarking "herk!"...
    done (took 0.203035858 seconds)
    (17/36) benchmarking "trmv"...
    done (took 0.080805441 seconds)
    (18/36) benchmarking "symv"...
    done (took 0.081726668 seconds)
    (19/36) benchmarking "dotc"...
    done (took 0.068029252 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 0.081613037 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 0.106047093 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 0.07873635 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 0.0792108 seconds)
    (24/36) benchmarking "symv!"...
    done (took 0.07939195 seconds)
    (25/36) benchmarking "symm"...
    done (took 0.129607217 seconds)
    (26/36) benchmarking "herk"...
    done (took 0.169350759 seconds)
    (27/36) benchmarking "syrk"...
    done (took 0.098436938 seconds)
    (28/36) benchmarking "trsm"...
    done (took 0.098572912 seconds)
    (29/36) benchmarking "asum"...
    done (took 0.066459312 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 0.079272603 seconds)
    (31/36) benchmarking "gemm"...
    done (took 0.115656517 seconds)
    (32/36) benchmarking "symm!"...
    done (took 0.125776134 seconds)
    (33/36) benchmarking "scal"...
    done (took 0.067090659 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 0.069370319 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 0.120455968 seconds)
    (36/36) benchmarking "trmm"...
    done (took 0.095901574 seconds)
  done (took 4.653406723 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 0.899068193 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 0.096701318 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.100941673 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.650879817 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 0.0674446 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.152302556 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 0.242231907 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.074186358 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 1.369623926 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.152294806 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 0.143106768 seconds)
    (11/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 0.065372189 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.149216259 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.118647785 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.070103421 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 1.162814961 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.120147796 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.557404818 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068971589 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 0.068263488 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 0.066648755 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 0.06908277 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068665595 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 0.064671598 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 0.09436513 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.069765296 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.097358059 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 0.089444811 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 1.220215738 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 0.985547807 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 0.310014364 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 0.068334379 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 0.163560143 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.086401367 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 0.360343495 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.071942607 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.083988172 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.476918714 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.124886507 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 0.066514162 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 0.166153337 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 0.117974615 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 0.065583894 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 0.122415206 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.079679084 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 0.070195868 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 0.070652109 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 0.494147087 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.070478129 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.073419214 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.080514103 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.1047305 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068774335 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 0.066294126 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 0.173778417 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 0.06603741 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.067339085 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 0.065331301 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.068708644 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 0.150333214 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 0.065557851 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.143916222 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 0.06507586 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069792238 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.103242883 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.069618108 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 0.087291374 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 0.096050949 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 0.085844211 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 0.336176734 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 1.054526237 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 0.068606445 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 1.234238877 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 0.077819732 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 0.06655524 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.070764908 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.067477831 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 0.068771256 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.068034894 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 0.07251632 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.072085753 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.069357002 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.111744304 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 0.067414925 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 0.065090434 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.072226698 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.06709329 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.073375986 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.099860602 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 0.066046909 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 0.558059864 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.097310335 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 0.066633124 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 0.191614373 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.10604743 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.06850442 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 0.072310777 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 0.068846404 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 0.067858588 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067278608 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 0.068066916 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.070243671 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 0.097969643 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 0.071702341 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 0.113976361 seconds)
    (105/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 1.056662873 seconds)
    (106/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 0.070477026 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.070364982 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 0.074344057 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070275856 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 0.070717249 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 0.067677728 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 0.070330593 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 0.069571773 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 0.066336417 seconds)
    (115/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 0.065373393 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 0.108169659 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 0.123022536 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 0.067512501 seconds)
  done (took 23.328491409 seconds)
done (took 41.056974066 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 0.31218085 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 0.079790856 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 0.079439614 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 0.079637355 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 0.079918405 seconds)
  done (took 1.884237579 seconds)
done (took 3.172962306 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 0.133664146 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 0.085676388 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 0.065441576 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.101082307 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 0.069270654 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 0.102137659 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 0.108773274 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 0.105128734 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 0.069428292 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 0.069121297 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 0.068945282 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 0.102449769 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 0.105130655 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 0.069290814 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.098439028 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 0.103955044 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 0.069127491 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 0.06540718 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 0.069020559 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 0.069686697 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 0.069088901 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.068418546 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 0.069191829 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 0.069396419 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.099981215 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 0.069041343 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 0.065241139 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.099429217 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 0.069286757 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.099237139 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 0.069757574 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 0.069694574 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 0.069453268 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.099554235 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 0.069660568 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.099809877 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 0.065060738 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 0.069419416 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 0.069474533 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 0.069194085 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 0.06952153 seconds)
  done (took 4.627395212 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071685016 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.082267395 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.083752309 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062613541 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.071964304 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.083185417 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.062496631 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.082437137 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.088688535 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.082865917 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.082974199 seconds)
  done (took 2.155303478 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 0.071062522 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 0.083628365 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 0.084726556 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 0.062778353 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 0.074001081 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 0.084184463 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 0.065781103 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 0.083431097 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 0.08672661 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 0.0842611 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 0.084283912 seconds)
  done (took 2.142491923 seconds)
done (took 10.194481333 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 0.097243462 seconds)
    (2/2) benchmarking "11899"...
    done (took 0.066886875 seconds)
  done (took 1.429223043 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 0.650542765 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 5.356329048 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 0.068696356 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 0.086996114 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 0.194679873 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 0.093545681 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 0.203495579 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 0.071897504 seconds)
  done (took 8.180314377 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 0.099484575 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 0.072047566 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 0.071262335 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 0.069519969 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 0.069611712 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 0.070110736 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 0.071066081 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 0.069385475 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 0.069510104 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 0.068285415 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 0.069171352 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 0.069682802 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 0.068651269 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 0.068521129 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 0.06898406 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 0.068987883 seconds)
  done (took 2.517345711 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 0.101451199 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 0.100116343 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 0.073219348 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 0.07375663 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 0.072039619 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 0.071056848 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 0.074227571 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 0.073248448 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 0.070918184 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 0.072873638 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 0.074215789 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 0.072581328 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 0.072332361 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 0.063397952 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 0.074229332 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 0.07459593 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 0.07038465 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 0.073286462 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 0.073975935 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 0.074969529 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 0.074091601 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 0.062985739 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 0.071957105 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 0.072796819 seconds)
  done (took 3.184475041 seconds)
done (took 16.590904105 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 0.17625642 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.075586766 seconds)
  done (took 1.527318963 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 0.068800056 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 0.070083562 seconds)
  done (took 1.430484524 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 0.074662572 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 0.061734969 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 0.080073114 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 0.0713758 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 0.062371763 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 0.062611911 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 0.078375355 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 0.06233017 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 0.061951557 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 0.062226528 seconds)
  done (took 1.968285909 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 0.063888449 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 0.069515968 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 0.068007594 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 0.065737702 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 0.067987522 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 0.063038994 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 0.065957488 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 0.06336014 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 0.069778956 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 0.062325769 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 0.066582466 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 0.083729705 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 0.066426671 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 0.084215783 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 0.066466377 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 0.066752171 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 0.068345315 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 0.066091604 seconds)
  done (took 2.521238941 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 0.062192047 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 0.062977501 seconds)
  done (took 1.424944265 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 0.065694234 seconds)
    (2/7) benchmarking "second"...
    done (took 0.063301765 seconds)
    (3/7) benchmarking "month"...
    done (took 0.065265786 seconds)
    (4/7) benchmarking "year"...
    done (took 0.065234724 seconds)
    (5/7) benchmarking "hour"...
    done (took 0.06264104 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 0.061689741 seconds)
    (7/7) benchmarking "minute"...
    done (took 0.062869848 seconds)
  done (took 1.742281252 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 0.423121877 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 0.122544788 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 0.34333913 seconds)
    (4/9) benchmarking "Date"...
    done (took 0.072175521 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 0.076829397 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 0.253891812 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 0.064216651 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 0.068694473 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 0.068992403 seconds)
  done (took 2.83101902 seconds)
done (took 14.748135505 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 0.082889202 seconds)
  (2/8) benchmarking "printfd"...
  done (took 0.181766865 seconds)
  (3/8) benchmarking "parseint"...
  done (took 0.087994466 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 0.407975008 seconds)
  (5/8) benchmarking "pisum"...
  done (took 0.092288341 seconds)
  (6/8) benchmarking "fib"...
  done (took 0.06767059 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 0.113220884 seconds)
  (8/8) benchmarking "mandel"...
  done (took 0.168931046 seconds)
done (took 2.516288772 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 0.214753232 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 1.175550198 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 0.371974681 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 0.12589687 seconds)
  done (took 2.97698494 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 0.335330394 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 0.079273335 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 0.079278173 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 0.067686264 seconds)
  done (took 1.875446923 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 0.065513889 seconds)
    (2/2) benchmarking "read"...
    done (took 0.072161633 seconds)
  done (took 1.443571522 seconds)
done (took 7.825062285 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.065434292 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 0.064689405 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 0.064627197 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 0.064662587 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 0.064759349 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 0.065011749 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 0.064625966 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 0.06446265 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 0.104887188 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 0.064069407 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 0.063959459 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064547206 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064846931 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064942805 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064221735 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 0.064881954 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 0.064680774 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.064838439 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 0.070744335 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.064480298 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 0.064109753 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.063882842 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 0.06461457 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 0.06495948 seconds)
  done (took 2.931680338 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 0.080662026 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 0.066377407 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 0.0676976 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 0.067479434 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 0.067937011 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 0.067465201 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 0.067591759 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 0.066026767 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 0.067379119 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 0.066138841 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.067784146 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 0.067822027 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 0.066052737 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 0.068246441 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066304983 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 0.068509151 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 0.067992273 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066903031 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.066113582 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 0.068483532 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 0.067466672 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066723271 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 0.068279956 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.06846968 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 0.067807849 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.06801308 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 0.066326758 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 0.06701238 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06788844 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 0.068611778 seconds)
  done (took 3.353951083 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 0.066947861 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 0.060718291 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 0.061842218 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 0.070664661 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 0.061185362 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 0.061676224 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 0.062016779 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 0.060853861 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 0.061398807 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 0.062085217 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 0.062011383 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 0.061572234 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 0.061554146 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 0.060825636 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 0.060915254 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 0.061597144 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 0.065455075 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 0.080298849 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 0.061013062 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 0.060748011 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 0.065020319 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 0.061141978 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 0.060677717 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 0.061055712 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 0.061955788 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 0.061243305 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 0.060589486 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 0.060922736 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 0.060858606 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 0.061600576 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 0.060797032 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 0.065010167 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 0.065829669 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 0.060616534 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 0.071038313 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 0.065832618 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 0.060600706 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 0.065038523 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 0.061851481 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 0.06078015 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 0.060705685 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 0.060765347 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 0.061231738 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 0.061539096 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 0.070662199 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 0.061352245 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 0.061776131 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 0.061735403 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 0.061751745 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 0.061082157 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 0.060695634 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 0.06293599 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 0.066161075 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 0.061818556 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 0.060375662 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 0.061671395 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 0.060427179 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 0.06152075 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 0.060582156 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 0.060625726 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 0.060595425 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 0.067238653 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 0.062426794 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 0.061728857 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 0.08063772 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 0.062311382 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 0.070867406 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 0.060957976 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 0.061509817 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 0.064526089 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 0.06170765 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 0.078513055 seconds)
  done (took 5.867910346 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 0.082739764 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.087011508 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.065836172 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.066073265 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062063442 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.06199613 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.068881244 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.061333176 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.065992968 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.081281684 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06139471 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06588737 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066035306 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.065755081 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.061849508 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066100018 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.069331661 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.061595016 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 0.06185979 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.065818654 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.061657725 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.06888572 seconds)
  done (took 2.813794282 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.136776738 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.067004362 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 0.10657191 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.075514444 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.069460995 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.07573526 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.067011789 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.066714327 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067257491 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.068011658 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067391588 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067064986 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.06950572 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06764411 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067748378 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.067407366 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06678567 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.067342939 seconds)
  done (took 2.66812217 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 0.078003123 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 0.066619978 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 0.087464515 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 0.067101351 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 0.06722574 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.066914767 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.07013208 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070553625 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 0.066555761 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 0.066806599 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 0.070779996 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066753388 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 0.066497334 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.066780492 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06630047 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.066971881 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 0.066466237 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.06720244 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.070701536 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.070236089 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.070045226 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.070948666 seconds)
  done (took 2.854816011 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.077394356 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.065425108 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.081328781 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066858766 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061377283 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061089385 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 0.066524444 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 0.065764348 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 0.066666047 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 0.065039932 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.066213426 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061054056 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 0.067064405 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.066007454 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 0.067679788 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.065998579 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.065334691 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.066144703 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.066212729 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061329956 seconds)
  done (took 2.66195541 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.087604947 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.064349871 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.063830303 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.083270918 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.063838563 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.064067939 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.08349521 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.064045146 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.063720001 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.08559979 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.064478996 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064014034 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.083437934 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.083723504 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.063754231 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.083475211 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.083201708 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.083035964 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.064295635 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.063981396 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.085437017 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.064459313 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.083177971 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.063812454 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.06367815 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.064091199 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.064226779 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.083360458 seconds)
  done (took 3.365899383 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.06487791 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.064653518 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 0.064304643 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 0.064548795 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 0.065024087 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 0.0649433 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 0.065181399 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 0.065197475 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.064671788 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.065503744 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 0.065171159 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 0.064835975 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.065077725 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 0.064672133 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.064629007 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 0.064595923 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.064703881 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 0.064690472 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.064775395 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.064789858 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 0.064863024 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.064461027 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 0.064724027 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.065068715 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.065555268 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 0.064068395 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.06495594 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.064602526 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.064603767 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.064965966 seconds)
  done (took 3.282243288 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 0.074396808 seconds)
    (2/2) benchmarking "in"...
    done (took 0.072592613 seconds)
  done (took 1.484195655 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 0.062863711 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.078996257 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 0.061161539 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 0.073431951 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 0.069757839 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 0.067445286 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 0.070107684 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.070134404 seconds)
  done (took 1.887008911 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 0.067516422 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 0.092128707 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 0.062679969 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 0.063353547 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 0.066369781 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.13271584 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 0.075417689 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 0.074739864 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076368671 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 0.065354582 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 0.064278223 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 0.075172264 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 0.062676523 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 0.076315864 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 0.06391461 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 0.071935703 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 0.070140728 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.079974909 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 0.076148691 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 0.061294069 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.075129141 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063555948 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 0.061886006 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 0.063717679 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 0.062913346 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 0.069317747 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 0.078230381 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 0.074918785 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071017531 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 0.060535286 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 0.080814309 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 0.061840517 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 0.062305631 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.070675684 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 0.065554609 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 0.061489201 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 0.098280797 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 0.062132003 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 0.067019535 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 0.06090239 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 0.073408957 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.082354458 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 0.076025187 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 0.079811383 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 0.063353674 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 0.063734867 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 0.061016701 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 0.064008556 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 0.064929747 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 0.071107146 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 0.061540009 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069161467 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 0.06073101 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 0.06278189 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 0.071967134 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 0.061814822 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 0.067250555 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 0.071091604 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.075489543 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 0.072011027 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 0.070482169 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 0.077315622 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 0.070430566 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 0.069351348 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 0.062471234 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.081132509 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 0.063158819 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 0.074804919 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.076401003 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 0.063422469 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.074695958 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 0.060916411 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 0.060396734 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 0.060944421 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.095260096 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 0.06348772 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 0.06268351 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 0.061855814 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 0.061627314 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 0.06333557 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.071564313 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 0.067207972 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069158942 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 0.065314502 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.077909222 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 0.071329247 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 0.061557331 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 0.068204503 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 0.079575849 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 0.065278797 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 0.061535807 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 0.078057369 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 0.065068728 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 0.061522658 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 0.078801502 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 0.071484424 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 0.06337632 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 0.062649814 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 0.064995788 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 0.074785698 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 0.062458326 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 0.059627267 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.069521346 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 0.062678275 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 0.063470306 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 0.06586695 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 0.069292261 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 0.060546765 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 0.071105518 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 0.066008784 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 0.062570654 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 0.059904212 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 0.064476007 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 0.061569961 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 0.059449459 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.06992941 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 0.060370024 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.07489427 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 0.066828212 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 0.074829748 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 0.07570879 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 0.071412746 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.076334307 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 0.060828832 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 0.059296058 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 0.078509478 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 0.070195754 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 0.19873411 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 0.081923569 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 0.063334879 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 0.074310979 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 0.062701405 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 0.065314461 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 0.072326154 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 0.061455823 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 0.064044364 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 0.062200481 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 0.067917952 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 0.0635765 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 0.064101114 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 0.067441148 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 0.071077028 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 0.074334889 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 0.063759928 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 0.071042487 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 0.062934664 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 0.077865319 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 0.072006527 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 0.067061682 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 0.065257502 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 0.062738211 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 0.075026815 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 0.068907882 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 0.071078664 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 0.06148322 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 0.062829324 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 0.065045765 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 0.073614176 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071467673 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 0.063767913 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 0.069719779 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 0.066910534 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 0.063011355 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 0.062215481 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 0.063168054 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 0.065286244 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.065801838 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 0.063259721 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 0.070197948 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 0.070679434 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 0.075926171 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.069299936 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 0.071215367 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 0.061108684 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 0.061214345 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 0.063394962 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 0.061463243 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 0.066384446 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 0.071573958 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077656796 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 0.073489427 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 0.082543468 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 0.061707542 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 0.071786172 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 0.06316439 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 0.078607657 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 0.076011549 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 0.063184422 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 0.066620784 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 0.060709764 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 0.063625603 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 0.071222079 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.073425293 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 0.075539316 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.076958904 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 0.066206214 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 0.066481472 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 0.061514479 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 0.07713687 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 0.062228246 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.07040497 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 0.071497036 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 0.066548222 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 0.061990681 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 0.063763157 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 0.070917366 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 0.066641905 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 0.061562436 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 0.077751247 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 0.068223384 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 0.061365213 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 0.075811175 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 0.062247497 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 0.07269137 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 0.061264653 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 0.065459159 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 0.067152874 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 0.063953278 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 0.071504493 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.077681837 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 0.060467396 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 0.061946301 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.07675851 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 0.0634195 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 0.0631869 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 0.069434193 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 0.076861306 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 0.066744286 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 0.069968614 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.072720672 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 0.071245374 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 0.065763373 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 0.071229912 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 0.062518345 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 0.070740386 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 0.064309788 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 0.073182819 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 0.061315274 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 0.079125253 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 0.060461614 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 0.076020245 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 0.061379092 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 0.072391186 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 0.061800473 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.070100384 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 0.061847864 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 0.077179904 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 0.062612762 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 0.061645326 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 0.072676874 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 0.05977082 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 0.070272708 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 0.060376354 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 0.065933677 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 0.067418144 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 0.070123221 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 0.062790319 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.070125279 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 0.20296551 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 0.072995315 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 0.067894607 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 0.071216873 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 0.07264083 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 0.067210411 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 0.062264078 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 0.070897866 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.073589664 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 0.070774203 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 0.064025513 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 0.063849018 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 0.062864673 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 0.07211915 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 0.063755927 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 0.06384528 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070207454 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 0.066683432 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 0.067863395 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 0.064126297 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 0.06436859 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 0.064093604 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070559084 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 0.072409796 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 0.080654579 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.071125967 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 0.069567143 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 0.071629031 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 0.062259867 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.078181465 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 0.062289062 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 0.069357862 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 0.060991212 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 0.0693262 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 0.071797094 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 0.062359065 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 0.08127468 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 0.063413015 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 0.070030224 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.074432603 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.071237415 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 0.066174785 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 0.080290172 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 0.065660625 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 0.070506464 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 0.070156317 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 0.066502021 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 0.068623348 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 0.064260394 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 0.070245239 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 0.071711869 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 0.072771409 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 0.063047515 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 0.069126296 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 0.071353243 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 0.063557933 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 0.07026716 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 0.066696813 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 0.070935461 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 0.064082212 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 0.061193517 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 0.066548093 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.073645424 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 0.066473049 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 0.06704491 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 0.06231492 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 0.060881653 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 0.06238522 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 0.069084801 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 0.066808824 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 0.071169926 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077409464 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 0.061099921 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 0.06302015 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 0.06141967 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 0.065692478 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080009627 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072239347 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 0.070133488 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 0.066506415 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 0.061162586 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 0.063935038 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 0.064112946 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 0.0625195 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 0.065505854 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 0.060861559 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 0.061754792 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.073067511 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 0.064005332 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 0.06659617 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062000809 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 0.063196807 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 0.071398004 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 0.066799299 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 0.062675979 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 0.067963159 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 0.061471113 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 0.067061479 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 0.061028114 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 0.063966753 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 0.06648385 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 0.061453548 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 0.06518074 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 0.072006371 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 0.078092763 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 0.068047124 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 0.070476312 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 0.063150449 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 0.069856391 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.076773123 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 0.069333766 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062980407 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 0.07077058 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 0.060656094 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 0.079501136 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 0.070661166 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 0.070230841 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 0.07125256 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 0.06282933 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 0.077380326 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 0.065315557 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 0.070482762 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076193919 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.061705597 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 0.066940819 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 0.059919905 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.07534952 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 0.064857932 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 0.05979178 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 0.068482402 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 0.068119133 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 0.066179587 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 0.07179274 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 0.206610436 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 0.071042178 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.068511733 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 0.066293292 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 0.064178447 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 0.063677766 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 0.071186239 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 0.078471065 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 0.063007938 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 0.066266662 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 0.070431501 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 0.07081645 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 0.066865635 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.074324835 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 0.070082443 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.063581044 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 0.063665968 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 0.066523609 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 0.063299639 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 0.074392451 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.062562958 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 0.066866516 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 0.066635337 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 0.06164394 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 0.069288856 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.078899678 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 0.071490986 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 0.071754009 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 0.061522898 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 0.060900792 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 0.07955643 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 0.065719693 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 0.065566094 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 0.070033043 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 0.071777243 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074472617 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 0.07148551 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 0.078745876 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 0.063087585 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 0.068300885 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 0.074644125 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 0.063081086 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 0.062421591 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 0.065892865 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 0.06398697 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 0.07140045 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.072018855 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 0.069971548 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.064226806 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 0.068884137 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 0.075418943 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 0.063442883 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 0.066422446 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 0.067272918 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 0.063016298 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 0.07233168 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 0.070042385 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 0.070740396 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 0.063536418 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 0.06162328 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 0.065259313 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 0.071099594 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 0.069797869 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 0.071150674 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063333702 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 0.068859066 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 0.07550637 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 0.070164959 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 0.065656408 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 0.061672622 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 0.065478898 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 0.07135802 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 0.067157445 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 0.061673181 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 0.066438179 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 0.066004954 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 0.069429143 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 0.071865753 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 0.067051493 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 0.061540954 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 0.07911479 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 0.070140527 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 0.072313366 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 0.066343945 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 0.063778838 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.062861613 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 0.061813588 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.073636147 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 0.061973549 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 0.063784344 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 0.066783295 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 0.063751119 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 0.079342574 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 0.070342928 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 0.077807015 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 0.063180419 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 0.066665262 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 0.06161121 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 0.071956646 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 0.066654261 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 0.062440619 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 0.072406372 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 0.061301459 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 0.077253589 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 0.073642386 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 0.067212932 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 0.081830825 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 0.066708378 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 0.069867085 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 0.076603096 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.071504979 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 0.070608347 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 0.064788389 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.071342437 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 0.063118221 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 0.072300332 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 0.061057146 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 0.060412568 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 0.071351247 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 0.069681572 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 0.073294718 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 0.060287598 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 0.070795249 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 0.062510974 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 0.069114434 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 0.068133233 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 0.062683921 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 0.062184512 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 0.062048248 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 0.069734236 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 0.064424316 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 0.069688533 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 0.208402927 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 0.080093823 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 0.064697137 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 0.074243621 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 0.072368759 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 0.073756512 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.076395851 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 0.074691475 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 0.069798923 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 0.063056492 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 0.069499323 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 0.069970225 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 0.063562533 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 0.066811524 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 0.06559392 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 0.083496087 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 0.064083436 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 0.064181692 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 0.076930492 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 0.068739829 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 0.062270463 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 0.068949508 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 0.066750981 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 0.0725224 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 0.06324413 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 0.072896212 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 0.066685762 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 0.063506499 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 0.066657382 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 0.066452129 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 0.061255009 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 0.061830661 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 0.061968795 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 0.071867684 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 0.066634277 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 0.062300481 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 0.080917553 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 0.063488479 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 0.070964643 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 0.073365852 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 0.068816452 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 0.063984517 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 0.060840437 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 0.063208696 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 0.075152993 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 0.077912301 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 0.065676399 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 0.070671132 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 0.064023218 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 0.07143994 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 0.060861021 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 0.071106551 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 0.069913487 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 0.070227018 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 0.061559854 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 0.061995439 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 0.076948425 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 0.077467829 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 0.0662971 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 0.071279429 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 0.07094707 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 0.063467984 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 0.083287444 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 0.071433038 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 0.063281487 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 0.072721144 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 0.064181831 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 0.061225607 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 0.061266834 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 0.063978909 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 0.07348925 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 0.061585784 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 0.064811728 seconds)
  done (took 42.587218675 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.100298347 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.063107886 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.062189532 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.061503675 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072497923 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062540052 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.06172409 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.062574512 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.06294793 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.064572967 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.061631371 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.061554873 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.072881839 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074772396 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072204501 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.065672568 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.062089198 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.062916003 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.061818169 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.062658141 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.071658045 seconds)
  done (took 2.857032521 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 0.068852123 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 0.077266063 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.07299973 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.078171089 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.069928884 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 0.065974193 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 0.072920934 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.066013171 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.073460032 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.071524452 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 0.07355432 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.06621234 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 0.071841702 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 0.071254412 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.071182321 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.066083761 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 0.076620239 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.069709045 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 0.065852058 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.072979568 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06601172 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 0.072778056 seconds)
  done (took 2.989905278 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 0.06382566 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 0.063073443 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 0.070771543 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 0.06135564 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 0.061323524 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 0.064770068 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 0.061053857 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 0.065444135 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 0.065568868 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 0.065945599 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 0.071051802 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 0.062187866 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 0.061008498 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 0.067427444 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 0.061160213 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 0.062880216 seconds)
    (17/49) benchmarking "13786"...
    done (took 0.104267234 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 0.062511262 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 0.062649042 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 0.061094403 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 0.064038356 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 0.070783487 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 0.06153599 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 0.061673508 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 0.065959823 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 0.065006313 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 0.061484876 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 0.06438648 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 0.062157961 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 0.066229234 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 0.062657266 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 0.060975971 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 0.070812938 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 0.07007077 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 0.065799463 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 0.066119187 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 0.063135365 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 0.062534242 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 0.061654615 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 0.061343544 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 0.070966832 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 0.063087456 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 0.06181963 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 0.063102441 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 0.070454783 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 0.061446601 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 0.061380517 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 0.07113506 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 0.061626362 seconds)
  done (took 4.626367258 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 0.072111059 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 0.114278253 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 0.06764608 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.095916455 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 0.074454287 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 0.067545947 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 0.067666964 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.096043283 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 0.062442513 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 0.063416943 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 0.075555107 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 0.075902506 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064949171 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 0.065969867 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 0.068840616 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064300622 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.06541348 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063722057 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 0.067183305 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 0.064374114 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 0.067700584 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 0.068254489 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 0.074151633 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 0.07486197 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.065300639 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 0.063811371 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 0.064078463 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 0.065742707 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 0.074676529 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 0.068313778 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 0.066207682 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 0.066741235 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 0.07498882 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 0.067895764 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064262113 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 0.063931954 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 0.076114915 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 0.064940159 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 0.064444592 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 0.063596761 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 0.063989962 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 0.065980792 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 0.06852394 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 0.076013174 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 0.064498194 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 0.069058261 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 0.064531044 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 0.06271547 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 0.075534386 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 0.064252207 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 0.071243673 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 0.076259606 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.065925417 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 0.065629626 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 0.06614438 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 0.075953391 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 0.064308397 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 0.063159683 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 0.064948559 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 0.074594261 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 0.062956842 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065241136 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 0.075442494 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 0.064405721 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 0.068136619 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 0.075949694 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 0.069139925 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 0.065983153 seconds)
  done (took 6.303921323 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.071554538 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 0.096867563 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.07288209 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07292896 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.072585769 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 0.072628597 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 0.07253825 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 0.071914245 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072481226 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 0.073366196 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072564131 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.112735289 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 0.069382763 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.077251884 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07287791 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 0.072173039 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 0.072469507 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.07213001 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 0.072224823 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 0.07300242 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 0.072395951 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072517322 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 0.072905111 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.07258658 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 0.074419567 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 0.068852321 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 0.072726985 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072108291 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.07296014 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 0.072332133 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 0.074849113 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 0.073235775 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.072104869 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 0.07350914 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 0.074771541 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 0.074877534 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.062980305 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.072152516 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 0.072649306 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 0.072581596 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 0.069566469 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 0.072894838 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 0.072754631 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 0.068640866 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.072512096 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 0.072307631 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 0.072650655 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 0.07488717 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 0.079193321 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 0.073063071 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 0.072933905 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 0.073096455 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 0.072381315 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 0.072590552 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 0.073029066 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 0.079402709 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 0.073509811 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 0.072749465 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 0.072813952 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 0.072722929 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 0.073070618 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 0.079270464 seconds)
  done (took 6.046331047 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.076068474 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 0.068890243 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 0.081273822 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 0.062054207 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 0.062147726 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 0.07122314 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 0.061939596 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 0.061603942 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 0.069172227 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 0.069147413 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.070554642 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.071290802 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.073289036 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.070983302 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 0.071401935 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.073206214 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.071027258 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 0.071339119 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.068560201 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 0.071548521 seconds)
  done (took 2.84596113 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 0.076994795 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.081253223 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 0.067927893 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.071027102 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 0.067288252 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.07130779 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 0.06736672 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.067855497 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.068237753 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.067436709 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.072758384 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.072602323 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.068191002 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.07191823 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.072757244 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.071374431 seconds)
  done (took 2.590546452 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 0.068794139 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 0.068736991 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 0.068941172 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 0.063861905 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 0.06697976 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 0.062569636 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 0.062945021 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 0.062137078 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 0.06238111 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 0.076217056 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 0.063160885 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 0.075106237 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 0.062967272 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 0.062374598 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 0.06226539 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 0.068728999 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 0.061963482 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 0.062995525 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 0.062523711 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 0.067362082 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 0.069639576 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 0.06362641 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 0.066761049 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 0.062905347 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 0.068114295 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 0.07008149 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 0.064274176 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 0.067028013 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 0.063012012 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 0.06297658 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 0.068524458 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 0.069516106 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 0.062669742 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 0.063821934 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 0.061675632 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 0.062721203 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 0.062881234 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 0.063114593 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 0.068933666 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 0.062749146 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 0.061426188 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 0.067925808 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 0.06358495 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 0.063578778 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 0.06234199 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 0.063319782 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 0.061992019 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 0.068625748 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 0.063345133 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 0.068977459 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 0.063043237 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 0.064998855 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 0.063720057 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 0.070051287 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 0.065329121 seconds)
  done (took 5.044445182 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 0.078950051 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 0.067409793 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 0.061733723 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 0.061777413 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 0.067556204 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 0.0682054 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 0.066897332 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 0.067056715 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 0.067752272 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 0.061725555 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 0.067594398 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 0.066639055 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 0.067378092 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 0.067381604 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 0.068085652 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 0.06751026 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 0.061804989 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 0.066984757 seconds)
  done (took 2.669397121 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 0.073842967 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 0.06691954 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 0.071933374 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 0.067548956 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 0.066748612 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 0.066899513 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 0.062131938 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 0.062253944 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 0.062020908 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 0.066755937 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 0.067238609 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 0.066294015 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 0.062349428 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 0.067217465 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 0.066654234 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 0.066919411 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 0.066372882 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 0.062168961 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 0.066783039 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 0.062453042 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 0.066599023 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 0.06218464 seconds)
  done (took 2.910128381 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 0.089477074 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 0.0887595 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 0.129451231 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 0.081232962 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 0.090433196 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 0.073106768 seconds)
  done (took 2.014964911 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 0.094940341 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.106019787 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.066817649 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 0.066681564 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.07542637 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070200301 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.069770682 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070347672 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075121025 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.074036259 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070599738 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075410576 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075500814 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071589728 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075580022 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.077867494 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070043868 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070062765 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 0.067118549 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.077555433 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070163048 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075588762 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070087422 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07023971 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070058138 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071924143 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.078434244 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.074203518 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.07038414 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.076020754 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077835965 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070852203 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.075720913 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074661515 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 0.067216998 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075741123 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070200608 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.077867502 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075908681 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071976322 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.066899397 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076108146 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.0755591 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071559014 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078421791 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070586624 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072628847 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070881503 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070791109 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.080658466 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.075859739 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.071983669 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.075794453 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.07801341 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078163436 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.08017016 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074409461 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072256981 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.076106276 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074482822 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072558292 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.076644661 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072386742 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.074378489 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.078335103 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072057678 seconds)
  done (took 6.369938546 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.102135068 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 0.067735735 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070838603 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07461542 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072210385 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070168172 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070414812 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070305304 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070640144 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 0.067766494 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.106308514 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070904624 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.072416369 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.072292735 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070785941 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070599773 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.07059231 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072049032 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 0.067868755 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 0.080800052 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070762707 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.072070922 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072087481 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.072078356 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 0.074545036 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.077878778 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.07059792 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070239872 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070085079 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070332493 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071798315 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070635216 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.072034514 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 0.067346118 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.072303165 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070719506 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070126741 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.07190804 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070288757 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.075822393 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.071965645 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.078391515 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070384078 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 0.070267313 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 0.074163599 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.070155775 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070051576 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 0.067786795 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 0.070412285 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 0.06770454 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 0.074157038 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 0.074349341 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 0.074640565 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.071940117 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070624011 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 0.070724769 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.070667467 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 0.070697623 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070938471 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.078142968 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 0.071814746 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 0.070403427 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 0.080871171 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070449307 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 0.070406831 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 0.072042255 seconds)
  done (took 6.288550345 seconds)
done (took 130.624880931 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 0.233260248 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 0.199206476 seconds)
  done (took 1.884243907 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 0.075904505 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 0.099502671 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 0.076769712 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 0.140363489 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 0.07402408 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 0.110131226 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 0.108611738 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 0.077540726 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 0.072923632 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 0.073565782 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 0.073279707 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 0.075652587 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 0.14320734 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 0.073780522 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 0.073629559 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 0.076057708 seconds)
  done (took 2.89825095 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 0.108486593 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 0.186901333 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 0.115654417 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 0.071747921 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 0.111972436 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 0.077802846 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 0.071223931 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 0.082600612 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 0.075197003 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 0.084282539 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 0.078101336 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 0.076537972 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 0.073723115 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 0.076577913 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 0.075247864 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 0.077701643 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 0.073170726 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 0.077514826 seconds)
  done (took 3.068965025 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 0.099237211 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 0.086814871 seconds)
  done (took 1.663125302 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 0.157061273 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 0.106280019 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 0.146476858 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 0.332173403 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 0.131564125 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 0.128831176 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 0.131113848 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 0.126284556 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 0.112157562 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 0.122693987 seconds)
  done (took 2.967069589 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 0.107485611 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 0.178664735 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 0.31691736 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 0.124472038 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 0.077617419 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 0.10035437 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 0.12535568 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 0.083851711 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 0.081123097 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 0.080867284 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 0.080918034 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 0.078261577 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 0.103348697 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 0.077126739 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 0.076499538 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 0.078099217 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 0.105747645 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 0.075570389 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 0.075978386 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 0.076789536 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 0.107630839 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 0.071780386 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 0.077338836 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 0.075141954 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 0.079427118 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 0.079457347 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 0.073499101 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 0.071876047 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 0.076919721 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 0.075872525 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 0.079729413 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 0.098562053 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 0.07956155 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 0.100501386 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 0.07595265 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 0.100887212 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 0.07620248 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 0.075163472 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 0.076549932 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 0.075547723 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 0.077973529 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 0.078428743 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 0.081320725 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 0.078857411 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 0.073787903 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 0.076251666 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 0.073768822 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 0.072046093 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 0.08017074 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 0.073107598 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 0.080002083 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 0.079411797 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 0.100508667 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 0.072659498 seconds)
  done (took 6.318393941 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 0.109401326 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 0.108032795 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.071154187 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.114878449 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.10678874 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.071162538 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.105849846 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.101305843 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 0.109288926 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070729258 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070132505 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.07049348 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077589876 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 0.080166548 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.117630623 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.109692319 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.072881272 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.070965271 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.109160955 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 0.108522714 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070332801 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.103080159 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.101130638 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 0.107409218 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 0.06978367 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.070907303 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.069295612 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.069919141 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075220483 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 0.076198861 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.069961269 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 0.07664848 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 0.08217616 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.076087483 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069232274 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069479384 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069395262 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 0.076768683 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.07720275 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.076915192 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 0.07534357 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.06932937 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069649469 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.06993498 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070768887 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069242835 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075839605 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 0.076684975 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 0.075693016 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069904326 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070267965 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 0.069203403 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.070269552 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076403799 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 0.07510716 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 0.078022523 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076706517 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 0.069961194 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069690633 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 0.071788324 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.077726373 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.077676167 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.077274369 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.071199012 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 0.077839238 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 0.069751153 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.078858175 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.082087615 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 0.069675978 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 0.070248148 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070054028 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.06982071 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070525498 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 0.075905382 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 0.075727222 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070560524 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 0.072918534 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069529245 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.078132112 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 0.076169979 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069429233 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075485649 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.069237718 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 0.070067045 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.070194265 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070633862 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 0.075346761 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 0.076649218 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 0.07011922 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.069180748 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.069463251 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069545275 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 0.069116158 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 0.074957037 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.076105983 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 0.076185846 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 0.075095905 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.069617223 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 0.075418469 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07564032 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069281208 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 0.074791666 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.068834072 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.068940355 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069031998 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 0.074646653 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 0.073557312 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 0.076093455 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.068753035 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.068170134 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 0.074475452 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.214208784 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 0.071752335 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 0.078150628 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.079583751 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 0.077265934 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 0.070492587 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.080019857 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070550716 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.079028916 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.070802885 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 0.078229199 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.070971412 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.076368129 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.070807904 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 0.069473778 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.070124579 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 0.076499201 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070914496 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070207029 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.070942307 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070079524 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 0.076424559 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 0.079658566 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.070489839 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.07663097 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 0.076872755 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 0.070721482 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 0.075987722 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 0.069868865 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.077161714 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 0.070472776 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070361454 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069603738 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.07943919 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.070275056 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 0.070277727 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.070300139 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 0.077822931 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070281686 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.077949112 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075342731 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 0.069766802 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.079649849 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 0.078705593 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 0.075891795 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 0.078668859 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.070854006 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 0.070345741 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 0.070323979 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 0.070086093 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 0.075572044 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.076925428 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.070931865 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.0700887 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 0.075564559 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 0.078093661 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 0.069159204 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 0.310352014 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 0.076231891 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 0.076136514 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 0.07018539 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 0.07058115 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 0.078804755 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 0.078145527 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 0.076094339 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 0.075629746 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076679226 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.069680334 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 0.075252653 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 0.075822127 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069586681 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.081942947 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 0.069802281 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 0.07978837 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 0.075584569 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 0.07507276 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 0.076139089 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 0.077667278 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 0.077823602 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 0.078214818 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 0.080313448 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069589627 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 0.069540746 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 0.075518222 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 0.070122254 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 0.069749072 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 0.075425175 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 0.070017832 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 0.070021398 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 0.080800869 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069678166 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 0.078014567 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 0.069443831 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 0.076344163 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 0.069492721 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 0.069838535 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 0.080689285 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 0.069417961 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 0.069974024 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 0.075613678 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 0.069830676 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 0.075464164 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 0.077806476 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 0.075271163 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 0.069021518 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 0.069362828 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 0.075436541 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 0.075402553 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 0.068637959 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 0.068376784 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 0.069089949 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 0.07364902 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 0.07353157 seconds)
  done (took 18.804174785 seconds)
done (took 39.094277763 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.213070498 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.172101948 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 0.199260015 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.117955127 seconds)
  done (took 2.291563658 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 0.093424182 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 0.101312118 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 0.07800987 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 0.066914741 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 0.084886462 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 0.066554844 seconds)
  done (took 2.018485001 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 0.254554508 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 0.193342626 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 0.178976303 seconds)
  done (took 2.146847433 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 0.221265908 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 0.20404897 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 0.508017833 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 0.315616364 seconds)
  done (took 2.874015403 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 0.132256385 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 0.079562055 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 0.065055232 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 0.075407716 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 0.105619418 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 0.13475385 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 0.08738967 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 0.108816792 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 0.076307543 seconds)
  done (took 2.451462649 seconds)
  (6/6) benchmarking "26942"...
  done (took 0.131975817 seconds)
done (took 13.468454454 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 0.205749122 seconds)
    (2/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 0.10607612 seconds)
    (3/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 0.289557288 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 0.07779717 seconds)
    (5/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 0.183089309 seconds)
    (6/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 0.076405183 seconds)
    (7/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 0.276415398 seconds)
    (8/341) benchmarking ("perf_sum", Bool, true)...
    done (took 0.074333857 seconds)
    (9/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 0.06775107 seconds)
    (10/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 0.222379722 seconds)
    (11/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 0.22015122 seconds)
    (12/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 0.188874 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 0.093417916 seconds)
    (14/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 0.080496408 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 0.150606016 seconds)
    (16/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 0.083816168 seconds)
    (17/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 0.109860102 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 0.122900405 seconds)
    (19/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 0.077277513 seconds)
    (20/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 0.225496719 seconds)
    (21/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 0.235354646 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 0.095045592 seconds)
    (23/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 0.218742959 seconds)
    (24/341) benchmarking ("map", abs, BigInt, true)...
    done (took 0.148842467 seconds)
    (25/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 0.074231114 seconds)
    (26/341) benchmarking ("map", abs, Int8, true)...
    done (took 0.149179246 seconds)
    (27/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 0.075560852 seconds)
    (28/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 0.079075645 seconds)
    (29/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 0.225046048 seconds)
    (30/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 0.175018117 seconds)
    (31/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 0.075198877 seconds)
    (32/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 0.158169245 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 0.242443434 seconds)
    (34/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 0.169158713 seconds)
    (35/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 0.240559601 seconds)
    (36/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 0.075159503 seconds)
    (37/341) benchmarking ("map", identity, Int64, false)...
    done (took 0.143427666 seconds)
    (38/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 0.084471893 seconds)
    (39/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 0.155810597 seconds)
    (40/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 0.077755765 seconds)
    (41/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 0.217281241 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 0.077911513 seconds)
    (43/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 0.071475226 seconds)
    (44/341) benchmarking ("sort", Int8, false)...
    done (took 0.150672606 seconds)
    (45/341) benchmarking ("perf_sum", Float64, true)...
    done (took 0.072276118 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 0.066500411 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 0.092687236 seconds)
    (48/341) benchmarking ("map", abs, Int8, false)...
    done (took 0.066610569 seconds)
    (49/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 0.233429445 seconds)
    (50/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 0.074497993 seconds)
    (51/341) benchmarking ("map", identity, Bool, true)...
    done (took 0.139232199 seconds)
    (52/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 0.182662853 seconds)
    (53/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 0.076530153 seconds)
    (54/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 0.064753726 seconds)
    (55/341) benchmarking ("collect", "all", Float32, false)...
    done (took 0.143731106 seconds)
    (56/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 0.076208283 seconds)
    (57/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 0.077931446 seconds)
    (58/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 0.202737887 seconds)
    (59/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 0.164189117 seconds)
    (60/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 0.198251806 seconds)
    (61/341) benchmarking ("sort", Bool, false)...
    done (took 0.145988978 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 0.085726483 seconds)
    (63/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 0.074183437 seconds)
    (64/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 0.235064547 seconds)
    (65/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 0.236063338 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 0.087117376 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 0.086735535 seconds)
    (68/341) benchmarking ("sort", BigFloat, false)...
    done (took 0.13479823 seconds)
    (69/341) benchmarking ("sort", Int64, false)...
    done (took 0.06725596 seconds)
    (70/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 0.161790059 seconds)
    (71/341) benchmarking ("collect", "all", Int8, false)...
    done (took 0.137723957 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 0.090414099 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 0.229706595 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 0.170875327 seconds)
    (75/341) benchmarking ("perf_countequals", "Int8")...
    done (took 0.078578945 seconds)
    (76/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 0.098199409 seconds)
    (77/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 0.067798262 seconds)
    (78/341) benchmarking ("perf_sum", Int64, true)...
    done (took 0.077322777 seconds)
    (79/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 0.077319217 seconds)
    (80/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 0.079004337 seconds)
    (81/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 0.160754078 seconds)
    (82/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 0.214196281 seconds)
    (83/341) benchmarking ("perf_sum", Float32, false)...
    done (took 0.071713628 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 0.070712651 seconds)
    (85/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 0.065630939 seconds)
    (86/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 0.075151256 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 0.136946747 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 0.135379663 seconds)
    (89/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 0.077844251 seconds)
    (90/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 0.151703089 seconds)
    (91/341) benchmarking ("map", identity, BigInt, true)...
    done (took 0.144701369 seconds)
    (92/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 0.079198459 seconds)
    (93/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 0.222347667 seconds)
    (94/341) benchmarking ("map", identity, BigInt, false)...
    done (took 0.067653134 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 0.089779678 seconds)
    (96/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 0.222770597 seconds)
    (97/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 0.074756132 seconds)
    (98/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 0.084419066 seconds)
    (99/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 0.200505237 seconds)
    (100/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 0.074853273 seconds)
    (101/341) benchmarking ("map", identity, Bool, false)...
    done (took 0.06743812 seconds)
    (102/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 0.068453489 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 0.092758626 seconds)
    (104/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 0.068645255 seconds)
    (105/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 0.069201192 seconds)
    (106/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 0.119998327 seconds)
    (107/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 0.076352909 seconds)
    (108/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 0.140130052 seconds)
    (109/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 0.067098268 seconds)
    (110/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 0.199428366 seconds)
    (111/341) benchmarking ("map", identity, Float64, false)...
    done (took 0.145128363 seconds)
    (112/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 0.067296623 seconds)
    (113/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 0.0667994 seconds)
    (114/341) benchmarking ("sort", Float32, false)...
    done (took 0.138802782 seconds)
    (115/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 0.074732197 seconds)
    (116/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 0.067820894 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 0.087281364 seconds)
    (118/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 0.073792799 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 0.153891373 seconds)
    (120/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 0.163197965 seconds)
    (121/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 0.165008816 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 0.066390958 seconds)
    (123/341) benchmarking ("map", identity, Float32, false)...
    done (took 0.084505829 seconds)
    (124/341) benchmarking ("perf_sum", Float32, true)...
    done (took 0.069151471 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 0.121850428 seconds)
    (126/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 0.066713272 seconds)
    (127/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 0.0680602 seconds)
    (128/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 0.066608607 seconds)
    (129/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 0.067630904 seconds)
    (130/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 0.157767251 seconds)
    (131/341) benchmarking ("map", abs, Float32, true)...
    done (took 0.143790053 seconds)
    (132/341) benchmarking ("collect", "all", Float64, false)...
    done (took 0.08481793 seconds)
    (133/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 0.067639458 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 0.076938819 seconds)
    (135/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 0.066404235 seconds)
    (136/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 0.080678961 seconds)
    (137/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 0.075714429 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 0.066664995 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 0.09107273 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 0.093089648 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 0.082660808 seconds)
    (142/341) benchmarking ("sort", Float64, false)...
    done (took 0.137577621 seconds)
    (143/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 0.075836631 seconds)
    (144/341) benchmarking ("map", abs, Float64, true)...
    done (took 0.144440829 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 0.153029425 seconds)
    (146/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 0.180304301 seconds)
    (147/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 0.068087556 seconds)
    (148/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 0.096570507 seconds)
    (149/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 0.084824083 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 0.066304813 seconds)
    (151/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 0.066663029 seconds)
    (152/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 0.084693829 seconds)
    (153/341) benchmarking ("collect", "all", Int8, true)...
    done (took 0.070329582 seconds)
    (154/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 0.067564002 seconds)
    (155/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 0.073781361 seconds)
    (156/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 0.07600881 seconds)
    (157/341) benchmarking ("map", identity, Float32, true)...
    done (took 0.066948541 seconds)
    (158/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 0.090932181 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 0.178454454 seconds)
    (160/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 0.074087476 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 0.171829321 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 0.092113531 seconds)
    (163/341) benchmarking ("perf_sum", Int8, false)...
    done (took 0.075809027 seconds)
    (164/341) benchmarking ("perf_countequals", "Int64")...
    done (took 0.076797156 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 0.083364539 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 0.098820209 seconds)
    (167/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 0.076889582 seconds)
    (168/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 0.066880332 seconds)
    (169/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 0.074922277 seconds)
    (170/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 0.074123874 seconds)
    (171/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 0.074236943 seconds)
    (172/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 0.070623331 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 0.066067838 seconds)
    (174/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 0.077510034 seconds)
    (175/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 0.066014021 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 0.066840175 seconds)
    (177/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 0.091910389 seconds)
    (178/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 0.065181174 seconds)
    (179/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 0.064310514 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 0.14868544 seconds)
    (181/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 0.065212683 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 0.080108056 seconds)
    (183/341) benchmarking ("map", abs, Int64, false)...
    done (took 0.307348826 seconds)
    (184/341) benchmarking ("map", abs, Bool, false)...
    done (took 0.142676745 seconds)
    (185/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 0.070921674 seconds)
    (186/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 0.154223255 seconds)
    (187/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 0.067601078 seconds)
    (188/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 0.06744588 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 0.153222242 seconds)
    (190/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 0.23144736 seconds)
    (191/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 0.070038683 seconds)
    (192/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 0.074677423 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 0.067498153 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 0.089002612 seconds)
    (195/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 0.074609875 seconds)
    (196/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 0.067089215 seconds)
    (197/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 0.06919595 seconds)
    (198/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 0.092896632 seconds)
    (199/341) benchmarking ("map", identity, Int8, false)...
    done (took 0.083470215 seconds)
    (200/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 0.067914195 seconds)
    (201/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 0.071554382 seconds)
    (202/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 0.075319225 seconds)
    (203/341) benchmarking ("map", identity, Float64, true)...
    done (took 0.067112121 seconds)
    (204/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 0.231520881 seconds)
    (205/341) benchmarking ("map", abs, Float64, false)...
    done (took 0.068045212 seconds)
    (206/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 0.067944612 seconds)
    (207/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 0.068749771 seconds)
    (208/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 0.066815923 seconds)
    (209/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 0.195905075 seconds)
    (210/341) benchmarking ("map", abs, Bool, true)...
    done (took 0.067740189 seconds)
    (211/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 0.086038995 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 0.0672329 seconds)
    (213/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 0.068345322 seconds)
    (214/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 0.0754653 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 0.116358667 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 0.066711102 seconds)
    (217/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 0.066682441 seconds)
    (218/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 0.070582298 seconds)
    (219/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 0.07585195 seconds)
    (220/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 0.06757232 seconds)
    (221/341) benchmarking ("perf_sum", Float64, false)...
    done (took 0.069841908 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 0.066993749 seconds)
    (223/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 0.198823 seconds)
    (224/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 0.070931798 seconds)
    (225/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 0.078692114 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 0.114804362 seconds)
    (227/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 0.068382543 seconds)
    (228/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 0.067081658 seconds)
    (229/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 0.068375365 seconds)
    (230/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 0.069969412 seconds)
    (231/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 0.165880574 seconds)
    (232/341) benchmarking ("collect", "all", Float64, true)...
    done (took 0.070738602 seconds)
    (233/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 0.067366192 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 0.091810616 seconds)
    (235/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 0.068276108 seconds)
    (236/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 0.068997388 seconds)
    (237/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 0.06698513 seconds)
    (238/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 0.068034405 seconds)
    (239/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 0.074263085 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 0.153563505 seconds)
    (241/341) benchmarking ("map", identity, Int8, true)...
    done (took 0.067288711 seconds)
    (242/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 0.067085598 seconds)
    (243/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 0.066732849 seconds)
    (244/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 0.069456584 seconds)
    (245/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 0.073967965 seconds)
    (246/341) benchmarking ("perf_countequals", "Float64")...
    done (took 0.077201261 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 0.087326166 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 0.078992772 seconds)
    (249/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 0.067850253 seconds)
    (250/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 0.070568528 seconds)
    (251/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 0.147320317 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 0.066845058 seconds)
    (253/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 0.152726413 seconds)
    (254/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 0.074526868 seconds)
    (255/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 0.074694579 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 0.092681411 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 0.088697871 seconds)
    (258/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 0.067596401 seconds)
    (259/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 0.065419292 seconds)
    (260/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 0.067728455 seconds)
    (261/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 0.067769207 seconds)
    (262/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 0.06724529 seconds)
    (263/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 0.07552342 seconds)
    (264/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 0.068846425 seconds)
    (265/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 0.06666802 seconds)
    (266/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 0.065559816 seconds)
    (267/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 0.14343712 seconds)
    (268/341) benchmarking ("map", identity, Int64, true)...
    done (took 0.067073247 seconds)
    (269/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 0.192348202 seconds)
    (270/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 0.164166674 seconds)
    (271/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 0.067108357 seconds)
    (272/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 0.068718728 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 0.15286586 seconds)
    (274/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 0.066066124 seconds)
    (275/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 0.066837281 seconds)
    (276/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 0.066936143 seconds)
    (277/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 0.096637193 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 0.123559426 seconds)
    (279/341) benchmarking ("map", abs, BigInt, false)...
    done (took 0.068890017 seconds)
    (280/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 0.085747255 seconds)
    (281/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 0.068258448 seconds)
    (282/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 0.067640923 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 0.130684147 seconds)
    (284/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 0.07018217 seconds)
    (285/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 0.171432972 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 0.065359624 seconds)
    (287/341) benchmarking ("collect", "all", Bool, true)...
    done (took 0.08394403 seconds)
    (288/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 0.06624968 seconds)
    (289/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 0.069926624 seconds)
    (290/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 0.067240291 seconds)
    (291/341) benchmarking ("perf_sum", Int8, true)...
    done (took 0.074068182 seconds)
    (292/341) benchmarking ("sort", BigInt, false)...
    done (took 0.265702663 seconds)
    (293/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 0.089243967 seconds)
    (294/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 0.068888498 seconds)
    (295/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 0.068842518 seconds)
    (296/341) benchmarking ("map", abs, Float32, false)...
    done (took 0.066290802 seconds)
    (297/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 0.066902746 seconds)
    (298/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 0.074113882 seconds)
    (299/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 0.169181154 seconds)
    (300/341) benchmarking ("collect", "all", Bool, false)...
    done (took 0.069170746 seconds)
    (301/341) benchmarking ("collect", "all", Float32, true)...
    done (took 0.069419469 seconds)
    (302/341) benchmarking ("perf_sum", Int64, false)...
    done (took 0.073433058 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 0.084850913 seconds)
    (304/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 0.06630723 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 0.125652378 seconds)
    (306/341) benchmarking ("collect", "all", Int64, false)...
    done (took 0.082797258 seconds)
    (307/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 0.079144506 seconds)
    (308/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 0.073965549 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 0.302568034 seconds)
    (310/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 0.082785172 seconds)
    (311/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 0.069079851 seconds)
    (312/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 0.081645514 seconds)
    (313/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 0.076914426 seconds)
    (314/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 0.084135716 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 0.147089839 seconds)
    (316/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 0.069384653 seconds)
    (317/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 0.067975453 seconds)
    (318/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 0.067557568 seconds)
    (319/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 0.071847802 seconds)
    (320/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 0.068359711 seconds)
    (321/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 0.068231819 seconds)
    (322/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 0.068729074 seconds)
    (323/341) benchmarking ("collect", "all", Int64, true)...
    done (took 0.072324804 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 0.079998978 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 0.143919508 seconds)
    (326/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 0.06718239 seconds)
    (327/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 0.067978237 seconds)
    (328/341) benchmarking ("map", abs, Int64, true)...
    done (took 0.067654614 seconds)
    (329/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 0.066156801 seconds)
    (330/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 0.067618466 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 0.125078646 seconds)
    (332/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 0.074821964 seconds)
    (333/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 0.069529604 seconds)
    (334/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 0.065640483 seconds)
    (335/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 0.075802356 seconds)
    (336/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 0.068609412 seconds)
    (337/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 0.155194832 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 0.066867178 seconds)
    (339/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 0.067706919 seconds)
    (340/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 0.067461438 seconds)
    (341/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 0.067145353 seconds)
  done (took 37.19842847 seconds)
done (took 38.742451132 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 0.084431803 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.091334209 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 0.074071373 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 0.085091839 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 0.081943626 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 0.100334891 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 0.074926541 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 0.079272942 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 0.082475101 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 0.080929275 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 0.079875736 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 0.07331909 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 0.075773187 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 0.076623745 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 0.074674206 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.09006429 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 0.083373191 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 0.075794152 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 0.075916485 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 0.066082106 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 0.075969287 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 0.067388376 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 0.066305857 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 0.073385839 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 0.079393318 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 0.074552846 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 0.07628774 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 0.076460307 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 0.066913998 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 0.067256323 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 0.072225233 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 0.075929518 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 0.066387059 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 0.078381882 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 0.075619639 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 0.075767428 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 0.076945724 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 0.080208787 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 0.066677722 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 0.067704139 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 0.078334082 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 0.067451403 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 0.075422459 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 0.073958672 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 0.072399652 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 0.074158339 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 0.075534363 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 0.079123928 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.089804971 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.071698391 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 0.078225674 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 0.077971106 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 0.078207744 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 0.072646594 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 0.072427909 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 0.07560255 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 0.074053332 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.089493981 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 0.075723448 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071959837 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 0.077674578 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 0.076611814 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 0.073774056 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 0.075359019 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 0.075480782 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 0.078672422 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 0.078726311 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 0.074723921 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 0.078744961 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 0.074890421 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 0.066590848 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 0.075217158 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 0.0721945 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 0.06693159 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 0.078281808 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 0.080966758 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 0.065537994 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 0.071605651 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 0.07495677 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 0.075018938 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 0.065858135 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071829307 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 0.066052887 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 0.071649043 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.071406046 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 0.073311896 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 0.072542008 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 0.074446643 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 0.066281272 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 0.075763347 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 0.074358924 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 0.075012921 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 0.065903165 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 0.078625542 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 0.066377871 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 0.074022016 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 0.067066764 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 0.066783015 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 0.066041532 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 0.072499896 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 0.066452003 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.071694704 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 0.075606907 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 0.065264357 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 0.071667295 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 0.079777053 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 0.069466316 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 0.075003256 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 0.066038642 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 0.066263785 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 0.077604509 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 0.078706192 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 0.066943535 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072266615 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 0.066026165 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 0.072677362 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 0.066193559 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 0.066870884 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 0.06686631 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 0.067048076 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 0.071614391 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 0.067670411 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072179944 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 0.07286025 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 0.07897122 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 0.066455615 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 0.071875933 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 0.071797214 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 0.066725703 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 0.073601685 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 0.066988031 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 0.06653641 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 0.065278461 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 0.079126082 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070870473 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 0.066654 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 0.071875274 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 0.070788194 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 0.074730776 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 0.064527017 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 0.074663454 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 0.072097421 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 0.07049245 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 0.221809306 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 0.066948717 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 0.079040338 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 0.072757335 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 0.072055381 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 0.066296109 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 0.067260704 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 0.065674864 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 0.067082682 seconds)
done (took 12.963013611 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 0.068582979 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 0.106874196 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 0.074653506 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 0.083343081 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 0.079638279 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 0.068448168 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 0.071265362 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 0.083841278 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 0.070862093 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 0.08711952 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 0.095463867 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 0.08912126 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 0.094186364 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 0.066714097 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 0.067893078 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 0.068632752 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 0.066009741 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 0.075416005 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 0.081888343 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 0.09070102 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 0.096396394 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 0.067167203 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 0.069243093 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 0.084050638 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 0.07805614 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 0.083385935 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 0.068947604 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 0.108818318 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 0.069961757 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 0.08422927 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 0.093221702 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 0.06679517 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 0.068756932 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 0.081412849 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 0.081923483 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 0.074339087 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 0.068065428 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 0.07143957 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 0.067928034 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 0.067428086 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 0.069017385 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 0.081639589 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 0.07103387 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 0.071339537 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 0.068845642 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 0.068496296 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 0.067644496 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 0.071077343 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 0.080429643 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 0.070769662 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 0.075101097 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 0.079119804 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 0.069567428 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 0.067272863 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 0.065683713 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 0.071675514 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 0.067199902 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 0.068210195 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 0.067757356 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 0.067734308 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 0.068064203 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 0.070139919 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 0.068072553 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 0.068145973 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 0.070945248 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 0.069638208 seconds)
  done (took 6.575801942 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 0.084139662 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 0.09303466 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 0.081873145 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 0.082933794 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 0.067115301 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 0.068204269 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 0.067745722 seconds)
  done (took 2.201779962 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 0.068977924 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.07573989 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 0.080659794 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.080423919 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 0.089827362 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 0.077328262 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 0.067983672 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 0.100121803 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 0.067414181 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 0.076605794 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 0.083678027 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 0.08182955 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 0.071875508 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 0.080097289 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 0.068469702 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 0.079992227 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 0.068270952 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075290399 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 0.075483425 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.08150883 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 0.07243238 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 0.097903077 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 0.081413743 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 0.068882775 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 0.082075198 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 0.075410076 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 0.070640226 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 0.069071485 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068225343 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 0.067601813 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067671744 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 0.089970098 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 0.073963389 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 0.079804577 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068416279 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 0.067053423 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 0.072393335 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 0.068589658 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 0.074287604 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 0.077350462 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 0.071298503 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 0.067764562 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 0.068096215 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 0.0676114 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 0.068579851 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 0.072353465 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 0.068693031 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 0.067674227 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 0.067758732 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 0.075208557 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 0.066643546 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 0.074319355 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 0.06990545 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 0.072812195 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 0.07231619 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072535608 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075092372 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 0.067879849 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.075409082 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 0.074208824 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067670687 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 0.080258865 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 0.079269322 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 0.071440777 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 0.079720423 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 0.075932896 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 0.074162429 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 0.071420999 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 0.067144825 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 0.066823601 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 0.068192478 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 0.079384221 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 0.071278024 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 0.069974944 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 0.068684457 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 0.072790467 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 0.071785931 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 0.083053533 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 0.082859796 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 0.080963585 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 0.070877373 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 0.067981922 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 0.072080254 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 0.083009383 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 0.072958887 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 0.067793405 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 0.068764563 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 0.067423591 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 0.072511336 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 0.067991842 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 0.072555491 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 0.068204043 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 0.075031228 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 0.070274823 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 0.070076919 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 0.075825087 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 0.068064556 seconds)
  done (took 8.796193291 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 0.070810401 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 0.068969465 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 0.070188665 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 0.068686729 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 0.068550471 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 0.069345854 seconds)
  done (took 2.10981153 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 0.092048435 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 0.068863229 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 0.080438207 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 0.068970766 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 0.090609336 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 0.075432486 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 0.074842229 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070168845 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 0.084369011 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 0.078522022 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 0.075002843 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 0.077732957 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 0.074271922 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 0.069855042 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 0.074594587 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 0.069535029 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 0.07486123 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 0.070971108 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 0.07805947 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070699399 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 0.081648834 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 0.070508323 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070762671 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 0.080411661 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 0.071765302 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 0.06908692 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.069262192 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 0.078704973 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 0.078111375 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 0.069773876 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 0.069706699 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 0.071763296 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 0.076732441 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 0.069713782 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 0.074807173 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 0.076879437 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.06834525 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 0.07363261 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 0.070839344 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 0.07138508 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 0.07709596 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 0.070194402 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 0.070317989 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 0.073846468 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 0.069637842 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 0.077014169 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 0.074039067 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 0.072194291 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 0.074446558 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 0.073602766 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 0.073860737 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 0.069191887 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 0.07137685 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 0.073794453 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 0.076839466 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.074855227 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 0.073648642 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 0.074823264 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 0.069550796 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 0.076832409 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 0.06837068 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 0.071703174 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.069931362 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 0.071183293 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 0.073848187 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 0.073910731 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 0.076667713 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 0.070216991 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 0.070483533 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 0.068292027 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 0.073872389 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 0.068518495 seconds)
  done (took 6.962796637 seconds)
done (took 28.278391075 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 0.550168826 seconds)
  done (took 2.184903153 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 0.586093333 seconds)
  done (took 2.264810184 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 8.563515011 seconds)
  done (took 10.237009328 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 0.316694542 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 0.339033819 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 0.739213911 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 0.134383399 seconds)
  done (took 3.243981002 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 0.754901191 seconds)
  done (took 2.439242055 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 0.23139583 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 0.221645357 seconds)
  done (took 2.144392114 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 0.347021136 seconds)
  done (took 2.019100147 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 1.144724289 seconds)
  done (took 2.816049391 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 0.229146353 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 0.16062699 seconds)
  done (took 2.074487127 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 0.514173385 seconds)
  done (took 2.191381259 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 4.312293 seconds)
  done (took 5.992332709 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 0.238958534 seconds)
  done (took 1.918500251 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 0.234843661 seconds)
  done (took 1.909853459 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 2.056098885 seconds)
  done (took 3.729304507 seconds)
done (took 46.8472367 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 0.088201608 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 0.088377957 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 0.08834557 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 0.08340507 seconds)
  done (took 1.995601647 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 0.075822609 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 0.071866127 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 0.075444371 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 0.07544829 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 0.073015783 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 0.074550868 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 0.074769708 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 0.070391519 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 0.072965481 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 0.071821154 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 0.070705326 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 0.07182261 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 0.074323289 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 0.071666787 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 0.0741062 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 0.075020276 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 0.071513435 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 0.071936455 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 0.073785616 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 0.071772776 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 0.074716535 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 0.071657283 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 0.069631052 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 0.071514017 seconds)
  done (took 3.426022223 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 0.080196202 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 0.07366592 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 0.076628592 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 0.072945953 seconds)
  done (took 1.986337072 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 0.078825429 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 0.07835319 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 0.087484242 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 0.092356646 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 0.078600952 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 0.078579048 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 0.085585363 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 0.086730713 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 0.067103529 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 0.089007243 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 0.069485827 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 0.068079611 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 0.068779148 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 0.087408995 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 0.08483522 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 0.063680778 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 0.06518754 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 0.078210243 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 0.077926963 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 0.081195485 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 0.070049115 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 0.067373843 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 0.078770726 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 0.078706655 seconds)
  done (took 3.545060434 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 0.080883183 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 0.067119145 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 0.079952286 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 0.093024664 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 0.094391166 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 0.067103804 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 0.080978023 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 0.094088396 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 0.128894935 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 0.066799969 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 0.07338061 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 0.067130647 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 0.106034403 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 0.067179626 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 0.082310815 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 0.109896929 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 0.112842254 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 0.070730947 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 0.100391344 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 0.067114574 seconds)
  done (took 3.398988555 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 0.078005232 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 0.071109057 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 0.071920805 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 0.067124557 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 0.078209525 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 0.074244517 seconds)
  done (took 2.132859648 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 0.06981531 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 0.069475561 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 0.068228533 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 0.067903951 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 0.073425051 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 0.068875309 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 0.067875635 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 0.069255331 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 0.069339377 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 0.068805161 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 0.068232242 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 0.067218868 seconds)
  done (took 2.51297629 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 0.158740299 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 0.070352799 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 0.071822864 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 0.067500779 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 0.072854191 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 0.068261945 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 0.08248234 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 0.070410588 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 0.086305369 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 0.068527051 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 0.068444783 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 0.070384427 seconds)
  done (took 2.643091546 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102094041 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102422665 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.148504445 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118859345 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116751033 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098227062 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.121548621 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 0.095747378 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 0.16256976 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.138546627 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11875087 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.124443484 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088944176 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 0.070935134 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.10151131 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.103251933 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.137446701 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.074536908 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.114925427 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.196817909 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.115917474 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 0.11378708 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.124087188 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.118197097 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.082122931 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.123768103 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09591678 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10427805 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.154790424 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111773295 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.120563099 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 0.099014868 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 0.073194291 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 0.072544604 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.151898934 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 0.101852073 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137187777 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 0.094388668 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.10233845 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08982203 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108923399 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 0.071848477 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 0.087791704 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 0.107852296 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 0.085947821 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.118281905 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 0.088984581 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.104196997 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.081810797 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.132347527 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.107100285 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.100429041 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.089052364 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.105082326 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.131191593 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096502608 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112096037 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.107561179 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082926076 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 0.118552374 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 0.100774095 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.256835349 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09614097 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083162355 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.162878263 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.091795847 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 0.114016305 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.115198104 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 0.084006439 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.091480001 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104327824 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.132580795 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108953775 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 0.109688929 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116336291 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126044904 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.112261647 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 0.093684534 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 0.13043539 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095345284 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 0.074781308 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.106049446 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.130673498 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.086669008 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102159403 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.132344246 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093603487 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108328966 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 0.094189834 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 0.120073659 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.081780959 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 0.097810913 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.071112958 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 0.099549807 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108870272 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099843983 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114693177 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.108544285 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.080936679 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.127519805 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.110424033 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.074250944 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.11893246 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.100410425 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.154975478 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097346831 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 0.077603238 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101007087 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095040443 seconds)
    (110/608) benchmarking "5d"...
    done (took 0.151437556 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.08633479 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08145599 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.099673294 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143670936 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095708508 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.171597516 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.09795787 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130165803 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.098498854 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.08916058 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.076051675 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 0.090048773 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102660649 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108033768 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102667385 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08936503 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 0.078194296 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.08853397 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095819649 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.253868986 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084191921 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.116667865 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 0.103979932 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 0.077729921 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091081153 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 0.079035175 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.12715672 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 0.080041522 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110949506 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.127703083 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 0.080310934 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107158758 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.130188719 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.137668203 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 0.099075882 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108710687 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.14323016 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 0.117289395 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.080995478 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 0.086070709 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110547531 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 0.144186305 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.115308893 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087231496 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 0.078428097 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.10143914 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112382182 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.099083448 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.137994788 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.128777546 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.110892353 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.099175856 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.142584799 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.119250385 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092812937 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.096758551 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098306966 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 0.126103586 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107141501 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.15773171 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095973314 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119680424 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.114725379 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.143033025 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 0.115270339 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091295327 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.086666104 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.096806719 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 0.106086293 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107215622 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.145368906 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 0.097464877 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 0.07400547 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095137453 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.134099984 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078276499 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.101684372 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 0.091664792 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 0.094490425 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119506609 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 0.084886698 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.08271643 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 0.069147592 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.102471736 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.135462069 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 0.070598161 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.111788062 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 0.280208719 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.105533942 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 0.107339083 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 0.071586818 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.101798146 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.145784818 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107643335 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143677823 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118284997 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103100107 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120538916 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 0.10221061 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 0.107775877 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.084478867 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 0.127248039 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.136260342 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.098048118 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.091958138 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.137656965 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.120715662 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 0.136417142 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 0.098576671 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.117554921 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 0.107008293 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.101760063 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105357214 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 0.103316401 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.145560286 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122231125 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 0.126483054 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.116618284 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.108798577 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.109459118 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138558965 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084207017 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.118517304 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 0.076985384 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.113618253 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 0.078859079 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.108840669 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 0.080878765 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 0.112938072 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080719697 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.101625651 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 0.070894048 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 0.076270713 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143390847 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 0.114067186 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090997439 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088349836 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 0.138520108 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.13304252 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 0.082439022 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.102921928 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.135958275 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.10260982 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.102100261 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.109352048 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 0.086094477 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095903371 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.303857869 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.081475108 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 0.084585281 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.101280419 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.096170481 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.109791891 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.08596502 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.077098848 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.138574651 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106469488 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097523814 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.108423602 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.097002017 seconds)
    (271/608) benchmarking "4d"...
    done (took 0.123966158 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.092422928 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.089687714 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.106642677 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.105895168 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.142192409 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 0.09164299 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 0.099838543 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.119473251 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.082805021 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 0.094067007 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 0.071334256 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 0.086518111 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 0.07758521 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.110955233 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.077692708 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.110094621 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 0.07024487 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.132377336 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 0.088930617 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 0.09418811 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.104298465 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.099516634 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.130043151 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.093544109 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.130377772 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092602831 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.103998334 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.109999252 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095998936 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.111327375 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.10587208 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.097552998 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.110932777 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 0.0976432 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.108560624 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.111587115 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095469549 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.143142886 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092182845 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122395211 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107905037 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.107356427 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105697702 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.118696433 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.139980648 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.113944305 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.143298924 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.076649139 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.08484047 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107489968 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.101978953 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.146556556 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10355044 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 0.073631704 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.117362417 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091893134 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.095976328 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103866426 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.082834874 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.139588967 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.087038245 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 0.087171461 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111975949 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 0.088705453 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.09698396 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.076331459 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.094802549 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 0.100559679 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.093928968 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.094695304 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133119519 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.116295411 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.111495713 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.129102401 seconds)
    (346/608) benchmarking "3d"...
    done (took 0.097512761 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 0.092400986 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 0.115531145 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107449124 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.107049303 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.08536755 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.087355358 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.120819221 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.101638067 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 0.125145932 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 0.098925066 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092610259 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.100562364 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090958806 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.098594358 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.097062306 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 0.106814784 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.07789447 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 0.07657122 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 0.068625263 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 0.071697568 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.116599258 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.106433326 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.100500352 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.098876999 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 0.073039457 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.101129789 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.096542998 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.071476812 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.08844551 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093977345 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.126059322 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 0.084718998 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.092012934 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 0.116489792 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 0.090530509 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.106215751 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.131452604 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.124141061 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 0.099176726 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.088287719 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.140349941 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.128494708 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089957926 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092628708 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 0.073163831 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.080975437 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.103036989 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.149543257 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.121318351 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 0.077938643 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.085893926 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 0.08008016 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.368188737 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 0.076023351 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 0.091357559 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 0.095930659 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.110388425 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.123615326 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 0.117711598 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.108793475 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0807258 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.108269522 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.102392924 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.096686504 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.100797035 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.107573387 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.110462315 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 0.129282873 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.104572735 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.10113883 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079908142 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 0.083986544 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.079303959 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082716364 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.106514159 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 0.080404556 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079613884 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.133333476 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 0.095567284 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107852039 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.113014396 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.087442927 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.078239722 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136272378 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 0.071524315 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.136405502 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 0.073429141 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.084745986 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 0.083224219 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.086104332 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096385097 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.107851157 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.097461969 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.116550526 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107943166 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.107198591 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.113112243 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.158371167 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.072916073 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.152367704 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.077747182 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 0.077613712 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.078504465 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.114404163 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091927438 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.106253025 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.143913214 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091880383 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.095199719 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 0.078916604 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130950286 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 0.09990727 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.106017891 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.084775371 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.081591599 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.130975846 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081725755 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 0.073311887 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.088950452 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.113837512 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 0.074370784 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.136448669 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.115807958 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.082067162 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.280500272 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 0.633538837 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.092433579 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 0.078003014 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.091537588 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.150970331 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.131353112 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.085459833 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.111129084 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 0.121304847 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.092217898 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11626012 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110320976 seconds)
    (484/608) benchmarking "6d"...
    done (took 0.185922332 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.075942554 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096559711 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 0.106071103 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.100381989 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.09481211 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 0.093780321 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 0.087648196 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 0.09422239 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 0.088395613 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.081622379 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.110136393 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089554568 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.093467374 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.126080356 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085022218 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 0.082260743 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.1333084 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 0.106150345 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 0.084471606 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.090746665 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 0.103562248 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.089333714 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.092754104 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 0.071439685 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.145906535 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.121849593 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.103121545 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 0.092812467 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.109928922 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.119767417 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091065834 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.114099835 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 0.090468294 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.111710573 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.087037479 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 0.080261897 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.10475081 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 0.080021318 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.079667706 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.118902323 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 0.088413275 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 0.094481861 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.106782781 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 0.096893253 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.116009956 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.119708689 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.112920322 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.099299033 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.080386508 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.088288724 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 0.08922641 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.07717487 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 0.079867096 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 0.076157925 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 0.078505024 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.109576699 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 0.250459992 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.115042706 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.11547739 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.084547734 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.105372408 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 0.103488227 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 0.111552458 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085237846 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.103453221 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.111688221 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.093478828 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.105602446 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.102245114 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.130529525 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.148202037 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.101173877 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.125848331 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136153787 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 0.079280813 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 0.077482636 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 0.071057902 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.147608464 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 0.08103841 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 0.082890242 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.11172918 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.135528761 seconds)
    (567/608) benchmarking "2d"...
    done (took 0.083965809 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.096818625 seconds)
    (569/608) benchmarking "7d"...
    done (took 0.233056879 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.082332825 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 0.083766143 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.0985878 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 0.071685748 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.085144929 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.11044841 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.086512542 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082689975 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.101066923 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.114542984 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 0.11963217 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.11366131 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.091630626 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 0.084800829 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.083168265 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 0.095284573 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 0.105969466 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 0.131046712 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.091854638 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 0.076687984 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.108597919 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 0.105402253 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.12556185 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 0.074410182 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.082555343 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 0.131840801 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.09440419 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.105505162 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 0.081804197 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 0.122249113 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.133115343 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 0.091762258 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 0.136201395 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 0.072956342 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 0.085019824 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 0.090811264 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 0.127617754 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 0.076206975 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 0.090216135 seconds)
  done (took 66.671564506 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 0.151609182 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 0.143788703 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 0.088445734 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.128090814 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.220503121 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.230821489 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 0.151106588 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 0.11770333 seconds)
  done (took 3.145011225 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 0.070673088 seconds)
    (2/17) benchmarking "4467"...
    done (took 0.084842673 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 0.102654966 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 0.084675832 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 0.06860295 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 0.07018802 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 0.207129785 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 0.083191606 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 0.068367756 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 0.109333185 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 0.077057494 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 0.070288965 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 0.365331806 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 0.067621333 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 0.068713818 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 0.076442579 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 0.068962957 seconds)
  done (took 3.616915781 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 0.373231597 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 0.626610989 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 0.328356972 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 0.076431881 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 4.826069822 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 0.091553279 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 4.150821178 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 0.139727269 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 0.083729896 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 0.535092036 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 5.372564002 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 0.132383221 seconds)
  done (took 18.617826773 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 0.078217562 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 0.077096065 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 0.08019872 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 0.079852566 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 0.076215783 seconds)
  done (took 2.264191906 seconds)
done (took 117.652313039 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 0.085315149 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 0.17415946 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 0.069483618 seconds)
  done (took 2.155054061 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 0.084433958 seconds)
    (2/4) benchmarking "Float32"...
    done (took 0.083208066 seconds)
    (3/4) benchmarking "Float64"...
    done (took 0.082655124 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 0.080123337 seconds)
  done (took 2.213299131 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 0.077046934 seconds)
    (2/2) benchmarking "Float64"...
    done (took 0.07850005 seconds)
  done (took 2.030885936 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 0.225089366 seconds)
  (6/15) benchmarking "18129"...
  done (took 0.178215464 seconds)
  (7/15) benchmarking "20517"...
  done (took 0.092178244 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 0.084829363 seconds)
    (2/3) benchmarking "Float64"...
    done (took 0.081109154 seconds)
    (3/3) benchmarking "Float16"...
    done (took 0.082346767 seconds)
  done (took 2.131104617 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 0.074619789 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 0.073347118 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 0.073379148 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 0.073962368 seconds)
  done (took 2.166108792 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 0.073472313 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 0.067532582 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 0.070024602 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 0.073051549 seconds)
  done (took 2.158631846 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 0.088406021 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 0.084778555 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 0.113691501 seconds)
  done (took 2.160569763 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 0.085752746 seconds)
    (2/3) benchmarking "Int"...
    done (took 0.085046243 seconds)
    (3/3) benchmarking "Float64"...
    done (took 0.079831827 seconds)
  done (took 2.13320046 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 0.111304769 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 0.098800047 seconds)
  done (took 2.084860515 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 0.082786657 seconds)
  done (took 1.96154885 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 0.092486513 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 0.099429727 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 0.143052999 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 0.109054907 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 0.142836932 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 0.128862323 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 0.079027638 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 0.079722114 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 0.075222078 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 0.074617931 seconds)
  done (took 2.896486689 seconds)
done (took 26.541460215 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.081150939 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 1.375273603 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.36152007 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.089060895 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.674722485 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.359089835 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 1.016089772 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.092888856 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.101279473 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070193564 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087677823 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.651644367 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 1.010385135 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 1.327489417 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.9939207 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 1.331485617 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.653463726 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.070411326 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.069330509 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.070527953 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 1.003205723 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070132583 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070289979 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.07065143 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.652703629 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.376804049 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.070434006 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 1.331506763 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.069435636 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072058586 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.358262944 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.07158311 seconds)
  done (took 16.563468064 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.072865614 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.125056484 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.074368005 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.085571867 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.071763444 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071295904 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.07280563 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.070524545 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.112555708 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070420914 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087048085 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069608844 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.073956165 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.070864753 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.08998552 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.070804619 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072219685 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071259896 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.071066001 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071461609 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089605011 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070539265 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.071798609 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071264902 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071197941 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.083953673 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071726687 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.071144766 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.070840098 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072967912 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.074074956 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071760053 seconds)
  done (took 4.368158403 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 0.124134122 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 0.128534862 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 0.075009483 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 0.111251146 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 0.120722745 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 0.071592654 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 0.153329495 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 0.093616223 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 0.115438702 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 0.070547048 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 0.087591586 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 0.069979932 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 0.105945346 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 0.071276149 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 0.090769021 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 0.071087422 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 0.072553474 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 0.071728611 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 0.070861446 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 0.071488329 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 0.089881354 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 0.070512864 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 0.070971317 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 0.071660504 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 0.071876602 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 0.08526404 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 0.071241979 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 0.070491367 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 0.071148296 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 0.072800594 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 0.075066556 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 0.071798361 seconds)
  done (took 4.644187532 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 0.072163967 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 0.07298432 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 0.081925702 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 0.082846459 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 0.068255306 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 0.071077147 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 0.071589001 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 0.068889682 seconds)
  done (took 2.495462531 seconds)
done (took 29.971327464 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 0.081213784 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 0.070400706 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 0.073114635 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 0.089454794 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 0.075716639 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 0.072416517 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 0.066390156 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 0.076401667 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 0.073022297 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 0.072816978 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 0.075453782 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 0.069295195 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 0.071821081 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 0.066812644 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 0.074141245 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 0.067768645 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 0.074192435 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 0.072126564 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 0.072956634 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 0.07794461 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 0.070831418 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 0.073960608 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 0.076965193 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 0.072774153 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 0.073344675 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 0.073037543 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 0.077523523 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 0.073964677 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 0.068875255 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 0.071702905 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 0.070517172 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 0.082630492 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 0.074731879 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 0.074739315 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 0.068345574 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 0.06876777 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 0.072704441 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 0.070699345 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 0.074777189 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 0.077173567 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 0.070553948 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 0.077338239 seconds)
  done (took 4.958485131 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 0.090561027 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 0.095231458 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 0.088271396 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 0.083667213 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 0.108773162 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 0.083379824 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 0.093130122 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 0.081672043 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 0.080327467 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 0.091760035 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 0.075716447 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 0.080873954 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 0.083046249 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 0.077106739 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 0.080095061 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 0.077019865 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 0.082082938 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 0.075682296 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 0.080094033 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 0.079904623 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 0.092648126 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 0.073722923 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 0.081118706 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 0.081954426 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 0.075964936 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 0.081849225 seconds)
  done (took 4.095496646 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 0.075029767 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 0.090050982 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 0.094677399 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.143871376 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 0.111457088 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 0.084487764 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 0.084301304 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 0.103461309 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 0.103076445 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 0.070712179 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 0.074639997 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 0.096474833 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 0.098989418 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 0.077334298 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 0.10846578 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 0.088231791 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 0.082399936 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 0.071340229 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 0.076441942 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.103999744 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 0.09222775 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 0.088272286 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 0.101968531 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 0.089301728 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 0.068694502 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.079551097 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 0.076202615 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 0.085222545 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 0.077333596 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 0.081859837 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 0.07445894 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 0.072924384 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 0.070207063 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 0.081775248 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 0.073850329 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 0.067367124 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 0.091311798 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 0.081926414 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 0.084921927 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 0.107539179 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 0.07931391 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 0.070883693 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 0.100067284 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 0.135070247 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 0.069154165 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 0.07254436 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 0.073123127 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 0.082178584 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 0.070978377 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 0.099675606 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 0.088196434 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 0.069214255 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 0.08808351 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 0.071194882 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 0.071415264 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.086423653 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 0.070860336 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 0.071375456 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 0.081955739 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 0.075439482 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 0.090628394 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 0.074431854 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.090045465 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 0.069258932 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 0.080600977 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 0.071847359 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 0.071338731 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 0.06830381 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 0.105851322 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 0.076918702 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 0.122253208 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 0.070584143 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 0.067402247 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 0.082070442 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 0.080772683 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 0.07622367 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 0.069081214 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.088779638 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 0.08229258 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 0.073250641 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 0.081698951 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 0.072247937 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 0.072889206 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 0.105206771 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 0.068468674 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 0.067464962 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 0.067550836 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 0.071880404 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 0.072685094 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 0.069824283 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 0.083103234 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 0.068854271 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 0.072679375 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 0.08518233 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 0.068906924 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 0.069965054 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 0.071973886 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 0.070381571 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 0.068877577 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 0.080129728 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 0.073208974 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 0.071221325 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 0.081931028 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 0.071082779 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 0.072796434 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 0.084229848 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 0.079266127 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 0.069427351 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 0.073541289 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 0.072150275 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 0.070849641 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 0.073692818 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 0.072625813 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 0.071226187 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 0.076464069 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 0.077256607 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 0.075159247 seconds)
  done (took 11.400066389 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 0.165326959 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 0.154677805 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 0.07077641 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 0.150675879 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 0.078558967 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 0.073648626 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 0.151044215 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 0.09007283 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 0.07028778 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 0.071664995 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 0.069876894 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 0.09891392 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 0.094240341 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 0.105165443 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 0.07502518 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 0.071179065 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 0.095851883 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 0.103939025 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 0.152334131 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 0.148731098 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 0.093891112 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 0.077602322 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 0.07269393 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 0.071438209 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 0.071611157 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 0.079556323 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 0.086971249 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 0.07867925 seconds)
  done (took 4.683991476 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 0.077901405 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 0.112870919 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 0.074431624 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 0.09389148 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 0.089855506 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 0.070742703 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 0.071506244 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 0.071366896 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 0.087093038 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 0.078380814 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 0.070137119 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 0.074578933 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 0.073680808 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 0.070867071 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 0.070887729 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 0.076994648 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 0.0766761 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 0.069200031 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 0.073787442 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 0.074880319 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 0.080783519 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 0.096668805 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 0.074072768 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 0.070388526 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 0.072545169 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 0.070087533 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 0.077696107 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 0.0802987 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 0.069409576 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 0.100478334 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 0.067528572 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 0.074806357 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 0.084158822 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 0.07101144 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 0.069875753 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 0.070735584 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 0.070706014 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 0.06994201 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 0.070668666 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 0.067882059 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 0.068478779 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 0.074715101 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 0.068671187 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 0.076157254 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 0.084307862 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 0.077339983 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 0.071592857 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 0.072522103 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 0.072926552 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 0.066846388 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 0.073593514 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 0.073011027 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 0.072797728 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 0.078223247 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 0.073194447 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 0.072613912 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 0.071021536 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 0.099472172 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 0.075956943 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 0.069394658 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 0.068690947 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 0.068501919 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 0.071586222 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 0.078178506 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 0.086660433 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 0.071803273 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 0.06789244 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 0.070176017 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 0.075080171 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 0.083822264 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 0.069251844 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 0.075247949 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 0.067149234 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 0.070517928 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 0.072604257 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 0.07291808 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 0.071366548 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 0.068377627 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 0.069962618 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 0.069904928 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 0.069918896 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 0.069509998 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 0.069321926 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 0.072599249 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 0.067949846 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 0.068894904 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 0.070483088 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 0.071336499 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 0.076858721 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 0.068992727 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 0.073301439 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 0.072138851 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 0.069500453 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 0.073229731 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 0.075274169 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 0.072933347 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 0.089674082 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 0.07956996 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 0.070635771 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 0.06780948 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 0.084248014 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 0.072011333 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 0.068901391 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 0.075765466 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 0.074664064 seconds)
  done (took 9.788775951 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 0.094115631 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 0.07160941 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 0.089847397 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 0.097087938 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 0.080182798 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 0.075880473 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 0.084462229 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 0.071455376 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 0.086497947 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 0.069362183 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 0.079486337 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 0.06892291 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 0.083563189 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 0.079366315 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 0.071537269 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 0.080481346 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 0.072363821 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 0.093251824 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 0.085075147 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 0.06900495 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 0.079290468 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 0.082222443 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 0.083399734 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 0.088727292 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 0.088396852 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 0.088493983 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 0.0817311 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 0.072768456 seconds)
  done (took 4.231855218 seconds)
done (took 41.050861021 seconds)
RUNNING BENCHMARKS...
(1/20) benchmarking "shootout"...
  (1/12) benchmarking "k_nucleotide"...
  done (took 6.988718732 seconds)
  (2/12) benchmarking "fasta"...
  done (took 2.13895062 seconds)
  (3/12) benchmarking "spectralnorm"...
  done (took 6.975236639 seconds)
  (4/12) benchmarking "revcomp"...
  done (took 3.173665288 seconds)
  (5/12) benchmarking "pidigits"...
  done (took 7.256365313 seconds)
  (6/12) benchmarking "binary_trees"...
  done (took 7.082001576 seconds)
  (7/12) benchmarking "nbody"...
  done (took 3.098361844 seconds)
  (8/12) benchmarking "regex_dna"...
  done (took 6.975929372 seconds)
  (9/12) benchmarking "meteor_contest"...
  done (took 6.995313801 seconds)
  (10/12) benchmarking "mandelbrot"...
  done (took 7.017756713 seconds)
  (11/12) benchmarking "fannkuch"...
  done (took 3.300204451 seconds)
  (12/12) benchmarking "nbody_vec"...
  done (took 5.40366253 seconds)
done (took 68.383697676 seconds)
(2/20) benchmarking "string"...
  (1/7) benchmarking "join"...
  done (took 7.094412215 seconds)
  (2/7) benchmarking "findfirst"...
    (1/2) benchmarking "Char"...
    done (took 2.10760054 seconds)
    (2/2) benchmarking "String"...
    done (took 2.18486484 seconds)
  done (took 6.221678706 seconds)
  (3/7) benchmarking "==(::SubString, ::String)"...
    (1/3) benchmarking "equal"...
    done (took 2.556532358 seconds)
    (2/3) benchmarking "different length"...
    done (took 1.960940359 seconds)
    (3/3) benchmarking "different"...
    done (took 2.012079976 seconds)
  done (took 8.41777022 seconds)
  (4/7) benchmarking "replace"...
  done (took 3.135496893 seconds)
  (5/7) benchmarking "readuntil"...
    (1/7) benchmarking "no backtracking"...
    done (took 5.909137148 seconds)
    (2/7) benchmarking "target length 1000"...
    done (took 2.221624106 seconds)
    (3/7) benchmarking "backtracking"...
    done (took 6.962148674 seconds)
    (4/7) benchmarking "barbarian backtrack"...
    done (took 6.966629944 seconds)
    (5/7) benchmarking "target length 50000"...
    done (took 3.374527619 seconds)
    (6/7) benchmarking "target length 1"...
    done (took 2.773752232 seconds)
    (7/7) benchmarking "target length 2"...
    done (took 2.424826877 seconds)
  done (took 32.526706124 seconds)
  (6/7) benchmarking "repeat"...
    (1/4) benchmarking "repeat char 2"...
    done (took 5.090017136 seconds)
    (2/4) benchmarking "repeat str len 16"...
    done (took 2.176696522 seconds)
    (3/4) benchmarking "repeat str len 1"...
    done (took 3.654437466 seconds)
    (4/4) benchmarking "repeat char 1"...
    done (took 3.681452158 seconds)
  done (took 16.538149048 seconds)
  (7/7) benchmarking "==(::AbstractString, ::AbstractString)"...
    (1/4) benchmarking "identical"...
    done (took 2.566498289 seconds)
    (2/4) benchmarking "equal"...
    done (took 2.22345388 seconds)
    (3/4) benchmarking "different length"...
    done (took 2.223907312 seconds)
    (4/4) benchmarking "different"...
    done (took 2.218223388 seconds)
  done (took 11.177995756 seconds)
done (took 87.117827763 seconds)
(3/20) benchmarking "linalg"...
  (1/4) benchmarking "factorization"...
    (1/32) benchmarking ("schur", "Matrix", 256)...
    done (took 6.966682357 seconds)
    (2/32) benchmarking ("eigen", "typename(Diagonal)", 1024)...
    done (took 6.960706361 seconds)
    (3/32) benchmarking ("eigen", "typename(LowerTriangular)", 1024)...
    done (took 7.026655955 seconds)
    (4/32) benchmarking ("eigen", "typename(SymTridiagonal)", 1024)...
    done (took 6.993523873 seconds)
    (5/32) benchmarking ("svd", "typename(Diagonal)", 1024)...
    done (took 6.971496914 seconds)
    (6/32) benchmarking ("eigen", "typename(UpperTriangular)", 256)...
    done (took 6.962855193 seconds)
    (7/32) benchmarking ("eigen", "typename(SymTridiagonal)", 256)...
    done (took 6.96464827 seconds)
    (8/32) benchmarking ("eigen", "typename(LowerTriangular)", 256)...
    done (took 6.964086038 seconds)
    (9/32) benchmarking ("eigen", "typename(UpperTriangular)", 1024)...
    done (took 6.990204168 seconds)
    (10/32) benchmarking ("schur", "Matrix", 1024)...
    done (took 7.049158943 seconds)
    (11/32) benchmarking ("qr", "Matrix", 256)...
    done (took 6.963107944 seconds)
    (12/32) benchmarking ("svd", "typename(LowerTriangular)", 256)...
    done (took 6.976518059 seconds)
    (13/32) benchmarking ("lu", "Matrix", 256)...
    done (took 6.963550767 seconds)
    (14/32) benchmarking ("svd", "typename(Bidiagonal)", 1024)...
    done (took 6.976750712 seconds)
    (15/32) benchmarking ("eigen", "Matrix", 1024)...
    done (took 7.845020114 seconds)
    (16/32) benchmarking ("lu", "typename(Tridiagonal)", 256)...
    done (took 2.012825035 seconds)
    (17/32) benchmarking ("svd", "Matrix", 256)...
    done (took 6.979966475 seconds)
    (18/32) benchmarking ("svd", "typename(UpperTriangular)", 256)...
    done (took 6.967542131 seconds)
    (19/32) benchmarking ("lu", "Matrix", 1024)...
    done (took 6.971119034 seconds)
    (20/32) benchmarking ("qr", "Matrix", 1024)...
    done (took 6.993957062 seconds)
    (21/32) benchmarking ("eigen", "typename(Bidiagonal)", 1024)...
    done (took 6.964431335 seconds)
    (22/32) benchmarking ("svd", "typename(Bidiagonal)", 256)...
    done (took 7.1424536 seconds)
    (23/32) benchmarking ("eigen", "typename(Bidiagonal)", 256)...
    done (took 5.472061409 seconds)
    (24/32) benchmarking ("lu", "typename(Tridiagonal)", 1024)...
    done (took 2.16107068 seconds)
    (25/32) benchmarking ("eigen", "typename(Diagonal)", 256)...
    done (took 2.59058366 seconds)
    (26/32) benchmarking ("svd", "typename(LowerTriangular)", 1024)...
    done (took 7.52125751 seconds)
    (27/32) benchmarking ("svd", "Matrix", 1024)...
    done (took 7.268869221 seconds)
    (28/32) benchmarking ("cholesky", "Matrix", 256)...
    done (took 6.415899881 seconds)
    (29/32) benchmarking ("cholesky", "Matrix", 1024)...
    done (took 6.970676114 seconds)
    (30/32) benchmarking ("svd", "typename(Diagonal)", 256)...
    done (took 6.960672143 seconds)
    (31/32) benchmarking ("eigen", "Matrix", 256)...
    done (took 7.024634468 seconds)
    (32/32) benchmarking ("svd", "typename(UpperTriangular)", 1024)...
    done (took 7.419954455 seconds)
  done (took 211.306004032 seconds)
  (2/4) benchmarking "blas"...
    (1/36) benchmarking "ger!"...
    done (took 6.963777855 seconds)
    (2/36) benchmarking "gbmv!"...
    done (took 3.963520257 seconds)
    (3/36) benchmarking "gbmv"...
    done (took 4.031301977 seconds)
    (4/36) benchmarking "gemm!"...
    done (took 6.983645352 seconds)
    (5/36) benchmarking "gemv!"...
    done (took 4.299391923 seconds)
    (6/36) benchmarking "blascopy!"...
    done (took 3.150379801 seconds)
    (7/36) benchmarking "scal!"...
    done (took 3.114010119 seconds)
    (8/36) benchmarking "gemv"...
    done (took 4.474817753 seconds)
    (9/36) benchmarking "syr!"...
    done (took 6.96559093 seconds)
    (10/36) benchmarking "trsm!"...
    done (took 6.97178411 seconds)
    (11/36) benchmarking "trsv!"...
    done (took 3.153433893 seconds)
    (12/36) benchmarking "her!"...
    done (took 6.963457682 seconds)
    (13/36) benchmarking "trsv"...
    done (took 3.206518634 seconds)
    (14/36) benchmarking "dot"...
    done (took 2.90403123 seconds)
    (15/36) benchmarking "dotu"...
    done (took 2.960377566 seconds)
    (16/36) benchmarking "herk!"...
    done (took 6.97075546 seconds)
    (17/36) benchmarking "trmv"...
    done (took 3.162545782 seconds)
    (18/36) benchmarking "symv"...
    done (took 3.227116949 seconds)
    (19/36) benchmarking "dotc"...
    done (took 2.963392041 seconds)
    (20/36) benchmarking "axpy!"...
    done (took 3.152716437 seconds)
    (21/36) benchmarking "syrk!"...
    done (took 6.992751033 seconds)
    (22/36) benchmarking "sbmv"...
    done (took 4.023148354 seconds)
    (23/36) benchmarking "sbmv!"...
    done (took 3.963280162 seconds)
    (24/36) benchmarking "symv!"...
    done (took 3.148574005 seconds)
    (25/36) benchmarking "symm"...
    done (took 7.006125268 seconds)
    (26/36) benchmarking "herk"...
    done (took 7.013983518 seconds)
    (27/36) benchmarking "syrk"...
    done (took 6.987531404 seconds)
    (28/36) benchmarking "trsm"...
    done (took 6.965568648 seconds)
    (29/36) benchmarking "asum"...
    done (took 3.147114407 seconds)
    (30/36) benchmarking "trmv!"...
    done (took 3.12557795 seconds)
    (31/36) benchmarking "gemm"...
    done (took 6.984947513 seconds)
    (32/36) benchmarking "symm!"...
    done (took 6.99355852 seconds)
    (33/36) benchmarking "scal"...
    done (took 2.142239735 seconds)
    (34/36) benchmarking "nrm2"...
    done (took 2.814849944 seconds)
    (35/36) benchmarking "trmm!"...
    done (took 6.97040702 seconds)
    (36/36) benchmarking "trmm"...
    done (took 6.977973499 seconds)
  done (took 176.734571098 seconds)
  (3/4) benchmarking "small exp #29116"...
  done (took 2.147556875 seconds)
  (4/4) benchmarking "arithmetic"...
    (1/118) benchmarking ("-", "Matrix", "Matrix", 256)...
    done (took 1.973993036 seconds)
    (2/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.965052342 seconds)
    (3/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 2.021142595 seconds)
    (4/118) benchmarking ("+", "Matrix", "Matrix", 1024)...
    done (took 2.104663055 seconds)
    (5/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.968474438 seconds)
    (6/118) benchmarking ("sqrt", "NPDUpperTriangular", 256)...
    done (took 2.652096173 seconds)
    (7/118) benchmarking ("*", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.975725397 seconds)
    (8/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 1024)...
    done (took 22.706739881 seconds)
    (9/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.96818099 seconds)
    (10/118) benchmarking ("cumsum!", Int32, 256)...
    done (took 1.965257142 seconds)
    (11/118) benchmarking ("cumsum!", Float64, 1024)...
    done (took 1.966073585 seconds)
    (12/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.966669522 seconds)
    (13/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.966099516 seconds)
    (14/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.978940791 seconds)
    (15/118) benchmarking ("sqrt", "typename(Hermitian)", 256)...
    done (took 4.05811204 seconds)
    (16/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.970178947 seconds)
    (17/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 256)...
    done (took 1.980952389 seconds)
    (18/118) benchmarking ("*", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.968055598 seconds)
    (19/118) benchmarking ("*", "Matrix", "Vector", 1024)...
    done (took 1.99259551 seconds)
    (20/118) benchmarking ("cumsum!", Int32, 1024)...
    done (took 1.965409557 seconds)
    (21/118) benchmarking ("cumsum!", Int64, 1024)...
    done (took 1.967402516 seconds)
    (22/118) benchmarking ("*", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.966869905 seconds)
    (23/118) benchmarking ("+", "Vector", "Vector", 256)...
    done (took 1.966716307 seconds)
    (24/118) benchmarking ("3-arg mul!", 3)...
    done (took 1.9667071 seconds)
    (25/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.968230796 seconds)
    (26/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.966196661 seconds)
    (27/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 256)...
    done (took 1.966670647 seconds)
    (28/118) benchmarking ("log", "typename(Hermitian)", 1024)...
    done (took 22.730740062 seconds)
    (29/118) benchmarking ("/", "Matrix", "Matrix", 256)...
    done (took 2.209173139 seconds)
    (30/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 256)...
    done (took 1.967073388 seconds)
    (31/118) benchmarking ("\\", "typename(Bidiagonal)", "Vector", 1024)...
    done (took 1.966800885 seconds)
    (32/118) benchmarking ("/", "Matrix", "Matrix", 1024)...
    done (took 11.569386203 seconds)
    (33/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.978352253 seconds)
    (34/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 1024)...
    done (took 22.214542381 seconds)
    (35/118) benchmarking ("+", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 1.969370095 seconds)
    (36/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.058503633 seconds)
    (37/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 2.021808897 seconds)
    (38/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.059930957 seconds)
    (39/118) benchmarking ("cumsum!", Int64, 256)...
    done (took 1.964640011 seconds)
    (40/118) benchmarking ("\\", "Matrix", "Matrix", 256)...
    done (took 2.185841158 seconds)
    (41/118) benchmarking ("exp", "typename(Hermitian)", 256)...
    done (took 4.052855115 seconds)
    (42/118) benchmarking ("-", "Vector", "Vector", 1024)...
    done (took 1.966960875 seconds)
    (43/118) benchmarking ("*", "typename(Diagonal)", "Vector", 256)...
    done (took 1.96812057 seconds)
    (44/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.030002516 seconds)
    (45/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 1024)...
    done (took 1.979295638 seconds)
    (46/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 1024)...
    done (took 1.966311421 seconds)
    (47/118) benchmarking ("5-arg mul!", 2)...
    done (took 1.968089196 seconds)
    (48/118) benchmarking ("-", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.96860127 seconds)
    (49/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.974926656 seconds)
    (50/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.03172041 seconds)
    (51/118) benchmarking ("/", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 5.189837568 seconds)
    (52/118) benchmarking ("\\", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.967339646 seconds)
    (53/118) benchmarking ("-", "Matrix", "Matrix", 1024)...
    done (took 2.10440775 seconds)
    (54/118) benchmarking ("\\", "Matrix", "Vector", 1024)...
    done (took 4.458013278 seconds)
    (55/118) benchmarking ("-", "Vector", "Vector", 256)...
    done (took 1.966875674 seconds)
    (56/118) benchmarking ("*", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.968842406 seconds)
    (57/118) benchmarking ("cumsum!", Float64, 256)...
    done (took 1.968431844 seconds)
    (58/118) benchmarking ("*", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.968915072 seconds)
    (59/118) benchmarking ("\\", "Matrix", "Matrix", 1024)...
    done (took 10.589781664 seconds)
    (60/118) benchmarking ("+", "Vector", "Vector", 1024)...
    done (took 1.967904554 seconds)
    (61/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.969207121 seconds)
    (62/118) benchmarking ("+", "Matrix", "Matrix", 256)...
    done (took 1.976859138 seconds)
    (63/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.9772445 seconds)
    (64/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.969853957 seconds)
    (65/118) benchmarking ("-", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.969172038 seconds)
    (66/118) benchmarking ("sqrt", "typename(UpperTriangular)", 256)...
    done (took 2.354555315 seconds)
    (67/118) benchmarking ("\\", "HermitianSparseWithNonZeroPivots", "Vector", 1024)...
    done (took 2.037436804 seconds)
    (68/118) benchmarking ("cumsum!", Float32, 256)...
    done (took 1.968852457 seconds)
    (69/118) benchmarking ("sqrt", "typename(UpperTriangular)", 1024)...
    done (took 22.203118572 seconds)
    (70/118) benchmarking ("sqrt", "typename(Hermitian)", 1024)...
    done (took 22.543714053 seconds)
    (71/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 256)...
    done (took 1.969693919 seconds)
    (72/118) benchmarking ("sqrt", "NPDUpperTriangular", 1024)...
    done (took 22.60817189 seconds)
    (73/118) benchmarking ("mul!", "Matrix{Float32}", "Matrix{Float64}", "Matrix{Float64}", 256)...
    done (took 3.157999397 seconds)
    (74/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 256)...
    done (took 1.969592119 seconds)
    (75/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.96937368 seconds)
    (76/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.969733302 seconds)
    (77/118) benchmarking ("\\", "typename(SymTridiagonal)", "Vector", 1024)...
    done (took 1.971266857 seconds)
    (78/118) benchmarking ("*", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.969813105 seconds)
    (79/118) benchmarking ("\\", "typename(Tridiagonal)", "Vector", 1024)...
    done (took 1.971395431 seconds)
    (80/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.107220094 seconds)
    (81/118) benchmarking ("-", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 1.977290996 seconds)
    (82/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 5.041239545 seconds)
    (83/118) benchmarking ("*", "Matrix", "Matrix", 256)...
    done (took 2.050501609 seconds)
    (84/118) benchmarking ("3-arg mul!", 2)...
    done (took 1.967233868 seconds)
    (85/118) benchmarking ("-", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.107101363 seconds)
    (86/118) benchmarking ("+", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.968827371 seconds)
    (87/118) benchmarking ("*", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.981135609 seconds)
    (88/118) benchmarking ("*", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.780087348 seconds)
    (89/118) benchmarking ("\\", "Matrix", "Vector", 256)...
    done (took 2.039096106 seconds)
    (90/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 1024)...
    done (took 2.006444272 seconds)
    (91/118) benchmarking ("*", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 4.768874446 seconds)
    (92/118) benchmarking ("\\", "typename(Diagonal)", "Vector", 1024)...
    done (took 1.967795831 seconds)
    (93/118) benchmarking ("sqrt", "typename(UnitUpperTriangular)", 256)...
    done (took 2.341842409 seconds)
    (94/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 4.70358087 seconds)
    (95/118) benchmarking ("\\", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.968442748 seconds)
    (96/118) benchmarking ("*", "typename(SymTridiagonal)", "Vector", 256)...
    done (took 1.969634337 seconds)
    (97/118) benchmarking ("\\", "typename(LowerTriangular)", "Vector", 1024)...
    done (took 1.984560056 seconds)
    (98/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 1024)...
    done (took 1.971249692 seconds)
    (99/118) benchmarking ("+", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.969718677 seconds)
    (100/118) benchmarking ("*", "typename(UpperTriangular)", "Vector", 256)...
    done (took 1.971575846 seconds)
    (101/118) benchmarking ("\\", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 2.048804871 seconds)
    (102/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 1024)...
    done (took 1.96896692 seconds)
    (103/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 1024)...
    done (took 2.108055674 seconds)
    (104/118) benchmarking ("*", "Matrix", "Matrix", 1024)...
    done (took 6.709726766 seconds)
    (105/118) benchmarking ("exp", "typename(Hermitian)", 1024)...
    done (took 22.412064112 seconds)
    (106/118) benchmarking ("+", "typename(SymTridiagonal)", "typename(SymTridiagonal)", 256)...
    done (took 1.970281687 seconds)
    (107/118) benchmarking ("/", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.970705765 seconds)
    (108/118) benchmarking ("*", "typename(Bidiagonal)", "typename(Bidiagonal)", 256)...
    done (took 1.97834391 seconds)
    (109/118) benchmarking ("\\", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.050518935 seconds)
    (110/118) benchmarking ("+", "typename(UpperTriangular)", "typename(UpperTriangular)", 1024)...
    done (took 2.107220114 seconds)
    (111/118) benchmarking ("-", "typename(Diagonal)", "typename(Diagonal)", 256)...
    done (took 1.971233035 seconds)
    (112/118) benchmarking ("/", "typename(UpperTriangular)", "typename(UpperTriangular)", 256)...
    done (took 2.035859801 seconds)
    (113/118) benchmarking ("+", "typename(LowerTriangular)", "typename(LowerTriangular)", 256)...
    done (took 1.977722894 seconds)
    (114/118) benchmarking ("*", "Matrix", "Vector", 256)...
    done (took 1.972554011 seconds)
    (115/118) benchmarking ("cumsum!", Float32, 1024)...
    done (took 1.970508283 seconds)
    (116/118) benchmarking ("log", "typename(Hermitian)", 256)...
    done (took 4.063896076 seconds)
    (117/118) benchmarking ("5-arg mul!", 3)...
    done (took 1.968993841 seconds)
    (118/118) benchmarking ("-", "typename(Tridiagonal)", "typename(Tridiagonal)", 256)...
    done (took 1.971589797 seconds)
  done (took 432.183934631 seconds)
done (took 824.317132545 seconds)
(4/20) benchmarking "parallel"...
  (1/1) benchmarking "remotecall"...
    (1/5) benchmarking ("identity", 1024)...
    done (took 2.635740872 seconds)
    (2/5) benchmarking ("identity", 64)...
    done (took 2.650268793 seconds)
    (3/5) benchmarking ("identity", 4096)...
    done (took 2.730518255 seconds)
    (4/5) benchmarking ("identity", 512)...
    done (took 2.607895455 seconds)
    (5/5) benchmarking ("identity", 2)...
    done (took 2.578144628 seconds)
  done (took 15.102502077 seconds)
done (took 17.012055417 seconds)
(5/20) benchmarking "find"...
  (1/3) benchmarking "findall"...
    (1/41) benchmarking ("> q0.8", "Vector{UInt8}")...
    done (took 2.000741104 seconds)
    (2/41) benchmarking ("Vector{Bool}", "10-90")...
    done (took 1.987479584 seconds)
    (3/41) benchmarking ("BitVector", "10-90")...
    done (took 1.977616618 seconds)
    (4/41) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.029467546 seconds)
    (5/41) benchmarking ("> q0.95", "Vector{UInt8}")...
    done (took 1.987742168 seconds)
    (6/41) benchmarking ("> q0.99", "Vector{Float64}")...
    done (took 1.984781365 seconds)
    (7/41) benchmarking ("> q0.95", "Vector{UInt64}")...
    done (took 2.017208568 seconds)
    (8/41) benchmarking ("> q0.8", "Vector{Int64}")...
    done (took 2.016394716 seconds)
    (9/41) benchmarking ("> q0.99", "Vector{Int64}")...
    done (took 2.002429245 seconds)
    (10/41) benchmarking ("> q0.99", "Vector{UInt8}")...
    done (took 1.971750938 seconds)
    (11/41) benchmarking ("> q0.5", "Vector{Float64}")...
    done (took 2.020205208 seconds)
    (12/41) benchmarking ("> q0.99", "Vector{Bool}")...
    done (took 1.988076321 seconds)
    (13/41) benchmarking ("> q0.8", "Vector{Float32}")...
    done (took 2.003539369 seconds)
    (14/41) benchmarking ("> q0.95", "Vector{Int64}")...
    done (took 1.994975634 seconds)
    (15/41) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.050798316 seconds)
    (16/41) benchmarking ("> q0.8", "Vector{Int8}")...
    done (took 2.00869528 seconds)
    (17/41) benchmarking ("> q0.99", "Vector{Int8}")...
    done (took 1.989095617 seconds)
    (18/41) benchmarking ("BitVector", "50-50")...
    done (took 1.98032365 seconds)
    (19/41) benchmarking ("> q0.5", "Vector{Bool}")...
    done (took 2.030704943 seconds)
    (20/41) benchmarking ("> q0.95", "Vector{Bool}")...
    done (took 1.988171753 seconds)
    (21/41) benchmarking ("> q0.95", "Vector{Float32}")...
    done (took 1.990539458 seconds)
    (22/41) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.987540107 seconds)
    (23/41) benchmarking ("> q0.8", "Vector{Bool}")...
    done (took 1.973006271 seconds)
    (24/41) benchmarking ("> q0.5", "Vector{Int8}")...
    done (took 2.023280571 seconds)
    (25/41) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.057109623 seconds)
    (26/41) benchmarking ("> q0.95", "Vector{Float64}")...
    done (took 1.993509075 seconds)
    (27/41) benchmarking ("BitVector", "90-10")...
    done (took 1.98358466 seconds)
    (28/41) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.022664953 seconds)
    (29/41) benchmarking ("> q0.95", "Vector{Int8}")...
    done (took 1.995309478 seconds)
    (30/41) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.02123235 seconds)
    (31/41) benchmarking ("> q0.8", "Vector{UInt64}")...
    done (took 2.039437129 seconds)
    (32/41) benchmarking ("> q0.8", "Vector{Float64}")...
    done (took 2.006452336 seconds)
    (33/41) benchmarking ("> q0.99", "Vector{UInt64}")...
    done (took 2.019332822 seconds)
    (34/41) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.053440043 seconds)
    (35/41) benchmarking ("> q0.5", "Vector{Float32}")...
    done (took 2.03305633 seconds)
    (36/41) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.05904305 seconds)
    (37/41) benchmarking ("Vector{Bool}", "90-10")...
    done (took 1.993885384 seconds)
    (38/41) benchmarking ("> q0.5", "Vector{Int64}")...
    done (took 2.046052304 seconds)
    (39/41) benchmarking ("> q0.99", "Vector{Float32}")...
    done (took 1.992162372 seconds)
    (40/41) benchmarking ("> q0.5", "Vector{UInt64}")...
    done (took 2.058357792 seconds)
    (41/41) benchmarking ("> q0.5", "Vector{UInt8}")...
    done (took 2.031940563 seconds)
  done (took 84.313033913 seconds)
  (2/3) benchmarking "findprev"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.984296175 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.116763241 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.193690668 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.013680273 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 1.98401305 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.19258806 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.040372059 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.111359653 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.115492253 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.195044796 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.210886976 seconds)
  done (took 25.067858021 seconds)
  (3/3) benchmarking "findnext"...
    (1/11) benchmarking ("BitVector", "10-90")...
    done (took 1.98199751 seconds)
    (2/11) benchmarking ("ispos", "Vector{Int64}")...
    done (took 2.118998537 seconds)
    (3/11) benchmarking ("ispos", "Vector{UInt8}")...
    done (took 2.201438035 seconds)
    (4/11) benchmarking ("BitVector", "50-50")...
    done (took 2.017936831 seconds)
    (5/11) benchmarking ("Vector{Bool}", "50-50")...
    done (took 2.006013225 seconds)
    (6/11) benchmarking ("ispos", "Vector{Float64}")...
    done (took 2.20006653 seconds)
    (7/11) benchmarking ("BitVector", "90-10")...
    done (took 2.046811315 seconds)
    (8/11) benchmarking ("ispos", "Vector{Bool}")...
    done (took 2.113159774 seconds)
    (9/11) benchmarking ("ispos", "Vector{Int8}")...
    done (took 2.118083536 seconds)
    (10/11) benchmarking ("ispos", "Vector{Float32}")...
    done (took 2.203505791 seconds)
    (11/11) benchmarking ("ispos", "Vector{UInt64}")...
    done (took 2.21204022 seconds)
  done (took 25.135279063 seconds)
done (took 136.42850837 seconds)
(6/20) benchmarking "tuple"...
  (1/4) benchmarking "misc"...
    (1/2) benchmarking "longtuple"...
    done (took 2.359679992 seconds)
    (2/2) benchmarking "11899"...
    done (took 2.009352104 seconds)
  done (took 6.273511349 seconds)
  (2/4) benchmarking "linear algebra"...
    (1/8) benchmarking ("matmat", (8, 8), (8, 8))...
    done (took 2.000126306 seconds)
    (2/8) benchmarking ("matmat", (16, 16), (16, 16))...
    done (took 2.137080513 seconds)
    (3/8) benchmarking ("matmat", (2, 2), (2, 2))...
    done (took 1.978771814 seconds)
    (4/8) benchmarking ("matmat", (4, 4), (4, 4))...
    done (took 1.981089654 seconds)
    (5/8) benchmarking ("matvec", (2, 2), (2,))...
    done (took 1.979099278 seconds)
    (6/8) benchmarking ("matvec", (8, 8), (8,))...
    done (took 1.97975803 seconds)
    (7/8) benchmarking ("matvec", (16, 16), (16,))...
    done (took 1.982162346 seconds)
    (8/8) benchmarking ("matvec", (4, 4), (4,))...
    done (took 1.979293732 seconds)
  done (took 17.923361313 seconds)
  (3/4) benchmarking "index"...
    (1/16) benchmarking ("sumelt", "NTuple", 3, Float64)...
    done (took 1.978174946 seconds)
    (2/16) benchmarking ("sumelt", "NTuple", 3, Float32)...
    done (took 1.977250013 seconds)
    (3/16) benchmarking ("sumelt", "TupleWrapper", 30, Float32)...
    done (took 1.967901789 seconds)
    (4/16) benchmarking ("sumelt", "TupleWrapper", 60, Float32)...
    done (took 1.978527362 seconds)
    (5/16) benchmarking ("sumelt", "NTuple", 60, Float32)...
    done (took 1.978009816 seconds)
    (6/16) benchmarking ("sumelt", "NTuple", 30, Float64)...
    done (took 1.978268014 seconds)
    (7/16) benchmarking ("sumelt", "TupleWrapper", 30, Float64)...
    done (took 1.978937745 seconds)
    (8/16) benchmarking ("sumelt", "TupleWrapper", 60, Float64)...
    done (took 1.97979162 seconds)
    (9/16) benchmarking ("sumelt", "NTuple", 60, Float64)...
    done (took 1.979400011 seconds)
    (10/16) benchmarking ("sumelt", "NTuple", 8, Float32)...
    done (took 1.977802583 seconds)
    (11/16) benchmarking ("sumelt", "TupleWrapper", 8, Float64)...
    done (took 1.978254221 seconds)
    (12/16) benchmarking ("sumelt", "NTuple", 30, Float32)...
    done (took 1.978309718 seconds)
    (13/16) benchmarking ("sumelt", "TupleWrapper", 3, Float32)...
    done (took 1.978488999 seconds)
    (14/16) benchmarking ("sumelt", "NTuple", 8, Float64)...
    done (took 1.978946204 seconds)
    (15/16) benchmarking ("sumelt", "TupleWrapper", 8, Float32)...
    done (took 1.979580331 seconds)
    (16/16) benchmarking ("sumelt", "TupleWrapper", 3, Float64)...
    done (took 1.979194288 seconds)
  done (took 33.553418668 seconds)
  (4/4) benchmarking "reduction"...
    (1/24) benchmarking ("sumabs", (16, 16))...
    done (took 1.980704381 seconds)
    (2/24) benchmarking ("sumabs", (8,))...
    done (took 1.97833941 seconds)
    (3/24) benchmarking ("minimum", (2, 2))...
    done (took 1.979822061 seconds)
    (4/24) benchmarking ("sum", (4, 4))...
    done (took 1.978407384 seconds)
    (5/24) benchmarking ("sumabs", (4, 4))...
    done (took 1.979917892 seconds)
    (6/24) benchmarking ("sumabs", (8, 8))...
    done (took 1.97986407 seconds)
    (7/24) benchmarking ("minimum", (8, 8))...
    done (took 1.980531044 seconds)
    (8/24) benchmarking ("minimum", (4,))...
    done (took 1.977997941 seconds)
    (9/24) benchmarking ("sumabs", (4,))...
    done (took 1.980083698 seconds)
    (10/24) benchmarking ("sumabs", (16,))...
    done (took 1.978500425 seconds)
    (11/24) benchmarking ("sum", (8, 8))...
    done (took 1.981190772 seconds)
    (12/24) benchmarking ("sum", (2,))...
    done (took 1.979133344 seconds)
    (13/24) benchmarking ("sum", (2, 2))...
    done (took 1.98033415 seconds)
    (14/24) benchmarking ("sumabs", (2,))...
    done (took 1.979599916 seconds)
    (15/24) benchmarking ("minimum", (16,))...
    done (took 1.980069466 seconds)
    (16/24) benchmarking ("sum", (16, 16))...
    done (took 1.979928134 seconds)
    (17/24) benchmarking ("sumabs", (2, 2))...
    done (took 1.979405118 seconds)
    (18/24) benchmarking ("minimum", (4, 4))...
    done (took 1.980899842 seconds)
    (19/24) benchmarking ("minimum", (16, 16))...
    done (took 1.984312694 seconds)
    (20/24) benchmarking ("minimum", (8,))...
    done (took 1.979508096 seconds)
    (21/24) benchmarking ("sum", (16,))...
    done (took 1.979631847 seconds)
    (22/24) benchmarking ("minimum", (2,))...
    done (took 1.982476266 seconds)
    (23/24) benchmarking ("sum", (4,))...
    done (took 1.98023232 seconds)
    (24/24) benchmarking ("sum", (8,))...
    done (took 1.980815816 seconds)
  done (took 49.428616573 seconds)
done (took 109.103570579 seconds)
(7/20) benchmarking "dates"...
  (1/7) benchmarking "string"...
    (1/2) benchmarking "Date"...
    done (took 3.276391163 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 3.952045982 seconds)
  done (took 9.134528716 seconds)
  (2/7) benchmarking "construction"...
    (1/2) benchmarking "Date"...
    done (took 1.984587533 seconds)
    (2/2) benchmarking "DateTime"...
    done (took 1.985032525 seconds)
  done (took 5.956630602 seconds)
  (3/7) benchmarking "arithmetic"...
    (1/10) benchmarking ("Date", "Month")...
    done (took 1.980691637 seconds)
    (2/10) benchmarking ("DateTime", "Millisecond")...
    done (took 1.981148767 seconds)
    (3/10) benchmarking ("DateTime", "Month")...
    done (took 1.982504508 seconds)
    (4/10) benchmarking ("Date", "Year")...
    done (took 1.982279026 seconds)
    (5/10) benchmarking ("DateTime", "Second")...
    done (took 1.981635356 seconds)
    (6/10) benchmarking ("Date", "Day")...
    done (took 1.980035666 seconds)
    (7/10) benchmarking ("DateTime", "Year")...
    done (took 1.982459951 seconds)
    (8/10) benchmarking ("DateTime", "Hour")...
    done (took 1.981749432 seconds)
    (9/10) benchmarking ("DateTime", "Day")...
    done (took 1.98303776 seconds)
    (10/10) benchmarking ("DateTime", "Minute")...
    done (took 1.979752783 seconds)
  done (took 21.722216815 seconds)
  (4/7) benchmarking "query"...
    (1/18) benchmarking ("lastdayofweek", "Date")...
    done (took 1.980703149 seconds)
    (2/18) benchmarking ("firstdayofmonth", "DateTime")...
    done (took 1.979112417 seconds)
    (3/18) benchmarking ("dayofyear", "Date")...
    done (took 1.981506665 seconds)
    (4/18) benchmarking ("isleapyear", "Date")...
    done (took 1.979994279 seconds)
    (5/18) benchmarking ("lastdayofmonth", "Date")...
    done (took 1.967350074 seconds)
    (6/18) benchmarking ("dayofweek", "DateTime")...
    done (took 1.980161962 seconds)
    (7/18) benchmarking ("lastdayofweek", "DateTime")...
    done (took 1.979576525 seconds)
    (8/18) benchmarking ("firstdayofweek", "Date")...
    done (took 1.982312208 seconds)
    (9/18) benchmarking ("lastdayofmonth", "DateTime")...
    done (took 1.980049513 seconds)
    (10/18) benchmarking ("dayofweek", "Date")...
    done (took 1.980794512 seconds)
    (11/18) benchmarking ("isleapyear", "DateTime")...
    done (took 1.980441868 seconds)
    (12/18) benchmarking ("daysofweekinmonth", "Date")...
    done (took 1.980881723 seconds)
    (13/18) benchmarking ("firstdayofmonth", "Date")...
    done (took 1.982179035 seconds)
    (14/18) benchmarking ("daysofweekinmonth", "DateTime")...
    done (took 1.983766363 seconds)
    (15/18) benchmarking ("firstdayofweek", "DateTime")...
    done (took 1.981911937 seconds)
    (16/18) benchmarking ("dayofweekofmonth", "DateTime")...
    done (took 1.982674119 seconds)
    (17/18) benchmarking ("dayofyear", "DateTime")...
    done (took 1.982770519 seconds)
    (18/18) benchmarking ("dayofweekofmonth", "Date")...
    done (took 1.987506709 seconds)
  done (took 37.561091013 seconds)
  (5/7) benchmarking "conversion"...
    (1/2) benchmarking "Date -> DateTime"...
    done (took 1.986522027 seconds)
    (2/2) benchmarking "DateTime -> Date"...
    done (took 1.984688787 seconds)
  done (took 5.880878655 seconds)
  (6/7) benchmarking "accessor"...
    (1/7) benchmarking "day"...
    done (took 1.986774267 seconds)
    (2/7) benchmarking "second"...
    done (took 1.981648391 seconds)
    (3/7) benchmarking "month"...
    done (took 1.981481216 seconds)
    (4/7) benchmarking "year"...
    done (took 1.978514667 seconds)
    (5/7) benchmarking "hour"...
    done (took 1.984656245 seconds)
    (6/7) benchmarking "millisecond"...
    done (took 1.984457515 seconds)
    (7/7) benchmarking "minute"...
    done (took 1.980222215 seconds)
  done (took 15.791662732 seconds)
  (7/7) benchmarking "parse"...
    (1/9) benchmarking ("Date", "ISODateFormat")...
    done (took 1.976956341 seconds)
    (2/9) benchmarking ("Date", "DateFormat")...
    done (took 2.141789398 seconds)
    (3/9) benchmarking ("DateTime", "DateFormat")...
    done (took 2.195550751 seconds)
    (4/9) benchmarking "Date"...
    done (took 2.598745255 seconds)
    (5/9) benchmarking ("DateTime", "ISODateTimeFormat")...
    done (took 1.976281424 seconds)
    (6/9) benchmarking ("DateTime", "RFC1123Format", "Titlecase")...
    done (took 1.97707383 seconds)
    (7/9) benchmarking "DateTime"...
    done (took 2.891050514 seconds)
    (8/9) benchmarking ("DateTime", "RFC1123Format", "Lowercase")...
    done (took 1.978347539 seconds)
    (9/9) benchmarking ("DateTime", "RFC1123Format", "Mixedcase")...
    done (took 1.980000928 seconds)
  done (took 21.623605714 seconds)
done (took 119.588028568 seconds)
(8/20) benchmarking "micro"...
  (1/8) benchmarking "quicksort"...
  done (took 4.831875492 seconds)
  (2/8) benchmarking "printfd"...
  done (took 6.978698574 seconds)
  (3/8) benchmarking "parseint"...
  done (took 3.204456959 seconds)
  (4/8) benchmarking "randmatstat"...
  done (took 7.057014651 seconds)
  (5/8) benchmarking "pisum"...
  done (took 7.047510503 seconds)
  (6/8) benchmarking "fib"...
  done (took 2.313063339 seconds)
  (7/8) benchmarking "randmatmul"...
  done (took 6.975022584 seconds)
  (8/8) benchmarking "mandel"...
  done (took 3.570180104 seconds)
done (took 43.882586036 seconds)
(9/20) benchmarking "io"...
  (1/4) benchmarking "skipchars"...
  done (took 7.063053689 seconds)
  (2/4) benchmarking "array_limit"...
    (1/3) benchmarking ("display", "Matrix{Float64}(100000000, 1)")...
    done (took 7.007195966 seconds)
    (2/3) benchmarking ("display", "Vector{Float64}(100000000,)")...
    done (took 7.002947952 seconds)
    (3/3) benchmarking ("display", "Matrix{Float64}(10000, 10000)")...
    done (took 7.005978735 seconds)
  done (took 22.917219596 seconds)
  (3/4) benchmarking "serialization"...
    (1/4) benchmarking ("deserialize", "Matrix{Float64}")...
    done (took 6.973569504 seconds)
    (2/4) benchmarking ("deserialize", "Vector{String}")...
    done (took 3.31120726 seconds)
    (3/4) benchmarking ("serialize", "Matrix{Float64}")...
    done (took 6.994156832 seconds)
    (4/4) benchmarking ("serialize", "Vector{String}")...
    done (took 3.89200912 seconds)
  done (took 23.1003233 seconds)
  (4/4) benchmarking "read"...
    (1/2) benchmarking "readstring"...
    done (took 2.336811185 seconds)
    (2/2) benchmarking "read"...
    done (took 2.325507838 seconds)
  done (took 6.568401761 seconds)
done (took 61.568094252 seconds)
(10/20) benchmarking "scalar"...
  (1/25) benchmarking "exp2"...
    (1/24) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.971928943 seconds)
    (2/24) benchmarking ("2pow35", "negative argument", "Float32")...
    done (took 1.973640145 seconds)
    (3/24) benchmarking ("one", "Float64")...
    done (took 1.959516965 seconds)
    (4/24) benchmarking ("2pow3", "negative argument", "Float32")...
    done (took 1.974756184 seconds)
    (5/24) benchmarking ("zero", "Float64")...
    done (took 1.975107715 seconds)
    (6/24) benchmarking ("2pow35", "positive argument", "Float64")...
    done (took 1.97445012 seconds)
    (7/24) benchmarking ("2pow3", "positive argument", "Float32")...
    done (took 1.972279231 seconds)
    (8/24) benchmarking ("2pow35", "positive argument", "Float32")...
    done (took 1.974591989 seconds)
    (9/24) benchmarking ("2pow1023", "positive argument", Float64)...
    done (took 1.973860796 seconds)
    (10/24) benchmarking ("zero", "Float32")...
    done (took 1.973899947 seconds)
    (11/24) benchmarking ("one", "Float32")...
    done (took 1.97200954 seconds)
    (12/24) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.972029523 seconds)
    (13/24) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.974380515 seconds)
    (14/24) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.974472939 seconds)
    (15/24) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.971742276 seconds)
    (16/24) benchmarking ("2pow3", "positive argument", "Float64")...
    done (took 1.973441344 seconds)
    (17/24) benchmarking ("2pow1023", "negative argument", Float64)...
    done (took 1.973883456 seconds)
    (18/24) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.974043697 seconds)
    (19/24) benchmarking ("2pow127", "positive argument", Float32)...
    done (took 1.974157276 seconds)
    (20/24) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.97511216 seconds)
    (21/24) benchmarking ("2pow127", "negative argument", Float32)...
    done (took 1.974674376 seconds)
    (22/24) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.973633758 seconds)
    (23/24) benchmarking ("2pow35", "negative argument", "Float64")...
    done (took 1.972505672 seconds)
    (24/24) benchmarking ("2pow3", "negative argument", "Float64")...
    done (took 1.97484732 seconds)
  done (took 49.258520133 seconds)
  (2/25) benchmarking "atan"...
    (1/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float32")...
    done (took 1.975087676 seconds)
    (2/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float64")...
    done (took 1.976251296 seconds)
    (3/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float32")...
    done (took 1.973417182 seconds)
    (4/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float32")...
    done (took 1.97506833 seconds)
    (5/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float64")...
    done (took 1.973865106 seconds)
    (6/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float32")...
    done (took 1.972718547 seconds)
    (7/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float32")...
    done (took 1.974735764 seconds)
    (8/30) benchmarking ("zero", "Float64")...
    done (took 1.976092715 seconds)
    (9/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float32")...
    done (took 1.974979998 seconds)
    (10/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float32")...
    done (took 1.974417611 seconds)
    (11/30) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.977157975 seconds)
    (12/30) benchmarking ("11/16 <= abs(x) < 19/16", "negative argument", "Float64")...
    done (took 1.974382117 seconds)
    (13/30) benchmarking ("zero", "Float32")...
    done (took 1.973241709 seconds)
    (14/30) benchmarking ("7/16 <= abs(x) < 11/16", "positive argument", "Float64")...
    done (took 1.973892984 seconds)
    (15/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.975857871 seconds)
    (16/30) benchmarking ("7/16 <= abs(x) < 11/16", "negative argument", "Float64")...
    done (took 1.976618222 seconds)
    (17/30) benchmarking ("19/16 <= abs(x) < 39/16", "negative argument", "Float32")...
    done (took 1.975833688 seconds)
    (18/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.976257402 seconds)
    (19/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.973773934 seconds)
    (20/30) benchmarking ("19/16 <= abs(x) < 39/16", "positive argument", "Float64")...
    done (took 1.976224321 seconds)
    (21/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float32")...
    done (took 1.975281599 seconds)
    (22/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.97663767 seconds)
    (23/30) benchmarking ("11/16 <= abs(x) < 19/16", "positive argument", "Float64")...
    done (took 1.976855077 seconds)
    (24/30) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.974963446 seconds)
    (25/30) benchmarking ("39/16 <= abs(x) < 2^66", "negative argument", "Float64")...
    done (took 1.97594229 seconds)
    (26/30) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.975111666 seconds)
    (27/30) benchmarking ("0 <= abs(x) < 7/16", "positive argument", "Float32")...
    done (took 1.975629422 seconds)
    (28/30) benchmarking ("0 <= abs(x) < 7/16", "negative argument", "Float64")...
    done (took 1.975372749 seconds)
    (29/30) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.975284382 seconds)
    (30/30) benchmarking ("39/16 <= abs(x) < 2^66", "positive argument", "Float64")...
    done (took 1.975269806 seconds)
  done (took 61.158661544 seconds)
  (3/25) benchmarking "predicate"...
    (1/72) benchmarking ("isodd", "BigInt")...
    done (took 1.975204222 seconds)
    (2/72) benchmarking ("isfinite", "Int64")...
    done (took 1.976886753 seconds)
    (3/72) benchmarking ("isfinite", "Float32")...
    done (took 1.97678076 seconds)
    (4/72) benchmarking ("isequal", "Complex{BigInt}")...
    done (took 1.9762353 seconds)
    (5/72) benchmarking ("isinf", "UInt64")...
    done (took 1.977366109 seconds)
    (6/72) benchmarking ("isnan", "ComplexF64")...
    done (took 1.974236839 seconds)
    (7/72) benchmarking ("isodd", "UInt64")...
    done (took 1.976446713 seconds)
    (8/72) benchmarking ("isinteger", "UInt64")...
    done (took 1.977017071 seconds)
    (9/72) benchmarking ("isfinite", "Complex{UInt64}")...
    done (took 1.976498783 seconds)
    (10/72) benchmarking ("isfinite", "ComplexF32")...
    done (took 1.975635683 seconds)
    (11/72) benchmarking ("isequal", "Complex{UInt64}")...
    done (took 1.975445064 seconds)
    (12/72) benchmarking ("isnan", "Float64")...
    done (took 1.977940139 seconds)
    (13/72) benchmarking ("isequal", "Complex{Int64}")...
    done (took 1.97522018 seconds)
    (14/72) benchmarking ("isequal", "Float64")...
    done (took 1.977379252 seconds)
    (15/72) benchmarking ("isfinite", "Complex{BigInt}")...
    done (took 1.976363586 seconds)
    (16/72) benchmarking ("isinteger", "Complex{Int64}")...
    done (took 1.977392966 seconds)
    (17/72) benchmarking ("isnan", "BigFloat")...
    done (took 1.97591671 seconds)
    (18/72) benchmarking ("isinteger", "Complex{BigFloat}")...
    done (took 1.976018712 seconds)
    (19/72) benchmarking ("isinf", "Complex{BigInt}")...
    done (took 1.975593977 seconds)
    (20/72) benchmarking ("isinf", "Complex{UInt64}")...
    done (took 1.976461624 seconds)
    (21/72) benchmarking ("isless", "BigInt")...
    done (took 1.97680983 seconds)
    (22/72) benchmarking ("isodd", "Int64")...
    done (took 1.976823964 seconds)
    (23/72) benchmarking ("isfinite", "Complex{Int64}")...
    done (took 1.97625545 seconds)
    (24/72) benchmarking ("isequal", "Float32")...
    done (took 1.978338585 seconds)
    (25/72) benchmarking ("isequal", "ComplexF64")...
    done (took 1.978138741 seconds)
    (26/72) benchmarking ("isequal", "UInt64")...
    done (took 1.978753682 seconds)
    (27/72) benchmarking ("isinteger", "Int64")...
    done (took 1.976967278 seconds)
    (28/72) benchmarking ("isfinite", "Float64")...
    done (took 1.976357719 seconds)
    (29/72) benchmarking ("isequal", "Int64")...
    done (took 1.97665135 seconds)
    (30/72) benchmarking ("isinf", "Float64")...
    done (took 1.977961156 seconds)
    (31/72) benchmarking ("isless", "UInt64")...
    done (took 1.977736411 seconds)
    (32/72) benchmarking ("isequal", "BigInt")...
    done (took 1.976497939 seconds)
    (33/72) benchmarking ("isinf", "BigFloat")...
    done (took 1.980718063 seconds)
    (34/72) benchmarking ("isless", "Float32")...
    done (took 1.977628433 seconds)
    (35/72) benchmarking ("isfinite", "Complex{BigFloat}")...
    done (took 1.977455168 seconds)
    (36/72) benchmarking ("isinteger", "BigFloat")...
    done (took 1.977889065 seconds)
    (37/72) benchmarking ("isless", "Float64")...
    done (took 1.977748708 seconds)
    (38/72) benchmarking ("iseven", "BigInt")...
    done (took 1.979093604 seconds)
    (39/72) benchmarking ("isfinite", "ComplexF64")...
    done (took 1.978498915 seconds)
    (40/72) benchmarking ("isnan", "BigInt")...
    done (took 1.976102416 seconds)
    (41/72) benchmarking ("isfinite", "UInt64")...
    done (took 1.978241712 seconds)
    (42/72) benchmarking ("isfinite", "BigInt")...
    done (took 1.97836436 seconds)
    (43/72) benchmarking ("isnan", "Float32")...
    done (took 1.978430853 seconds)
    (44/72) benchmarking ("isnan", "Complex{UInt64}")...
    done (took 1.977049192 seconds)
    (45/72) benchmarking ("isnan", "Complex{BigFloat}")...
    done (took 1.979746508 seconds)
    (46/72) benchmarking ("iseven", "Int64")...
    done (took 1.97857232 seconds)
    (47/72) benchmarking ("isinteger", "Float64")...
    done (took 1.978972272 seconds)
    (48/72) benchmarking ("isnan", "ComplexF32")...
    done (took 1.979623504 seconds)
    (49/72) benchmarking ("isinf", "Complex{Int64}")...
    done (took 1.978873894 seconds)
    (50/72) benchmarking ("isinf", "Int64")...
    done (took 1.978454053 seconds)
    (51/72) benchmarking ("isnan", "Complex{Int64}")...
    done (took 1.976312354 seconds)
    (52/72) benchmarking ("isinf", "ComplexF32")...
    done (took 1.978759521 seconds)
    (53/72) benchmarking ("isinteger", "Complex{BigInt}")...
    done (took 1.980390736 seconds)
    (54/72) benchmarking ("isinteger", "ComplexF64")...
    done (took 1.979202277 seconds)
    (55/72) benchmarking ("isnan", "Int64")...
    done (took 1.978897549 seconds)
    (56/72) benchmarking ("isinteger", "Float32")...
    done (took 1.978451983 seconds)
    (57/72) benchmarking ("isnan", "UInt64")...
    done (took 1.97973123 seconds)
    (58/72) benchmarking ("isinteger", "Complex{UInt64}")...
    done (took 1.981386063 seconds)
    (59/72) benchmarking ("isless", "Int64")...
    done (took 1.981165693 seconds)
    (60/72) benchmarking ("isinf", "BigInt")...
    done (took 1.981422539 seconds)
    (61/72) benchmarking ("isinteger", "BigInt")...
    done (took 1.979811023 seconds)
    (62/72) benchmarking ("isfinite", "BigFloat")...
    done (took 1.980632106 seconds)
    (63/72) benchmarking ("isinf", "ComplexF64")...
    done (took 1.979057699 seconds)
    (64/72) benchmarking ("isinf", "Float32")...
    done (took 1.982365501 seconds)
    (65/72) benchmarking ("isequal", "Complex{BigFloat}")...
    done (took 1.979436949 seconds)
    (66/72) benchmarking ("isinteger", "ComplexF32")...
    done (took 1.979957925 seconds)
    (67/72) benchmarking ("isinf", "Complex{BigFloat}")...
    done (took 1.979769531 seconds)
    (68/72) benchmarking ("isnan", "Complex{BigInt}")...
    done (took 1.97875836 seconds)
    (69/72) benchmarking ("iseven", "UInt64")...
    done (took 1.979442881 seconds)
    (70/72) benchmarking ("isequal", "BigFloat")...
    done (took 1.9785518 seconds)
    (71/72) benchmarking ("isequal", "ComplexF32")...
    done (took 1.980740313 seconds)
    (72/72) benchmarking ("isless", "BigFloat")...
    done (took 1.982799138 seconds)
  done (took 144.327137521 seconds)
  (4/25) benchmarking "sinh"...
    (1/22) benchmarking ("0 <= abs(x) < 2f-12", "negative argument", "Float32")...
    done (took 1.98564973 seconds)
    (2/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.978975361 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 1.979310064 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.981486315 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980152702 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.981409314 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 1.979581344 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.979060152 seconds)
    (9/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.9799291 seconds)
    (10/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.978445305 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.980015146 seconds)
    (12/22) benchmarking ("2.0^-28 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 1.989961518 seconds)
    (13/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.978203024 seconds)
    (14/22) benchmarking ("2f-12 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 1.979103054 seconds)
    (15/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.979271312 seconds)
    (16/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 1.980398878 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 1.981530285 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.977941773 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2f-12", "positive argument", "Float32")...
    done (took 1.978380388 seconds)
    (20/22) benchmarking ("2f-12 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.979004305 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.978979782 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 1.984636211 seconds)
  done (took 45.477179105 seconds)
  (5/25) benchmarking "tan"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.977187668 seconds)
    (2/18) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.980233555 seconds)
    (3/18) benchmarking ("zero", "Float64")...
    done (took 1.979227262 seconds)
    (4/18) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.983948896 seconds)
    (5/18) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.979934062 seconds)
    (6/18) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.980352039 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 1.978545312 seconds)
    (8/18) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.979957654 seconds)
    (9/18) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980798196 seconds)
    (10/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.979168367 seconds)
    (11/18) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980537139 seconds)
    (12/18) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981044034 seconds)
    (13/18) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.980640415 seconds)
    (14/18) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.981653127 seconds)
    (15/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.979394699 seconds)
    (16/18) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.980171869 seconds)
    (17/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.981110786 seconds)
    (18/18) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.980414322 seconds)
  done (took 37.550015843 seconds)
  (6/25) benchmarking "asinh"...
    (1/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float64")...
    done (took 1.980994153 seconds)
    (2/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float64")...
    done (took 1.98062526 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float32")...
    done (took 1.979976593 seconds)
    (4/22) benchmarking ("zero", "Float64")...
    done (took 1.980518774 seconds)
    (5/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float64")...
    done (took 1.991601361 seconds)
    (6/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.982363341 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.980441366 seconds)
    (8/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.981145031 seconds)
    (9/22) benchmarking ("zero", "Float32")...
    done (took 1.982475225 seconds)
    (10/22) benchmarking ("0 <= abs(x) < 2^-28", "negative argument", "Float64")...
    done (took 1.991831733 seconds)
    (11/22) benchmarking ("2 <= abs(x) < 2^28", "negative argument", "Float32")...
    done (took 1.981117935 seconds)
    (12/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.980199802 seconds)
    (13/22) benchmarking ("2^-28 <= abs(x) < 2", "negative argument", "Float32")...
    done (took 1.980851572 seconds)
    (14/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.980870844 seconds)
    (15/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.984103165 seconds)
    (16/22) benchmarking ("2^-28 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.981697952 seconds)
    (17/22) benchmarking ("0 <= abs(x) < 2^-28", "positive argument", "Float32")...
    done (took 1.980683465 seconds)
    (18/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.980560906 seconds)
    (19/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.980241357 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 1.993465334 seconds)
    (21/22) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.981363402 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 1.981140588 seconds)
  done (took 45.541907266 seconds)
  (7/25) benchmarking "asin"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.981493569 seconds)
    (2/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 1.988274521 seconds)
    (3/20) benchmarking ("0.975 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 1.980791185 seconds)
    (4/20) benchmarking ("0.975 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 1.982024875 seconds)
    (5/20) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.981161297 seconds)
    (6/20) benchmarking ("one", "positive argument", "Float32")...
    done (took 1.982092402 seconds)
    (7/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float32")...
    done (took 1.987509378 seconds)
    (8/20) benchmarking ("zero", "Float64")...
    done (took 1.981695323 seconds)
    (9/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float32")...
    done (took 1.979939983 seconds)
    (10/20) benchmarking ("zero", "Float32")...
    done (took 1.980749897 seconds)
    (11/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.980235212 seconds)
    (12/20) benchmarking ("one", "negative argument", "Float32")...
    done (took 1.991670053 seconds)
    (13/20) benchmarking ("0.5 <= abs(x) < 0.975", "negative argument", "Float64")...
    done (took 1.980723979 seconds)
    (14/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 1.98054715 seconds)
    (15/20) benchmarking ("0.5 <= abs(x) < 0.975", "positive argument", "Float64")...
    done (took 1.982043685 seconds)
    (16/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.981589803 seconds)
    (17/20) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.009187211 seconds)
    (18/20) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 1.99707073 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.99599695 seconds)
    (20/20) benchmarking ("one", "positive argument", "Float64")...
    done (took 1.991119236 seconds)
  done (took 41.624562034 seconds)
  (8/25) benchmarking "rem_pio2"...
    (1/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.002728383 seconds)
    (2/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.989491606 seconds)
    (3/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.989025852 seconds)
    (4/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.989730392 seconds)
    (5/28) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.989165839 seconds)
    (6/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.001561531 seconds)
    (7/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.989019959 seconds)
    (8/28) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 1.987748682 seconds)
    (9/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.987790515 seconds)
    (10/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 1.988595416 seconds)
    (11/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.995049817 seconds)
    (12/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 1.988571506 seconds)
    (13/28) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.987678473 seconds)
    (14/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.98835652 seconds)
    (15/28) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.987516729 seconds)
    (16/28) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.98778941 seconds)
    (17/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 1.99311056 seconds)
    (18/28) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986539504 seconds)
    (19/28) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.986196888 seconds)
    (20/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.986785269 seconds)
    (21/28) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.987876372 seconds)
    (22/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 1.99017931 seconds)
    (23/28) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 1.984456516 seconds)
    (24/28) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 1.985696302 seconds)
    (25/28) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.985901647 seconds)
    (26/28) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 1.986562411 seconds)
    (27/28) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.987678389 seconds)
    (28/28) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 1.980432498 seconds)
  done (took 57.613193161 seconds)
  (9/25) benchmarking "expm1"...
    (1/30) benchmarking ("small", "negative argument", "Float32")...
    done (took 1.980917489 seconds)
    (2/30) benchmarking ("medium", "negative argument", "Float32")...
    done (took 1.980666894 seconds)
    (3/30) benchmarking ("huge", "positive argument", "Float64")...
    done (took 1.985044251 seconds)
    (4/30) benchmarking ("arg reduction II", "negative argument", "Float64")...
    done (took 1.982355595 seconds)
    (5/30) benchmarking ("one", "Float64")...
    done (took 1.984004297 seconds)
    (6/30) benchmarking ("zero", "Float64")...
    done (took 1.981458193 seconds)
    (7/30) benchmarking ("arg reduction II", "positive argument", "Float64")...
    done (took 1.982450832 seconds)
    (8/30) benchmarking ("arg reduction I", "positive argument", "Float64")...
    done (took 1.983627106 seconds)
    (9/30) benchmarking ("large", "positive argument", "Float32")...
    done (took 1.981660871 seconds)
    (10/30) benchmarking ("large", "negative argument", "Float64")...
    done (took 1.979564672 seconds)
    (11/30) benchmarking ("arg reduction II", "positive argument", "Float32")...
    done (took 1.979730456 seconds)
    (12/30) benchmarking ("huge", "positive argument", "Float3")...
    done (took 1.981994211 seconds)
    (13/30) benchmarking ("large", "negative argument", "Float32")...
    done (took 1.984325309 seconds)
    (14/30) benchmarking ("zero", "Float32")...
    done (took 1.982865711 seconds)
    (15/30) benchmarking ("medium", "positive argument", "Float32")...
    done (took 1.981596424 seconds)
    (16/30) benchmarking ("one", "Float32")...
    done (took 1.982646585 seconds)
    (17/30) benchmarking ("very small", "positive argument", "Float32")...
    done (took 1.982655172 seconds)
    (18/30) benchmarking ("arg reduction I", "negative argument", "Float64")...
    done (took 1.986856497 seconds)
    (19/30) benchmarking ("small", "negative argument", "Float64")...
    done (took 1.98186181 seconds)
    (20/30) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.982874836 seconds)
    (21/30) benchmarking ("arg reduction II", "negative argument", "Float32")...
    done (took 1.982289421 seconds)
    (22/30) benchmarking ("very small", "negative argument", "Float32")...
    done (took 1.981390197 seconds)
    (23/30) benchmarking ("arg reduction I", "negative argument", "Float32")...
    done (took 1.985484061 seconds)
    (24/30) benchmarking ("large", "positive argument", "Float64")...
    done (took 1.982856759 seconds)
    (25/30) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.985584779 seconds)
    (26/30) benchmarking ("arg reduction I", "positive argument", "Float32")...
    done (took 1.98540027 seconds)
    (27/30) benchmarking ("small", "positive argument", "Float64")...
    done (took 1.986046651 seconds)
    (28/30) benchmarking ("medium", "positive argument", "Float64")...
    done (took 1.988790446 seconds)
    (29/30) benchmarking ("small", "positive argument", "Float32")...
    done (took 1.980812995 seconds)
    (30/30) benchmarking ("medium", "negative argument", "Float64")...
    done (took 1.982768002 seconds)
  done (took 61.402188406 seconds)
  (10/25) benchmarking "iteration"...
    (1/2) benchmarking "indexed"...
    done (took 2.003690617 seconds)
    (2/2) benchmarking "in"...
    done (took 2.00547941 seconds)
  done (took 5.918301016 seconds)
  (11/25) benchmarking "acosh"...
    (1/8) benchmarking ("one", "Float64")...
    done (took 1.982804549 seconds)
    (2/8) benchmarking ("very large", "positive argument", "Float32")...
    done (took 1.982293081 seconds)
    (3/8) benchmarking ("one", "Float32")...
    done (took 1.984922966 seconds)
    (4/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float64")...
    done (took 1.986094894 seconds)
    (5/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float64")...
    done (took 1.98189176 seconds)
    (6/8) benchmarking ("1 <= abs(x) < 2", "positive argument", "Float32")...
    done (took 1.979749631 seconds)
    (7/8) benchmarking ("2 <= abs(x) < 2^28", "positive argument", "Float32")...
    done (took 1.980646433 seconds)
    (8/8) benchmarking ("very large", "positive argument", "Float64")...
    done (took 1.979211604 seconds)
  done (took 17.771536422 seconds)
  (12/25) benchmarking "arithmetic"...
    (1/596) benchmarking ("sub", "ComplexF32", "UInt64")...
    done (took 1.97842262 seconds)
    (2/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF32")...
    done (took 1.980803293 seconds)
    (3/596) benchmarking ("div", "ComplexF32", "UInt64")...
    done (took 1.976412399 seconds)
    (4/596) benchmarking ("add", "Float32", "Complex{Int64}")...
    done (took 1.978779933 seconds)
    (5/596) benchmarking ("add", "Int64", "Complex{UInt64}")...
    done (took 1.984107068 seconds)
    (6/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.986267432 seconds)
    (7/596) benchmarking ("div", "BigFloat", "Float64")...
    done (took 1.979003054 seconds)
    (8/596) benchmarking ("div", "Complex{BigFloat}", "BigInt")...
    done (took 1.982015927 seconds)
    (9/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.982228224 seconds)
    (10/596) benchmarking ("sub", "BigInt", "BigInt")...
    done (took 1.987524571 seconds)
    (11/596) benchmarking ("div", "ComplexF64", "Float32")...
    done (took 1.983840838 seconds)
    (12/596) benchmarking ("mul", "Complex{Int64}", "BigInt")...
    done (took 1.984752915 seconds)
    (13/596) benchmarking ("sub", "ComplexF64", "Int64")...
    done (took 1.987214093 seconds)
    (14/596) benchmarking ("div", "Complex{UInt64}", "BigInt")...
    done (took 1.982075212 seconds)
    (15/596) benchmarking ("add", "Complex{UInt64}", "ComplexF32")...
    done (took 1.979553189 seconds)
    (16/596) benchmarking ("mul", "BigFloat", "Float64")...
    done (took 1.982868446 seconds)
    (17/596) benchmarking ("mul", "Complex{BigFloat}", "BigFloat")...
    done (took 1.985986183 seconds)
    (18/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.983709793 seconds)
    (19/596) benchmarking ("sub", "Int64", "Complex{BigFloat}")...
    done (took 1.983444245 seconds)
    (20/596) benchmarking ("mul", "Int64", "Float32")...
    done (took 1.98130148 seconds)
    (21/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.985730276 seconds)
    (22/596) benchmarking ("mul", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.979545901 seconds)
    (23/596) benchmarking ("rem type", "Char", "Int64")...
    done (took 1.984674809 seconds)
    (24/596) benchmarking ("add", "Complex{UInt64}", "Float64")...
    done (took 1.983797193 seconds)
    (25/596) benchmarking ("rem type", "Char", "Bool")...
    done (took 1.983460645 seconds)
    (26/596) benchmarking ("sub", "Complex{BigInt}", "UInt64")...
    done (took 1.985960847 seconds)
    (27/596) benchmarking ("div", "Complex{BigInt}", "Float32")...
    done (took 1.985792909 seconds)
    (28/596) benchmarking ("add", "Complex{BigFloat}", "UInt64")...
    done (took 1.982816457 seconds)
    (29/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.979033713 seconds)
    (30/596) benchmarking ("rem type", "UInt64", "Int64")...
    done (took 1.982128911 seconds)
    (31/596) benchmarking ("mul", "ComplexF64", "Complex{BigInt}")...
    done (took 1.987131137 seconds)
    (32/596) benchmarking ("add", "Int64", "Float32")...
    done (took 1.980103379 seconds)
    (33/596) benchmarking ("sub", "UInt64", "Complex{Int64}")...
    done (took 1.979251842 seconds)
    (34/596) benchmarking ("add", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.982598193 seconds)
    (35/596) benchmarking ("add", "Complex{Int64}", "Int64")...
    done (took 1.985317464 seconds)
    (36/596) benchmarking ("sub", "ComplexF32", "Float32")...
    done (took 1.983118535 seconds)
    (37/596) benchmarking ("div", "UInt64", "Complex{BigInt}")...
    done (took 1.982524732 seconds)
    (38/596) benchmarking ("mul", "ComplexF64", "ComplexF64")...
    done (took 1.980988901 seconds)
    (39/596) benchmarking ("div", "ComplexF64", "Complex{Int64}")...
    done (took 1.979701559 seconds)
    (40/596) benchmarking ("mul", "Float32", "Float64")...
    done (took 1.98091259 seconds)
    (41/596) benchmarking ("sub", "Complex{BigInt}", "Float64")...
    done (took 1.983911681 seconds)
    (42/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.981507838 seconds)
    (43/596) benchmarking ("div", "Complex{Int64}", "BigFloat")...
    done (took 1.981957802 seconds)
    (44/596) benchmarking ("div", "BigFloat", "ComplexF32")...
    done (took 1.986331043 seconds)
    (45/596) benchmarking ("sub", "Float64", "Complex{UInt64}")...
    done (took 1.979932239 seconds)
    (46/596) benchmarking ("mul", "Float32", "Complex{UInt64}")...
    done (took 1.983288242 seconds)
    (47/596) benchmarking ("div", "UInt64", "Float64")...
    done (took 1.977683564 seconds)
    (48/596) benchmarking ("add", "ComplexF32", "ComplexF64")...
    done (took 1.978605595 seconds)
    (49/596) benchmarking ("mul", "BigFloat", "BigFloat")...
    done (took 1.979173217 seconds)
    (50/596) benchmarking ("mul", "BigInt", "Complex{Int64}")...
    done (took 1.982258398 seconds)
    (51/596) benchmarking ("div", "Float32", "Float64")...
    done (took 1.990281319 seconds)
    (52/596) benchmarking ("add", "BigFloat", "Complex{BigFloat}")...
    done (took 1.97874025 seconds)
    (53/596) benchmarking ("div", "Int64", "UInt64")...
    done (took 1.976473336 seconds)
    (54/596) benchmarking ("mul", "Int64", "ComplexF32")...
    done (took 1.977016723 seconds)
    (55/596) benchmarking ("add", "Float64", "Complex{BigInt}")...
    done (took 1.982355414 seconds)
    (56/596) benchmarking ("add", "UInt64", "Complex{UInt64}")...
    done (took 1.980413424 seconds)
    (57/596) benchmarking ("div", "ComplexF64", "ComplexF32")...
    done (took 1.981070135 seconds)
    (58/596) benchmarking ("add", "Int64", "Complex{BigInt}")...
    done (took 1.982022376 seconds)
    (59/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.984582539 seconds)
    (60/596) benchmarking ("div", "Int64", "Complex{BigInt}")...
    done (took 1.986515118 seconds)
    (61/596) benchmarking ("sub", "UInt64", "Complex{BigInt}")...
    done (took 1.991400728 seconds)
    (62/596) benchmarking ("div", "BigInt", "Complex{Int64}")...
    done (took 1.999844085 seconds)
    (63/596) benchmarking ("div", "Complex{BigFloat}", "Int64")...
    done (took 1.990204904 seconds)
    (64/596) benchmarking ("div", "Int64", "ComplexF64")...
    done (took 1.96844674 seconds)
    (65/596) benchmarking ("div", "Complex{UInt64}", "UInt64")...
    done (took 1.983223083 seconds)
    (66/596) benchmarking ("mul", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.996252772 seconds)
    (67/596) benchmarking ("sub", "ComplexF64", "ComplexF32")...
    done (took 2.004367258 seconds)
    (68/596) benchmarking ("sub", "BigFloat", "Complex{BigInt}")...
    done (took 1.98359268 seconds)
    (69/596) benchmarking ("sub", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.983578448 seconds)
    (70/596) benchmarking ("sub", "UInt64", "ComplexF32")...
    done (took 1.981190933 seconds)
    (71/596) benchmarking ("div", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.99102743 seconds)
    (72/596) benchmarking ("sub", "Float32", "Float64")...
    done (took 1.981906889 seconds)
    (73/596) benchmarking ("rem type", "Int64", "Int64")...
    done (took 1.982866319 seconds)
    (74/596) benchmarking ("div", "UInt64", "Float32")...
    done (took 1.981457841 seconds)
    (75/596) benchmarking ("div", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.997715346 seconds)
    (76/596) benchmarking ("div", "Complex{Int64}", "Float64")...
    done (took 1.98778898 seconds)
    (77/596) benchmarking ("mul", "Int64", "ComplexF64")...
    done (took 1.981181703 seconds)
    (78/596) benchmarking ("sub", "ComplexF32", "ComplexF32")...
    done (took 1.980793644 seconds)
    (79/596) benchmarking ("mul", "UInt64", "Float32")...
    done (took 1.976368381 seconds)
    (80/596) benchmarking ("div", "ComplexF64", "UInt64")...
    done (took 1.98132324 seconds)
    (81/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.985735025 seconds)
    (82/596) benchmarking ("div", "Complex{UInt64}", "ComplexF64")...
    done (took 1.979633389 seconds)
    (83/596) benchmarking ("sub", "Complex{BigFloat}", "BigFloat")...
    done (took 1.981418715 seconds)
    (84/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF64")...
    done (took 1.981460115 seconds)
    (85/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.988261333 seconds)
    (86/596) benchmarking ("mul", "BigFloat", "Complex{UInt64}")...
    done (took 2.007087802 seconds)
    (87/596) benchmarking ("div", "ComplexF64", "Float64")...
    done (took 1.978475601 seconds)
    (88/596) benchmarking ("div", "Int64", "Complex{UInt64}")...
    done (took 1.978602638 seconds)
    (89/596) benchmarking ("add", "ComplexF32", "BigFloat")...
    done (took 1.97891966 seconds)
    (90/596) benchmarking ("add", "BigInt", "BigInt")...
    done (took 1.981317399 seconds)
    (91/596) benchmarking ("add", "Complex{UInt64}", "UInt64")...
    done (took 1.988797032 seconds)
    (92/596) benchmarking ("sub", "BigInt", "ComplexF32")...
    done (took 1.982748548 seconds)
    (93/596) benchmarking ("sub", "BigInt", "BigFloat")...
    done (took 1.982478786 seconds)
    (94/596) benchmarking ("div", "Int64", "Float32")...
    done (took 1.981938068 seconds)
    (95/596) benchmarking ("sub", "Complex{Int64}", "BigFloat")...
    done (took 1.982752338 seconds)
    (96/596) benchmarking ("div", "Float64", "BigFloat")...
    done (took 1.985759749 seconds)
    (97/596) benchmarking ("mul", "Float64", "ComplexF32")...
    done (took 1.982608822 seconds)
    (98/596) benchmarking ("mul", "Int64", "Complex{UInt64}")...
    done (took 1.982251901 seconds)
    (99/596) benchmarking ("mul", "BigFloat", "BigInt")...
    done (took 1.979489603 seconds)
    (100/596) benchmarking ("div", "Complex{BigInt}", "ComplexF64")...
    done (took 1.988873927 seconds)
    (101/596) benchmarking ("div", "Complex{Int64}", "Float32")...
    done (took 1.985165864 seconds)
    (102/596) benchmarking ("sub", "Float64", "Float64")...
    done (took 1.978041476 seconds)
    (103/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.985895464 seconds)
    (104/596) benchmarking ("mul", "ComplexF64", "Float32")...
    done (took 1.98863376 seconds)
    (105/596) benchmarking ("add", "UInt64", "UInt64")...
    done (took 1.979165735 seconds)
    (106/596) benchmarking ("div", "Complex{Int64}", "ComplexF64")...
    done (took 1.985678208 seconds)
    (107/596) benchmarking ("sub", "BigFloat", "Complex{BigFloat}")...
    done (took 1.979286755 seconds)
    (108/596) benchmarking ("add", "Float64", "ComplexF64")...
    done (took 1.979206668 seconds)
    (109/596) benchmarking ("div", "Float64", "Complex{BigFloat}")...
    done (took 1.987823533 seconds)
    (110/596) benchmarking ("div", "Float64", "ComplexF32")...
    done (took 1.980004899 seconds)
    (111/596) benchmarking ("mul", "UInt64", "ComplexF64")...
    done (took 1.984522924 seconds)
    (112/596) benchmarking ("rem type", "UInt64", "UInt64")...
    done (took 1.980672684 seconds)
    (113/596) benchmarking ("rem type", "UInt64", "BigInt")...
    done (took 1.980559164 seconds)
    (114/596) benchmarking ("add", "ComplexF64", "UInt64")...
    done (took 1.98498484 seconds)
    (115/596) benchmarking ("add", "Int64", "Int64")...
    done (took 1.980515662 seconds)
    (116/596) benchmarking ("sub", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.987774135 seconds)
    (117/596) benchmarking ("sub", "ComplexF64", "Float64")...
    done (took 1.98753859 seconds)
    (118/596) benchmarking ("div", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.98844116 seconds)
    (119/596) benchmarking ("add", "Float64", "BigInt")...
    done (took 1.981838284 seconds)
    (120/596) benchmarking ("div", "ComplexF32", "BigFloat")...
    done (took 1.986175338 seconds)
    (121/596) benchmarking ("mul", "Complex{BigInt}", "Float64")...
    done (took 1.989753258 seconds)
    (122/596) benchmarking ("sub", "BigInt", "ComplexF64")...
    done (took 1.983216958 seconds)
    (123/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.990476889 seconds)
    (124/596) benchmarking ("mul", "ComplexF64", "Float64")...
    done (took 2.001423244 seconds)
    (125/596) benchmarking ("add", "Float32", "Float32")...
    done (took 1.978045379 seconds)
    (126/596) benchmarking ("mul", "ComplexF32", "BigInt")...
    done (took 1.988956005 seconds)
    (127/596) benchmarking ("sub", "BigInt", "Complex{UInt64}")...
    done (took 1.984182037 seconds)
    (128/596) benchmarking ("sub", "Float64", "ComplexF32")...
    done (took 1.98971628 seconds)
    (129/596) benchmarking ("mul", "Complex{BigInt}", "Float32")...
    done (took 1.983895961 seconds)
    (130/596) benchmarking ("add", "Float64", "UInt64")...
    done (took 1.979338068 seconds)
    (131/596) benchmarking ("sub", "Float64", "Complex{BigInt}")...
    done (took 1.987859215 seconds)
    (132/596) benchmarking ("sub", "UInt64", "Float64")...
    done (took 1.977099345 seconds)
    (133/596) benchmarking ("mul", "ComplexF32", "Int64")...
    done (took 1.976571081 seconds)
    (134/596) benchmarking ("sub", "BigFloat", "ComplexF64")...
    done (took 1.977611696 seconds)
    (135/596) benchmarking ("div", "UInt64", "UInt64")...
    done (took 1.976513733 seconds)
    (136/596) benchmarking ("add", "Complex{UInt64}", "ComplexF64")...
    done (took 1.982875408 seconds)
    (137/596) benchmarking ("mul", "Float32", "Int64")...
    done (took 1.977079287 seconds)
    (138/596) benchmarking ("div", "UInt64", "ComplexF64")...
    done (took 1.97831104 seconds)
    (139/596) benchmarking ("mul", "ComplexF32", "UInt64")...
    done (took 1.97698447 seconds)
    (140/596) benchmarking ("add", "ComplexF64", "Complex{UInt64}")...
    done (took 1.979361333 seconds)
    (141/596) benchmarking ("div", "BigInt", "BigFloat")...
    done (took 1.979651993 seconds)
    (142/596) benchmarking ("add", "Complex{BigInt}", "BigFloat")...
    done (took 1.996357656 seconds)
    (143/596) benchmarking ("add", "Complex{BigInt}", "Float32")...
    done (took 1.981543542 seconds)
    (144/596) benchmarking ("sub", "UInt64", "ComplexF64")...
    done (took 1.978814909 seconds)
    (145/596) benchmarking ("div", "Complex{BigInt}", "BigFloat")...
    done (took 1.983264462 seconds)
    (146/596) benchmarking ("sub", "Complex{UInt64}", "Int64")...
    done (took 1.977182176 seconds)
    (147/596) benchmarking ("sub", "Float32", "Complex{BigInt}")...
    done (took 1.98541114 seconds)
    (148/596) benchmarking ("div", "BigInt", "Complex{BigInt}")...
    done (took 1.986959545 seconds)
    (149/596) benchmarking ("sub", "BigFloat", "Float64")...
    done (took 1.977953866 seconds)
    (150/596) benchmarking ("mul", "ComplexF64", "Complex{UInt64}")...
    done (took 1.978841204 seconds)
    (151/596) benchmarking ("add", "ComplexF32", "Int64")...
    done (took 1.98074235 seconds)
    (152/596) benchmarking ("add", "Float32", "Complex{BigInt}")...
    done (took 1.980503473 seconds)
    (153/596) benchmarking ("mul", "Float64", "BigInt")...
    done (took 1.979313392 seconds)
    (154/596) benchmarking ("mul", "Complex{BigFloat}", "Int64")...
    done (took 1.977790018 seconds)
    (155/596) benchmarking ("sub", "Float64", "UInt64")...
    done (took 1.977188306 seconds)
    (156/596) benchmarking ("add", "Int64", "ComplexF32")...
    done (took 1.978162118 seconds)
    (157/596) benchmarking ("sub", "Complex{Int64}", "Int64")...
    done (took 1.980025779 seconds)
    (158/596) benchmarking ("mul", "Float32", "BigFloat")...
    done (took 1.977821916 seconds)
    (159/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.981499793 seconds)
    (160/596) benchmarking ("mul", "Complex{Int64}", "Float64")...
    done (took 1.979109329 seconds)
    (161/596) benchmarking ("div", "Float32", "Complex{Int64}")...
    done (took 1.979328957 seconds)
    (162/596) benchmarking ("sub", "UInt64", "BigInt")...
    done (took 1.982879566 seconds)
    (163/596) benchmarking ("add", "ComplexF32", "UInt64")...
    done (took 1.983469303 seconds)
    (164/596) benchmarking ("add", "Int64", "Complex{Int64}")...
    done (took 1.97924597 seconds)
    (165/596) benchmarking ("sub", "Int64", "ComplexF64")...
    done (took 1.978321813 seconds)
    (166/596) benchmarking ("add", "BigInt", "BigFloat")...
    done (took 1.980982415 seconds)
    (167/596) benchmarking ("div", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.982180899 seconds)
    (168/596) benchmarking ("div", "Complex{Int64}", "Int64")...
    done (took 1.980616964 seconds)
    (169/596) benchmarking ("mul", "BigFloat", "Complex{BigFloat}")...
    done (took 1.979954264 seconds)
    (170/596) benchmarking ("mul", "UInt64", "Complex{BigFloat}")...
    done (took 1.983480765 seconds)
    (171/596) benchmarking ("add", "ComplexF32", "BigInt")...
    done (took 1.983314792 seconds)
    (172/596) benchmarking ("div", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.982047664 seconds)
    (173/596) benchmarking ("div", "Complex{Int64}", "BigInt")...
    done (took 1.984260999 seconds)
    (174/596) benchmarking ("mul", "UInt64", "Int64")...
    done (took 1.979830306 seconds)
    (175/596) benchmarking ("div", "Float32", "UInt64")...
    done (took 1.977597873 seconds)
    (176/596) benchmarking ("sub", "ComplexF32", "ComplexF64")...
    done (took 1.98006763 seconds)
    (177/596) benchmarking ("div", "Int64", "Float64")...
    done (took 1.980537597 seconds)
    (178/596) benchmarking ("mul", "BigFloat", "Int64")...
    done (took 1.975986971 seconds)
    (179/596) benchmarking ("mul", "Int64", "Complex{BigInt}")...
    done (took 1.979360367 seconds)
    (180/596) benchmarking ("add", "ComplexF64", "Complex{BigInt}")...
    done (took 1.989393145 seconds)
    (181/596) benchmarking ("add", "Complex{Int64}", "BigInt")...
    done (took 1.981913745 seconds)
    (182/596) benchmarking ("sub", "BigFloat", "Complex{Int64}")...
    done (took 1.986138903 seconds)
    (183/596) benchmarking ("div", "ComplexF32", "Float32")...
    done (took 1.978928968 seconds)
    (184/596) benchmarking ("div", "BigFloat", "Complex{BigInt}")...
    done (took 1.985269813 seconds)
    (185/596) benchmarking ("add", "Complex{Int64}", "Float32")...
    done (took 1.977569497 seconds)
    (186/596) benchmarking ("add", "BigFloat", "Complex{Int64}")...
    done (took 1.979472968 seconds)
    (187/596) benchmarking ("sub", "Complex{BigFloat}", "UInt64")...
    done (took 1.980033179 seconds)
    (188/596) benchmarking ("add", "ComplexF64", "Float32")...
    done (took 1.978923359 seconds)
    (189/596) benchmarking ("div", "ComplexF64", "Complex{UInt64}")...
    done (took 1.978617622 seconds)
    (190/596) benchmarking ("rem type", "Int64", "UInt64")...
    done (took 1.975790292 seconds)
    (191/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF32")...
    done (took 1.977686242 seconds)
    (192/596) benchmarking ("mul", "BigInt", "Complex{UInt64}")...
    done (took 1.983612529 seconds)
    (193/596) benchmarking ("div", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.998110741 seconds)
    (194/596) benchmarking ("add", "BigInt", "ComplexF32")...
    done (took 1.985690394 seconds)
    (195/596) benchmarking ("add", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.980607409 seconds)
    (196/596) benchmarking ("mul", "Int64", "BigInt")...
    done (took 1.979728903 seconds)
    (197/596) benchmarking ("add", "BigInt", "UInt64")...
    done (took 1.982055331 seconds)
    (198/596) benchmarking ("sub", "UInt64", "Float32")...
    done (took 1.982549138 seconds)
    (199/596) benchmarking ("div", "Complex{BigInt}", "Float64")...
    done (took 1.982929699 seconds)
    (200/596) benchmarking ("mul", "ComplexF32", "Float32")...
    done (took 1.980497189 seconds)
    (201/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.979620551 seconds)
    (202/596) benchmarking ("mul", "BigFloat", "ComplexF64")...
    done (took 1.982089461 seconds)
    (203/596) benchmarking ("div", "Float64", "Complex{UInt64}")...
    done (took 1.981903998 seconds)
    (204/596) benchmarking ("mul", "Float64", "ComplexF64")...
    done (took 1.978363501 seconds)
    (205/596) benchmarking ("sub", "Complex{Int64}", "Float32")...
    done (took 1.97849636 seconds)
    (206/596) benchmarking ("div", "Complex{UInt64}", "BigFloat")...
    done (took 1.982290511 seconds)
    (207/596) benchmarking ("sub", "BigFloat", "UInt64")...
    done (took 1.981554491 seconds)
    (208/596) benchmarking ("rem type", "Char", "UInt64")...
    done (took 1.976624833 seconds)
    (209/596) benchmarking ("mul", "BigInt", "ComplexF64")...
    done (took 1.985220443 seconds)
    (210/596) benchmarking ("div", "UInt64", "Complex{UInt64}")...
    done (took 1.980152439 seconds)
    (211/596) benchmarking ("add", "Int64", "Float64")...
    done (took 1.979453619 seconds)
    (212/596) benchmarking ("div", "Complex{BigFloat}", "UInt64")...
    done (took 1.982749524 seconds)
    (213/596) benchmarking ("sub", "Float32", "ComplexF32")...
    done (took 1.979629562 seconds)
    (214/596) benchmarking ("add", "ComplexF64", "BigFloat")...
    done (took 1.983196675 seconds)
    (215/596) benchmarking ("mul", "Float64", "UInt64")...
    done (took 1.981469954 seconds)
    (216/596) benchmarking ("sub", "BigFloat", "BigFloat")...
    done (took 1.981167754 seconds)
    (217/596) benchmarking ("div", "BigInt", "Int64")...
    done (took 1.981842889 seconds)
    (218/596) benchmarking ("add", "Float32", "Complex{UInt64}")...
    done (took 1.981220473 seconds)
    (219/596) benchmarking ("div", "Float32", "Complex{BigFloat}")...
    done (took 1.98842623 seconds)
    (220/596) benchmarking ("mul", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.985072686 seconds)
    (221/596) benchmarking ("add", "Float64", "Float64")...
    done (took 1.980857094 seconds)
    (222/596) benchmarking ("mul", "UInt64", "Complex{UInt64}")...
    done (took 1.979244784 seconds)
    (223/596) benchmarking ("mul", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.983442084 seconds)
    (224/596) benchmarking ("add", "Complex{Int64}", "ComplexF64")...
    done (took 1.980184884 seconds)
    (225/596) benchmarking ("add", "ComplexF32", "Complex{UInt64}")...
    done (took 1.980664123 seconds)
    (226/596) benchmarking ("sub", "BigInt", "Complex{BigFloat}")...
    done (took 1.982171307 seconds)
    (227/596) benchmarking ("mul", "ComplexF64", "BigInt")...
    done (took 1.985278759 seconds)
    (228/596) benchmarking ("mul", "Int64", "BigFloat")...
    done (took 1.982841865 seconds)
    (229/596) benchmarking ("sub", "Complex{BigFloat}", "Float64")...
    done (took 1.983216077 seconds)
    (230/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.990437929 seconds)
    (231/596) benchmarking ("div", "BigFloat", "Float32")...
    done (took 1.982185536 seconds)
    (232/596) benchmarking ("add", "Int64", "BigFloat")...
    done (took 1.974558608 seconds)
    (233/596) benchmarking ("sub", "UInt64", "BigFloat")...
    done (took 1.981005458 seconds)
    (234/596) benchmarking ("sub", "Float32", "Complex{Int64}")...
    done (took 1.98023353 seconds)
    (235/596) benchmarking ("mul", "ComplexF32", "BigFloat")...
    done (took 1.9828459 seconds)
    (236/596) benchmarking ("mul", "Complex{Int64}", "ComplexF32")...
    done (took 1.981073317 seconds)
    (237/596) benchmarking ("sub", "Complex{Int64}", "BigInt")...
    done (took 1.984307836 seconds)
    (238/596) benchmarking ("add", "Float32", "ComplexF32")...
    done (took 1.989099512 seconds)
    (239/596) benchmarking ("sub", "ComplexF32", "Complex{BigInt}")...
    done (took 1.983560062 seconds)
    (240/596) benchmarking ("mul", "Float64", "Float64")...
    done (took 1.980166661 seconds)
    (241/596) benchmarking ("div", "ComplexF64", "BigInt")...
    done (took 1.984025385 seconds)
    (242/596) benchmarking ("rem type", "Bool", "Bool")...
    done (took 1.979925624 seconds)
    (243/596) benchmarking ("add", "ComplexF64", "BigInt")...
    done (took 1.985810463 seconds)
    (244/596) benchmarking ("mul", "Complex{UInt64}", "UInt64")...
    done (took 1.980377357 seconds)
    (245/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.982565011 seconds)
    (246/596) benchmarking ("add", "Float32", "ComplexF64")...
    done (took 1.981321357 seconds)
    (247/596) benchmarking ("sub", "ComplexF32", "BigFloat")...
    done (took 1.982340087 seconds)
    (248/596) benchmarking ("mul", "Float32", "ComplexF64")...
    done (took 1.984781821 seconds)
    (249/596) benchmarking ("sub", "Int64", "ComplexF32")...
    done (took 1.98106761 seconds)
    (250/596) benchmarking ("div", "BigFloat", "Complex{UInt64}")...
    done (took 1.988448066 seconds)
    (251/596) benchmarking ("sub", "Int64", "Int64")...
    done (took 1.98131779 seconds)
    (252/596) benchmarking ("mul", "Complex{UInt64}", "BigFloat")...
    done (took 1.983739413 seconds)
    (253/596) benchmarking ("div", "Float64", "Float32")...
    done (took 1.981533639 seconds)
    (254/596) benchmarking ("div", "UInt64", "BigInt")...
    done (took 1.98341018 seconds)
    (255/596) benchmarking ("add", "BigInt", "Float64")...
    done (took 1.981627887 seconds)
    (256/596) benchmarking ("mul", "BigFloat", "ComplexF32")...
    done (took 1.983302732 seconds)
    (257/596) benchmarking ("add", "Complex{Int64}", "Float64")...
    done (took 1.981535001 seconds)
    (258/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.988107406 seconds)
    (259/596) benchmarking ("mul", "Float64", "Complex{Int64}")...
    done (took 1.989023911 seconds)
    (260/596) benchmarking ("div", "Int64", "Complex{BigFloat}")...
    done (took 1.987397331 seconds)
    (261/596) benchmarking ("add", "BigFloat", "Float32")...
    done (took 1.981470398 seconds)
    (262/596) benchmarking ("div", "Float32", "BigInt")...
    done (took 1.985625452 seconds)
    (263/596) benchmarking ("mul", "ComplexF64", "BigFloat")...
    done (took 1.964891331 seconds)
    (264/596) benchmarking ("sub", "BigInt", "UInt64")...
    done (took 1.982559451 seconds)
    (265/596) benchmarking ("sub", "Float32", "UInt64")...
    done (took 1.983717437 seconds)
    (266/596) benchmarking ("mul", "Complex{BigInt}", "BigFloat")...
    done (took 1.982661901 seconds)
    (267/596) benchmarking ("div", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.994244658 seconds)
    (268/596) benchmarking ("add", "Float32", "Complex{BigFloat}")...
    done (took 1.992716239 seconds)
    (269/596) benchmarking ("mul", "UInt64", "ComplexF32")...
    done (took 1.981635851 seconds)
    (270/596) benchmarking ("sub", "ComplexF32", "Complex{Int64}")...
    done (took 1.981156758 seconds)
    (271/596) benchmarking ("sub", "Int64", "Complex{UInt64}")...
    done (took 1.982154433 seconds)
    (272/596) benchmarking ("mul", "Complex{BigFloat}", "Float64")...
    done (took 1.985135371 seconds)
    (273/596) benchmarking ("mul", "Float32", "Complex{Int64}")...
    done (took 1.987222958 seconds)
    (274/596) benchmarking ("sub", "Float64", "Complex{Int64}")...
    done (took 1.986228628 seconds)
    (275/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 1.991907633 seconds)
    (276/596) benchmarking ("mul", "Float64", "BigFloat")...
    done (took 1.984373366 seconds)
    (277/596) benchmarking ("add", "Int64", "BigInt")...
    done (took 1.984555165 seconds)
    (278/596) benchmarking ("sub", "ComplexF32", "Complex{UInt64}")...
    done (took 1.973677736 seconds)
    (279/596) benchmarking ("add", "Float64", "ComplexF32")...
    done (took 1.98549822 seconds)
    (280/596) benchmarking ("sub", "Complex{Int64}", "ComplexF64")...
    done (took 1.985088023 seconds)
    (281/596) benchmarking ("div", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.992769021 seconds)
    (282/596) benchmarking ("sub", "Complex{UInt64}", "Complex{BigFloat}")...
    done (took 1.986301435 seconds)
    (283/596) benchmarking ("add", "ComplexF32", "Complex{BigInt}")...
    done (took 1.990068053 seconds)
    (284/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.989562203 seconds)
    (285/596) benchmarking ("add", "Complex{BigFloat}", "BigInt")...
    done (took 1.988696937 seconds)
    (286/596) benchmarking ("mul", "Complex{Int64}", "BigFloat")...
    done (took 1.987466645 seconds)
    (287/596) benchmarking ("add", "Float32", "Float64")...
    done (took 1.985626481 seconds)
    (288/596) benchmarking ("mul", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.990839765 seconds)
    (289/596) benchmarking ("add", "ComplexF64", "ComplexF64")...
    done (took 1.987346264 seconds)
    (290/596) benchmarking ("add", "Complex{BigInt}", "BigInt")...
    done (took 1.988605834 seconds)
    (291/596) benchmarking ("mul", "UInt64", "UInt64")...
    done (took 1.990132204 seconds)
    (292/596) benchmarking ("div", "Float32", "Complex{UInt64}")...
    done (took 1.986405624 seconds)
    (293/596) benchmarking ("mul", "BigFloat", "Complex{Int64}")...
    done (took 1.98999801 seconds)
    (294/596) benchmarking ("add", "ComplexF32", "ComplexF32")...
    done (took 1.986129405 seconds)
    (295/596) benchmarking ("div", "ComplexF32", "Complex{BigInt}")...
    done (took 1.995961705 seconds)
    (296/596) benchmarking ("add", "Complex{UInt64}", "Float32")...
    done (took 1.986754969 seconds)
    (297/596) benchmarking ("sub", "Complex{BigFloat}", "Int64")...
    done (took 1.987186108 seconds)
    (298/596) benchmarking ("div", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.997614211 seconds)
    (299/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.987578591 seconds)
    (300/596) benchmarking ("sub", "BigFloat", "BigInt")...
    done (took 1.986738727 seconds)
    (301/596) benchmarking ("sub", "Complex{UInt64}", "BigFloat")...
    done (took 1.987897414 seconds)
    (302/596) benchmarking ("mul", "ComplexF32", "Complex{Int64}")...
    done (took 1.985515727 seconds)
    (303/596) benchmarking ("mul", "BigFloat", "Complex{BigInt}")...
    done (took 1.988986832 seconds)
    (304/596) benchmarking ("add", "Int64", "Complex{BigFloat}")...
    done (took 1.986126084 seconds)
    (305/596) benchmarking ("sub", "BigFloat", "Int64")...
    done (took 1.985245977 seconds)
    (306/596) benchmarking ("mul", "BigInt", "Float64")...
    done (took 1.986248275 seconds)
    (307/596) benchmarking ("mul", "Complex{UInt64}", "Float64")...
    done (took 1.984428313 seconds)
    (308/596) benchmarking ("mul", "BigInt", "Complex{BigInt}")...
    done (took 1.993864372 seconds)
    (309/596) benchmarking ("mul", "Complex{BigFloat}", "Float32")...
    done (took 1.993366061 seconds)
    (310/596) benchmarking ("add", "Complex{UInt64}", "BigInt")...
    done (took 1.987776735 seconds)
    (311/596) benchmarking ("div", "Complex{Int64}", "UInt64")...
    done (took 1.989874022 seconds)
    (312/596) benchmarking ("sub", "Complex{BigInt}", "BigInt")...
    done (took 1.986092191 seconds)
    (313/596) benchmarking ("div", "BigFloat", "Complex{BigFloat}")...
    done (took 1.998241459 seconds)
    (314/596) benchmarking ("sub", "Complex{UInt64}", "ComplexF64")...
    done (took 1.984301061 seconds)
    (315/596) benchmarking ("div", "Complex{Int64}", "ComplexF32")...
    done (took 1.984481749 seconds)
    (316/596) benchmarking ("add", "Float64", "Complex{UInt64}")...
    done (took 1.983994445 seconds)
    (317/596) benchmarking ("mul", "Complex{BigInt}", "BigInt")...
    done (took 1.988011667 seconds)
    (318/596) benchmarking ("sub", "Complex{Int64}", "UInt64")...
    done (took 1.992873131 seconds)
    (319/596) benchmarking ("div", "Int64", "Int64")...
    done (took 1.983795715 seconds)
    (320/596) benchmarking ("mul", "UInt64", "BigFloat")...
    done (took 1.984427818 seconds)
    (321/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.992891753 seconds)
    (322/596) benchmarking ("add", "Float32", "BigFloat")...
    done (took 1.9848706 seconds)
    (323/596) benchmarking ("rem type", "Bool", "BigInt")...
    done (took 1.987960409 seconds)
    (324/596) benchmarking ("sub", "Int64", "Complex{Int64}")...
    done (took 1.986916593 seconds)
    (325/596) benchmarking ("sub", "Float32", "Float32")...
    done (took 1.984559464 seconds)
    (326/596) benchmarking ("sub", "UInt64", "Complex{UInt64}")...
    done (took 1.985474126 seconds)
    (327/596) benchmarking ("div", "UInt64", "Complex{Int64}")...
    done (took 1.985470819 seconds)
    (328/596) benchmarking ("mul", "UInt64", "BigInt")...
    done (took 1.986131992 seconds)
    (329/596) benchmarking ("sub", "UInt64", "Complex{BigFloat}")...
    done (took 1.987680816 seconds)
    (330/596) benchmarking ("add", "Complex{BigInt}", "ComplexF64")...
    done (took 1.988047393 seconds)
    (331/596) benchmarking ("mul", "Int64", "Int64")...
    done (took 1.984335563 seconds)
    (332/596) benchmarking ("add", "Int64", "ComplexF64")...
    done (took 1.984539542 seconds)
    (333/596) benchmarking ("sub", "Int64", "Float32")...
    done (took 1.988856799 seconds)
    (334/596) benchmarking ("add", "BigFloat", "BigFloat")...
    done (took 1.985605239 seconds)
    (335/596) benchmarking ("add", "Complex{BigInt}", "ComplexF32")...
    done (took 1.990075652 seconds)
    (336/596) benchmarking ("sub", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.986616917 seconds)
    (337/596) benchmarking ("mul", "BigInt", "Complex{BigFloat}")...
    done (took 1.985397097 seconds)
    (338/596) benchmarking ("mul", "BigFloat", "Float32")...
    done (took 1.990561717 seconds)
    (339/596) benchmarking ("sub", "Int64", "UInt64")...
    done (took 1.983247051 seconds)
    (340/596) benchmarking ("div", "Complex{UInt64}", "Float64")...
    done (took 1.985109796 seconds)
    (341/596) benchmarking ("mul", "ComplexF32", "Float64")...
    done (took 1.980924702 seconds)
    (342/596) benchmarking ("add", "ComplexF64", "Float64")...
    done (took 1.962115947 seconds)
    (343/596) benchmarking ("mul", "Complex{Int64}", "ComplexF64")...
    done (took 1.982717744 seconds)
    (344/596) benchmarking ("rem type", "Bool", "Int64")...
    done (took 1.985232743 seconds)
    (345/596) benchmarking ("sub", "Float32", "Int64")...
    done (took 1.984108759 seconds)
    (346/596) benchmarking ("div", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 1.993337024 seconds)
    (347/596) benchmarking ("mul", "ComplexF64", "Int64")...
    done (took 1.984598847 seconds)
    (348/596) benchmarking ("rem type", "Int64", "BigInt")...
    done (took 1.984945501 seconds)
    (349/596) benchmarking ("sub", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.989174629 seconds)
    (350/596) benchmarking ("sub", "Float32", "Complex{UInt64}")...
    done (took 1.984611622 seconds)
    (351/596) benchmarking ("div", "Float32", "Complex{BigInt}")...
    done (took 1.995132141 seconds)
    (352/596) benchmarking ("div", "ComplexF32", "ComplexF64")...
    done (took 1.98536905 seconds)
    (353/596) benchmarking ("add", "Complex{UInt64}", "Int64")...
    done (took 1.985329495 seconds)
    (354/596) benchmarking ("sub", "Float64", "BigInt")...
    done (took 1.986589411 seconds)
    (355/596) benchmarking ("mul", "Float32", "ComplexF32")...
    done (took 1.985180689 seconds)
    (356/596) benchmarking ("div", "Int64", "BigInt")...
    done (took 1.988748759 seconds)
    (357/596) benchmarking ("sub", "UInt64", "Int64")...
    done (took 1.984914178 seconds)
    (358/596) benchmarking ("sub", "Complex{Int64}", "Float64")...
    done (took 1.985697067 seconds)
    (359/596) benchmarking ("add", "BigFloat", "UInt64")...
    done (took 1.985462997 seconds)
    (360/596) benchmarking ("rem type", "Int64", "Bool")...
    done (took 1.985801502 seconds)
    (361/596) benchmarking ("mul", "BigInt", "BigInt")...
    done (took 1.986359152 seconds)
    (362/596) benchmarking ("div", "BigFloat", "ComplexF64")...
    done (took 1.99691735 seconds)
    (363/596) benchmarking ("div", "BigInt", "ComplexF32")...
    done (took 1.99264232 seconds)
    (364/596) benchmarking ("div", "BigInt", "Float64")...
    done (took 1.989244013 seconds)
    (365/596) benchmarking ("div", "Complex{BigInt}", "Int64")...
    done (took 1.988035295 seconds)
    (366/596) benchmarking ("mul", "Complex{Int64}", "UInt64")...
    done (took 1.986157065 seconds)
    (367/596) benchmarking ("add", "Complex{BigFloat}", "Int64")...
    done (took 1.986863995 seconds)
    (368/596) benchmarking ("mul", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.99459223 seconds)
    (369/596) benchmarking ("div", "Complex{UInt64}", "ComplexF32")...
    done (took 2.00547905 seconds)
    (370/596) benchmarking ("mul", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.985041419 seconds)
    (371/596) benchmarking ("sub", "Complex{BigInt}", "Int64")...
    done (took 1.987932019 seconds)
    (372/596) benchmarking ("div", "UInt64", "Int64")...
    done (took 1.989412024 seconds)
    (373/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF64")...
    done (took 1.994121984 seconds)
    (374/596) benchmarking ("add", "Complex{BigInt}", "Int64")...
    done (took 1.988195943 seconds)
    (375/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigInt}")...
    done (took 1.990909074 seconds)
    (376/596) benchmarking ("add", "Complex{UInt64}", "Complex{BigInt}")...
    done (took 1.989035286 seconds)
    (377/596) benchmarking ("mul", "Complex{UInt64}", "Int64")...
    done (took 1.992398034 seconds)
    (378/596) benchmarking ("add", "Complex{Int64}", "BigFloat")...
    done (took 1.989037109 seconds)
    (379/596) benchmarking ("div", "BigFloat", "Int64")...
    done (took 1.98630175 seconds)
    (380/596) benchmarking ("sub", "Complex{UInt64}", "BigInt")...
    done (took 1.990111606 seconds)
    (381/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.99745565 seconds)
    (382/596) benchmarking ("add", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.987280831 seconds)
    (383/596) benchmarking ("div", "ComplexF32", "Complex{Int64}")...
    done (took 1.987352064 seconds)
    (384/596) benchmarking ("add", "UInt64", "Float32")...
    done (took 1.984860202 seconds)
    (385/596) benchmarking ("mul", "ComplexF64", "Complex{BigFloat}")...
    done (took 1.992013267 seconds)
    (386/596) benchmarking ("div", "Int64", "BigFloat")...
    done (took 1.988966032 seconds)
    (387/596) benchmarking ("add", "Float32", "Int64")...
    done (took 1.986852717 seconds)
    (388/596) benchmarking ("add", "Float32", "BigInt")...
    done (took 1.988337168 seconds)
    (389/596) benchmarking ("div", "Complex{BigFloat}", "BigFloat")...
    done (took 1.990832412 seconds)
    (390/596) benchmarking ("add", "BigInt", "Int64")...
    done (took 1.987681233 seconds)
    (391/596) benchmarking ("div", "BigFloat", "Complex{Int64}")...
    done (took 1.998112685 seconds)
    (392/596) benchmarking ("sub", "ComplexF32", "Int64")...
    done (took 1.986249842 seconds)
    (393/596) benchmarking ("mul", "BigInt", "Float32")...
    done (took 1.989832208 seconds)
    (394/596) benchmarking ("div", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.99062491 seconds)
    (395/596) benchmarking ("rem type", "BigInt", "UInt64")...
    done (took 1.986853238 seconds)
    (396/596) benchmarking ("sub", "ComplexF64", "Complex{Int64}")...
    done (took 1.988276556 seconds)
    (397/596) benchmarking ("sub", "Complex{Int64}", "ComplexF32")...
    done (took 1.987640247 seconds)
    (398/596) benchmarking ("sub", "Float32", "Complex{BigFloat}")...
    done (took 1.990146201 seconds)
    (399/596) benchmarking ("sub", "BigFloat", "Complex{UInt64}")...
    done (took 1.989564427 seconds)
    (400/596) benchmarking ("sub", "ComplexF64", "Float32")...
    done (took 1.986407949 seconds)
    (401/596) benchmarking ("div", "Float64", "Complex{Int64}")...
    done (took 1.986953525 seconds)
    (402/596) benchmarking ("add", "UInt64", "Complex{BigInt}")...
    done (took 1.989558206 seconds)
    (403/596) benchmarking ("mul", "Complex{BigFloat}", "BigInt")...
    done (took 1.991158551 seconds)
    (404/596) benchmarking ("div", "BigFloat", "UInt64")...
    done (took 1.987448416 seconds)
    (405/596) benchmarking ("add", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.991513398 seconds)
    (406/596) benchmarking ("add", "Float64", "Complex{BigFloat}")...
    done (took 1.995460283 seconds)
    (407/596) benchmarking ("mul", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.988206006 seconds)
    (408/596) benchmarking ("mul", "Float64", "Complex{UInt64}")...
    done (took 1.988186177 seconds)
    (409/596) benchmarking ("div", "BigFloat", "BigFloat")...
    done (took 1.989858639 seconds)
    (410/596) benchmarking ("div", "Complex{UInt64}", "Int64")...
    done (took 1.987072108 seconds)
    (411/596) benchmarking ("sub", "Complex{BigInt}", "Float32")...
    done (took 1.991145778 seconds)
    (412/596) benchmarking ("add", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.988546614 seconds)
    (413/596) benchmarking ("mul", "BigFloat", "UInt64")...
    done (took 1.987642002 seconds)
    (414/596) benchmarking ("div", "UInt64", "BigFloat")...
    done (took 1.991296705 seconds)
    (415/596) benchmarking ("mul", "Float32", "UInt64")...
    done (took 1.988494438 seconds)
    (416/596) benchmarking ("sub", "BigInt", "Float64")...
    done (took 1.990455656 seconds)
    (417/596) benchmarking ("sub", "Complex{Int64}", "Complex{BigInt}")...
    done (took 1.992228299 seconds)
    (418/596) benchmarking ("mul", "Complex{BigFloat}", "UInt64")...
    done (took 1.995570467 seconds)
    (419/596) benchmarking ("add", "Complex{BigFloat}", "Complex{UInt64}")...
    done (took 1.99006453 seconds)
    (420/596) benchmarking ("sub", "Int64", "Float64")...
    done (took 1.987594599 seconds)
    (421/596) benchmarking ("mul", "Int64", "UInt64")...
    done (took 1.98884822 seconds)
    (422/596) benchmarking ("mul", "BigInt", "ComplexF32")...
    done (took 1.99282529 seconds)
    (423/596) benchmarking ("div", "BigFloat", "BigInt")...
    done (took 1.988385774 seconds)
    (424/596) benchmarking ("mul", "ComplexF32", "ComplexF64")...
    done (took 1.989224768 seconds)
    (425/596) benchmarking ("add", "Complex{BigFloat}", "Float64")...
    done (took 1.991092455 seconds)
    (426/596) benchmarking ("div", "Float64", "Complex{BigInt}")...
    done (took 1.99927863 seconds)
    (427/596) benchmarking ("add", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.992252059 seconds)
    (428/596) benchmarking ("mul", "Complex{BigInt}", "UInt64")...
    done (took 1.998310345 seconds)
    (429/596) benchmarking ("add", "BigFloat", "Complex{UInt64}")...
    done (took 1.996138132 seconds)
    (430/596) benchmarking ("mul", "Int64", "Complex{Int64}")...
    done (took 1.990100124 seconds)
    (431/596) benchmarking ("sub", "BigInt", "Int64")...
    done (took 1.988857084 seconds)
    (432/596) benchmarking ("sub", "Complex{BigInt}", "Complex{Int64}")...
    done (took 1.996475399 seconds)
    (433/596) benchmarking ("sub", "ComplexF64", "UInt64")...
    done (took 1.995572701 seconds)
    (434/596) benchmarking ("sub", "ComplexF64", "ComplexF64")...
    done (took 1.989568982 seconds)
    (435/596) benchmarking ("mul", "BigInt", "BigFloat")...
    done (took 1.98881799 seconds)
    (436/596) benchmarking ("sub", "Complex{UInt64}", "Float64")...
    done (took 1.989869023 seconds)
    (437/596) benchmarking ("div", "Complex{BigFloat}", "Float32")...
    done (took 1.993044114 seconds)
    (438/596) benchmarking ("add", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.991636147 seconds)
    (439/596) benchmarking ("sub", "Complex{BigFloat}", "BigInt")...
    done (took 1.991003311 seconds)
    (440/596) benchmarking ("mul", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.98933476 seconds)
    (441/596) benchmarking ("sub", "Int64", "BigInt")...
    done (took 1.98983568 seconds)
    (442/596) benchmarking ("sub", "Complex{BigFloat}", "Float32")...
    done (took 1.994192048 seconds)
    (443/596) benchmarking ("div", "ComplexF32", "Int64")...
    done (took 1.989938857 seconds)
    (444/596) benchmarking ("sub", "Float32", "BigFloat")...
    done (took 1.99064127 seconds)
    (445/596) benchmarking ("div", "Float32", "ComplexF64")...
    done (took 1.989563417 seconds)
    (446/596) benchmarking ("add", "UInt64", "ComplexF32")...
    done (took 1.989995625 seconds)
    (447/596) benchmarking ("add", "Complex{BigInt}", "Float64")...
    done (took 1.993740415 seconds)
    (448/596) benchmarking ("add", "Complex{BigInt}", "UInt64")...
    done (took 1.992830831 seconds)
    (449/596) benchmarking ("sub", "Complex{BigInt}", "BigFloat")...
    done (took 1.994706765 seconds)
    (450/596) benchmarking ("div", "Complex{UInt64}", "Float32")...
    done (took 1.990136818 seconds)
    (451/596) benchmarking ("add", "Float64", "Float32")...
    done (took 1.990627849 seconds)
    (452/596) benchmarking ("rem type", "BigInt", "BigInt")...
    done (took 1.990039902 seconds)
    (453/596) benchmarking ("mul", "Int64", "Complex{BigFloat}")...
    done (took 1.992205414 seconds)
    (454/596) benchmarking ("add", "BigInt", "Complex{BigFloat}")...
    done (took 1.991450172 seconds)
    (455/596) benchmarking ("mul", "Float32", "Complex{BigFloat}")...
    done (took 1.993767816 seconds)
    (456/596) benchmarking ("sub", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.99156614 seconds)
    (457/596) benchmarking ("div", "UInt64", "ComplexF32")...
    done (took 1.989612417 seconds)
    (458/596) benchmarking ("sub", "ComplexF32", "BigInt")...
    done (took 1.992337175 seconds)
    (459/596) benchmarking ("add", "BigInt", "Complex{BigInt}")...
    done (took 1.992663657 seconds)
    (460/596) benchmarking ("mul", "ComplexF32", "Complex{UInt64}")...
    done (took 1.993914459 seconds)
    (461/596) benchmarking ("mul", "UInt64", "Float64")...
    done (took 1.990954997 seconds)
    (462/596) benchmarking ("mul", "Complex{UInt64}", "ComplexF32")...
    done (took 1.991903279 seconds)
    (463/596) benchmarking ("div", "Complex{BigInt}", "UInt64")...
    done (took 1.993180314 seconds)
    (464/596) benchmarking ("div", "ComplexF32", "ComplexF32")...
    done (took 1.990836711 seconds)
    (465/596) benchmarking ("add", "UInt64", "Float64")...
    done (took 1.991909705 seconds)
    (466/596) benchmarking ("add", "UInt64", "BigFloat")...
    done (took 1.990578417 seconds)
    (467/596) benchmarking ("add", "BigFloat", "BigInt")...
    done (took 1.99162177 seconds)
    (468/596) benchmarking ("div", "ComplexF32", "Complex{UInt64}")...
    done (took 1.990633582 seconds)
    (469/596) benchmarking ("mul", "UInt64", "Complex{BigInt}")...
    done (took 1.994657161 seconds)
    (470/596) benchmarking ("sub", "Int64", "BigFloat")...
    done (took 1.997593277 seconds)
    (471/596) benchmarking ("mul", "Float64", "Int64")...
    done (took 1.991965221 seconds)
    (472/596) benchmarking ("add", "Complex{UInt64}", "BigFloat")...
    done (took 1.99328673 seconds)
    (473/596) benchmarking ("add", "BigInt", "Float32")...
    done (took 1.993244963 seconds)
    (474/596) benchmarking ("div", "ComplexF64", "BigFloat")...
    done (took 1.996143972 seconds)
    (475/596) benchmarking ("mul", "ComplexF64", "UInt64")...
    done (took 1.993402893 seconds)
    (476/596) benchmarking ("add", "ComplexF64", "ComplexF32")...
    done (took 1.991879774 seconds)
    (477/596) benchmarking ("add", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.992384866 seconds)
    (478/596) benchmarking ("mul", "Float64", "Float32")...
    done (took 1.991916695 seconds)
    (479/596) benchmarking ("div", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.001469285 seconds)
    (480/596) benchmarking ("sub", "Float64", "Int64")...
    done (took 1.991965002 seconds)
    (481/596) benchmarking ("sub", "ComplexF32", "Float64")...
    done (took 1.991184852 seconds)
    (482/596) benchmarking ("sub", "BigFloat", "Float32")...
    done (took 1.992883313 seconds)
    (483/596) benchmarking ("add", "ComplexF32", "Complex{Int64}")...
    done (took 1.991902107 seconds)
    (484/596) benchmarking ("div", "ComplexF32", "BigInt")...
    done (took 1.998122585 seconds)
    (485/596) benchmarking ("add", "Complex{BigFloat}", "Float32")...
    done (took 1.994396644 seconds)
    (486/596) benchmarking ("mul", "ComplexF32", "Complex{BigFloat}")...
    done (took 1.99749619 seconds)
    (487/596) benchmarking ("sub", "Complex{UInt64}", "Complex{Int64}")...
    done (took 1.99332363 seconds)
    (488/596) benchmarking ("add", "BigFloat", "Int64")...
    done (took 1.992736322 seconds)
    (489/596) benchmarking ("add", "Float64", "Int64")...
    done (took 1.99238386 seconds)
    (490/596) benchmarking ("add", "Complex{BigInt}", "Complex{UInt64}")...
    done (took 1.994720914 seconds)
    (491/596) benchmarking ("mul", "BigInt", "Int64")...
    done (took 2.000796408 seconds)
    (492/596) benchmarking ("sub", "Float64", "ComplexF64")...
    done (took 1.99629785 seconds)
    (493/596) benchmarking ("sub", "Int64", "Complex{BigInt}")...
    done (took 1.995623955 seconds)
    (494/596) benchmarking ("add", "UInt64", "Int64")...
    done (took 1.982630176 seconds)
    (495/596) benchmarking ("mul", "Complex{BigFloat}", "ComplexF64")...
    done (took 1.985001083 seconds)
    (496/596) benchmarking ("add", "BigFloat", "ComplexF32")...
    done (took 1.994428959 seconds)
    (497/596) benchmarking ("div", "Float32", "ComplexF32")...
    done (took 1.993126098 seconds)
    (498/596) benchmarking ("div", "Float64", "Int64")...
    done (took 1.99236001 seconds)
    (499/596) benchmarking ("div", "BigInt", "UInt64")...
    done (took 1.994221802 seconds)
    (500/596) benchmarking ("sub", "BigInt", "Float32")...
    done (took 1.994895256 seconds)
    (501/596) benchmarking ("mul", "Float64", "Complex{BigInt}")...
    done (took 1.997706448 seconds)
    (502/596) benchmarking ("add", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 1.995128207 seconds)
    (503/596) benchmarking ("mul", "Float64", "Complex{BigFloat}")...
    done (took 1.995099214 seconds)
    (504/596) benchmarking ("mul", "ComplexF64", "ComplexF32")...
    done (took 1.994858616 seconds)
    (505/596) benchmarking ("sub", "Complex{BigFloat}", "ComplexF32")...
    done (took 1.996006658 seconds)
    (506/596) benchmarking ("add", "ComplexF32", "Float64")...
    done (took 1.993712406 seconds)
    (507/596) benchmarking ("sub", "ComplexF64", "BigInt")...
    done (took 1.995754792 seconds)
    (508/596) benchmarking ("add", "Float32", "UInt64")...
    done (took 1.993515667 seconds)
    (509/596) benchmarking ("mul", "Float32", "Float32")...
    done (took 1.993053831 seconds)
    (510/596) benchmarking ("add", "BigInt", "Complex{UInt64}")...
    done (took 1.997754855 seconds)
    (511/596) benchmarking ("sub", "Complex{BigInt}", "Complex{BigFloat}")...
    done (took 2.001691571 seconds)
    (512/596) benchmarking ("div", "ComplexF64", "Complex{BigInt}")...
    done (took 2.004179841 seconds)
    (513/596) benchmarking ("sub", "Float64", "Float32")...
    done (took 1.993628555 seconds)
    (514/596) benchmarking ("sub", "ComplexF64", "BigFloat")...
    done (took 1.995431747 seconds)
    (515/596) benchmarking ("add", "ComplexF64", "Complex{Int64}")...
    done (took 1.994025629 seconds)
    (516/596) benchmarking ("sub", "BigInt", "Complex{BigInt}")...
    done (took 1.997849152 seconds)
    (517/596) benchmarking ("div", "BigInt", "Float32")...
    done (took 2.003867668 seconds)
    (518/596) benchmarking ("add", "Float64", "Complex{Int64}")...
    done (took 1.994023482 seconds)
    (519/596) benchmarking ("sub", "ComplexF64", "Complex{UInt64}")...
    done (took 1.993770445 seconds)
    (520/596) benchmarking ("add", "Complex{Int64}", "UInt64")...
    done (took 1.994384561 seconds)
    (521/596) benchmarking ("sub", "Complex{BigFloat}", "Complex{Int64}")...
    done (took 1.995233541 seconds)
    (522/596) benchmarking ("mul", "BigInt", "UInt64")...
    done (took 1.995861662 seconds)
    (523/596) benchmarking ("mul", "Complex{UInt64}", "BigInt")...
    done (took 2.000124055 seconds)
    (524/596) benchmarking ("add", "Float64", "BigFloat")...
    done (took 2.001726464 seconds)
    (525/596) benchmarking ("mul", "Float32", "Complex{BigInt}")...
    done (took 1.99808823 seconds)
    (526/596) benchmarking ("add", "UInt64", "ComplexF64")...
    done (took 1.995233073 seconds)
    (527/596) benchmarking ("sub", "BigInt", "Complex{Int64}")...
    done (took 1.998844433 seconds)
    (528/596) benchmarking ("div", "BigInt", "Complex{BigFloat}")...
    done (took 2.009938262 seconds)
    (529/596) benchmarking ("add", "BigInt", "ComplexF64")...
    done (took 1.997204826 seconds)
    (530/596) benchmarking ("mul", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.003835404 seconds)
    (531/596) benchmarking ("div", "Complex{Int64}", "Complex{BigFloat}")...
    done (took 2.021924772 seconds)
    (532/596) benchmarking ("mul", "Float32", "BigInt")...
    done (took 1.997025618 seconds)
    (533/596) benchmarking ("mul", "Complex{Int64}", "Int64")...
    done (took 1.996312026 seconds)
    (534/596) benchmarking ("add", "Complex{BigFloat}", "BigFloat")...
    done (took 1.99543603 seconds)
    (535/596) benchmarking ("sub", "Float32", "BigInt")...
    done (took 1.995438155 seconds)
    (536/596) benchmarking ("sub", "Float32", "ComplexF64")...
    done (took 1.99592833 seconds)
    (537/596) benchmarking ("div", "BigInt", "BigInt")...
    done (took 1.998683918 seconds)
    (538/596) benchmarking ("mul", "ComplexF64", "Complex{Int64}")...
    done (took 1.995998338 seconds)
    (539/596) benchmarking ("mul", "ComplexF32", "Complex{BigInt}")...
    done (took 2.002897648 seconds)
    (540/596) benchmarking ("add", "UInt64", "Complex{Int64}")...
    done (took 1.995960954 seconds)
    (541/596) benchmarking ("mul", "Complex{Int64}", "Float32")...
    done (took 1.995003371 seconds)
    (542/596) benchmarking ("div", "Complex{BigFloat}", "ComplexF32")...
    done (took 2.004009159 seconds)
    (543/596) benchmarking ("div", "Int64", "ComplexF32")...
    done (took 1.995833794 seconds)
    (544/596) benchmarking ("add", "ComplexF32", "Float32")...
    done (took 1.985668651 seconds)
    (545/596) benchmarking ("div", "Int64", "Complex{Int64}")...
    done (took 1.978652706 seconds)
    (546/596) benchmarking ("add", "UInt64", "BigInt")...
    done (took 1.996887002 seconds)
    (547/596) benchmarking ("add", "BigFloat", "ComplexF64")...
    done (took 2.001398177 seconds)
    (548/596) benchmarking ("add", "ComplexF64", "Int64")...
    done (took 1.996110423 seconds)
    (549/596) benchmarking ("div", "BigInt", "ComplexF64")...
    done (took 2.004080974 seconds)
    (550/596) benchmarking ("div", "Float64", "ComplexF64")...
    done (took 1.995795429 seconds)
    (551/596) benchmarking ("mul", "ComplexF32", "ComplexF32")...
    done (took 1.99717479 seconds)
    (552/596) benchmarking ("sub", "Float64", "BigFloat")...
    done (took 1.996793437 seconds)
    (553/596) benchmarking ("div", "Float32", "BigFloat")...
    done (took 1.998307859 seconds)
    (554/596) benchmarking ("sub", "UInt64", "UInt64")...
    done (took 1.995577184 seconds)
    (555/596) benchmarking ("div", "Float64", "UInt64")...
    done (took 1.996204756 seconds)
    (556/596) benchmarking ("rem type", "UInt64", "Bool")...
    done (took 1.996681277 seconds)
    (557/596) benchmarking ("add", "ComplexF64", "Complex{BigFloat}")...
    done (took 2.000069735 seconds)
    (558/596) benchmarking ("rem type", "BigInt", "Bool")...
    done (took 1.996907649 seconds)
    (559/596) benchmarking ("sub", "Complex{UInt64}", "UInt64")...
    done (took 1.996524747 seconds)
    (560/596) benchmarking ("div", "Complex{BigInt}", "ComplexF32")...
    done (took 2.006694206 seconds)
    (561/596) benchmarking ("div", "ComplexF64", "Int64")...
    done (took 1.996434881 seconds)
    (562/596) benchmarking ("add", "BigFloat", "Complex{BigInt}")...
    done (took 2.441816934 seconds)
    (563/596) benchmarking ("div", "Complex{Int64}", "Complex{BigInt}")...
    done (took 2.010899393 seconds)
    (564/596) benchmarking ("div", "Float64", "BigInt")...
    done (took 2.006822263 seconds)
    (565/596) benchmarking ("div", "ComplexF32", "Float64")...
    done (took 1.996709505 seconds)
    (566/596) benchmarking ("div", "Float64", "Float64")...
    done (took 1.996688648 seconds)
    (567/596) benchmarking ("mul", "UInt64", "Complex{Int64}")...
    done (took 1.996945154 seconds)
    (568/596) benchmarking ("div", "Complex{BigInt}", "BigInt")...
    done (took 2.002534938 seconds)
    (569/596) benchmarking ("sub", "Complex{BigInt}", "ComplexF64")...
    done (took 2.00007832 seconds)
    (570/596) benchmarking ("rem type", "BigInt", "Int64")...
    done (took 1.99642996 seconds)
    (571/596) benchmarking ("add", "Complex{BigInt}", "Complex{BigInt}")...
    done (took 2.000997446 seconds)
    (572/596) benchmarking ("mul", "Complex{UInt64}", "Float32")...
    done (took 2.003683189 seconds)
    (573/596) benchmarking ("mul", "Complex{BigInt}", "Int64")...
    done (took 2.00086082 seconds)
    (574/596) benchmarking ("div", "Float32", "Float32")...
    done (took 2.002694399 seconds)
    (575/596) benchmarking ("sub", "Float64", "Complex{BigFloat}")...
    done (took 1.999900859 seconds)
    (576/596) benchmarking ("add", "UInt64", "Complex{BigFloat}")...
    done (took 1.997904656 seconds)
    (577/596) benchmarking ("add", "Complex{BigFloat}", "Complex{BigFloat}")...
    done (took 1.998818351 seconds)
    (578/596) benchmarking ("mul", "Int64", "Float64")...
    done (took 1.997349957 seconds)
    (579/596) benchmarking ("sub", "Complex{Int64}", "Complex{Int64}")...
    done (took 1.997335421 seconds)
    (580/596) benchmarking ("div", "BigInt", "Complex{UInt64}")...
    done (took 2.010378035 seconds)
    (581/596) benchmarking ("sub", "ComplexF64", "Complex{BigInt}")...
    done (took 2.006461965 seconds)
    (582/596) benchmarking ("add", "BigFloat", "Float64")...
    done (took 1.999377142 seconds)
    (583/596) benchmarking ("rem type", "Char", "BigInt")...
    done (took 1.998351862 seconds)
    (584/596) benchmarking ("div", "Complex{BigFloat}", "Float64")...
    done (took 2.003735222 seconds)
    (585/596) benchmarking ("sub", "Complex{UInt64}", "Float32")...
    done (took 1.998035176 seconds)
    (586/596) benchmarking ("mul", "Complex{BigInt}", "ComplexF32")...
    done (took 2.006055409 seconds)
    (587/596) benchmarking ("div", "UInt64", "Complex{BigFloat}")...
    done (took 2.005249546 seconds)
    (588/596) benchmarking ("add", "Complex{Int64}", "Complex{UInt64}")...
    done (took 1.997467054 seconds)
    (589/596) benchmarking ("sub", "BigFloat", "ComplexF32")...
    done (took 2.000717226 seconds)
    (590/596) benchmarking ("div", "Complex{UInt64}", "Complex{UInt64}")...
    done (took 1.998516896 seconds)
    (591/596) benchmarking ("rem type", "Bool", "UInt64")...
    done (took 1.998428531 seconds)
    (592/596) benchmarking ("add", "Int64", "UInt64")...
    done (took 1.997787342 seconds)
    (593/596) benchmarking ("add", "Complex{Int64}", "ComplexF32")...
    done (took 1.99814418 seconds)
    (594/596) benchmarking ("add", "BigInt", "Complex{Int64}")...
    done (took 2.001499035 seconds)
    (595/596) benchmarking ("div", "Float32", "Int64")...
    done (took 2.004011772 seconds)
    (596/596) benchmarking ("div", "ComplexF64", "ComplexF64")...
    done (took 1.998939025 seconds)
  done (took 1187.198146592 seconds)
  (13/25) benchmarking "mod2pi"...
    (1/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 1.999974623 seconds)
    (2/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.998994029 seconds)
    (3/21) benchmarking ("no reduction", "zero", "Float64")...
    done (took 1.998612947 seconds)
    (4/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 1.998951429 seconds)
    (5/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 1.998264064 seconds)
    (6/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 1.998408197 seconds)
    (7/21) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.999476119 seconds)
    (8/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 1.998939686 seconds)
    (9/21) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.000113127 seconds)
    (10/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.000321658 seconds)
    (11/21) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 1.99830556 seconds)
    (12/21) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.999873398 seconds)
    (13/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 1.999119743 seconds)
    (14/21) benchmarking ("argument reduction (easy) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.000776591 seconds)
    (15/21) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 1.999330443 seconds)
    (16/21) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 1.999496194 seconds)
    (17/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 1.999891149 seconds)
    (18/21) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.000236688 seconds)
    (19/21) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 1.999568677 seconds)
    (20/21) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.000160809 seconds)
    (21/21) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.000797209 seconds)
  done (took 43.917107349 seconds)
  (14/25) benchmarking "cosh"...
    (1/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "negative argument", "Float32")...
    done (took 1.999354277 seconds)
    (2/22) benchmarking ("zero", "Float64")...
    done (took 2.000177747 seconds)
    (3/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 1.99956164 seconds)
    (4/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 1.999279232 seconds)
    (5/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.000122167 seconds)
    (6/22) benchmarking ("zero", "Float32")...
    done (took 1.999392747 seconds)
    (7/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "negative argument", "Float64")...
    done (took 2.000589805 seconds)
    (8/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.000519046 seconds)
    (9/22) benchmarking ("0.00024414062f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.000230447 seconds)
    (10/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 1.999602819 seconds)
    (11/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "positive argument", "Float32")...
    done (took 1.999182039 seconds)
    (12/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.001895576 seconds)
    (13/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "negative argument", "Float64")...
    done (took 2.000181418 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2.7755602085408512e-17", "positive argument", "Float64")...
    done (took 2.000478385 seconds)
    (15/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 1.999994864 seconds)
    (16/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.000743936 seconds)
    (17/22) benchmarking ("9f0 <= abs(x) < 88.72283f0", "negative argument", "Float32")...
    done (took 2.000951627 seconds)
    (18/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.000194426 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 0.00024414062f0", "positive argument", "Float32")...
    done (took 2.001247762 seconds)
    (20/22) benchmarking ("2.7755602085408512e-17 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.001306808 seconds)
    (21/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.000169333 seconds)
    (22/22) benchmarking ("22.0 <= abs(x) < 709.7822265633563", "positive argument", "Float64")...
    done (took 2.001971283 seconds)
  done (took 45.935854721 seconds)
  (15/25) benchmarking "fastmath"...
    (1/49) benchmarking ("mul", "Complex{Int64}")...
    done (took 2.000817441 seconds)
    (2/49) benchmarking ("sub", "Complex{Int64}")...
    done (took 1.983198104 seconds)
    (3/49) benchmarking ("sub", "Complex{BigFloat}")...
    done (took 1.993575678 seconds)
    (4/49) benchmarking ("div", "Float64")...
    done (took 1.983956726 seconds)
    (5/49) benchmarking ("mul", "Float64")...
    done (took 1.994188803 seconds)
    (6/49) benchmarking ("div", "Complex{Int64}")...
    done (took 2.001415022 seconds)
    (7/49) benchmarking ("mul", "Float32")...
    done (took 2.00100313 seconds)
    (8/49) benchmarking ("div", "BigFloat")...
    done (took 2.003775464 seconds)
    (9/49) benchmarking ("add", "BigFloat")...
    done (took 2.001150013 seconds)
    (10/49) benchmarking ("add", "BigInt")...
    done (took 2.002145614 seconds)
    (11/49) benchmarking ("add", "Complex{BigInt}")...
    done (took 2.007508977 seconds)
    (12/49) benchmarking ("add", "ComplexF32")...
    done (took 2.008382717 seconds)
    (13/49) benchmarking ("sub", "Float64")...
    done (took 2.001031601 seconds)
    (14/49) benchmarking ("div", "BigInt")...
    done (took 2.005444456 seconds)
    (15/49) benchmarking ("add", "Float32")...
    done (took 2.002078722 seconds)
    (16/49) benchmarking ("sub", "ComplexF64")...
    done (took 2.001736991 seconds)
    (17/49) benchmarking "13786"...
    done (took 2.147887693 seconds)
    (18/49) benchmarking ("add", "ComplexF64")...
    done (took 2.002279393 seconds)
    (19/49) benchmarking ("add", "Complex{Int64}")...
    done (took 2.002122459 seconds)
    (20/49) benchmarking ("sub", "Int64")...
    done (took 2.002767429 seconds)
    (21/49) benchmarking ("div", "ComplexF64")...
    done (took 2.002845144 seconds)
    (22/49) benchmarking ("div", "Complex{BigFloat}")...
    done (took 2.009026931 seconds)
    (23/49) benchmarking ("mul", "Int64")...
    done (took 2.002824326 seconds)
    (24/49) benchmarking ("div", "Int64")...
    done (took 2.002082119 seconds)
    (25/49) benchmarking ("sub", "BigFloat")...
    done (took 2.003008635 seconds)
    (26/49) benchmarking ("div", "Complex{UInt64}")...
    done (took 2.002022086 seconds)
    (27/49) benchmarking ("add", "UInt64")...
    done (took 2.001875509 seconds)
    (28/49) benchmarking ("div", "ComplexF32")...
    done (took 2.002478278 seconds)
    (29/49) benchmarking ("sub", "ComplexF32")...
    done (took 2.002651556 seconds)
    (30/49) benchmarking ("mul", "BigInt")...
    done (took 2.004387257 seconds)
    (31/49) benchmarking ("add", "Complex{UInt64}")...
    done (took 2.006398731 seconds)
    (32/49) benchmarking ("sub", "Float32")...
    done (took 2.001656767 seconds)
    (33/49) benchmarking ("add", "Complex{BigFloat}")...
    done (took 2.004290894 seconds)
    (34/49) benchmarking ("mul", "Complex{BigFloat}")...
    done (took 2.00631088 seconds)
    (35/49) benchmarking ("mul", "BigFloat")...
    done (took 2.003449345 seconds)
    (36/49) benchmarking ("sub", "BigInt")...
    done (took 2.004284522 seconds)
    (37/49) benchmarking ("mul", "ComplexF64")...
    done (took 2.006537246 seconds)
    (38/49) benchmarking ("sub", "Complex{UInt64}")...
    done (took 2.003641098 seconds)
    (39/49) benchmarking ("add", "Int64")...
    done (took 2.002426628 seconds)
    (40/49) benchmarking ("sub", "UInt64")...
    done (took 2.003311754 seconds)
    (41/49) benchmarking ("mul", "Complex{BigInt}")...
    done (took 2.011630576 seconds)
    (42/49) benchmarking ("mul", "ComplexF32")...
    done (took 2.026046834 seconds)
    (43/49) benchmarking ("div", "UInt64")...
    done (took 2.003536725 seconds)
    (44/49) benchmarking ("mul", "Complex{UInt64}")...
    done (took 2.003446286 seconds)
    (45/49) benchmarking ("div", "Complex{BigInt}")...
    done (took 2.011671842 seconds)
    (46/49) benchmarking ("mul", "UInt64")...
    done (took 2.002989342 seconds)
    (47/49) benchmarking ("div", "Float32")...
    done (took 2.003200531 seconds)
    (48/49) benchmarking ("sub", "Complex{BigInt}")...
    done (took 2.007055709 seconds)
    (49/49) benchmarking ("add", "Float64")...
    done (took 2.008920079 seconds)
  done (took 100.231505526 seconds)
  (16/25) benchmarking "atan2"...
    (1/68) benchmarking ("x zero", "y negative", "Float32")...
    done (took 2.003510837 seconds)
    (2/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float32")...
    done (took 2.004269773 seconds)
    (3/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float64")...
    done (took 2.004229924 seconds)
    (4/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.003304392 seconds)
    (5/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float32")...
    done (took 2.004257612 seconds)
    (6/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float32")...
    done (took 2.004464309 seconds)
    (7/68) benchmarking ("abs(y/x) small", "y positive", "x positive", "Float32")...
    done (took 2.004502917 seconds)
    (8/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.004266861 seconds)
    (9/68) benchmarking ("y zero", "y negative", "x negative", "Float64")...
    done (took 2.004408449 seconds)
    (10/68) benchmarking ("x zero", "y negative", "Float64")...
    done (took 2.003636566 seconds)
    (11/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float32")...
    done (took 2.00485107 seconds)
    (12/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float64")...
    done (took 2.003372697 seconds)
    (13/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.004570747 seconds)
    (14/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float32")...
    done (took 2.003797686 seconds)
    (15/68) benchmarking ("x one", "Float32")...
    done (took 2.00445579 seconds)
    (16/68) benchmarking ("abs(y/x) high", "y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.004210202 seconds)
    (17/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.00556439 seconds)
    (18/68) benchmarking ("y finite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.004499837 seconds)
    (19/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float64")...
    done (took 2.004708694 seconds)
    (20/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float64")...
    done (took 2.003907536 seconds)
    (21/68) benchmarking ("abs(y/x) high", "y positive", "x negative", "Float64")...
    done (took 2.004859098 seconds)
    (22/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float32")...
    done (took 2.004426294 seconds)
    (23/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float32")...
    done (took 2.00536727 seconds)
    (24/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float64")...
    done (took 2.004379422 seconds)
    (25/68) benchmarking ("y finite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.005555759 seconds)
    (26/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float64")...
    done (took 2.005742959 seconds)
    (27/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float64")...
    done (took 2.005169526 seconds)
    (28/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float32")...
    done (took 2.004859203 seconds)
    (29/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x positive", "Float64")...
    done (took 2.006311462 seconds)
    (30/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float64")...
    done (took 2.005258338 seconds)
    (31/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float32")...
    done (took 2.006315144 seconds)
    (32/68) benchmarking ("y infinite", "y positive", "x infinite", "x negative", "Float32")...
    done (took 2.0065924 seconds)
    (33/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x positive", "Float32")...
    done (took 2.004722901 seconds)
    (34/68) benchmarking ("x one", "Float64")...
    done (took 2.005825693 seconds)
    (35/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.005320678 seconds)
    (36/68) benchmarking ("y zero", "y negative", "x positive", "Float32")...
    done (took 2.006230891 seconds)
    (37/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x negative", "Float32")...
    done (took 2.005369384 seconds)
    (38/68) benchmarking ("y infinite", "y positive", "x finite", "x negative", "Float64")...
    done (took 2.005737714 seconds)
    (39/68) benchmarking ("y infinite", "y positive", "x infinite", "x positive", "Float32")...
    done (took 2.006219661 seconds)
    (40/68) benchmarking ("y zero", "y negative", "x positive", "Float64")...
    done (took 2.00439652 seconds)
    (41/68) benchmarking ("y zero", "y negative", "x negative", "Float32")...
    done (took 2.004912439 seconds)
    (42/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float32")...
    done (took 2.006110903 seconds)
    (43/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float32")...
    done (took 2.005441926 seconds)
    (44/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float32")...
    done (took 2.00667416 seconds)
    (45/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float64")...
    done (took 2.007897919 seconds)
    (46/68) benchmarking ("abs(y/x) high", "y negative", "x positive", "Float64")...
    done (took 2.005803561 seconds)
    (47/68) benchmarking ("y infinite", "y negative", "x finite", "x negative", "Float64")...
    done (took 2.00654094 seconds)
    (48/68) benchmarking ("y zero", "y positive", "x positive", "Float64")...
    done (took 2.005817101 seconds)
    (49/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float64")...
    done (took 2.006641357 seconds)
    (50/68) benchmarking ("y zero", "y positive", "x negative", "Float32")...
    done (took 2.006585048 seconds)
    (51/68) benchmarking ("abs(y/x) small", "y positive", "x negative", "Float32")...
    done (took 2.007025786 seconds)
    (52/68) benchmarking ("abs(y/x) safe (small)", "y positive", "x negative", "Float64")...
    done (took 2.005300541 seconds)
    (53/68) benchmarking ("y finite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.007141547 seconds)
    (54/68) benchmarking ("y infinite", "y negative", "x finite", "x positive", "Float64")...
    done (took 2.006453693 seconds)
    (55/68) benchmarking ("y infinite", "y negative", "x infinite", "x positive", "Float32")...
    done (took 2.007527097 seconds)
    (56/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x positive", "Float32")...
    done (took 2.007913236 seconds)
    (57/68) benchmarking ("y infinite", "y positive", "x finite", "x positive", "Float64")...
    done (took 2.005873512 seconds)
    (58/68) benchmarking ("x zero", "y positive", "Float64")...
    done (took 2.007095288 seconds)
    (59/68) benchmarking ("x zero", "y positive", "Float32")...
    done (took 2.008411792 seconds)
    (60/68) benchmarking ("abs(y/x) safe (large)", "y positive", "x positive", "Float64")...
    done (took 2.007007733 seconds)
    (61/68) benchmarking ("y zero", "y positive", "x negative", "Float64")...
    done (took 2.006397536 seconds)
    (62/68) benchmarking ("y infinite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 1.977653402 seconds)
    (63/68) benchmarking ("abs(y/x) safe (large)", "y negative", "x negative", "Float64")...
    done (took 2.006344695 seconds)
    (64/68) benchmarking ("y zero", "y positive", "x positive", "Float32")...
    done (took 2.00704911 seconds)
    (65/68) benchmarking ("abs(y/x) high", "y negative", "x negative", "Float32")...
    done (took 2.008237739 seconds)
    (66/68) benchmarking ("abs(y/x) safe (small)", "y negative", "x negative", "Float64")...
    done (took 2.006665513 seconds)
    (67/68) benchmarking ("abs(y/x) high", "y positive", "x positive", "Float64")...
    done (took 2.008199915 seconds)
    (68/68) benchmarking ("y finite", "y negative", "x infinite", "x negative", "Float32")...
    done (took 2.007955117 seconds)
  done (took 138.289114625 seconds)
  (17/25) benchmarking "sincos"...
    (1/62) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.007865244 seconds)
    (2/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32")...
    done (took 2.007477181 seconds)
    (3/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.007113568 seconds)
    (4/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008027951 seconds)
    (5/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.008888105 seconds)
    (6/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32")...
    done (took 2.008451953 seconds)
    (7/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64")...
    done (took 2.008130247 seconds)
    (8/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32")...
    done (took 2.010327845 seconds)
    (9/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.007947223 seconds)
    (10/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64")...
    done (took 2.010114609 seconds)
    (11/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.008970655 seconds)
    (12/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.007171792 seconds)
    (13/62) benchmarking ("no reduction", "negative argument", "Float32")...
    done (took 2.009352516 seconds)
    (14/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 2.00847839 seconds)
    (15/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.009877626 seconds)
    (16/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64")...
    done (took 2.008125657 seconds)
    (17/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32")...
    done (took 2.009094231 seconds)
    (18/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.009138365 seconds)
    (19/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64")...
    done (took 2.008828247 seconds)
    (20/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64")...
    done (took 2.008692116 seconds)
    (21/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32")...
    done (took 2.008478678 seconds)
    (22/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.008592661 seconds)
    (23/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64")...
    done (took 2.009511329 seconds)
    (24/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.010061094 seconds)
    (25/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64")...
    done (took 2.009893677 seconds)
    (26/62) benchmarking ("no reduction", "negative argument", "Float64")...
    done (took 2.008959346 seconds)
    (27/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64")...
    done (took 2.010388507 seconds)
    (28/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.01115586 seconds)
    (29/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.008886441 seconds)
    (30/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32")...
    done (took 2.010269397 seconds)
    (31/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64")...
    done (took 2.009845976 seconds)
    (32/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32")...
    done (took 2.00991677 seconds)
    (33/62) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.009297765 seconds)
    (34/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32")...
    done (took 2.010424329 seconds)
    (35/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32")...
    done (took 2.010976646 seconds)
    (36/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32")...
    done (took 2.008676911 seconds)
    (37/62) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.010622261 seconds)
    (38/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.010325734 seconds)
    (39/62) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32")...
    done (took 2.009270825 seconds)
    (40/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64")...
    done (took 2.011064784 seconds)
    (41/62) benchmarking ("no reduction", "positive argument", "Float64")...
    done (took 2.009894255 seconds)
    (42/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64")...
    done (took 2.009818265 seconds)
    (43/62) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64")...
    done (took 2.010212241 seconds)
    (44/62) benchmarking ("no reduction", "positive argument", "Float32")...
    done (took 2.010827975 seconds)
    (45/62) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.010526321 seconds)
    (46/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32")...
    done (took 2.010668382 seconds)
    (47/62) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32")...
    done (took 2.010681397 seconds)
    (48/62) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32")...
    done (took 2.011229771 seconds)
    (49/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32")...
    done (took 1.979178036 seconds)
    (50/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64")...
    done (took 2.01256266 seconds)
    (51/62) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32")...
    done (took 2.010045939 seconds)
    (52/62) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64")...
    done (took 2.00957929 seconds)
    (53/62) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64")...
    done (took 2.010379638 seconds)
    (54/62) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64")...
    done (took 2.009907057 seconds)
    (55/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32")...
    done (took 2.010301517 seconds)
    (56/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32")...
    done (took 2.009586313 seconds)
    (57/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64")...
    done (took 2.010027437 seconds)
    (58/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64")...
    done (took 2.010805121 seconds)
    (59/62) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64")...
    done (took 2.012061734 seconds)
    (60/62) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32")...
    done (took 2.010871034 seconds)
    (61/62) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64")...
    done (took 2.010290169 seconds)
    (62/62) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32")...
    done (took 2.01063257 seconds)
  done (took 126.506498633 seconds)
  (18/25) benchmarking "cbrt"...
    (1/20) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.011121369 seconds)
    (2/20) benchmarking ("medium", "negative argument", "Float32")...
    done (took 2.010460931 seconds)
    (3/20) benchmarking ("one", "Float64")...
    done (took 2.011615921 seconds)
    (4/20) benchmarking ("zero", "Float64")...
    done (took 2.011497743 seconds)
    (5/20) benchmarking ("large", "positive argument", "Float32")...
    done (took 2.011722684 seconds)
    (6/20) benchmarking ("large", "negative argument", "Float64")...
    done (took 2.011297769 seconds)
    (7/20) benchmarking ("large", "negative argument", "Float32")...
    done (took 2.011595853 seconds)
    (8/20) benchmarking ("zero", "Float32")...
    done (took 2.011549763 seconds)
    (9/20) benchmarking ("medium", "positive argument", "Float32")...
    done (took 2.011373334 seconds)
    (10/20) benchmarking ("one", "Float32")...
    done (took 2.010828403 seconds)
    (11/20) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.010583796 seconds)
    (12/20) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.011896043 seconds)
    (13/20) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.001588507 seconds)
    (14/20) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.01184054 seconds)
    (15/20) benchmarking ("large", "positive argument", "Float64")...
    done (took 2.012496912 seconds)
    (16/20) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.012003669 seconds)
    (17/20) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.011527735 seconds)
    (18/20) benchmarking ("medium", "positive argument", "Float64")...
    done (took 2.012650702 seconds)
    (19/20) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.011712123 seconds)
    (20/20) benchmarking ("medium", "negative argument", "Float64")...
    done (took 2.012055 seconds)
  done (took 42.161058962 seconds)
  (19/25) benchmarking "atanh"...
    (1/16) benchmarking ("one", "Float64")...
    done (took 2.012267969 seconds)
    (2/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.012166333 seconds)
    (3/16) benchmarking ("zero", "Float64")...
    done (took 2.012184283 seconds)
    (4/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.013688477 seconds)
    (5/16) benchmarking ("zero", "Float32")...
    done (took 2.011465026 seconds)
    (6/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.013075972 seconds)
    (7/16) benchmarking ("one", "Float32")...
    done (took 2.011222892 seconds)
    (8/16) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.011330376 seconds)
    (9/16) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.012397094 seconds)
    (10/16) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.012758648 seconds)
    (11/16) benchmarking ("2^-28 <= abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.009769193 seconds)
    (12/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.004501446 seconds)
    (13/16) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.01216111 seconds)
    (14/16) benchmarking ("2^-28 <= abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.012628012 seconds)
    (15/16) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.013142712 seconds)
    (16/16) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.008715608 seconds)
  done (took 34.123595343 seconds)
  (20/25) benchmarking "floatexp"...
    (1/55) benchmarking ("exp10", "agument reduction, k = 2", "Float64")...
    done (took 2.014010511 seconds)
    (2/55) benchmarking ("exp10", "taylor expansion", "Float32")...
    done (took 2.012183338 seconds)
    (3/55) benchmarking ("frexp", "subnorm", "Float64")...
    done (took 2.010239857 seconds)
    (4/55) benchmarking ("frexp", "norm", "Float64")...
    done (took 1.991509454 seconds)
    (5/55) benchmarking ("exp", "no agument reduction, k = 9", "Float64")...
    done (took 2.009132115 seconds)
    (6/55) benchmarking ("exponent", "norm", "Float32")...
    done (took 2.013829085 seconds)
    (7/55) benchmarking ("exp10", "overflow", "Float32")...
    done (took 2.010116833 seconds)
    (8/55) benchmarking ("ldexp", "inf -> inf", "Float64")...
    done (took 2.00351243 seconds)
    (9/55) benchmarking ("exp10", "underflow", "Float64")...
    done (took 2.012894972 seconds)
    (10/55) benchmarking ("ldexp", "norm -> subnorm", "Float32")...
    done (took 2.01400599 seconds)
    (11/55) benchmarking ("ldexp", "norm -> inf", "Float32")...
    done (took 2.013888366 seconds)
    (12/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float32")...
    done (took 2.014574605 seconds)
    (13/55) benchmarking ("exp", "underflow", "Float32")...
    done (took 2.014132863 seconds)
    (14/55) benchmarking ("frexp", "inf", "Float64")...
    done (took 2.007982567 seconds)
    (15/55) benchmarking ("exponent", "norm", "Float64")...
    done (took 2.008358257 seconds)
    (16/55) benchmarking ("exp10", "agument reduction, k = 83", "Float32")...
    done (took 2.014163536 seconds)
    (17/55) benchmarking ("exp", "underflow", "Float64")...
    done (took 2.013823845 seconds)
    (18/55) benchmarking ("ldexp", "norm -> inf", "Float64")...
    done (took 2.005565159 seconds)
    (19/55) benchmarking ("exp10", "underflow", "Float32")...
    done (took 2.010317646 seconds)
    (20/55) benchmarking ("frexp", "norm", "Float32")...
    done (took 2.014478299 seconds)
    (21/55) benchmarking ("exp10", "normal path -> small, k = -1075", "Float64")...
    done (took 2.014506082 seconds)
    (22/55) benchmarking ("exponent", "subnorm", "Float32")...
    done (took 2.013627263 seconds)
    (23/55) benchmarking ("exp10", "direct approx, k = 0", "Float32")...
    done (took 2.013393688 seconds)
    (24/55) benchmarking ("significand", "norm", "Float32")...
    done (took 2.013673728 seconds)
    (25/55) benchmarking ("exp", "fast path, k = 1", "Float64")...
    done (took 2.013712999 seconds)
    (26/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float64")...
    done (took 2.014174928 seconds)
    (27/55) benchmarking ("ldexp", "subnorm -> norm", "Float64")...
    done (took 2.005995628 seconds)
    (28/55) benchmarking ("exp10", "direct approx, k = 0", "Float64")...
    done (took 1.995776331 seconds)
    (29/55) benchmarking ("significand", "norm", "Float64")...
    done (took 2.014594481 seconds)
    (30/55) benchmarking ("exp", "no agument reduction, k = 9", "Float32")...
    done (took 2.01388564 seconds)
    (31/55) benchmarking ("exp", "normal path, k = 2", "Float64")...
    done (took 2.014034957 seconds)
    (32/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float64")...
    done (took 2.014851102 seconds)
    (33/55) benchmarking ("exp", "small argument path", "Float64")...
    done (took 2.013877625 seconds)
    (34/55) benchmarking ("ldexp", "norm -> norm", "Float64")...
    done (took 2.014533727 seconds)
    (35/55) benchmarking ("frexp", "inf", "Float32")...
    done (took 2.014759524 seconds)
    (36/55) benchmarking ("significand", "subnorm", "Float64")...
    done (took 2.01483612 seconds)
    (37/55) benchmarking ("exp", "overflow", "Float32")...
    done (took 2.015361591 seconds)
    (38/55) benchmarking ("exp", "fast path, k = 1", "Float32")...
    done (took 2.014499171 seconds)
    (39/55) benchmarking ("exp10", "agument reduction, k = 2", "Float32")...
    done (took 2.014179385 seconds)
    (40/55) benchmarking ("exp10", "normal path -> small, k = -150", "Float32")...
    done (took 2.014116916 seconds)
    (41/55) benchmarking ("ldexp", "inf -> inf", "Float32")...
    done (took 2.015210767 seconds)
    (42/55) benchmarking ("exp10", "no agument reduction, k = 1", "Float64")...
    done (took 2.015614772 seconds)
    (43/55) benchmarking ("exp", "normal path -> small, k = -1045", "Float32")...
    done (took 2.016160726 seconds)
    (44/55) benchmarking ("significand", "subnorm", "Float32")...
    done (took 2.015113063 seconds)
    (45/55) benchmarking ("exp", "overflow", "Float64")...
    done (took 2.015350767 seconds)
    (46/55) benchmarking ("exp", "small argument path", "Float32")...
    done (took 2.015523287 seconds)
    (47/55) benchmarking ("exp10", "overflow", "Float64")...
    done (took 2.015535023 seconds)
    (48/55) benchmarking ("ldexp", "norm -> subnorm", "Float64")...
    done (took 2.015782414 seconds)
    (49/55) benchmarking ("exponent", "subnorm", "Float64")...
    done (took 2.015830803 seconds)
    (50/55) benchmarking ("exp10", "agument reduction, k = 83", "Float64")...
    done (took 2.015525532 seconds)
    (51/55) benchmarking ("exp", "normal path, k = 2", "Float32")...
    done (took 2.015919724 seconds)
    (52/55) benchmarking ("frexp", "subnorm", "Float32")...
    done (took 2.015683427 seconds)
    (53/55) benchmarking ("ldexp", "norm -> norm", "Float32")...
    done (took 2.015628931 seconds)
    (54/55) benchmarking ("ldexp", "subnorm -> subnorm", "Float32")...
    done (took 2.015003544 seconds)
    (55/55) benchmarking ("ldexp", "subnorm -> norm", "Float32")...
    done (took 2.015582145 seconds)
  done (took 112.614589546 seconds)
  (21/25) benchmarking "acos"...
    (1/18) benchmarking ("small", "negative argument", "Float32")...
    done (took 2.014473931 seconds)
    (2/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float32")...
    done (took 2.014736494 seconds)
    (3/18) benchmarking ("one", "negative argument", "Float64")...
    done (took 1.997189302 seconds)
    (4/18) benchmarking ("one", "positive argument", "Float32")...
    done (took 2.007913542 seconds)
    (5/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float32")...
    done (took 2.015483429 seconds)
    (6/18) benchmarking ("zero", "Float64")...
    done (took 2.015097485 seconds)
    (7/18) benchmarking ("zero", "Float32")...
    done (took 2.015710949 seconds)
    (8/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float64")...
    done (took 2.010097721 seconds)
    (9/18) benchmarking ("small", "negative argument", "Float64")...
    done (took 2.01588124 seconds)
    (10/18) benchmarking ("one", "negative argument", "Float32")...
    done (took 2.015089439 seconds)
    (11/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float64")...
    done (took 2.016992399 seconds)
    (12/18) benchmarking ("0.5 <= abs(x) < 1", "negative argument", "Float32")...
    done (took 2.015449797 seconds)
    (13/18) benchmarking ("small", "positive argument", "Float64")...
    done (took 2.016797703 seconds)
    (14/18) benchmarking ("abs(x) < 0.5", "negative argument", "Float32")...
    done (took 2.016367942 seconds)
    (15/18) benchmarking ("abs(x) < 0.5", "positive argument", "Float64")...
    done (took 2.017358192 seconds)
    (16/18) benchmarking ("small", "positive argument", "Float32")...
    done (took 2.01646389 seconds)
    (17/18) benchmarking ("one", "positive argument", "Float64")...
    done (took 2.015817845 seconds)
    (18/18) benchmarking ("0.5 <= abs(x) < 1", "positive argument", "Float64")...
    done (took 2.017496632 seconds)
  done (took 38.19311233 seconds)
  (22/25) benchmarking "tanh"...
    (1/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "positive argument", "Float64")...
    done (took 2.016643442 seconds)
    (2/22) benchmarking ("1.0 <= abs(x) < 22.0", "positive argument", "Float64")...
    done (took 2.017213361 seconds)
    (3/22) benchmarking ("0 <= abs(x) < 2f0^-12", "negative argument", "Float32")...
    done (took 2.016697044 seconds)
    (4/22) benchmarking ("0 <= abs(x) < 2.0^-28", "positive argument", "Float64")...
    done (took 2.017353479 seconds)
    (5/22) benchmarking ("zero", "Float64")...
    done (took 2.016481186 seconds)
    (6/22) benchmarking ("1f0 <= abs(x) < 9f0", "negative argument", "Float32")...
    done (took 2.017421956 seconds)
    (7/22) benchmarking ("very large", "positive argument", "Float64")...
    done (took 2.017216062 seconds)
    (8/22) benchmarking ("zero", "Float32")...
    done (took 2.017330457 seconds)
    (9/22) benchmarking ("very small", "positive argument", "Float32")...
    done (took 2.017195244 seconds)
    (10/22) benchmarking ("2.0^-28 <= abs(x) < 1.0", "negative argument", "Float64")...
    done (took 2.016525908 seconds)
    (11/22) benchmarking ("very small", "negative argument", "Float64")...
    done (took 2.017238419 seconds)
    (12/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "negative argument", "Float32")...
    done (took 2.01719784 seconds)
    (13/22) benchmarking ("very small", "negative argument", "Float32")...
    done (took 2.017039181 seconds)
    (14/22) benchmarking ("0 <= abs(x) < 2f0^-12", "positive argument", "Float32")...
    done (took 2.017538315 seconds)
    (15/22) benchmarking ("1.0 <= abs(x) < 22.0", "negative argument", "Float64")...
    done (took 2.017577165 seconds)
    (16/22) benchmarking ("very small", "positive argument", "Float64")...
    done (took 2.017490551 seconds)
    (17/22) benchmarking ("2f0^-12 <= abs(x) < 1f0", "positive argument", "Float32")...
    done (took 2.017946386 seconds)
    (18/22) benchmarking ("very large", "positive argument", "Float32")...
    done (took 2.017661243 seconds)
    (19/22) benchmarking ("0 <= abs(x) < 2.0^-28", "negative argument", "Float64")...
    done (took 2.018280037 seconds)
    (20/22) benchmarking ("very large", "negative argument", "Float64")...
    done (took 2.017140172 seconds)
    (21/22) benchmarking ("1f0 <= abs(x) < 9f0", "positive argument", "Float32")...
    done (took 2.019081253 seconds)
    (22/22) benchmarking ("very large", "negative argument", "Float32")...
    done (took 2.017342777 seconds)
  done (took 46.326301494 seconds)
  (23/25) benchmarking "intfuncs"...
    (1/6) benchmarking ("#779", "UInt64", "+")...
    done (took 2.01892355 seconds)
    (2/6) benchmarking ("#778", "UInt64", "+")...
    done (took 2.018172974 seconds)
    (3/6) benchmarking ("#779", "BigInt", "+")...
    done (took 2.031328873 seconds)
    (4/6) benchmarking ("#778", "Int64", "+")...
    done (took 2.036641422 seconds)
    (5/6) benchmarking ("#778", "BigInt", "+")...
    done (took 2.035760677 seconds)
    (6/6) benchmarking ("#779", "Int64", "+")...
    done (took 2.047576686 seconds)
  done (took 14.134108545 seconds)
  (24/25) benchmarking "sin"...
    (1/66) benchmarking ("no reduction", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017668695 seconds)
    (2/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.017221273 seconds)
    (3/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.015104268 seconds)
    (4/66) benchmarking ("no reduction", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018127514 seconds)
    (5/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.017829752 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.018538612 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.018152556 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.008978108 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.017684456 seconds)
    (10/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.019546168 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018470882 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.018781394 seconds)
    (13/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.019300574 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.019873356 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019313312 seconds)
    (16/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019433585 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.017924522 seconds)
    (18/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.019685444 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "sin_kernel")...
    done (took 2.018939804 seconds)
    (20/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.018807797 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020083844 seconds)
    (22/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.019302599 seconds)
    (23/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.01951055 seconds)
    (24/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021127867 seconds)
    (25/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.019983979 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.018992594 seconds)
    (27/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020489821 seconds)
    (28/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.019955848 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.020029569 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019667627 seconds)
    (31/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020025083 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.01984856 seconds)
    (33/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.020682906 seconds)
    (34/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.020826628 seconds)
    (35/66) benchmarking ("no reduction", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020333223 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.021152148 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.019916482 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.018912812 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021021306 seconds)
    (40/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.015966068 seconds)
    (41/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.020510265 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021194294 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.015164434 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.017937361 seconds)
    (45/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02089 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021355154 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021314026 seconds)
    (48/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.013150775 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.020708494 seconds)
    (50/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021070852 seconds)
    (51/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.019881412 seconds)
    (52/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021079301 seconds)
    (53/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.020983301 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.020204913 seconds)
    (55/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02055688 seconds)
    (56/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02115321 seconds)
    (57/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021746973 seconds)
    (58/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02079444 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022130427 seconds)
    (60/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02247311 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.010175267 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.021350894 seconds)
    (63/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.018916369 seconds)
    (64/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.022327303 seconds)
    (65/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02284382 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021554206 seconds)
  done (took 135.227015552 seconds)
  (25/25) benchmarking "cos"...
    (1/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02179013 seconds)
    (2/66) benchmarking ("no reduction", "zero", "Float64")...
    done (took 2.022302634 seconds)
    (3/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.02119671 seconds)
    (4/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "sin_kernel")...
    done (took 2.021283686 seconds)
    (5/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.022859578 seconds)
    (6/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022800964 seconds)
    (7/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022691361 seconds)
    (8/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.021951052 seconds)
    (9/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022319039 seconds)
    (10/66) benchmarking ("no reduction", "positive argument", "Float32", "cos_kernel")...
    done (took 2.022152235 seconds)
    (11/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.02175248 seconds)
    (12/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.021768737 seconds)
    (13/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.021750427 seconds)
    (14/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022597593 seconds)
    (15/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022114593 seconds)
    (16/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.021784288 seconds)
    (17/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.022725308 seconds)
    (18/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.02372008 seconds)
    (19/66) benchmarking ("no reduction", "positive argument", "Float64", "cos_kernel")...
    done (took 2.023311157 seconds)
    (20/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023050009 seconds)
    (21/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023771387 seconds)
    (22/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023371852 seconds)
    (23/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.022928911 seconds)
    (24/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.022874512 seconds)
    (25/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "cos_kernel")...
    done (took 2.022774023 seconds)
    (26/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023671855 seconds)
    (27/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.022273988 seconds)
    (28/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.023745331 seconds)
    (29/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024219334 seconds)
    (30/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023784609 seconds)
    (31/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.012436924 seconds)
    (32/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024022915 seconds)
    (33/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.023545469 seconds)
    (34/66) benchmarking ("no reduction", "zero", "Float32")...
    done (took 2.023481712 seconds)
    (35/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.023584223 seconds)
    (36/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.02357979 seconds)
    (37/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.025005347 seconds)
    (38/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024715137 seconds)
    (39/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024096274 seconds)
    (40/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024424804 seconds)
    (41/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.023199788 seconds)
    (42/66) benchmarking ("argument reduction (easy) abs(x) < 2.0^20π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.023880642 seconds)
    (43/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025653948 seconds)
    (44/66) benchmarking ("argument reduction (easy) abs(x) < 8π/4", "negative argument", "Float64", "cos_kernel")...
    done (took 2.025012429 seconds)
    (45/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float32", "sin_kernel")...
    done (took 2.02556719 seconds)
    (46/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.024544114 seconds)
    (47/66) benchmarking ("argument reduction (easy) abs(x) < 2π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.02367565 seconds)
    (48/66) benchmarking ("no reduction", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024648976 seconds)
    (49/66) benchmarking ("argument reduction (easy) abs(x) < 7π/4", "positive argument", "Float32", "cos_kernel")...
    done (took 2.024896286 seconds)
    (50/66) benchmarking ("no reduction", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024961025 seconds)
    (51/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024465072 seconds)
    (52/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float64", "cos_kernel")...
    done (took 2.024459588 seconds)
    (53/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "positive argument", "Float64", "sin_kernel")...
    done (took 2.025459446 seconds)
    (54/66) benchmarking ("argument reduction (hard) abs(x) < 8π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.02497737 seconds)
    (55/66) benchmarking ("argument reduction (easy) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.025219467 seconds)
    (56/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "positive argument", "Float64", "cos_kernel")...
    done (took 2.024888696 seconds)
    (57/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.023693195 seconds)
    (58/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float64", "sin_kernel")...
    done (took 2.025080912 seconds)
    (59/66) benchmarking ("argument reduction (easy) abs(x) < 5π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024702298 seconds)
    (60/66) benchmarking ("argument reduction (hard) abs(x) < 4π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024936825 seconds)
    (61/66) benchmarking ("argument reduction (hard) abs(x) < 2π/4", "positive argument", "Float32", "sin_kernel")...
    done (took 2.013879429 seconds)
    (62/66) benchmarking ("argument reduction (easy) abs(x) < 9π/4", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024492865 seconds)
    (63/66) benchmarking ("argument reduction (paynehanek) abs(x) > 2.0^20*π/2", "negative argument", "Float32", "cos_kernel")...
    done (took 2.024710332 seconds)
    (64/66) benchmarking ("argument reduction (easy) abs(x) < 6π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.025282621 seconds)
    (65/66) benchmarking ("argument reduction (easy) abs(x) < 3π/4", "negative argument", "Float32", "sin_kernel")...
    done (took 2.024845752 seconds)
    (66/66) benchmarking ("argument reduction (hard) abs(x) < 6π/4", "positive argument", "Float64", "sin_kernel")...
    done (took 2.025226217 seconds)
  done (took 135.491939689 seconds)
done (took 2769.90908155 seconds)
(11/20) benchmarking "sparse"...
  (1/7) benchmarking "sparse matvec"...
    (1/2) benchmarking "non-adjoint"...
    done (took 7.05908667 seconds)
    (2/2) benchmarking "adjoint"...
    done (took 7.137086144 seconds)
  done (took 16.149330321 seconds)
  (2/7) benchmarking "transpose"...
    (1/16) benchmarking ("transpose!", (600, 600))...
    done (took 2.186245222 seconds)
    (2/16) benchmarking ("adjoint!", (600, 400))...
    done (took 2.14406663 seconds)
    (3/16) benchmarking ("transpose", (20000, 20000))...
    done (took 2.029198577 seconds)
    (4/16) benchmarking ("transpose!", (20000, 20000))...
    done (took 7.040012924 seconds)
    (5/16) benchmarking ("transpose", (20000, 10000))...
    done (took 1.996414773 seconds)
    (6/16) benchmarking ("adjoint!", (20000, 10000))...
    done (took 7.033693069 seconds)
    (7/16) benchmarking ("transpose!", (20000, 10000))...
    done (took 7.029429206 seconds)
    (8/16) benchmarking ("adjoint", (600, 400))...
    done (took 2.029073447 seconds)
    (9/16) benchmarking ("transpose", (600, 600))...
    done (took 2.031953031 seconds)
    (10/16) benchmarking ("transpose", (600, 400))...
    done (took 2.029143952 seconds)
    (11/16) benchmarking ("adjoint", (20000, 10000))...
    done (took 2.025384048 seconds)
    (12/16) benchmarking ("adjoint!", (600, 600))...
    done (took 2.215206137 seconds)
    (13/16) benchmarking ("adjoint!", (20000, 20000))...
    done (took 7.07640534 seconds)
    (14/16) benchmarking ("adjoint", (600, 600))...
    done (took 2.030422165 seconds)
    (15/16) benchmarking ("adjoint", (20000, 20000))...
    done (took 2.030958382 seconds)
    (16/16) benchmarking ("transpose!", (600, 400))...
    done (took 2.12375217 seconds)
  done (took 55.020824261 seconds)
  (3/7) benchmarking "constructors"...
    (1/18) benchmarking ("SymTridiagonal", 10)...
    done (took 2.036252446 seconds)
    (2/18) benchmarking ("IV", 100)...
    done (took 2.034571361 seconds)
    (3/18) benchmarking ("Bidiagonal", 100)...
    done (took 2.048122537 seconds)
    (4/18) benchmarking ("IV", 10)...
    done (took 2.037516805 seconds)
    (5/18) benchmarking ("Tridiagonal", 10)...
    done (took 2.03630518 seconds)
    (6/18) benchmarking ("Tridiagonal", 100)...
    done (took 2.047515311 seconds)
    (7/18) benchmarking ("IV", 1000)...
    done (took 2.065452193 seconds)
    (8/18) benchmarking ("Diagonal", 10)...
    done (took 2.038553015 seconds)
    (9/18) benchmarking ("Diagonal", 1000)...
    done (took 2.069401033 seconds)
    (10/18) benchmarking ("IJV", 100)...
    done (took 2.051560216 seconds)
    (11/18) benchmarking ("Tridiagonal", 1000)...
    done (took 2.107514091 seconds)
    (12/18) benchmarking ("Bidiagonal", 10)...
    done (took 2.045368614 seconds)
    (13/18) benchmarking ("IJV", 10)...
    done (took 2.036126032 seconds)
    (14/18) benchmarking ("Bidiagonal", 1000)...
    done (took 2.08565121 seconds)
    (15/18) benchmarking ("Diagonal", 100)...
    done (took 2.048390965 seconds)
    (16/18) benchmarking ("SymTridiagonal", 100)...
    done (took 2.051149732 seconds)
    (17/18) benchmarking ("IJV", 1000)...
    done (took 2.129192024 seconds)
    (18/18) benchmarking ("SymTridiagonal", 1000)...
    done (took 2.106391576 seconds)
  done (took 39.030232576 seconds)
  (4/7) benchmarking "arithmetic"...
    (1/2) benchmarking ("unary minus", (600, 600))...
    done (took 2.112839738 seconds)
    (2/2) benchmarking ("unary minus", (20000, 20000))...
    done (took 7.043001727 seconds)
  done (took 11.118046271 seconds)
  (5/7) benchmarking "sparse solves"...
    (1/10) benchmarking "square system (ldlt), matrix rhs"...
    done (took 7.05548522 seconds)
    (2/10) benchmarking "square system (lu), vector rhs"...
    done (took 7.057616129 seconds)
    (3/10) benchmarking "square system (lu), matrix rhs"...
    done (took 7.049175107 seconds)
    (4/10) benchmarking "square system (default), matrix rhs"...
    done (took 7.060835716 seconds)
    (5/10) benchmarking "square system (default), vector rhs"...
    done (took 7.037810834 seconds)
    (6/10) benchmarking "least squares (qr), vector rhs"...
    done (took 7.040046953 seconds)
    (7/10) benchmarking "least squares (qr), matrix rhs"...
    done (took 7.033504625 seconds)
    (8/10) benchmarking "least squares (default), matrix rhs"...
    done (took 7.036645446 seconds)
    (9/10) benchmarking "square system (ldlt), vector rhs"...
    done (took 7.040671032 seconds)
    (10/10) benchmarking "least squares (default), vector rhs"...
    done (took 7.031469431 seconds)
  done (took 72.433191925 seconds)
  (6/7) benchmarking "index"...
    (1/54) benchmarking ("spvec", "range", 10000)...
    done (took 2.038379611 seconds)
    (2/54) benchmarking ("spmat", "splogical", 10)...
    done (took 2.035107924 seconds)
    (3/54) benchmarking ("spmat", "col", "logical", 10)...
    done (took 2.036503072 seconds)
    (4/54) benchmarking ("spmat", "col", "OneTo", 100)...
    done (took 2.033597032 seconds)
    (5/54) benchmarking ("spvec", "array", 10000)...
    done (took 7.02964984 seconds)
    (6/54) benchmarking ("spmat", "splogical", 1000)...
    done (took 7.035860679 seconds)
    (7/54) benchmarking ("spmat", "col", "range", 10)...
    done (took 2.032321266 seconds)
    (8/54) benchmarking ("spvec", "array", 100000)...
    done (took 7.031096817 seconds)
    (9/54) benchmarking ("spmat", "range", 1000)...
    done (took 2.729349575 seconds)
    (10/54) benchmarking ("spmat", "range", 100)...
    done (took 2.070916027 seconds)
    (11/54) benchmarking ("spmat", "range", 10)...
    done (took 2.043790536 seconds)
    (12/54) benchmarking ("spmat", "col", "array", 10)...
    done (took 2.043499411 seconds)
    (13/54) benchmarking ("spmat", "row", "OneTo", 10)...
    done (took 2.036299914 seconds)
    (14/54) benchmarking ("spvec", "range", 1000)...
    done (took 2.035525668 seconds)
    (15/54) benchmarking ("spvec", "integer", 100000)...
    done (took 2.031551651 seconds)
    (16/54) benchmarking ("spmat", "col", "array", 100)...
    done (took 2.060036536 seconds)
    (17/54) benchmarking ("spmat", "row", "range", 1000)...
    done (took 2.191253489 seconds)
    (18/54) benchmarking ("spvec", "integer", 1000)...
    done (took 2.033447509 seconds)
    (19/54) benchmarking ("spmat", "integer", 100)...
    done (took 2.032021745 seconds)
    (20/54) benchmarking ("spmat", "row", "OneTo", 100)...
    done (took 2.039116813 seconds)
    (21/54) benchmarking ("spmat", "row", "array", 10)...
    done (took 2.035574771 seconds)
    (22/54) benchmarking ("spmat", "row", "logical", 1000)...
    done (took 2.106933646 seconds)
    (23/54) benchmarking ("spvec", "range", 100000)...
    done (took 2.0481401 seconds)
    (24/54) benchmarking ("spvec", "integer", 10000)...
    done (took 2.034897656 seconds)
    (25/54) benchmarking ("spmat", "OneTo", 100)...
    done (took 2.067014984 seconds)
    (26/54) benchmarking ("spmat", "OneTo", 1000)...
    done (took 2.726794213 seconds)
    (27/54) benchmarking ("spmat", "logical", 10)...
    done (took 2.04454756 seconds)
    (28/54) benchmarking ("spmat", "row", "logical", 100)...
    done (took 2.041411096 seconds)
    (29/54) benchmarking ("spmat", "row", "OneTo", 1000)...
    done (took 2.195625852 seconds)
    (30/54) benchmarking ("spmat", "integer", 10)...
    done (took 2.031927744 seconds)
    (31/54) benchmarking ("spmat", "col", "OneTo", 10)...
    done (took 2.03327764 seconds)
    (32/54) benchmarking ("spmat", "splogical", 100)...
    done (took 2.1926438 seconds)
    (33/54) benchmarking ("spmat", "OneTo", 10)...
    done (took 2.039312612 seconds)
    (34/54) benchmarking ("spmat", "array", 100)...
    done (took 2.387580182 seconds)
    (35/54) benchmarking ("spvec", "array", 1000)...
    done (took 2.315956589 seconds)
    (36/54) benchmarking ("spmat", "array", 1000)...
    done (took 7.038861312 seconds)
    (37/54) benchmarking ("spmat", "col", "logical", 100)...
    done (took 2.044239797 seconds)
    (38/54) benchmarking ("spmat", "row", "array", 100)...
    done (took 2.042513501 seconds)
    (39/54) benchmarking ("spmat", "integer", 1000)...
    done (took 2.034319698 seconds)
    (40/54) benchmarking ("spmat", "row", "array", 1000)...
    done (took 2.199993696 seconds)
    (41/54) benchmarking ("spmat", "row", "range", 10)...
    done (took 2.036908823 seconds)
    (42/54) benchmarking ("spmat", "row", "range", 100)...
    done (took 2.040912318 seconds)
    (43/54) benchmarking ("spvec", "logical", 100000)...
    done (took 6.960695025 seconds)
    (44/54) benchmarking ("spmat", "col", "array", 1000)...
    done (took 2.30209306 seconds)
    (45/54) benchmarking ("spmat", "logical", 100)...
    done (took 2.123183212 seconds)
    (46/54) benchmarking ("spmat", "col", "logical", 1000)...
    done (took 2.081071776 seconds)
    (47/54) benchmarking ("spmat", "logical", 1000)...
    done (took 3.424717891 seconds)
    (48/54) benchmarking ("spmat", "row", "logical", 10)...
    done (took 2.038760398 seconds)
    (49/54) benchmarking ("spmat", "col", "range", 1000)...
    done (took 2.036489286 seconds)
    (50/54) benchmarking ("spvec", "logical", 1000)...
    done (took 2.068339234 seconds)
    (51/54) benchmarking ("spmat", "col", "range", 100)...
    done (took 2.039267674 seconds)
    (52/54) benchmarking ("spmat", "col", "OneTo", 1000)...
    done (took 2.038909742 seconds)
    (53/54) benchmarking ("spmat", "array", 10)...
    done (took 2.053203776 seconds)
    (54/54) benchmarking ("spvec", "logical", 10000)...
    done (took 2.546667865 seconds)
  done (took 142.032455078 seconds)
  (7/7) benchmarking "matmul"...
    (1/224) benchmarking ("A_mul_B!", "dense 40x400, sparse 400x4000 -> dense 40x4000")...
    done (took 7.033473833 seconds)
    (2/224) benchmarking ("Ac_mul_B!", "sparse 20x200, dense 20x200 -> dense 200x200")...
    done (took 3.269456181 seconds)
    (3/224) benchmarking ("Ac_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.186114572 seconds)
    (4/224) benchmarking ("A_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.035149102 seconds)
    (5/224) benchmarking ("Ac_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.289459477 seconds)
    (6/224) benchmarking ("A_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.241241506 seconds)
    (7/224) benchmarking ("A_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 7.034953062 seconds)
    (8/224) benchmarking ("A_mul_B", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.078398649 seconds)
    (9/224) benchmarking ("At_mul_Bt!", "dense 400x40, sparse 4000x400 -> dense 40x4000")...
    done (took 7.033844325 seconds)
    (10/224) benchmarking ("A_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.234250441 seconds)
    (11/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.287105745 seconds)
    (12/224) benchmarking ("Ac_mul_Bc", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.135199506 seconds)
    (13/224) benchmarking ("Ac_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.034414192 seconds)
    (14/224) benchmarking ("A_mul_Bt!", "sparse 400x4000, dense 40x4000 -> dense 400x40")...
    done (took 7.032671772 seconds)
    (15/224) benchmarking ("At_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.032495696 seconds)
    (16/224) benchmarking ("A_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.033143177 seconds)
    (17/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.181759383 seconds)
    (18/224) benchmarking ("A_mul_Bc", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.10087305 seconds)
    (19/224) benchmarking ("At_mul_B!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.037284304 seconds)
    (20/224) benchmarking ("Ac_mul_B!", "dense 20x20, sparse 20x2000 -> dense 20x2000")...
    done (took 7.032746621 seconds)
    (21/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.057457789 seconds)
    (22/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.23384959 seconds)
    (23/224) benchmarking ("A_mul_Bt", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.154790416 seconds)
    (24/224) benchmarking ("At_mul_B!", "dense 400x40, sparse 400x4000 -> dense 40x4000")...
    done (took 7.038063491 seconds)
    (25/224) benchmarking ("A_mul_B", "dense 5x500, sparse 500x50 -> dense 5x50")...
    done (took 2.059389449 seconds)
    (26/224) benchmarking ("At_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.241470551 seconds)
    (27/224) benchmarking ("A_mul_Bt", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.153779294 seconds)
    (28/224) benchmarking ("Ac_mul_Bc", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.135653598 seconds)
    (29/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.816212612 seconds)
    (30/224) benchmarking ("At_mul_B!", "sparse 400x4000, dense 400x40 -> dense 4000x40")...
    done (took 7.033695291 seconds)
    (31/224) benchmarking ("A_mul_Bt", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.097325217 seconds)
    (32/224) benchmarking ("Ac_mul_Bc!", "dense 200x20, sparse 2000x200 -> dense 20x2000")...
    done (took 7.036401334 seconds)
    (33/224) benchmarking ("At_mul_Bt!", "sparse 4000x400, dense 40x4000 -> dense 400x40")...
    done (took 7.037830726 seconds)
    (34/224) benchmarking ("Ac_mul_B!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.033310624 seconds)
    (35/224) benchmarking ("A_mul_B", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.185471588 seconds)
    (36/224) benchmarking ("At_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.126653543 seconds)
    (37/224) benchmarking ("Ac_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.11674476 seconds)
    (38/224) benchmarking ("At_mul_Bt!", "sparse 40x400, dense 400x40 -> dense 400x400")...
    done (took 7.035841349 seconds)
    (39/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.034234095 seconds)
    (40/224) benchmarking ("A_mul_Bt!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.033557975 seconds)
    (41/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x200 -> dense 20x200")...
    done (took 2.70826631 seconds)
    (42/224) benchmarking ("A_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.236819776 seconds)
    (43/224) benchmarking ("At_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.127839717 seconds)
    (44/224) benchmarking ("At_mul_Bt", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.157059061 seconds)
    (45/224) benchmarking ("At_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.281363837 seconds)
    (46/224) benchmarking ("A_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.246826739 seconds)
    (47/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.641756804 seconds)
    (48/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x200, dense 20x2000 -> dense 200x20")...
    done (took 7.034932054 seconds)
    (49/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 200x2000 -> dense 20x200")...
    done (took 2.663275142 seconds)
    (50/224) benchmarking ("A_mul_Bt", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.198061426 seconds)
    (51/224) benchmarking ("Ac_mul_Bc", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.239250874 seconds)
    (52/224) benchmarking ("A_mul_Bc", "dense 5x50, sparse 500x50 -> dense 5x500")...
    done (took 2.241141403 seconds)
    (53/224) benchmarking ("At_mul_Bt", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.154011585 seconds)
    (54/224) benchmarking ("Ac_mul_Bc!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 7.038426129 seconds)
    (55/224) benchmarking ("A_mul_B!", "sparse 4000x400, dense 400x40 -> dense 4000x40")...
    done (took 6.329680325 seconds)
    (56/224) benchmarking ("Ac_mul_Bc!", "sparse 2000x2000, dense 20x2000 -> dense 2000x20")...
    done (took 7.034754029 seconds)
    (57/224) benchmarking ("Ac_mul_Bc!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.037095564 seconds)
    (58/224) benchmarking ("Ac_mul_B", "sparse 5x5, dense 5x500 -> dense 5x500")...
    done (took 2.25634263 seconds)
    (59/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.252418971 seconds)
    (60/224) benchmarking ("At_mul_Bt", "sparse 50x500, dense 5x50 -> dense 500x5")...
    done (took 2.132649979 seconds)
    (61/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.03911561 seconds)
    (62/224) benchmarking ("A_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.036699872 seconds)
    (63/224) benchmarking ("A_mul_Bc!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.035605328 seconds)
    (64/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.274319336 seconds)
    (65/224) benchmarking ("A_mul_B!", "dense 4000x40, sparse 40x40 -> dense 4000x40")...
    done (took 7.040453912 seconds)
    (66/224) benchmarking ("Ac_mul_B", "sparse 50x500, dense 50x5 -> dense 500x5")...
    done (took 2.126266928 seconds)
    (67/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.038682503 seconds)
    (68/224) benchmarking ("A_mul_Bt!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.034578735 seconds)
    (69/224) benchmarking ("Ac_mul_B", "sparse 5x50, dense 5x50 -> dense 50x50")...
    done (took 2.12976244 seconds)
    (70/224) benchmarking ("At_mul_Bt", "sparse 5x50, dense 50x5 -> dense 50x50")...
    done (took 2.139310594 seconds)
    (71/224) benchmarking ("At_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.263680944 seconds)
    (72/224) benchmarking ("A_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.255522883 seconds)
    (73/224) benchmarking ("At_mul_Bt", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.069292246 seconds)
    (74/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x40 -> dense 400x40")...
    done (took 4.354649625 seconds)
    (75/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x400 -> dense 40x400")...
    done (took 4.523748766 seconds)
    (76/224) benchmarking ("Ac_mul_Bc", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.241166159 seconds)
    (77/224) benchmarking ("A_mul_Bt", "sparse 500x50, dense 5x50 -> dense 500x5")...
    done (took 2.101965245 seconds)
    (78/224) benchmarking ("Ac_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.256340184 seconds)
    (79/224) benchmarking ("At_mul_B!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.040647146 seconds)
    (80/224) benchmarking ("Ac_mul_B!", "sparse 200x200, dense 200x200 -> dense 200x200")...
    done (took 7.03805387 seconds)
    (81/224) benchmarking ("At_mul_B", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.115722371 seconds)
    (82/224) benchmarking ("A_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 3.880487235 seconds)
    (83/224) benchmarking ("A_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.287778504 seconds)
    (84/224) benchmarking ("Ac_mul_B", "dense 5x5, sparse 5x500 -> dense 5x500")...
    done (took 2.278953884 seconds)
    (85/224) benchmarking ("Ac_mul_Bc", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.237917467 seconds)
    (86/224) benchmarking ("Ac_mul_Bc", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.069160542 seconds)
    (87/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 200x2000 -> dense 20x200")...
    done (took 2.68556016 seconds)
    (88/224) benchmarking ("At_mul_Bt!", "sparse 400x4000, dense 40x400 -> dense 4000x40")...
    done (took 7.038084979 seconds)
    (89/224) benchmarking ("Ac_mul_Bc", "dense 5x50, sparse 50x5 -> dense 50x50")...
    done (took 2.223073812 seconds)
    (90/224) benchmarking ("A_mul_Bc", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.227266072 seconds)
    (91/224) benchmarking ("A_mul_Bc", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.270882215 seconds)
    (92/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.284283589 seconds)
    (93/224) benchmarking ("A_mul_B", "dense 50x5, sparse 5x50 -> dense 50x50")...
    done (took 2.273115826 seconds)
    (94/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x400 -> dense 40x400")...
    done (took 5.392244693 seconds)
    (95/224) benchmarking ("Ac_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.038737524 seconds)
    (96/224) benchmarking ("A_mul_Bc!", "sparse 20x200, dense 200x200 -> dense 20x200")...
    done (took 7.036969347 seconds)
    (97/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 400x4000 -> dense 40x400")...
    done (took 4.338840217 seconds)
    (98/224) benchmarking ("At_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.153252906 seconds)
    (99/224) benchmarking ("Ac_mul_Bc!", "dense 20x20, sparse 2000x20 -> dense 20x2000")...
    done (took 6.985241042 seconds)
    (100/224) benchmarking ("A_mul_Bt!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.389406206 seconds)
    (101/224) benchmarking ("At_mul_Bt", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.266683122 seconds)
    (102/224) benchmarking ("Ac_mul_Bc!", "sparse 200x2000, dense 20x200 -> dense 2000x20")...
    done (took 3.568039181 seconds)
    (103/224) benchmarking ("At_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.063319285 seconds)
    (104/224) benchmarking ("Ac_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.321902164 seconds)
    (105/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.165796707 seconds)
    (106/224) benchmarking ("A_mul_Bc!", "sparse 20x20, dense 2000x20 -> dense 20x2000")...
    done (took 7.04155316 seconds)
    (107/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x20 -> dense 200x20")...
    done (took 2.684577276 seconds)
    (108/224) benchmarking ("A_mul_B!", "sparse 40x400, dense 400x400 -> dense 40x400")...
    done (took 7.037357379 seconds)
    (109/224) benchmarking ("A_mul_Bc", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.24366043 seconds)
    (110/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.075943034 seconds)
    (111/224) benchmarking ("Ac_mul_B!", "dense 20x200, sparse 20x200 -> dense 200x200")...
    done (took 7.024129597 seconds)
    (112/224) benchmarking ("At_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.040266575 seconds)
    (113/224) benchmarking ("A_mul_Bc", "dense 50x5, sparse 50x5 -> dense 50x50")...
    done (took 2.227928987 seconds)
    (114/224) benchmarking ("A_mul_Bc!", "sparse 2000x200, dense 20x200 -> dense 2000x20")...
    done (took 2.941196561 seconds)
    (115/224) benchmarking ("At_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.038789235 seconds)
    (116/224) benchmarking ("A_mul_Bt!", "sparse 400x40, dense 400x40 -> dense 400x400")...
    done (took 5.736952557 seconds)
    (117/224) benchmarking ("A_mul_B", "sparse 500x50, dense 50x5 -> dense 500x5")...
    done (took 2.099503395 seconds)
    (118/224) benchmarking ("At_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.043659768 seconds)
    (119/224) benchmarking ("A_mul_Bc", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.234007954 seconds)
    (120/224) benchmarking ("A_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.041701406 seconds)
    (121/224) benchmarking ("A_mul_Bc", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.283250394 seconds)
    (122/224) benchmarking ("A_mul_B!", "dense 400x400, sparse 400x400 -> dense 400x400")...
    done (took 7.041880183 seconds)
    (123/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.270459723 seconds)
    (124/224) benchmarking ("At_mul_Bt!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.932035516 seconds)
    (125/224) benchmarking ("Ac_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.069344726 seconds)
    (126/224) benchmarking ("A_mul_B", "sparse 50x500, dense 500x5 -> dense 50x5")...
    done (took 2.19573336 seconds)
    (127/224) benchmarking ("At_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.283962963 seconds)
    (128/224) benchmarking ("Ac_mul_Bc!", "dense 20x200, sparse 200x20 -> dense 200x200")...
    done (took 6.670069694 seconds)
    (129/224) benchmarking ("At_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.349521678 seconds)
    (130/224) benchmarking ("Ac_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.280759462 seconds)
    (131/224) benchmarking ("At_mul_Bt", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.15286905 seconds)
    (132/224) benchmarking ("A_mul_Bt", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.261682426 seconds)
    (133/224) benchmarking ("A_mul_Bt!", "sparse 4000x400, dense 40x400 -> dense 4000x40")...
    done (took 6.842442648 seconds)
    (134/224) benchmarking ("At_mul_Bt!", "dense 40x4000, sparse 40x40 -> dense 4000x40")...
    done (took 7.041089351 seconds)
    (135/224) benchmarking ("Ac_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.302477763 seconds)
    (136/224) benchmarking ("Ac_mul_B!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.04035547 seconds)
    (137/224) benchmarking ("Ac_mul_B!", "dense 200x20, sparse 200x2000 -> dense 20x2000")...
    done (took 7.038742457 seconds)
    (138/224) benchmarking ("At_mul_Bt", "sparse 500x50, dense 5x500 -> dense 50x5")...
    done (took 2.208490231 seconds)
    (139/224) benchmarking ("A_mul_Bc!", "dense 20x200, sparse 2000x200 -> dense 20x2000")...
    done (took 7.043348064 seconds)
    (140/224) benchmarking ("At_mul_B", "dense 5x500, sparse 5x5 -> dense 500x5")...
    done (took 2.182163608 seconds)
    (141/224) benchmarking ("A_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.043358039 seconds)
    (142/224) benchmarking ("A_mul_Bc", "sparse 500x500, dense 5x500 -> dense 500x5")...
    done (took 2.303858492 seconds)
    (143/224) benchmarking ("At_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.060640969 seconds)
    (144/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.267205532 seconds)
    (145/224) benchmarking ("At_mul_Bt!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.042445808 seconds)
    (146/224) benchmarking ("A_mul_Bc", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.277590075 seconds)
    (147/224) benchmarking ("Ac_mul_B", "dense 500x5, sparse 500x50 -> dense 5x50")...
    done (took 2.072155059 seconds)
    (148/224) benchmarking ("A_mul_Bc", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.072312925 seconds)
    (149/224) benchmarking ("At_mul_B!", "dense 40x40, sparse 40x4000 -> dense 40x4000")...
    done (took 7.045584115 seconds)
    (150/224) benchmarking ("At_mul_B", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.165415395 seconds)
    (151/224) benchmarking ("A_mul_B!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.043356838 seconds)
    (152/224) benchmarking ("Ac_mul_B!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.883620452 seconds)
    (153/224) benchmarking ("A_mul_B", "sparse 5x50, dense 50x50 -> dense 5x50")...
    done (took 2.198421746 seconds)
    (154/224) benchmarking ("A_mul_B!", "dense 40x4000, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.043085026 seconds)
    (155/224) benchmarking ("At_mul_B!", "sparse 40x40, dense 40x4000 -> dense 40x4000")...
    done (took 7.0378824 seconds)
    (156/224) benchmarking ("A_mul_B!", "sparse 400x40, dense 40x400 -> dense 400x400")...
    done (took 5.629425114 seconds)
    (157/224) benchmarking ("A_mul_B!", "sparse 400x4000, dense 4000x40 -> dense 400x40")...
    done (took 7.042038441 seconds)
    (158/224) benchmarking ("At_mul_Bt", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.19470919 seconds)
    (159/224) benchmarking ("Ac_mul_B", "dense 5x50, sparse 5x50 -> dense 50x50")...
    done (took 2.264746865 seconds)
    (160/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 5x50 -> dense 50x5")...
    done (took 2.062688219 seconds)
    (161/224) benchmarking ("A_mul_Bc", "sparse 50x5, dense 50x5 -> dense 50x50")...
    done (took 2.108594866 seconds)
    (162/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 20x200 -> dense 200x20")...
    done (took 2.605975586 seconds)
    (163/224) benchmarking ("Ac_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 7.026742942 seconds)
    (164/224) benchmarking ("Ac_mul_Bc", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.122377845 seconds)
    (165/224) benchmarking ("At_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.064909646 seconds)
    (166/224) benchmarking ("Ac_mul_B!", "sparse 200x2000, dense 200x20 -> dense 2000x20")...
    done (took 3.664188797 seconds)
    (167/224) benchmarking ("A_mul_B!", "dense 400x40, sparse 40x400 -> dense 400x400")...
    done (took 7.041137876 seconds)
    (168/224) benchmarking ("A_mul_B", "dense 5x50, sparse 50x500 -> dense 5x500")...
    done (took 2.293461089 seconds)
    (169/224) benchmarking ("Ac_mul_B!", "sparse 2000x200, dense 2000x20 -> dense 200x20")...
    done (took 7.023765615 seconds)
    (170/224) benchmarking ("Ac_mul_B!", "sparse 200x20, dense 200x200 -> dense 20x200")...
    done (took 6.516072745 seconds)
    (171/224) benchmarking ("Ac_mul_B!", "sparse 2000x2000, dense 2000x20 -> dense 2000x20")...
    done (took 7.040582876 seconds)
    (172/224) benchmarking ("Ac_mul_B", "dense 50x5, sparse 50x500 -> dense 5x500")...
    done (took 2.262291504 seconds)
    (173/224) benchmarking ("A_mul_Bt", "sparse 50x500, dense 5x500 -> dense 50x5")...
    done (took 2.225763212 seconds)
    (174/224) benchmarking ("A_mul_B!", "sparse 4000x4000, dense 4000x40 -> dense 4000x40")...
    done (took 7.045655241 seconds)
    (175/224) benchmarking ("At_mul_Bt!", "dense 40x40, sparse 4000x40 -> dense 40x4000")...
    done (took 7.042009942 seconds)
    (176/224) benchmarking ("A_mul_Bc!", "sparse 200x20, dense 200x20 -> dense 200x200")...
    done (took 2.878707622 seconds)
    (177/224) benchmarking ("A_mul_Bc!", "dense 2000x20, sparse 20x20 -> dense 2000x20")...
    done (took 7.041342006 seconds)
    (178/224) benchmarking ("Ac_mul_B!", "dense 2000x20, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.030993726 seconds)
    (179/224) benchmarking ("Ac_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.200518723 seconds)
    (180/224) benchmarking ("At_mul_B!", "sparse 40x4000, dense 40x40 -> dense 4000x40")...
    done (took 5.449872456 seconds)
    (181/224) benchmarking ("A_mul_Bc!", "dense 200x200, sparse 200x200 -> dense 200x200")...
    done (took 6.957975576 seconds)
    (182/224) benchmarking ("At_mul_B", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.240340513 seconds)
    (183/224) benchmarking ("A_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.048531747 seconds)
    (184/224) benchmarking ("A_mul_Bt", "dense 50x50, sparse 50x50 -> dense 50x50")...
    done (took 2.169615851 seconds)
    (185/224) benchmarking ("At_mul_Bt!", "sparse 40x40, dense 4000x40 -> dense 40x4000")...
    done (took 7.044997181 seconds)
    (186/224) benchmarking ("At_mul_Bt!", "dense 400x400, sparse 40x400 -> dense 400x40")...
    done (took 4.127147126 seconds)
    (187/224) benchmarking ("A_mul_B!", "sparse 4000x40, dense 40x40 -> dense 4000x40")...
    done (took 3.383334189 seconds)
    (188/224) benchmarking ("A_mul_Bc!", "dense 20x2000, sparse 2000x2000 -> dense 20x2000")...
    done (took 7.041017085 seconds)
    (189/224) benchmarking ("At_mul_Bt!", "dense 40x400, sparse 400x40 -> dense 400x400")...
    done (took 7.041441815 seconds)
    (190/224) benchmarking ("At_mul_B!", "dense 40x400, sparse 40x400 -> dense 400x400")...
    done (took 7.044451099 seconds)
    (191/224) benchmarking ("At_mul_B!", "sparse 4000x400, dense 4000x40 -> dense 400x40")...
    done (took 7.043352365 seconds)
    (192/224) benchmarking ("At_mul_Bt!", "sparse 400x40, dense 400x400 -> dense 40x400")...
    done (took 7.041801834 seconds)
    (193/224) benchmarking ("A_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.255119736 seconds)
    (194/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 50x500 -> dense 5x50")...
    done (took 2.069438713 seconds)
    (195/224) benchmarking ("Ac_mul_Bc!", "sparse 20x200, dense 200x20 -> dense 200x200")...
    done (took 3.47701858 seconds)
    (196/224) benchmarking ("At_mul_B", "sparse 500x50, dense 500x5 -> dense 50x5")...
    done (took 2.17891269 seconds)
    (197/224) benchmarking ("A_mul_Bc", "sparse 5x5, dense 500x5 -> dense 5x500")...
    done (took 2.299742271 seconds)
    (198/224) benchmarking ("A_mul_Bc!", "sparse 2000x20, dense 20x20 -> dense 2000x20")...
    done (took 2.351315325 seconds)
    (199/224) benchmarking ("Ac_mul_Bc", "dense 50x5, sparse 500x50 -> dense 5x500")...
    done (took 2.243218724 seconds)
    (200/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 50x500 -> dense 5x50")...
    done (took 2.085797731 seconds)
    (201/224) benchmarking ("A_mul_Bt!", "sparse 4000x4000, dense 40x4000 -> dense 4000x40")...
    done (took 7.047132695 seconds)
    (202/224) benchmarking ("Ac_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.2669635 seconds)
    (203/224) benchmarking ("A_mul_Bt!", "dense 40x400, sparse 4000x400 -> dense 40x4000")...
    done (took 7.04705059 seconds)
    (204/224) benchmarking ("A_mul_B", "sparse 50x5, dense 5x50 -> dense 50x50")...
    done (took 2.10729782 seconds)
    (205/224) benchmarking ("A_mul_Bc!", "sparse 200x2000, dense 20x2000 -> dense 200x20")...
    done (took 7.046918392 seconds)
    (206/224) benchmarking ("A_mul_B", "dense 50x50, sparse 50x5 -> dense 50x5")...
    done (took 2.065570638 seconds)
    (207/224) benchmarking ("At_mul_Bt", "sparse 50x50, dense 50x50 -> dense 50x50")...
    done (took 2.253099096 seconds)
    (208/224) benchmarking ("At_mul_Bt!", "sparse 400x400, dense 400x400 -> dense 400x400")...
    done (took 7.049147328 seconds)
    (209/224) benchmarking ("At_mul_B", "sparse 500x500, dense 500x5 -> dense 500x5")...
    done (took 2.249761607 seconds)
    (210/224) benchmarking ("Ac_mul_Bc", "dense 500x5, sparse 500x500 -> dense 5x500")...
    done (took 2.27885276 seconds)
    (211/224) benchmarking ("Ac_mul_Bc!", "sparse 20x2000, dense 20x20 -> dense 2000x20")...
    done (took 2.934151458 seconds)
    (212/224) benchmarking ("A_mul_Bt", "sparse 500x5, dense 5x5 -> dense 500x5")...
    done (took 2.090751855 seconds)
    (213/224) benchmarking ("At_mul_B!", "sparse 40x400, dense 40x400 -> dense 400x400")...
    done (took 7.046634798 seconds)
    (214/224) benchmarking ("At_mul_B!", "dense 4000x40, sparse 4000x4000 -> dense 40x4000")...
    done (took 7.045877556 seconds)
    (215/224) benchmarking ("Ac_mul_B!", "sparse 20x20, dense 20x2000 -> dense 20x2000")...
    done (took 6.952445128 seconds)
    (216/224) benchmarking ("A_mul_Bt", "dense 5x500, sparse 500x500 -> dense 5x500")...
    done (took 2.189600144 seconds)
    (217/224) benchmarking ("At_mul_Bt", "sparse 5x500, dense 5x5 -> dense 500x5")...
    done (took 2.129671671 seconds)
    (218/224) benchmarking ("Ac_mul_Bc!", "dense 20x2000, sparse 20x20 -> dense 2000x20")...
    done (took 7.048989029 seconds)
    (219/224) benchmarking ("A_mul_Bt!", "dense 400x40, sparse 400x40 -> dense 400x400")...
    done (took 7.047051254 seconds)
    (220/224) benchmarking ("A_mul_Bt", "dense 500x5, sparse 5x5 -> dense 500x5")...
    done (took 2.156963275 seconds)
    (221/224) benchmarking ("A_mul_Bt", "dense 5x5, sparse 500x5 -> dense 5x500")...
    done (took 2.163366419 seconds)
    (222/224) benchmarking ("Ac_mul_Bc", "sparse 50x5, dense 50x50 -> dense 5x50")...
    done (took 2.225578495 seconds)
    (223/224) benchmarking ("A_mul_Bc!", "dense 200x20, sparse 200x20 -> dense 200x200")...
    done (took 6.862756548 seconds)
    (224/224) benchmarking ("A_mul_Bt!", "dense 40x4000, sparse 400x4000 -> dense 40x400")...
    done (took 4.207649897 seconds)
  done (took 938.717732092 seconds)
done (took 1276.465285379 seconds)
(12/20) benchmarking "broadcast"...
  (1/6) benchmarking "fusion"...
    (1/4) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.045790127 seconds)
    (2/4) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.047027176 seconds)
    (3/4) benchmarking ("Float64", (1000, 1000), 3)...
    done (took 7.046517922 seconds)
    (4/4) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.018904854 seconds)
  done (took 30.129126012 seconds)
  (2/6) benchmarking "typeargs"...
    (1/6) benchmarking ("tuple", 10)...
    done (took 2.047226103 seconds)
    (2/6) benchmarking ("array", 5)...
    done (took 2.048739214 seconds)
    (3/6) benchmarking ("tuple", 3)...
    done (took 2.048297411 seconds)
    (4/6) benchmarking ("array", 3)...
    done (took 2.047774849 seconds)
    (5/6) benchmarking ("tuple", 5)...
    done (took 2.048563313 seconds)
    (6/6) benchmarking ("array", 10)...
    done (took 2.045779554 seconds)
  done (took 14.259974991 seconds)
  (3/6) benchmarking "dotop"...
    (1/3) benchmarking ("Float64", (1000, 1000), 2)...
    done (took 7.045094235 seconds)
    (2/3) benchmarking ("Float64", (1000000,), 1)...
    done (took 7.046867613 seconds)
    (3/3) benchmarking ("Float64", (1000000,), 2)...
    done (took 7.045906033 seconds)
  done (took 23.109365161 seconds)
  (4/6) benchmarking "sparse"...
    (1/4) benchmarking ((1000, 1000), 1)...
    done (took 2.12231537 seconds)
    (2/4) benchmarking ((10000000,), 1)...
    done (took 2.46554799 seconds)
    (3/4) benchmarking ((1000, 1000), 2)...
    done (took 2.186500739 seconds)
    (4/4) benchmarking ((10000000,), 2)...
    done (took 2.484880109 seconds)
  done (took 11.233733531 seconds)
  (5/6) benchmarking "mix_scalar_tuple"...
    (1/9) benchmarking (3, "scal_tup_x3")...
    done (took 2.048726026 seconds)
    (2/9) benchmarking (3, "scal_tup")...
    done (took 2.046828973 seconds)
    (3/9) benchmarking (3, "tup_tup")...
    done (took 2.048215033 seconds)
    (4/9) benchmarking (5, "tup_tup")...
    done (took 2.049545413 seconds)
    (5/9) benchmarking (10, "scal_tup")...
    done (took 2.050652572 seconds)
    (6/9) benchmarking (10, "scal_tup_x3")...
    done (took 2.048996663 seconds)
    (7/9) benchmarking (5, "scal_tup")...
    done (took 2.046522428 seconds)
    (8/9) benchmarking (5, "scal_tup_x3")...
    done (took 2.050880087 seconds)
    (9/9) benchmarking (10, "tup_tup")...
    done (took 2.053239508 seconds)
  done (took 20.417095475 seconds)
  (6/6) benchmarking "26942"...
  done (took 4.269917036 seconds)
done (took 105.40074609 seconds)
(13/20) benchmarking "union"...
  (1/1) benchmarking "array"...
    (1/341) benchmarking ("sort", Union{Missing, Int64}, true)...
    done (took 7.048622697 seconds)
    (2/341) benchmarking ("perf_sum", ComplexF64, false)...
    done (took 2.129710296 seconds)
    (3/341) benchmarking ("map", *, Int64, (false, true))...
    done (took 2.443507784 seconds)
    (4/341) benchmarking ("perf_sum", Bool, false)...
    done (took 2.061944569 seconds)
    (5/341) benchmarking ("sort", Union{Missing, Float32}, true)...
    done (took 7.047110548 seconds)
    (6/341) benchmarking ("perf_countnothing", Float64, false)...
    done (took 2.060662073 seconds)
    (7/341) benchmarking ("broadcast", abs, BigInt, false)...
    done (took 7.048326132 seconds)
    (8/341) benchmarking ("perf_sum", Bool, true)...
    done (took 3.581284596 seconds)
    (9/341) benchmarking ("broadcast", abs, BigInt, true)...
    done (took 7.40809185 seconds)
    (10/341) benchmarking ("collect", "filter", Int8, true)...
    done (took 3.206040595 seconds)
    (11/341) benchmarking ("map", identity, ComplexF64, true)...
    done (took 2.514601868 seconds)
    (12/341) benchmarking ("broadcast", abs, Float64, false)...
    done (took 2.160872248 seconds)
    (13/341) benchmarking ("perf_binaryop", *, Int8, (false, false))...
    done (took 2.307911889 seconds)
    (14/341) benchmarking ("perf_sum", BigFloat, true)...
    done (took 7.050600942 seconds)
    (15/341) benchmarking ("sort", Union{Nothing, Int8}, false)...
    done (took 7.095774508 seconds)
    (16/341) benchmarking ("perf_sum2", Int8, true)...
    done (took 2.055746095 seconds)
    (17/341) benchmarking ("skipmissing", collect, Float64, false)...
    done (took 2.69827163 seconds)
    (18/341) benchmarking ("skipmissing", collect, Union{Missing, Int64}, true)...
    done (took 2.805913464 seconds)
    (19/341) benchmarking ("perf_sum4", Int64, true)...
    done (took 2.075361387 seconds)
    (20/341) benchmarking ("broadcast", *, Float32, (true, true))...
    done (took 2.378032987 seconds)
    (21/341) benchmarking ("map", *, Float32, (false, true))...
    done (took 2.371450339 seconds)
    (22/341) benchmarking ("perf_binaryop", *, BigInt, (false, false))...
    done (took 7.054478991 seconds)
    (23/341) benchmarking ("map", *, BigInt, (true, true))...
    done (took 9.612713084 seconds)
    (24/341) benchmarking ("map", abs, BigInt, true)...
    done (took 7.348634452 seconds)
    (25/341) benchmarking ("perf_simplecopy", BigInt, false)...
    done (took 2.40306021 seconds)
    (26/341) benchmarking ("map", abs, Int8, true)...
    done (took 2.19928538 seconds)
    (27/341) benchmarking ("perf_sum3", Bool, true)...
    done (took 2.20702472 seconds)
    (28/341) benchmarking ("perf_sum3", ComplexF64, true)...
    done (took 2.209838129 seconds)
    (29/341) benchmarking ("map", *, BigFloat, (false, false))...
    done (took 7.050715276 seconds)
    (30/341) benchmarking ("broadcast", abs, ComplexF64, false)...
    done (took 3.602180094 seconds)
    (31/341) benchmarking ("perf_countnothing", Bool, false)...
    done (took 2.063789823 seconds)
    (32/341) benchmarking ("collect", "filter", Int64, false)...
    done (took 2.794859415 seconds)
    (33/341) benchmarking ("broadcast", abs, BigFloat, false)...
    done (took 7.056945526 seconds)
    (34/341) benchmarking ("collect", "filter", ComplexF64, false)...
    done (took 3.019380818 seconds)
    (35/341) benchmarking ("map", *, Bool, (false, false))...
    done (took 2.271575701 seconds)
    (36/341) benchmarking ("perf_sum2", Float32, true)...
    done (took 2.145313452 seconds)
    (37/341) benchmarking ("map", identity, Int64, false)...
    done (took 2.144663098 seconds)
    (38/341) benchmarking ("skipmissing", collect, Int8, false)...
    done (took 2.519326881 seconds)
    (39/341) benchmarking ("collect", "filter", BigFloat, false)...
    done (took 2.949114488 seconds)
    (40/341) benchmarking ("perf_sum2", ComplexF64, true)...
    done (took 2.192652232 seconds)
    (41/341) benchmarking ("broadcast", *, Int8, (true, true))...
    done (took 2.369690911 seconds)
    (42/341) benchmarking ("perf_simplecopy", Bool, false)...
    done (took 2.142143595 seconds)
    (43/341) benchmarking ("perf_sum", ComplexF64, true)...
    done (took 2.181557355 seconds)
    (44/341) benchmarking ("sort", Int8, false)...
    done (took 4.994356942 seconds)
    (45/341) benchmarking ("perf_sum", Float64, true)...
    done (took 2.188811475 seconds)
    (46/341) benchmarking ("perf_binaryop", *, Int8, (false, true))...
    done (took 2.365674119 seconds)
    (47/341) benchmarking ("skipmissing", collect, Union{Nothing, ComplexF64}, false)...
    done (took 3.409743764 seconds)
    (48/341) benchmarking ("map", abs, Int8, false)...
    done (took 2.154491981 seconds)
    (49/341) benchmarking ("map", *, Float64, (false, true))...
    done (took 2.440800279 seconds)
    (50/341) benchmarking ("perf_sum3", Int64, true)...
    done (took 2.212708182 seconds)
    (51/341) benchmarking ("map", identity, Bool, true)...
    done (took 2.198350848 seconds)
    (52/341) benchmarking ("broadcast", identity, Int64, true)...
    done (took 2.329264383 seconds)
    (53/341) benchmarking ("perf_sum", BigInt, false)...
    done (took 7.914080458 seconds)
    (54/341) benchmarking ("perf_sum3", Bool, false)...
    done (took 2.242825082 seconds)
    (55/341) benchmarking ("collect", "all", Float32, false)...
    done (took 2.130015007 seconds)
    (56/341) benchmarking ("perf_sum4", Float64, true)...
    done (took 2.075273857 seconds)
    (57/341) benchmarking ("perf_sum4", BigInt, false)...
    done (took 8.991312396 seconds)
    (58/341) benchmarking ("broadcast", abs, Bool, false)...
    done (took 2.40338003 seconds)
    (59/341) benchmarking ("broadcast", identity, Float32, false)...
    done (took 2.135570299 seconds)
    (60/341) benchmarking ("map", *, Int8, (true, true))...
    done (took 2.364591075 seconds)
    (61/341) benchmarking ("sort", Bool, false)...
    done (took 2.275891093 seconds)
    (62/341) benchmarking ("perf_countequals", "ComplexF64")...
    done (took 2.473747017 seconds)
    (63/341) benchmarking ("perf_sum3", Int8, true)...
    done (took 2.185728576 seconds)
    (64/341) benchmarking ("broadcast", *, BigInt, (false, false))...
    done (took 7.051426852 seconds)
    (65/341) benchmarking ("broadcast", *, BigFloat, (false, false))...
    done (took 8.249944765 seconds)
    (66/341) benchmarking ("skipmissing", collect, Union{Nothing, Bool}, false)...
    done (took 3.103212593 seconds)
    (67/341) benchmarking ("skipmissing", collect, Union{Nothing, BigInt}, false)...
    done (took 2.929482784 seconds)
    (68/341) benchmarking ("sort", BigFloat, false)...
    done (took 7.061731765 seconds)
    (69/341) benchmarking ("sort", Int64, false)...
    done (took 5.698713565 seconds)
    (70/341) benchmarking ("broadcast", abs, Int8, true)...
    done (took 2.243381112 seconds)
    (71/341) benchmarking ("collect", "all", Int8, false)...
    done (took 2.14215342 seconds)
    (72/341) benchmarking ("perf_binaryop", *, Float32, (false, true))...
    done (took 2.400101231 seconds)
    (73/341) benchmarking ("broadcast", *, Int8, (false, true))...
    done (took 2.380404339 seconds)
    (74/341) benchmarking ("skipmissing", sum, Union{Nothing, Float64}, false)...
    done (took 2.18364616 seconds)
    (75/341) benchmarking ("perf_countequals", "Int8")...
    done (took 2.302264274 seconds)
    (76/341) benchmarking ("perf_binaryop", *, BigFloat, (false, false))...
    done (took 7.076398716 seconds)
    (77/341) benchmarking ("perf_simplecopy", Bool, true)...
    done (took 2.199641669 seconds)
    (78/341) benchmarking ("perf_sum", Int64, true)...
    done (took 2.070480632 seconds)
    (79/341) benchmarking ("perf_sum2", BigInt, true)...
    done (took 7.978340547 seconds)
    (80/341) benchmarking ("perf_sum2", BigFloat, true)...
    done (took 7.153589594 seconds)
    (81/341) benchmarking ("collect", "filter", Float32, true)...
    done (took 3.271932986 seconds)
    (82/341) benchmarking ("map", *, ComplexF64, (false, true))...
    done (took 2.826014987 seconds)
    (83/341) benchmarking ("perf_sum", Float32, false)...
    done (took 2.129656105 seconds)
    (84/341) benchmarking ("perf_countnothing", BigFloat, false)...
    done (took 2.112257398 seconds)
    (85/341) benchmarking ("perf_sum3", Int64, false)...
    done (took 2.13815935 seconds)
    (86/341) benchmarking ("perf_sum4", ComplexF64, false)...
    done (took 2.1330172 seconds)
    (87/341) benchmarking ("skipmissing", sum, Union{Missing, Float32}, true)...
    done (took 2.151267955 seconds)
    (88/341) benchmarking ("skipmissing", sum, Union{Missing, Float64}, true)...
    done (took 2.15344628 seconds)
    (89/341) benchmarking ("perf_simplecopy", Float64, true)...
    done (took 2.273507097 seconds)
    (90/341) benchmarking ("map", abs, BigFloat, false)...
    done (took 7.054695921 seconds)
    (91/341) benchmarking ("map", identity, BigInt, true)...
    done (took 2.43785794 seconds)
    (92/341) benchmarking ("perf_sum2", Int64, false)...
    done (took 2.068394063 seconds)
    (93/341) benchmarking ("broadcast", *, ComplexF64, (false, false))...
    done (took 2.437616609 seconds)
    (94/341) benchmarking ("map", identity, BigInt, false)...
    done (took 2.289134044 seconds)
    (95/341) benchmarking ("perf_binaryop", *, Float64, (false, true))...
    done (took 2.448174988 seconds)
    (96/341) benchmarking ("broadcast", *, Bool, (true, true))...
    done (took 2.36299817 seconds)
    (97/341) benchmarking ("perf_simplecopy", Int8, false)...
    done (took 2.142830089 seconds)
    (98/341) benchmarking ("skipmissing", collect, BigInt, false)...
    done (took 2.837558291 seconds)
    (99/341) benchmarking ("broadcast", *, Float64, (false, true))...
    done (took 2.47144617 seconds)
    (100/341) benchmarking ("perf_simplecopy", Float32, true)...
    done (took 2.241383664 seconds)
    (101/341) benchmarking ("map", identity, Bool, false)...
    done (took 2.135842984 seconds)
    (102/341) benchmarking ("perf_sum2", BigInt, false)...
    done (took 7.977815603 seconds)
    (103/341) benchmarking ("perf_binaryop", *, Int64, (false, true))...
    done (took 2.541873433 seconds)
    (104/341) benchmarking ("broadcast", *, BigFloat, (false, true))...
    done (took 7.053808735 seconds)
    (105/341) benchmarking ("collect", "filter", Int64, true)...
    done (took 3.324385763 seconds)
    (106/341) benchmarking ("skipmissing", sum, Float32, false)...
    done (took 2.078232746 seconds)
    (107/341) benchmarking ("perf_sum4", Float32, true)...
    done (took 2.060303758 seconds)
    (108/341) benchmarking ("map", abs, ComplexF64, false)...
    done (took 3.537616073 seconds)
    (109/341) benchmarking ("perf_sum", BigInt, true)...
    done (took 7.959306378 seconds)
    (110/341) benchmarking ("broadcast", *, Int64, (false, false))...
    done (took 2.365086531 seconds)
    (111/341) benchmarking ("map", identity, Float64, false)...
    done (took 2.155834036 seconds)
    (112/341) benchmarking ("broadcast", abs, Bool, true)...
    done (took 2.215714025 seconds)
    (113/341) benchmarking ("perf_binaryop", *, Float32, (true, true))...
    done (took 2.40480283 seconds)
    (114/341) benchmarking ("sort", Float32, false)...
    done (took 5.736947981 seconds)
    (115/341) benchmarking ("perf_sum3", Float32, true)...
    done (took 2.169797308 seconds)
    (116/341) benchmarking ("map", *, Int8, (false, false))...
    done (took 2.266448218 seconds)
    (117/341) benchmarking ("skipmissing", collect, Union{Nothing, BigFloat}, false)...
    done (took 2.954083487 seconds)
    (118/341) benchmarking ("perf_sum4", Int64, false)...
    done (took 2.082963375 seconds)
    (119/341) benchmarking ("sort", Union{Nothing, Float64}, false)...
    done (took 7.052874844 seconds)
    (120/341) benchmarking ("broadcast", identity, Int8, true)...
    done (took 2.215895103 seconds)
    (121/341) benchmarking ("broadcast", abs, Float32, true)...
    done (took 2.255182728 seconds)
    (122/341) benchmarking ("perf_simplecopy", Float64, false)...
    done (took 2.268634285 seconds)
    (123/341) benchmarking ("map", identity, Float32, false)...
    done (took 2.138471416 seconds)
    (124/341) benchmarking ("perf_sum", Float32, true)...
    done (took 2.156905616 seconds)
    (125/341) benchmarking ("skipmissing", sum, Union{Nothing, Bool}, false)...
    done (took 2.185336683 seconds)
    (126/341) benchmarking ("broadcast", abs, Int8, false)...
    done (took 2.204548488 seconds)
    (127/341) benchmarking ("broadcast", *, BigFloat, (true, true))...
    done (took 7.055139135 seconds)
    (128/341) benchmarking ("broadcast", identity, Int8, false)...
    done (took 2.17737146 seconds)
    (129/341) benchmarking ("map", *, ComplexF64, (true, true))...
    done (took 2.804582871 seconds)
    (130/341) benchmarking ("collect", "filter", Bool, true)...
    done (took 3.125080712 seconds)
    (131/341) benchmarking ("map", abs, Float32, true)...
    done (took 2.260487514 seconds)
    (132/341) benchmarking ("collect", "all", Float64, false)...
    done (took 2.16494777 seconds)
    (133/341) benchmarking ("map", *, Bool, (true, true))...
    done (took 2.383532825 seconds)
    (134/341) benchmarking ("perf_countequals", "Float32")...
    done (took 2.355034896 seconds)
    (135/341) benchmarking ("perf_simplecopy", Int8, true)...
    done (took 2.166356281 seconds)
    (136/341) benchmarking ("skipmissing", collect, Bool, false)...
    done (took 2.533689988 seconds)
    (137/341) benchmarking ("perf_countnothing", Int64, true)...
    done (took 2.076435541 seconds)
    (138/341) benchmarking ("perf_binaryop", *, Float64, (false, false))...
    done (took 2.389971624 seconds)
    (139/341) benchmarking ("skipmissing", collect, Union{Missing, BigInt}, true)...
    done (took 2.935211917 seconds)
    (140/341) benchmarking ("skipmissing", collect, Union{Missing, Bool}, true)...
    done (took 2.661991041 seconds)
    (141/341) benchmarking ("map", abs, ComplexF64, true)...
    done (took 3.527936897 seconds)
    (142/341) benchmarking ("sort", Float64, false)...
    done (took 5.765345016 seconds)
    (143/341) benchmarking ("perf_sum4", Int8, true)...
    done (took 2.063016886 seconds)
    (144/341) benchmarking ("map", abs, Float64, true)...
    done (took 2.320193924 seconds)
    (145/341) benchmarking ("skipmissing", sum, Union{Missing, Bool}, true)...
    done (took 2.081073942 seconds)
    (146/341) benchmarking ("broadcast", identity, Bool, false)...
    done (took 2.269504065 seconds)
    (147/341) benchmarking ("broadcast", *, BigInt, (true, true))...
    done (took 8.325340633 seconds)
    (148/341) benchmarking ("skipmissing", sum, BigFloat, false)...
    done (took 7.15135665 seconds)
    (149/341) benchmarking ("collect", "all", BigInt, true)...
    done (took 2.48512658 seconds)
    (150/341) benchmarking ("perf_binaryop", *, Float32, (false, false))...
    done (took 2.345897055 seconds)
    (151/341) benchmarking ("broadcast", identity, Float32, true)...
    done (took 2.282350151 seconds)
    (152/341) benchmarking ("perf_binaryop", *, ComplexF64, (true, true))...
    done (took 2.764510117 seconds)
    (153/341) benchmarking ("collect", "all", Int8, true)...
    done (took 2.190769398 seconds)
    (154/341) benchmarking ("map", *, Int64, (false, false))...
    done (took 2.322317868 seconds)
    (155/341) benchmarking ("perf_simplecopy", BigFloat, false)...
    done (took 2.328356373 seconds)
    (156/341) benchmarking ("perf_sum4", Bool, false)...
    done (took 2.076998632 seconds)
    (157/341) benchmarking ("map", identity, Float32, true)...
    done (took 2.256960229 seconds)
    (158/341) benchmarking ("skipmissing", collect, Union{Missing, Float64}, true)...
    done (took 2.837625331 seconds)
    (159/341) benchmarking ("sort", Union{Missing, Float64}, true)...
    done (took 7.066422695 seconds)
    (160/341) benchmarking ("perf_simplecopy", ComplexF64, false)...
    done (took 2.454952733 seconds)
    (161/341) benchmarking ("broadcast", identity, ComplexF64, true)...
    done (took 2.593113106 seconds)
    (162/341) benchmarking ("skipmissing", collect, Union{Missing, Float32}, true)...
    done (took 2.710351457 seconds)
    (163/341) benchmarking ("perf_sum", Int8, false)...
    done (took 2.078308288 seconds)
    (164/341) benchmarking ("perf_countequals", "Int64")...
    done (took 2.310699477 seconds)
    (165/341) benchmarking ("perf_countequals", "Bool")...
    done (took 2.353117151 seconds)
    (166/341) benchmarking ("skipmissing", collect, Union{Missing, ComplexF64}, true)...
    done (took 3.069367237 seconds)
    (167/341) benchmarking ("perf_sum3", BigFloat, false)...
    done (took 7.062289109 seconds)
    (168/341) benchmarking ("map", *, Bool, (false, true))...
    done (took 2.415333441 seconds)
    (169/341) benchmarking ("perf_sum3", BigInt, false)...
    done (took 8.085420375 seconds)
    (170/341) benchmarking ("perf_countnothing", Int64, false)...
    done (took 2.165275249 seconds)
    (171/341) benchmarking ("perf_countnothing", Float32, true)...
    done (took 2.067790993 seconds)
    (172/341) benchmarking ("perf_sum4", ComplexF64, true)...
    done (took 2.20845894 seconds)
    (173/341) benchmarking ("broadcast", *, Float32, (false, false))...
    done (took 2.237416288 seconds)
    (174/341) benchmarking ("skipmissing", collect, Int64, false)...
    done (took 2.719498661 seconds)
    (175/341) benchmarking ("broadcast", *, Int64, (false, true))...
    done (took 2.489541246 seconds)
    (176/341) benchmarking ("perf_binaryop", *, BigFloat, (false, true))...
    done (took 7.060064837 seconds)
    (177/341) benchmarking ("skipmissing", sum, BigInt, false)...
    done (took 8.245453693 seconds)
    (178/341) benchmarking ("perf_simplecopy", BigInt, true)...
    done (took 2.462347837 seconds)
    (179/341) benchmarking ("perf_sum2", Int64, true)...
    done (took 2.080646407 seconds)
    (180/341) benchmarking ("skipmissing", sum, Union{Missing, Int8}, true)...
    done (took 2.079411455 seconds)
    (181/341) benchmarking ("perf_sum2", ComplexF64, false)...
    done (took 2.188924294 seconds)
    (182/341) benchmarking ("perf_binaryop", *, Bool, (true, true))...
    done (took 2.358345517 seconds)
    (183/341) benchmarking ("map", abs, Int64, false)...
    done (took 2.178385834 seconds)
    (184/341) benchmarking ("map", abs, Bool, false)...
    done (took 2.142131722 seconds)
    (185/341) benchmarking ("perf_sum4", BigInt, true)...
    done (took 8.891955404 seconds)
    (186/341) benchmarking ("sort", Union{Nothing, BigInt}, false)...
    done (took 7.196717541 seconds)
    (187/341) benchmarking ("broadcast", *, Int8, (false, false))...
    done (took 2.251819675 seconds)
    (188/341) benchmarking ("broadcast", *, Float64, (false, false))...
    done (took 2.264215129 seconds)
    (189/341) benchmarking ("sort", Union{Nothing, Int64}, false)...
    done (took 7.063030883 seconds)
    (190/341) benchmarking ("broadcast", identity, BigInt, false)...
    done (took 2.365052378 seconds)
    (191/341) benchmarking ("collect", "filter", Float32, false)...
    done (took 2.704943866 seconds)
    (192/341) benchmarking ("perf_sum4", Float64, false)...
    done (took 2.099079146 seconds)
    (193/341) benchmarking ("perf_binaryop", *, Int64, (true, true))...
    done (took 2.454176736 seconds)
    (194/341) benchmarking ("skipmissing", collect, Union{Nothing, Int8}, false)...
    done (took 3.031715312 seconds)
    (195/341) benchmarking ("perf_sum4", Int8, false)...
    done (took 2.078885237 seconds)
    (196/341) benchmarking ("broadcast", *, Float32, (false, true))...
    done (took 2.405814627 seconds)
    (197/341) benchmarking ("map", *, BigInt, (false, true))...
    done (took 7.065118662 seconds)
    (198/341) benchmarking ("skipmissing", sum, Bool, false)...
    done (took 3.660256836 seconds)
    (199/341) benchmarking ("map", identity, Int8, false)...
    done (took 2.142830228 seconds)
    (200/341) benchmarking ("broadcast", *, Int64, (true, true))...
    done (took 2.475480659 seconds)
    (201/341) benchmarking ("skipmissing", sum, Float64, false)...
    done (took 2.078801302 seconds)
    (202/341) benchmarking ("perf_countnothing", Float32, false)...
    done (took 2.066574656 seconds)
    (203/341) benchmarking ("map", identity, Float64, true)...
    done (took 2.336198435 seconds)
    (204/341) benchmarking ("broadcast", identity, BigFloat, false)...
    done (took 2.375430089 seconds)
    (205/341) benchmarking ("map", abs, Float64, false)...
    done (took 2.168605354 seconds)
    (206/341) benchmarking ("map", *, Float64, (true, true))...
    done (took 2.458542215 seconds)
    (207/341) benchmarking ("map", *, BigFloat, (true, true))...
    done (took 7.060749375 seconds)
    (208/341) benchmarking ("perf_simplecopy", Float32, false)...
    done (took 2.215628809 seconds)
    (209/341) benchmarking ("sort", Union{Missing, BigInt}, true)...
    done (took 7.065120116 seconds)
    (210/341) benchmarking ("map", abs, Bool, true)...
    done (took 2.212487502 seconds)
    (211/341) benchmarking ("collect", "all", ComplexF64, true)...
    done (took 2.520241261 seconds)
    (212/341) benchmarking ("perf_binaryop", *, Int8, (true, true))...
    done (took 2.371790724 seconds)
    (213/341) benchmarking ("map", *, Float32, (false, false))...
    done (took 2.287222291 seconds)
    (214/341) benchmarking ("perf_countnothing", Float64, true)...
    done (took 2.083295772 seconds)
    (215/341) benchmarking ("skipmissing", sum, Union{Nothing, Int8}, false)...
    done (took 2.191295789 seconds)
    (216/341) benchmarking ("perf_binaryop", *, Float64, (true, true))...
    done (took 2.449963732 seconds)
    (217/341) benchmarking ("broadcast", identity, Bool, true)...
    done (took 2.219395493 seconds)
    (218/341) benchmarking ("collect", "all", BigInt, false)...
    done (took 2.304509095 seconds)
    (219/341) benchmarking ("perf_sum3", Float64, true)...
    done (took 2.168424399 seconds)
    (220/341) benchmarking ("broadcast", *, ComplexF64, (true, true))...
    done (took 2.82626922 seconds)
    (221/341) benchmarking ("perf_sum", Float64, false)...
    done (took 2.141402751 seconds)
    (222/341) benchmarking ("perf_binaryop", *, Bool, (false, true))...
    done (took 2.366361487 seconds)
    (223/341) benchmarking ("collect", "filter", Float64, true)...
    done (took 3.363074376 seconds)
    (224/341) benchmarking ("collect", "all", ComplexF64, false)...
    done (took 2.275684366 seconds)
    (225/341) benchmarking ("perf_sum2", Bool, false)...
    done (took 2.076942596 seconds)
    (226/341) benchmarking ("skipmissing", sum, Union{Nothing, Int64}, false)...
    done (took 2.18512242 seconds)
    (227/341) benchmarking ("map", *, Float32, (true, true))...
    done (took 2.367220508 seconds)
    (228/341) benchmarking ("perf_sum3", BigFloat, true)...
    done (took 7.067416438 seconds)
    (229/341) benchmarking ("broadcast", *, BigInt, (false, true))...
    done (took 8.383782468 seconds)
    (230/341) benchmarking ("perf_countnothing", BigFloat, true)...
    done (took 2.220425911 seconds)
    (231/341) benchmarking ("broadcast", abs, Int64, true)...
    done (took 2.35843042 seconds)
    (232/341) benchmarking ("collect", "all", Float64, true)...
    done (took 2.341040192 seconds)
    (233/341) benchmarking ("broadcast", abs, Int64, false)...
    done (took 2.202292887 seconds)
    (234/341) benchmarking ("skipmissing", collect, Union{Missing, BigFloat}, true)...
    done (took 2.955325895 seconds)
    (235/341) benchmarking ("map", *, Int8, (false, true))...
    done (took 2.386717846 seconds)
    (236/341) benchmarking ("collect", "filter", Float64, false)...
    done (took 2.907038209 seconds)
    (237/341) benchmarking ("broadcast", identity, Int64, false)...
    done (took 2.179144533 seconds)
    (238/341) benchmarking ("map", *, ComplexF64, (false, false))...
    done (took 2.469698981 seconds)
    (239/341) benchmarking ("perf_simplecopy", Int64, true)...
    done (took 2.289424992 seconds)
    (240/341) benchmarking ("sort", Union{Nothing, BigFloat}, false)...
    done (took 7.067928747 seconds)
    (241/341) benchmarking ("map", identity, Int8, true)...
    done (took 2.20078022 seconds)
    (242/341) benchmarking ("broadcast", identity, ComplexF64, false)...
    done (took 2.275016618 seconds)
    (243/341) benchmarking ("broadcast", identity, BigInt, true)...
    done (took 2.450448636 seconds)
    (244/341) benchmarking ("collect", "filter", ComplexF64, true)...
    done (took 3.464933834 seconds)
    (245/341) benchmarking ("skipmissing", sum, Int64, false)...
    done (took 2.074998787 seconds)
    (246/341) benchmarking ("perf_countequals", "Float64")...
    done (took 2.361435006 seconds)
    (247/341) benchmarking ("skipmissing", collect, Union{Nothing, Float64}, false)...
    done (took 3.265724254 seconds)
    (248/341) benchmarking ("perf_countequals", "BigInt")...
    done (took 2.723840964 seconds)
    (249/341) benchmarking ("map", *, Float64, (false, false))...
    done (took 2.286024325 seconds)
    (250/341) benchmarking ("perf_countnothing", BigInt, true)...
    done (took 2.128249119 seconds)
    (251/341) benchmarking ("sort", Union{Nothing, Bool}, false)...
    done (took 7.063311477 seconds)
    (252/341) benchmarking ("perf_binaryop", *, Int64, (false, false))...
    done (took 2.409840382 seconds)
    (253/341) benchmarking ("collect", "filter", BigInt, true)...
    done (took 3.036263746 seconds)
    (254/341) benchmarking ("perf_sum2", Float64, false)...
    done (took 2.155838829 seconds)
    (255/341) benchmarking ("perf_countnothing", Bool, true)...
    done (took 2.07491565 seconds)
    (256/341) benchmarking ("skipmissing", collect, Union{Missing, Int8}, true)...
    done (took 2.681040526 seconds)
    (257/341) benchmarking ("skipmissing", collect, Union{Nothing, Float32}, false)...
    done (took 3.17215363 seconds)
    (258/341) benchmarking ("perf_sum2", BigFloat, false)...
    done (took 7.068683003 seconds)
    (259/341) benchmarking ("perf_sum2", Float32, false)...
    done (took 2.189977453 seconds)
    (260/341) benchmarking ("perf_binaryop", *, BigInt, (true, true))...
    done (took 7.061288487 seconds)
    (261/341) benchmarking ("perf_binaryop", *, BigFloat, (true, true))...
    done (took 8.45051302 seconds)
    (262/341) benchmarking ("perf_sum", BigFloat, false)...
    done (took 7.134419832 seconds)
    (263/341) benchmarking ("perf_countnothing", ComplexF64, true)...
    done (took 2.123968766 seconds)
    (264/341) benchmarking ("map", *, BigInt, (false, false))...
    done (took 7.06351967 seconds)
    (265/341) benchmarking ("broadcast", abs, Float64, true)...
    done (took 3.747940909 seconds)
    (266/341) benchmarking ("perf_sum2", Float64, true)...
    done (took 2.152073002 seconds)
    (267/341) benchmarking ("map", identity, BigFloat, false)...
    done (took 2.320208377 seconds)
    (268/341) benchmarking ("map", identity, Int64, true)...
    done (took 2.345175773 seconds)
    (269/341) benchmarking ("sort", Union{Missing, BigFloat}, true)...
    done (took 7.06359018 seconds)
    (270/341) benchmarking ("broadcast", identity, Float64, false)...
    done (took 2.181490002 seconds)
    (271/341) benchmarking ("broadcast", identity, BigFloat, true)...
    done (took 2.469647451 seconds)
    (272/341) benchmarking ("collect", "filter", Bool, false)...
    done (took 2.65220279 seconds)
    (273/341) benchmarking ("skipmissing", sum, Union{Missing, Int64}, true)...
    done (took 2.09963054 seconds)
    (274/341) benchmarking ("perf_sum3", Float64, false)...
    done (took 2.139648071 seconds)
    (275/341) benchmarking ("broadcast", abs, ComplexF64, true)...
    done (took 3.559804613 seconds)
    (276/341) benchmarking ("broadcast", identity, Float64, true)...
    done (took 2.349738845 seconds)
    (277/341) benchmarking ("skipmissing", sum, ComplexF64, false)...
    done (took 2.10245237 seconds)
    (278/341) benchmarking ("skipmissing", sum, Union{Missing, BigFloat}, true)...
    done (took 7.062860091 seconds)
    (279/341) benchmarking ("map", abs, BigInt, false)...
    done (took 7.11103436 seconds)
    (280/341) benchmarking ("collect", "all", BigFloat, false)...
    done (took 4.344333442 seconds)
    (281/341) benchmarking ("perf_binaryop", *, BigInt, (false, true))...
    done (took 7.068956868 seconds)
    (282/341) benchmarking ("map", abs, BigFloat, true)...
    done (took 8.462888943 seconds)
    (283/341) benchmarking ("skipmissing", sum, Union{Nothing, Float32}, false)...
    done (took 2.230268573 seconds)
    (284/341) benchmarking ("perf_countnothing", BigInt, false)...
    done (took 2.124762194 seconds)
    (285/341) benchmarking ("sort", Union{Missing, Bool}, true)...
    done (took 6.004492718 seconds)
    (286/341) benchmarking ("perf_sum2", Bool, true)...
    done (took 2.084163608 seconds)
    (287/341) benchmarking ("collect", "all", Bool, true)...
    done (took 2.213357073 seconds)
    (288/341) benchmarking ("perf_simplecopy", BigFloat, true)...
    done (took 2.383654597 seconds)
    (289/341) benchmarking ("broadcast", *, Bool, (false, false))...
    done (took 2.329087294 seconds)
    (290/341) benchmarking ("map", *, Int64, (true, true))...
    done (took 2.488496831 seconds)
    (291/341) benchmarking ("perf_sum", Int8, true)...
    done (took 2.0721633 seconds)
    (292/341) benchmarking ("sort", BigInt, false)...
    done (took 7.064374729 seconds)
    (293/341) benchmarking ("skipmissing", sum, Int8, false)...
    done (took 2.079976647 seconds)
    (294/341) benchmarking ("collect", "filter", BigFloat, true)...
    done (took 3.08045837 seconds)
    (295/341) benchmarking ("collect", "filter", Int8, false)...
    done (took 2.667578688 seconds)
    (296/341) benchmarking ("map", abs, Float32, false)...
    done (took 2.167678862 seconds)
    (297/341) benchmarking ("map", identity, ComplexF64, false)...
    done (took 2.28264298 seconds)
    (298/341) benchmarking ("perf_countnothing", Int8, false)...
    done (took 2.078099908 seconds)
    (299/341) benchmarking ("sort", Union{Missing, Int8}, true)...
    done (took 7.064859113 seconds)
    (300/341) benchmarking ("collect", "all", Bool, false)...
    done (took 2.124742506 seconds)
    (301/341) benchmarking ("collect", "all", Float32, true)...
    done (took 2.272717807 seconds)
    (302/341) benchmarking ("perf_sum", Int64, false)...
    done (took 2.093541365 seconds)
    (303/341) benchmarking ("skipmissing", collect, Union{Nothing, Int64}, false)...
    done (took 3.222983102 seconds)
    (304/341) benchmarking ("perf_sum3", BigInt, true)...
    done (took 7.998059674 seconds)
    (305/341) benchmarking ("skipmissing", sum, Union{Nothing, BigInt}, false)...
    done (took 8.418262805 seconds)
    (306/341) benchmarking ("collect", "all", Int64, false)...
    done (took 2.267205625 seconds)
    (307/341) benchmarking ("perf_sum4", BigFloat, false)...
    done (took 7.067198739 seconds)
    (308/341) benchmarking ("perf_countnothing", Int8, true)...
    done (took 2.140587932 seconds)
    (309/341) benchmarking ("skipmissing", sum, Union{Nothing, BigFloat}, false)...
    done (took 7.068179434 seconds)
    (310/341) benchmarking ("skipmissing", collect, ComplexF64, false)...
    done (took 3.005299484 seconds)
    (311/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, false))...
    done (took 2.712339468 seconds)
    (312/341) benchmarking ("skipmissing", collect, Float32, false)...
    done (took 2.617476875 seconds)
    (313/341) benchmarking ("perf_sum4", Float32, false)...
    done (took 2.097671941 seconds)
    (314/341) benchmarking ("skipmissing", collect, BigFloat, false)...
    done (took 2.880536104 seconds)
    (315/341) benchmarking ("skipmissing", sum, Union{Missing, ComplexF64}, true)...
    done (took 2.214426082 seconds)
    (316/341) benchmarking ("map", identity, BigFloat, true)...
    done (took 2.448862382 seconds)
    (317/341) benchmarking ("perf_simplecopy", ComplexF64, true)...
    done (took 2.461866412 seconds)
    (318/341) benchmarking ("perf_sum2", Int8, false)...
    done (took 2.071496636 seconds)
    (319/341) benchmarking ("collect", "all", BigFloat, true)...
    done (took 2.452410815 seconds)
    (320/341) benchmarking ("broadcast", abs, BigFloat, true)...
    done (took 7.068128482 seconds)
    (321/341) benchmarking ("perf_binaryop", *, ComplexF64, (false, true))...
    done (took 2.828546628 seconds)
    (322/341) benchmarking ("broadcast", *, ComplexF64, (false, true))...
    done (took 2.834705798 seconds)
    (323/341) benchmarking ("collect", "all", Int64, true)...
    done (took 2.347941812 seconds)
    (324/341) benchmarking ("perf_countequals", "BigFloat")...
    done (took 3.961514355 seconds)
    (325/341) benchmarking ("skipmissing", sum, Union{Nothing, ComplexF64}, false)...
    done (took 2.191626425 seconds)
    (326/341) benchmarking ("broadcast", abs, Float32, false)...
    done (took 2.177166543 seconds)
    (327/341) benchmarking ("broadcast", *, Bool, (false, true))...
    done (took 2.395032191 seconds)
    (328/341) benchmarking ("map", abs, Int64, true)...
    done (took 2.350062821 seconds)
    (329/341) benchmarking ("perf_sum3", Int8, false)...
    done (took 2.146234986 seconds)
    (330/341) benchmarking ("broadcast", *, Float64, (true, true))...
    done (took 2.475810516 seconds)
    (331/341) benchmarking ("skipmissing", sum, Union{Missing, BigInt}, true)...
    done (took 8.297753859 seconds)
    (332/341) benchmarking ("perf_sum4", Bool, true)...
    done (took 2.205920529 seconds)
    (333/341) benchmarking ("collect", "filter", BigInt, false)...
    done (took 2.95557438 seconds)
    (334/341) benchmarking ("perf_sum3", Float32, false)...
    done (took 2.162055556 seconds)
    (335/341) benchmarking ("perf_countnothing", ComplexF64, false)...
    done (took 2.067862854 seconds)
    (336/341) benchmarking ("map", *, BigFloat, (false, true))...
    done (took 7.068282533 seconds)
    (337/341) benchmarking ("sort", Union{Nothing, Float32}, false)...
    done (took 7.077118854 seconds)
    (338/341) benchmarking ("perf_simplecopy", Int64, false)...
    done (took 2.28279976 seconds)
    (339/341) benchmarking ("perf_sum4", BigFloat, true)...
    done (took 7.069797815 seconds)
    (340/341) benchmarking ("perf_binaryop", *, Bool, (false, false))...
    done (took 2.400843975 seconds)
    (341/341) benchmarking ("perf_sum3", ComplexF64, false)...
    done (took 2.203560686 seconds)
  done (took 1157.743913607 seconds)
done (took 1159.831905276 seconds)
(14/20) benchmarking "simd"...
  (1/152) benchmarking ("manual_example!_aliased", "Int64", 4096)...
  done (took 2.078628724 seconds)
  (2/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.090079901 seconds)
  (3/152) benchmarking ("inner_aliased", "Float32", 4095)...
  done (took 2.069555437 seconds)
  (4/152) benchmarking ("manual_example!_aliased", "Int32", 4096)...
  done (took 2.093033785 seconds)
  (5/152) benchmarking ("conditional_loop!_aliased", "Float64", 4095)...
  done (took 2.183522728 seconds)
  (6/152) benchmarking ("two_reductions", "Int32", 4095)...
  done (took 2.123251891 seconds)
  (7/152) benchmarking ("inner_aliased", "Int64", 4095)...
  done (took 2.083415586 seconds)
  (8/152) benchmarking ("two_reductions_aliased", "Int64", 4096)...
  done (took 2.075466853 seconds)
  (9/152) benchmarking ("manual_example!_aliased", "Float64", 4096)...
  done (took 2.12188966 seconds)
  (10/152) benchmarking ("manual_example!_aliased", "Float32", 4095)...
  done (took 2.121345177 seconds)
  (11/152) benchmarking ("conditional_loop!_aliased", "Int32", 4095)...
  done (took 2.070890607 seconds)
  (12/152) benchmarking ("two_reductions_aliased", "Int32", 4096)...
  done (took 2.1236197 seconds)
  (13/152) benchmarking ("axpy!", "Float32", 4095)...
  done (took 2.073302346 seconds)
  (14/152) benchmarking ("axpy!", "Int32", 4096)...
  done (took 2.070896075 seconds)
  (15/152) benchmarking ("inner_aliased", "Int32", 4096)...
  done (took 2.071617278 seconds)
  (16/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.090582483 seconds)
  (17/152) benchmarking ("local_arrays", "Float32", 4095)...
  done (took 2.436941474 seconds)
  (18/152) benchmarking ("auto_axpy!", "Int32", 4096)...
  done (took 2.118446429 seconds)
  (19/152) benchmarking ("axpy!_aliased", "Int32", 4095)...
  done (took 2.091997403 seconds)
  (20/152) benchmarking ("manual_example!", "Int64", 4095)...
  done (took 2.084017366 seconds)
  (21/152) benchmarking ("axpy!_aliased", "Float32", 4096)...
  done (took 2.091488856 seconds)
  (22/152) benchmarking ("conditional_loop!", "Int32", 4096)...
  done (took 2.074253361 seconds)
  (23/152) benchmarking ("manual_example!_aliased", "Float32", 4096)...
  done (took 2.124935538 seconds)
  (24/152) benchmarking ("two_reductions_aliased", "Int32", 4095)...
  done (took 2.123558422 seconds)
  (25/152) benchmarking ("auto_manual_example!", "Int32", 4095)...
  done (took 2.07554318 seconds)
  (26/152) benchmarking ("inner", "Float64", 4096)...
  done (took 2.079320958 seconds)
  (27/152) benchmarking ("auto_conditional_loop!", "Int64", 4095)...
  done (took 2.077413714 seconds)
  (28/152) benchmarking ("axpy!_aliased", "Float64", 4096)...
  done (took 2.095542419 seconds)
  (29/152) benchmarking ("conditional_loop!_aliased", "Float64", 4096)...
  done (took 2.186539925 seconds)
  (30/152) benchmarking ("auto_conditional_loop!", "Int64", 4096)...
  done (took 2.075947592 seconds)
  (31/152) benchmarking ("inner", "Float64", 4095)...
  done (took 2.080066444 seconds)
  (32/152) benchmarking ("auto_axpy!", "Int64", 4096)...
  done (took 2.086973224 seconds)
  (33/152) benchmarking ("local_arrays", "Float32", 4096)...
  done (took 2.435234787 seconds)
  (34/152) benchmarking ("sum_reduce", "Float32", 4095)...
  done (took 2.112539625 seconds)
  (35/152) benchmarking ("auto_sum_reduce", "Int64", 4095)...
  done (took 2.07301442 seconds)
  (36/152) benchmarking ("axpy!_aliased", "Float64", 4095)...
  done (took 2.091672056 seconds)
  (37/152) benchmarking ("axpy!", "Int64", 4095)...
  done (took 2.085963555 seconds)
  (38/152) benchmarking ("auto_manual_example!", "Int64", 4096)...
  done (took 2.087575318 seconds)
  (39/152) benchmarking ("manual_example!", "Int32", 4095)...
  done (took 2.079158968 seconds)
  (40/152) benchmarking ("conditional_loop!", "Float64", 4096)...
  done (took 2.108671887 seconds)
  (41/152) benchmarking ("auto_local_arrays", "Float64", 4095)...
  done (took 2.592535486 seconds)
  (42/152) benchmarking ("conditional_loop!", "Int32", 4095)...
  done (took 2.08132616 seconds)
  (43/152) benchmarking ("auto_axpy!", "Float32", 4095)...
  done (took 2.073511792 seconds)
  (44/152) benchmarking ("auto_inner", "Int32", 4096)...
  done (took 2.077465354 seconds)
  (45/152) benchmarking ("inner", "Int32", 4096)...
  done (took 2.077811558 seconds)
  (46/152) benchmarking ("two_reductions", "Int64", 4096)...
  done (took 2.080113314 seconds)
  (47/152) benchmarking ("axpy!", "Float32", 4096)...
  done (took 2.075388851 seconds)
  (48/152) benchmarking ("two_reductions", "Float64", 4095)...
  done (took 2.086352432 seconds)
  (49/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.093266179 seconds)
  (50/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.070968395 seconds)
  (51/152) benchmarking ("auto_local_arrays", "Int64", 4096)...
  done (took 2.577993038 seconds)
  (52/152) benchmarking ("auto_conditional_loop!", "Float32", 4096)...
  done (took 2.097292373 seconds)
  (53/152) benchmarking ("conditional_loop!_aliased", "Int64", 4096)...
  done (took 2.078589478 seconds)
  (54/152) benchmarking ("auto_inner", "Int32", 4095)...
  done (took 2.076675668 seconds)
  (55/152) benchmarking ("inner", "Int64", 4095)...
  done (took 2.090755678 seconds)
  (56/152) benchmarking ("axpy!", "Int32", 4095)...
  done (took 2.076999718 seconds)
  (57/152) benchmarking ("two_reductions_aliased", "Float64", 4096)...
  done (took 2.080564089 seconds)
  (58/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.090134547 seconds)
  (59/152) benchmarking ("axpy!_aliased", "Int64", 4096)...
  done (took 2.094668065 seconds)
  (60/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.092537409 seconds)
  (61/152) benchmarking ("auto_local_arrays", "Int32", 4095)...
  done (took 2.417953632 seconds)
  (62/152) benchmarking ("auto_two_reductions", "Int64", 4095)...
  done (took 2.126255492 seconds)
  (63/152) benchmarking ("two_reductions_aliased", "Int64", 4095)...
  done (took 2.076907901 seconds)
  (64/152) benchmarking ("axpy!_aliased", "Int32", 4096)...
  done (took 2.091536495 seconds)
  (65/152) benchmarking ("axpy!", "Float64", 4096)...
  done (took 2.087212082 seconds)
  (66/152) benchmarking ("local_arrays", "Int64", 4095)...
  done (took 2.654716058 seconds)
  (67/152) benchmarking ("sum_reduce", "Int64", 4096)...
  done (took 2.093758433 seconds)
  (68/152) benchmarking ("two_reductions", "Int64", 4095)...
  done (took 2.083099157 seconds)
  (69/152) benchmarking ("local_arrays", "Float64", 4095)...
  done (took 2.583693428 seconds)
  (70/152) benchmarking ("auto_two_reductions", "Int64", 4096)...
  done (took 2.085635995 seconds)
  (71/152) benchmarking ("auto_local_arrays", "Int64", 4095)...
  done (took 2.652880398 seconds)
  (72/152) benchmarking ("axpy!", "Float64", 4095)...
  done (took 2.106294017 seconds)
  (73/152) benchmarking ("inner_aliased", "Float64", 4095)...
  done (took 2.078241107 seconds)
  (74/152) benchmarking ("auto_conditional_loop!", "Float32", 4095)...
  done (took 2.093886644 seconds)
  (75/152) benchmarking ("auto_conditional_loop!", "Float64", 4095)...
  done (took 2.112839661 seconds)
  (76/152) benchmarking ("auto_local_arrays", "Float32", 4096)...
  done (took 2.43676827 seconds)
  (77/152) benchmarking ("auto_sum_reduce", "Int64", 4096)...
  done (took 2.116123239 seconds)
  (78/152) benchmarking ("inner_aliased", "Float32", 4096)...
  done (took 2.076906646 seconds)
  (79/152) benchmarking ("auto_axpy!", "Float64", 4096)...
  done (took 2.08547802 seconds)
  (80/152) benchmarking ("auto_conditional_loop!", "Int32", 4095)...
  done (took 2.075721311 seconds)
  (81/152) benchmarking ("manual_example!", "Float64", 4095)...
  done (took 2.09144658 seconds)
  (82/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.088521916 seconds)
  (83/152) benchmarking ("manual_example!", "Float32", 4096)...
  done (took 2.083984095 seconds)
  (84/152) benchmarking ("inner", "Int32", 4095)...
  done (took 2.075745088 seconds)
  (85/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.080408378 seconds)
  (86/152) benchmarking ("two_reductions", "Int32", 4096)...
  done (took 2.126885552 seconds)
  (87/152) benchmarking ("inner_aliased", "Int64", 4096)...
  done (took 2.0907075 seconds)
  (88/152) benchmarking ("auto_axpy!", "Float32", 4096)...
  done (took 2.077085338 seconds)
  (89/152) benchmarking ("manual_example!", "Int64", 4096)...
  done (took 2.089867551 seconds)
  (90/152) benchmarking ("axpy!_aliased", "Int64", 4095)...
  done (took 2.097429652 seconds)
  (91/152) benchmarking ("auto_axpy!", "Float64", 4095)...
  done (took 2.088705995 seconds)
  (92/152) benchmarking ("auto_axpy!", "Int64", 4095)...
  done (took 2.092255836 seconds)
  (93/152) benchmarking ("manual_example!", "Int32", 4096)...
  done (took 2.085117936 seconds)
  (94/152) benchmarking ("sum_reduce", "Float64", 4096)...
  done (took 2.077920924 seconds)
  (95/152) benchmarking ("manual_example!", "Float64", 4096)...
  done (took 2.087067147 seconds)
  (96/152) benchmarking ("two_reductions_aliased", "Float64", 4095)...
  done (took 2.080588904 seconds)
  (97/152) benchmarking ("conditional_loop!", "Int64", 4096)...
  done (took 2.082001838 seconds)
  (98/152) benchmarking ("conditional_loop!", "Int64", 4095)...
  done (took 2.082764109 seconds)
  (99/152) benchmarking ("manual_example!", "Float32", 4095)...
  done (took 2.079426309 seconds)
  (100/152) benchmarking ("inner", "Int64", 4096)...
  done (took 2.092267937 seconds)
  (101/152) benchmarking ("auto_local_arrays", "Float64", 4096)...
  done (took 2.588846319 seconds)
  (102/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.101818521 seconds)
  (103/152) benchmarking ("auto_sum_reduce", "Int32", 4095)...
  done (took 2.070880008 seconds)
  (104/152) benchmarking ("auto_sum_reduce", "Int32", 4096)...
  done (took 2.072202831 seconds)
  (105/152) benchmarking ("inner_aliased", "Int32", 4095)...
  done (took 2.079412338 seconds)
  (106/152) benchmarking ("conditional_loop!", "Float32", 4096)...
  done (took 2.093435764 seconds)
  (107/152) benchmarking ("local_arrays", "Float64", 4096)...
  done (took 2.589945164 seconds)
  (108/152) benchmarking ("auto_axpy!", "Int32", 4095)...
  done (took 2.087579167 seconds)
  (109/152) benchmarking ("manual_example!_aliased", "Int64", 4095)...
  done (took 2.102439695 seconds)
  (110/152) benchmarking ("manual_example!_aliased", "Float64", 4095)...
  done (took 2.1287255 seconds)
  (111/152) benchmarking ("two_reductions_aliased", "Float32", 4096)...
  done (took 2.080233501 seconds)
  (112/152) benchmarking ("local_arrays", "Int32", 4095)...
  done (took 2.422392128 seconds)
  (113/152) benchmarking ("conditional_loop!_aliased", "Int64", 4095)...
  done (took 2.125514001 seconds)
  (114/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.09563938 seconds)
  (115/152) benchmarking ("auto_manual_example!", "Int64", 4095)...
  done (took 2.090288282 seconds)
  (116/152) benchmarking ("two_reductions", "Float32", 4095)...
  done (took 2.079903002 seconds)
  (117/152) benchmarking ("sum_reduce", "Float64", 4095)...
  done (took 2.0792764 seconds)
  (118/152) benchmarking ("local_arrays", "Int32", 4096)...
  done (took 2.42233659 seconds)
  (119/152) benchmarking ("local_arrays", "Int64", 4096)...
  done (took 2.620067913 seconds)
  (120/152) benchmarking ("conditional_loop!", "Float32", 4095)...
  done (took 2.100249954 seconds)
  (121/152) benchmarking ("inner", "Float32", 4095)...
  done (took 2.078071894 seconds)
  (122/152) benchmarking ("conditional_loop!_aliased", "Int32", 4096)...
  done (took 2.074913758 seconds)
  (123/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.09597784 seconds)
  (124/152) benchmarking ("two_reductions_aliased", "Float32", 4095)...
  done (took 2.083377297 seconds)
  (125/152) benchmarking ("sum_reduce", "Int32", 4096)...
  done (took 2.074286711 seconds)
  (126/152) benchmarking ("auto_local_arrays", "Float32", 4095)...
  done (took 2.442792843 seconds)
  (127/152) benchmarking ("inner_aliased", "Float64", 4096)...
  done (took 2.121685947 seconds)
  (128/152) benchmarking ("loop_fields!", "Int32", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4095)...
  done (took 2.096166975 seconds)
  (129/152) benchmarking ("conditional_loop!_aliased", "Float32", 4096)...
  done (took 2.199440483 seconds)
  (130/152) benchmarking ("auto_inner", "Int64", 4095)...
  done (took 2.09401529 seconds)
  (131/152) benchmarking ("conditional_loop!", "Float64", 4095)...
  done (took 2.114302242 seconds)
  (132/152) benchmarking ("auto_conditional_loop!", "Int32", 4096)...
  done (took 2.077295272 seconds)
  (133/152) benchmarking ("auto_manual_example!", "Int32", 4096)...
  done (took 2.083518265 seconds)
  (134/152) benchmarking ("auto_two_reductions", "Int32", 4095)...
  done (took 2.133253488 seconds)
  (135/152) benchmarking ("loop_fields!", "Int64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.093221395 seconds)
  (136/152) benchmarking ("auto_conditional_loop!", "Float64", 4096)...
  done (took 2.108686158 seconds)
  (137/152) benchmarking ("two_reductions", "Float32", 4096)...
  done (took 2.07945336 seconds)
  (138/152) benchmarking ("loop_fields!", "Float64", "BaseBenchmarks.SIMDBenchmarks.MutableFields", 4096)...
  done (took 2.095240524 seconds)
  (139/152) benchmarking ("axpy!_aliased", "Float32", 4095)...
  done (took 2.095608614 seconds)
  (140/152) benchmarking ("sum_reduce", "Int32", 4095)...
  done (took 2.07878764 seconds)
  (141/152) benchmarking ("axpy!", "Int64", 4096)...
  done (took 2.088912296 seconds)
  (142/152) benchmarking ("auto_inner", "Int64", 4096)...
  done (took 2.094737394 seconds)
  (143/152) benchmarking ("inner", "Float32", 4096)...
  done (took 2.078417849 seconds)
  (144/152) benchmarking ("two_reductions", "Float64", 4096)...
  done (took 2.08517098 seconds)
  (145/152) benchmarking ("sum_reduce", "Int64", 4095)...
  done (took 2.078520028 seconds)
  (146/152) benchmarking ("auto_two_reductions", "Int32", 4096)...
  done (took 2.129743392 seconds)
  (147/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4095)...
  done (took 2.091584301 seconds)
  (148/152) benchmarking ("loop_fields!", "Float32", "BaseBenchmarks.SIMDBenchmarks.ImmutableFields", 4096)...
  done (took 2.089168578 seconds)
  (149/152) benchmarking ("manual_example!_aliased", "Int32", 4095)...
  done (took 2.096088623 seconds)
  (150/152) benchmarking ("conditional_loop!_aliased", "Float32", 4095)...
  done (took 2.200560346 seconds)
  (151/152) benchmarking ("sum_reduce", "Float32", 4096)...
  done (took 2.078333257 seconds)
  (152/152) benchmarking ("auto_local_arrays", "Int32", 4096)...
  done (took 2.420378032 seconds)
done (took 326.958605137 seconds)
(15/20) benchmarking "random"...
  (1/5) benchmarking "collections"...
    (1/66) benchmarking ("rand!", "MersenneTwister", "large Vector")...
    done (took 2.140581002 seconds)
    (2/66) benchmarking ("rand!", "RandomDevice", "large Set")...
    done (took 7.07307171 seconds)
    (3/66) benchmarking ("rand!", "MersenneTwister", "'a':'z'")...
    done (took 2.148123735 seconds)
    (4/66) benchmarking ("rand", "ImplicitRNG", "small String")...
    done (took 2.079236608 seconds)
    (5/66) benchmarking ("rand!", "MersenneTwister", "large String")...
    done (took 2.143465648 seconds)
    (6/66) benchmarking ("rand!", "ImplicitRNG", "small String")...
    done (took 2.133169831 seconds)
    (7/66) benchmarking ("rand", "MersenneTwister", "large Vector")...
    done (took 2.079045519 seconds)
    (8/66) benchmarking ("rand", "MersenneTwister", "small Set")...
    done (took 2.077137845 seconds)
    (9/66) benchmarking ("rand", "ImplicitRNG", "small Vector")...
    done (took 2.073540991 seconds)
    (10/66) benchmarking ("rand!", "MersenneTwister", "small Set")...
    done (took 2.462954612 seconds)
    (11/66) benchmarking ("rand", "ImplicitRNG", "small BitSet")...
    done (took 2.077735335 seconds)
    (12/66) benchmarking ("rand", "RandomDevice", "small BitSet")...
    done (took 2.083474545 seconds)
    (13/66) benchmarking ("rand!", "RandomDevice", "large Dict")...
    done (took 7.080429454 seconds)
    (14/66) benchmarking ("rand", "MersenneTwister", "small BitSet")...
    done (took 2.076615781 seconds)
    (15/66) benchmarking ("rand!", "MersenneTwister", "small String")...
    done (took 2.126578 seconds)
    (16/66) benchmarking ("rand", "MersenneTwister", "small String")...
    done (took 2.060398188 seconds)
    (17/66) benchmarking ("rand", "ImplicitRNG", "large Vector")...
    done (took 2.078088395 seconds)
    (18/66) benchmarking ("rand!", "ImplicitRNG", "large Set")...
    done (took 2.310280074 seconds)
    (19/66) benchmarking ("rand", "MersenneTwister", "small Dict")...
    done (took 2.082409584 seconds)
    (20/66) benchmarking ("rand!", "MersenneTwister", "large BitSet")...
    done (took 2.138590144 seconds)
    (21/66) benchmarking ("rand!", "RandomDevice", "'a':'z'")...
    done (took 7.072035166 seconds)
    (22/66) benchmarking ("rand", "ImplicitRNG", "large BitSet")...
    done (took 2.080465597 seconds)
    (23/66) benchmarking ("rand", "MersenneTwister", "'a':'z'")...
    done (took 2.080839732 seconds)
    (24/66) benchmarking ("rand!", "ImplicitRNG", "small Dict")...
    done (took 2.466952965 seconds)
    (25/66) benchmarking ("rand!", "RandomDevice", "small Dict")...
    done (took 7.080796443 seconds)
    (26/66) benchmarking ("rand!", "RandomDevice", "small String")...
    done (took 7.076504379 seconds)
    (27/66) benchmarking ("rand!", "ImplicitRNG", "large BitSet")...
    done (took 2.137722406 seconds)
    (28/66) benchmarking ("rand", "MersenneTwister", "large String")...
    done (took 2.082182705 seconds)
    (29/66) benchmarking ("rand!", "MersenneTwister", "large Dict")...
    done (took 2.317570417 seconds)
    (30/66) benchmarking ("rand!", "RandomDevice", "small Vector")...
    done (took 7.074929868 seconds)
    (31/66) benchmarking ("rand!", "RandomDevice", "large BitSet")...
    done (took 7.076422547 seconds)
    (32/66) benchmarking ("rand!", "ImplicitRNG", "large Dict")...
    done (took 2.320159323 seconds)
    (33/66) benchmarking ("rand!", "ImplicitRNG", "small BitSet")...
    done (took 2.140387421 seconds)
    (34/66) benchmarking ("rand", "RandomDevice", "large Set")...
    done (took 2.090395343 seconds)
    (35/66) benchmarking ("rand", "RandomDevice", "small String")...
    done (took 2.087497645 seconds)
    (36/66) benchmarking ("rand", "RandomDevice", "small Vector")...
    done (took 2.082623551 seconds)
    (37/66) benchmarking ("rand!", "ImplicitRNG", "large String")...
    done (took 2.148910849 seconds)
    (38/66) benchmarking ("rand", "RandomDevice", "large String")...
    done (took 2.083131084 seconds)
    (39/66) benchmarking ("rand!", "ImplicitRNG", "small Vector")...
    done (took 2.126046723 seconds)
    (40/66) benchmarking ("rand!", "MersenneTwister", "small Vector")...
    done (took 2.126394658 seconds)
    (41/66) benchmarking ("rand!", "ImplicitRNG", "'a':'z'")...
    done (took 2.145585172 seconds)
    (42/66) benchmarking ("rand", "RandomDevice", "small Dict")...
    done (took 2.113567324 seconds)
    (43/66) benchmarking ("rand!", "RandomDevice", "large Vector")...
    done (took 7.074516839 seconds)
    (44/66) benchmarking ("rand!", "RandomDevice", "large String")...
    done (took 7.077713309 seconds)
    (45/66) benchmarking ("rand", "ImplicitRNG", "large String")...
    done (took 2.080797203 seconds)
    (46/66) benchmarking ("rand", "ImplicitRNG", "large Dict")...
    done (took 2.078313907 seconds)
    (47/66) benchmarking ("rand", "MersenneTwister", "small Vector")...
    done (took 2.083727562 seconds)
    (48/66) benchmarking ("rand", "RandomDevice", "small Set")...
    done (took 2.108572607 seconds)
    (49/66) benchmarking ("rand!", "RandomDevice", "small Set")...
    done (took 7.07862075 seconds)
    (50/66) benchmarking ("rand", "RandomDevice", "large Vector")...
    done (took 2.082629815 seconds)
    (51/66) benchmarking ("rand!", "MersenneTwister", "large Set")...
    done (took 2.306893456 seconds)
    (52/66) benchmarking ("rand", "RandomDevice", "'a':'z'")...
    done (took 2.083303404 seconds)
    (53/66) benchmarking ("rand", "RandomDevice", "large BitSet")...
    done (took 2.085835985 seconds)
    (54/66) benchmarking ("rand", "ImplicitRNG", "large Set")...
    done (took 2.075793789 seconds)
    (55/66) benchmarking ("rand", "MersenneTwister", "large BitSet")...
    done (took 2.080165535 seconds)
    (56/66) benchmarking ("rand", "RandomDevice", "large Dict")...
    done (took 2.091969581 seconds)
    (57/66) benchmarking ("rand", "ImplicitRNG", "small Set")...
    done (took 2.074031497 seconds)
    (58/66) benchmarking ("rand", "ImplicitRNG", "small Dict")...
    done (took 2.081435795 seconds)
    (59/66) benchmarking ("rand!", "MersenneTwister", "small BitSet")...
    done (took 2.135207783 seconds)
    (60/66) benchmarking ("rand", "MersenneTwister", "large Dict")...
    done (took 2.078309228 seconds)
    (61/66) benchmarking ("rand!", "ImplicitRNG", "large Vector")...
    done (took 2.124419459 seconds)
    (62/66) benchmarking ("rand!", "MersenneTwister", "small Dict")...
    done (took 2.468755105 seconds)
    (63/66) benchmarking ("rand!", "ImplicitRNG", "small Set")...
    done (took 2.4650522 seconds)
    (64/66) benchmarking ("rand", "ImplicitRNG", "'a':'z'")...
    done (took 2.076896911 seconds)
    (65/66) benchmarking ("rand!", "RandomDevice", "small BitSet")...
    done (took 7.074630773 seconds)
    (66/66) benchmarking ("rand", "MersenneTwister", "large Set")...
    done (took 2.078395722 seconds)
  done (took 197.580896845 seconds)
  (2/5) benchmarking "sequences"...
    (1/7) benchmarking ("shuffle!", "MersenneTwister")...
    done (took 2.144776218 seconds)
    (2/7) benchmarking ("randsubseq!", "MersenneTwister", "0.8")...
    done (took 2.149815617 seconds)
    (3/7) benchmarking ("randcycle", "MersenneTwister", "1000")...
    done (took 2.142817278 seconds)
    (4/7) benchmarking ("randperm", "MersenneTwister", "5")...
    done (took 2.087799067 seconds)
    (5/7) benchmarking ("randsubseq!", "MersenneTwister", "0.2")...
    done (took 2.128926765 seconds)
    (6/7) benchmarking ("randperm", "MersenneTwister", "1000")...
    done (took 2.145077794 seconds)
    (7/7) benchmarking ("randcycle", "MersenneTwister", "5")...
    done (took 2.085816351 seconds)
  done (took 16.881923757 seconds)
  (3/5) benchmarking "types"...
    (1/97) benchmarking ("rand!", "MersenneTwister", "Int32")...
    done (took 2.083173712 seconds)
    (2/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.0781479 seconds)
    (3/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int32}")...
    done (took 2.105633894 seconds)
    (4/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.097764795 seconds)
    (5/97) benchmarking ("rand", "MersenneTwister", "UInt128")...
    done (took 2.077590118 seconds)
    (6/97) benchmarking ("randexp!", "MersenneTwister", "Float16")...
    done (took 2.222991368 seconds)
    (7/97) benchmarking ("rand!", "MersenneTwister", "UInt64")...
    done (took 2.096153449 seconds)
    (8/97) benchmarking ("randexp", "RandomDevice", "Float64")...
    done (took 2.082122221 seconds)
    (9/97) benchmarking ("randn!", "MersenneTwister", "Float64")...
    done (took 2.106929201 seconds)
    (10/97) benchmarking ("rand", "MersenneTwister", "Complex{Int128}")...
    done (took 2.081290426 seconds)
    (11/97) benchmarking ("randn!", "MersenneTwister", "ComplexF16")...
    done (took 2.420779467 seconds)
    (12/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int16}")...
    done (took 2.098610832 seconds)
    (13/97) benchmarking ("rand", "RandomDevice", "Int64")...
    done (took 2.084739802 seconds)
    (14/97) benchmarking ("randexp!", "RandomDevice", "Float64")...
    done (took 7.076036838 seconds)
    (15/97) benchmarking ("rand!", "MersenneTwister", "Int64")...
    done (took 2.086761252 seconds)
    (16/97) benchmarking ("rand!", "MersenneTwister", "ComplexF32")...
    done (took 2.113013706 seconds)
    (17/97) benchmarking ("rand!", "MersenneTwister", "Int8")...
    done (took 2.080091225 seconds)
    (18/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.081052959 seconds)
    (19/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt64}")...
    done (took 2.175094418 seconds)
    (20/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.156259783 seconds)
    (21/97) benchmarking ("randexp", "RandomDevice", "ImplicitFloat64")...
    done (took 2.088017683 seconds)
    (22/97) benchmarking ("randn", "RandomDevice", "Float64")...
    done (took 2.083376827 seconds)
    (23/97) benchmarking ("randexp!", "ImplicitRNG", "Float64")...
    done (took 2.111879923 seconds)
    (24/97) benchmarking ("rand!", "ImplicitRNG", "Int64")...
    done (took 2.09358926 seconds)
    (25/97) benchmarking ("rand", "MersenneTwister", "ComplexF16")...
    done (took 2.077580952 seconds)
    (26/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt128}")...
    done (took 2.079024101 seconds)
    (27/97) benchmarking ("rand", "MersenneTwister", "ComplexF64")...
    done (took 2.075306991 seconds)
    (28/97) benchmarking ("rand!", "MersenneTwister", "Float64")...
    done (took 2.085237269 seconds)
    (29/97) benchmarking ("randn", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.07754152 seconds)
    (30/97) benchmarking ("rand", "MersenneTwister", "Int8")...
    done (took 2.080458013 seconds)
    (31/97) benchmarking ("randexp", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.080698207 seconds)
    (32/97) benchmarking ("rand!", "MersenneTwister", "Float16")...
    done (took 2.093478299 seconds)
    (33/97) benchmarking ("rand", "MersenneTwister", "Complex{Int16}")...
    done (took 2.076890485 seconds)
    (34/97) benchmarking ("randn!", "RandomDevice", "Float64")...
    done (took 7.083493245 seconds)
    (35/97) benchmarking ("rand", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.07904068 seconds)
    (36/97) benchmarking ("randn", "MersenneTwister", "ComplexF16")...
    done (took 2.078972182 seconds)
    (37/97) benchmarking ("rand", "MersenneTwister", "Int128")...
    done (took 2.076109305 seconds)
    (38/97) benchmarking ("randexp", "ImplicitRNG", "ImplicitFloat64")...
    done (took 2.081189843 seconds)
    (39/97) benchmarking ("randexp", "MersenneTwister", "Float16")...
    done (took 2.076843202 seconds)
    (40/97) benchmarking ("rand!", "RandomDevice", "Int64")...
    done (took 7.078569561 seconds)
    (41/97) benchmarking ("rand", "MersenneTwister", "UInt16")...
    done (took 2.07855969 seconds)
    (42/97) benchmarking ("randn", "MersenneTwister", "Float32")...
    done (took 2.081937623 seconds)
    (43/97) benchmarking ("randn", "MersenneTwister", "Float16")...
    done (took 2.082018967 seconds)
    (44/97) benchmarking ("randexp", "MersenneTwister", "Float64")...
    done (took 2.080340073 seconds)
    (45/97) benchmarking ("rand", "MersenneTwister", "Bool")...
    done (took 2.076508826 seconds)
    (46/97) benchmarking ("rand!", "MersenneTwister", "UInt128")...
    done (took 2.106912355 seconds)
    (47/97) benchmarking ("rand", "MersenneTwister", "Float16")...
    done (took 2.07635141 seconds)
    (48/97) benchmarking ("randexp", "MersenneTwister", "Float32")...
    done (took 2.080428846 seconds)
    (49/97) benchmarking ("rand", "MersenneTwister", "Int32")...
    done (took 2.078637848 seconds)
    (50/97) benchmarking ("rand", "MersenneTwister", "Complex{Int8}")...
    done (took 2.082921611 seconds)
    (51/97) benchmarking ("randexp!", "MersenneTwister", "Float64")...
    done (took 2.1080943 seconds)
    (52/97) benchmarking ("rand", "MersenneTwister", "Complex{Int32}")...
    done (took 2.077950631 seconds)
    (53/97) benchmarking ("rand", "ImplicitRNG", "Float64")...
    done (took 2.079311082 seconds)
    (54/97) benchmarking ("rand", "RandomDevice", "Float64")...
    done (took 2.088107571 seconds)
    (55/97) benchmarking ("randn!", "MersenneTwister", "Float32")...
    done (took 2.120558902 seconds)
    (56/97) benchmarking ("randn", "RandomDevice", "ImplicitFloat64")...
    done (took 2.082142002 seconds)
    (57/97) benchmarking ("rand", "MersenneTwister", "Complex{Int64}")...
    done (took 2.078864796 seconds)
    (58/97) benchmarking ("rand", "MersenneTwister", "Int64")...
    done (took 2.080447421 seconds)
    (59/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.078822992 seconds)
    (60/97) benchmarking ("randn", "MersenneTwister", "ComplexF32")...
    done (took 2.085252289 seconds)
    (61/97) benchmarking ("randn", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.076749326 seconds)
    (62/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int128}")...
    done (took 2.154512884 seconds)
    (63/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int8}")...
    done (took 2.105590694 seconds)
    (64/97) benchmarking ("rand", "MersenneTwister", "Int16")...
    done (took 2.079711917 seconds)
    (65/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt8}")...
    done (took 2.088477276 seconds)
    (66/97) benchmarking ("rand!", "MersenneTwister", "ComplexF16")...
    done (took 2.09935832 seconds)
    (67/97) benchmarking ("rand", "MersenneTwister", "Complex{UInt32}")...
    done (took 2.06691722 seconds)
    (68/97) benchmarking ("rand", "MersenneTwister", "UInt8")...
    done (took 2.078828909 seconds)
    (69/97) benchmarking ("rand", "MersenneTwister", "UInt32")...
    done (took 2.078696896 seconds)
    (70/97) benchmarking ("rand!", "MersenneTwister", "ComplexF64")...
    done (took 2.101840002 seconds)
    (71/97) benchmarking ("rand", "MersenneTwister", "UInt64")...
    done (took 2.077890002 seconds)
    (72/97) benchmarking ("rand!", "MersenneTwister", "Complex{UInt16}")...
    done (took 2.103492234 seconds)
    (73/97) benchmarking ("rand", "MersenneTwister", "ComplexF32")...
    done (took 2.077853023 seconds)
    (74/97) benchmarking ("randn!", "MersenneTwister", "ComplexF32")...
    done (took 2.189645043 seconds)
    (75/97) benchmarking ("randn", "ImplicitRNG", "Float64")...
    done (took 2.081255527 seconds)
    (76/97) benchmarking ("randn!", "MersenneTwister", "Float16")...
    done (took 2.231223427 seconds)
    (77/97) benchmarking ("rand!", "MersenneTwister", "Int128")...
    done (took 2.104756059 seconds)
    (78/97) benchmarking ("rand!", "MersenneTwister", "Int16")...
    done (took 2.084349955 seconds)
    (79/97) benchmarking ("rand!", "MersenneTwister", "UInt16")...
    done (took 2.082034135 seconds)
    (80/97) benchmarking ("rand!", "RandomDevice", "Float64")...
    done (took 7.076973357 seconds)
    (81/97) benchmarking ("rand!", "ImplicitRNG", "Float64")...
    done (took 2.086711032 seconds)
    (82/97) benchmarking ("rand", "MersenneTwister", "Float64")...
    done (took 2.081199597 seconds)
    (83/97) benchmarking ("rand!", "MersenneTwister", "UInt8")...
    done (took 2.079087711 seconds)
    (84/97) benchmarking ("rand!", "MersenneTwister", "UInt32")...
    done (took 2.088073487 seconds)
    (85/97) benchmarking ("rand", "RandomDevice", "ImplicitFloat64")...
    done (took 2.085575923 seconds)
    (86/97) benchmarking ("rand", "MersenneTwister", "ImplicitFloat64")...
    done (took 2.059874213 seconds)
    (87/97) benchmarking ("randexp", "ImplicitRNG", "Float64")...
    done (took 2.082519743 seconds)
    (88/97) benchmarking ("rand!", "MersenneTwister", "Bool")...
    done (took 2.077865289 seconds)
    (89/97) benchmarking ("rand!", "MersenneTwister", "Float32")...
    done (took 2.088499729 seconds)
    (90/97) benchmarking ("randn", "MersenneTwister", "Float64")...
    done (took 2.079052319 seconds)
    (91/97) benchmarking ("randexp!", "MersenneTwister", "Float32")...
    done (took 2.129561163 seconds)
    (92/97) benchmarking ("rand", "MersenneTwister", "Float32")...
    done (took 2.082255748 seconds)
    (93/97) benchmarking ("randn", "MersenneTwister", "ComplexF64")...
    done (took 2.080856954 seconds)
    (94/97) benchmarking ("randn!", "MersenneTwister", "ComplexF64")...
    done (took 2.181502634 seconds)
    (95/97) benchmarking ("rand", "ImplicitRNG", "Int64")...
    done (took 2.076989422 seconds)
    (96/97) benchmarking ("rand!", "MersenneTwister", "Complex{Int64}")...
    done (took 2.178091949 seconds)
    (97/97) benchmarking ("randn!", "ImplicitRNG", "Float64")...
    done (took 2.110378363 seconds)
  done (took 225.460435819 seconds)
  (4/5) benchmarking "randstring"...
    (1/6) benchmarking ("randstring", "MersenneTwister", 100)...
    done (took 2.081308707 seconds)
    (2/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"", 100)...
    done (took 2.087629747 seconds)
    (3/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"")...
    done (took 2.081645408 seconds)
    (4/6) benchmarking ("randstring", "MersenneTwister", "\"qwèrtï\"", 100)...
    done (took 2.095613045 seconds)
    (5/6) benchmarking ("randstring", "MersenneTwister")...
    done (took 2.078414509 seconds)
    (6/6) benchmarking ("randstring", "MersenneTwister", "collect(UInt8, \"qwerty\"")...
    done (took 2.080613135 seconds)
  done (took 14.509053856 seconds)
  (5/5) benchmarking "ranges"...
    (1/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:1)")...
    done (took 2.082289038 seconds)
    (2/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:1)")...
    done (took 2.084169067 seconds)
    (3/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967295)")...
    done (took 2.080413044 seconds)
    (4/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:4294967297)")...
    done (took 2.083926041 seconds)
    (5/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967295)")...
    done (took 2.079812879 seconds)
    (6/72) benchmarking ("RangeGenerator", "Int64", "1:4294967297")...
    done (took 2.062267105 seconds)
    (7/72) benchmarking ("RangeGenerator", "Int8", "1:1")...
    done (took 2.078745342 seconds)
    (8/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.080365296 seconds)
    (9/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967297)")...
    done (took 2.092678902 seconds)
    (10/72) benchmarking ("rand", "MersenneTwister", "Int16", "RangeGenerator(1:1)")...
    done (took 2.078216165 seconds)
    (11/72) benchmarking ("RangeGenerator", "UInt64", "1:1")...
    done (took 2.07881257 seconds)
    (12/72) benchmarking ("RangeGenerator", "Int128", "1:4294967297")...
    done (took 2.083792494 seconds)
    (13/72) benchmarking ("RangeGenerator", "Bool", "true:true")...
    done (took 2.080738614 seconds)
    (14/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:4294967297)")...
    done (took 2.079723738 seconds)
    (15/72) benchmarking ("RangeGenerator", "UInt32", "1:1")...
    done (took 2.082333603 seconds)
    (16/72) benchmarking ("rand", "MersenneTwister", "Int8", "RangeGenerator(1:1)")...
    done (took 2.083145157 seconds)
    (17/72) benchmarking ("RangeGenerator", "UInt16", "1:1")...
    done (took 2.085053144 seconds)
    (18/72) benchmarking ("rand", "MersenneTwister", "Int", "1:1000")...
    done (took 2.077869573 seconds)
    (19/72) benchmarking ("rand", "MersenneTwister", "Int32", "RangeGenerator(1:1)")...
    done (took 2.079010838 seconds)
    (20/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.079814315 seconds)
    (21/72) benchmarking ("rand!", "RandomDevice", "Int", "1:1000")...
    done (took 3.215868356 seconds)
    (22/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:4294967295)")...
    done (took 2.081992166 seconds)
    (23/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.079375914 seconds)
    (24/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967295")...
    done (took 2.082071071 seconds)
    (25/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967295")...
    done (took 2.084050381 seconds)
    (26/72) benchmarking ("rand", "MersenneTwister", "UInt16", "RangeGenerator(1:1)")...
    done (took 2.084610298 seconds)
    (27/72) benchmarking ("rand!", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.086264649 seconds)
    (28/72) benchmarking ("rand", "MersenneTwister", "UInt8", "RangeGenerator(1:1)")...
    done (took 2.080907421 seconds)
    (29/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:1)")...
    done (took 2.080506919 seconds)
    (30/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:2^10000)")...
    done (took 2.08682158 seconds)
    (31/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:1)")...
    done (took 2.086682316 seconds)
    (32/72) benchmarking ("RangeGenerator", "UInt64", "1:18446744073709551615")...
    done (took 2.085002259 seconds)
    (33/72) benchmarking ("RangeGenerator", "BigInt", "1:1")...
    done (took 2.089356664 seconds)
    (34/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967297)")...
    done (took 2.084215908 seconds)
    (35/72) benchmarking ("RangeGenerator", "UInt8", "1:1")...
    done (took 2.087579561 seconds)
    (36/72) benchmarking ("RangeGenerator", "BigInt", "1:4294967297")...
    done (took 2.083211952 seconds)
    (37/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.084378348 seconds)
    (38/72) benchmarking ("RangeGenerator", "Int128", "1:4294967295")...
    done (took 2.0794482 seconds)
    (39/72) benchmarking ("rand", "ImplicitRNG", "Int", "1:1000")...
    done (took 2.080460631 seconds)
    (40/72) benchmarking ("RangeGenerator", "Int64", "1:4294967295")...
    done (took 2.084350242 seconds)
    (41/72) benchmarking ("RangeGenerator", "UInt128", "1:1")...
    done (took 2.079507992 seconds)
    (42/72) benchmarking ("rand", "MersenneTwister", "Int128", "RangeGenerator(1:18446744073709551616)")...
    done (took 2.081223466 seconds)
    (43/72) benchmarking ("rand", "MersenneTwister", "Bool", "RangeGenerator(true:true)")...
    done (took 2.083972395 seconds)
    (44/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967297")...
    done (took 2.083333536 seconds)
    (45/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:4294967295)")...
    done (took 2.083662971 seconds)
    (46/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551615")...
    done (took 2.095513748 seconds)
    (47/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551615")...
    done (took 2.085160801 seconds)
    (48/72) benchmarking ("rand!", "MersenneTwister", "Int", "1:1000")...
    done (took 2.090199358 seconds)
    (49/72) benchmarking ("RangeGenerator", "Int32", "1:1")...
    done (took 2.079283338 seconds)
    (50/72) benchmarking ("RangeGenerator", "Int128", "1:1")...
    done (took 2.080433211 seconds)
    (51/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551616")...
    done (took 2.079868562 seconds)
    (52/72) benchmarking ("rand", "MersenneTwister", "UInt32", "RangeGenerator(1:4294967295)")...
    done (took 2.084834383 seconds)
    (53/72) benchmarking ("RangeGenerator", "Int64", "1:1")...
    done (took 2.07975512 seconds)
    (54/72) benchmarking ("RangeGenerator", "UInt128", "1:18446744073709551615")...
    done (took 2.083527187 seconds)
    (55/72) benchmarking ("RangeGenerator", "BigInt", "1:2^10000")...
    done (took 2.082962716 seconds)
    (56/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.085817156 seconds)
    (57/72) benchmarking ("RangeGenerator", "UInt128", "1:4294967295")...
    done (took 2.091996509 seconds)
    (58/72) benchmarking ("RangeGenerator", "Int16", "1:1")...
    done (took 2.081065201 seconds)
    (59/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:1)")...
    done (took 2.082441679 seconds)
    (60/72) benchmarking ("RangeGenerator", "BigInt", "1:170141183460469231731687303715884105728")...
    done (took 2.086940385 seconds)
    (61/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967295)")...
    done (took 2.088844794 seconds)
    (62/72) benchmarking ("RangeGenerator", "UInt64", "1:4294967297")...
    done (took 2.082156032 seconds)
    (63/72) benchmarking ("rand", "MersenneTwister", "BigInt", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.086672904 seconds)
    (64/72) benchmarking ("RangeGenerator", "UInt32", "1:4294967295")...
    done (took 2.084244782 seconds)
    (65/72) benchmarking ("rand", "RandomDevice", "Int", "1:1000")...
    done (took 2.087851852 seconds)
    (66/72) benchmarking ("RangeGenerator", "UInt128", "1:170141183460469231731687303715884105728")...
    done (took 2.084747937 seconds)
    (67/72) benchmarking ("RangeGenerator", "BigInt", "1:18446744073709551616")...
    done (took 2.084982163 seconds)
    (68/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:170141183460469231731687303715884105728)")...
    done (took 2.084715794 seconds)
    (69/72) benchmarking ("rand", "MersenneTwister", "UInt128", "RangeGenerator(1:18446744073709551615)")...
    done (took 2.080108483 seconds)
    (70/72) benchmarking ("rand", "MersenneTwister", "UInt64", "RangeGenerator(1:1)")...
    done (took 2.082504553 seconds)
    (71/72) benchmarking ("RangeGenerator", "Int128", "1:18446744073709551616")...
    done (took 2.082804357 seconds)
    (72/72) benchmarking ("rand", "MersenneTwister", "Int64", "RangeGenerator(1:4294967297)")...
    done (took 2.080539829 seconds)
  done (took 153.113087925 seconds)
done (took 609.575227732 seconds)
(16/20) benchmarking "problem"...
  (1/14) benchmarking "raytrace"...
    (1/1) benchmarking "raytrace"...
    done (took 7.118604282 seconds)
  done (took 9.121794331 seconds)
  (2/14) benchmarking "fem"...
    (1/1) benchmarking "sparse_fem"...
    done (took 7.195967809 seconds)
  done (took 9.284940629 seconds)
  (3/14) benchmarking "ziggurat"...
    (1/1) benchmarking "ziggurat"...
    done (took 10.692362706 seconds)
  done (took 12.713369389 seconds)
  (4/14) benchmarking "laplacian"...
    (1/4) benchmarking "laplace_iter_vec"...
    done (took 7.112052769 seconds)
    (2/4) benchmarking "laplace_iter_sub"...
    done (took 7.127138675 seconds)
    (3/4) benchmarking "laplace_sparse_matvec"...
    done (took 7.094138736 seconds)
    (4/4) benchmarking "laplace_iter_devec"...
    done (took 7.089197931 seconds)
  done (took 30.439296623 seconds)
  (5/14) benchmarking "go"...
    (1/1) benchmarking "go_game"...
    done (took 7.329586039 seconds)
  done (took 9.33215663 seconds)
  (6/14) benchmarking "seismic"...
    (1/2) benchmarking ("seismic", "Float32")...
    done (took 7.093122423 seconds)
    (2/2) benchmarking ("seismic", "Float64")...
    done (took 7.079628322 seconds)
  done (took 16.239001164 seconds)
  (7/14) benchmarking "stockcorr"...
    (1/1) benchmarking "stockcorr"...
    done (took 7.14218306 seconds)
  done (took 9.141549175 seconds)
  (8/14) benchmarking "imdb"...
    (1/1) benchmarking "centrality"...
    done (took 7.581938689 seconds)
  done (took 9.596453724 seconds)
  (9/14) benchmarking "monte carlo"...
    (1/2) benchmarking "euro_option_vec"...
    done (took 7.090062483 seconds)
    (2/2) benchmarking "euro_option_devec"...
    done (took 7.101581462 seconds)
  done (took 16.214013883 seconds)
  (10/14) benchmarking "json"...
    (1/1) benchmarking "parse_json"...
    done (took 7.072528407 seconds)
  done (took 9.077467759 seconds)
  (11/14) benchmarking "spellcheck"...
    (1/1) benchmarking "spellcheck"...
    done (took 7.845469235 seconds)
  done (took 9.929289235 seconds)
  (12/14) benchmarking "simplex"...
    (1/1) benchmarking "simplex"...
    done (took 7.086589634 seconds)
  done (took 9.108772527 seconds)
  (13/14) benchmarking "chaosgame"...
    (1/1) benchmarking "chaosgame"...
    done (took 7.110813068 seconds)
  done (took 9.116868035 seconds)
  (14/14) benchmarking "grigoriadis khachiyan"...
    (1/1) benchmarking "grigoriadis_khachiyan"...
    done (took 8.13595098 seconds)
  done (took 10.140248224 seconds)
done (took 171.469345913 seconds)
(17/20) benchmarking "array"...
  (1/13) benchmarking "reverse"...
    (1/4) benchmarking "rev_load_fast!"...
    done (took 7.089219507 seconds)
    (2/4) benchmarking "rev_loadmul_slow!"...
    done (took 7.078969309 seconds)
    (3/4) benchmarking "rev_loadmul_fast!"...
    done (took 7.079102812 seconds)
    (4/4) benchmarking "rev_load_slow!"...
    done (took 7.081720957 seconds)
  done (took 30.332563143 seconds)
  (2/13) benchmarking "any/all"...
    (1/24) benchmarking ("any", "Vector{Int16} generator")...
    done (took 2.119213496 seconds)
    (2/24) benchmarking ("any", "Vector{Int16}")...
    done (took 2.118735161 seconds)
    (3/24) benchmarking ("any", "Vector{Int64} generator")...
    done (took 2.126959999 seconds)
    (4/24) benchmarking ("all", "Vector{Float64} generator")...
    done (took 2.117942319 seconds)
    (5/24) benchmarking ("all", "UnitRange{Int64}")...
    done (took 2.109405468 seconds)
    (6/24) benchmarking ("any", "UnitRange{Int64} generator")...
    done (took 2.110084806 seconds)
    (7/24) benchmarking ("all", "Vector{Int16} generator")...
    done (took 2.115485275 seconds)
    (8/24) benchmarking ("any", "Vector{Bool}")...
    done (took 2.117999918 seconds)
    (9/24) benchmarking ("any", "UnitRange{Int64}")...
    done (took 2.111416761 seconds)
    (10/24) benchmarking ("all", "Vector{Float32}")...
    done (took 2.116686846 seconds)
    (11/24) benchmarking ("all", "Vector{Bool}")...
    done (took 2.120110428 seconds)
    (12/24) benchmarking ("any", "Vector{Float32}")...
    done (took 2.116158334 seconds)
    (13/24) benchmarking ("any", "Vector{Float64} generator")...
    done (took 2.119875275 seconds)
    (14/24) benchmarking ("all", "Vector{Int64}")...
    done (took 2.127373189 seconds)
    (15/24) benchmarking ("all", "Vector{Int64} generator")...
    done (took 2.131942325 seconds)
    (16/24) benchmarking ("all", "Vector{Float32} generator")...
    done (took 2.114434074 seconds)
    (17/24) benchmarking ("all", "Vector{Float64}")...
    done (took 2.12253334 seconds)
    (18/24) benchmarking ("all", "Vector{Int16}")...
    done (took 2.119210401 seconds)
    (19/24) benchmarking ("all", "UnitRange{Int64} generator")...
    done (took 2.112197561 seconds)
    (20/24) benchmarking ("any", "Vector{Int64}")...
    done (took 2.113040901 seconds)
    (21/24) benchmarking ("any", "Vector{Float32} generator")...
    done (took 2.11110641 seconds)
    (22/24) benchmarking ("any", "Vector{Float64}")...
    done (took 2.117843909 seconds)
    (23/24) benchmarking ("any", "BitArray")...
    done (took 2.083731837 seconds)
    (24/24) benchmarking ("all", "BitArray")...
    done (took 2.085090934 seconds)
  done (took 52.763766758 seconds)
  (3/13) benchmarking "convert"...
    (1/4) benchmarking ("Int", "Complex{Float64}")...
    done (took 2.27369277 seconds)
    (2/4) benchmarking ("Complex{Float64}", "Int")...
    done (took 2.151599058 seconds)
    (3/4) benchmarking ("Int", "Float64")...
    done (took 2.237184399 seconds)
    (4/4) benchmarking ("Float64", "Int")...
    done (took 2.130580496 seconds)
  done (took 10.797797749 seconds)
  (4/13) benchmarking "equality"...
    (1/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int64}")...
    done (took 2.084253901 seconds)
    (2/24) benchmarking ("==", "Vector{Float64}")...
    done (took 2.147188124 seconds)
    (3/24) benchmarking ("isequal", "Vector{Int16}")...
    done (took 2.135039505 seconds)
    (4/24) benchmarking ("isequal", "Vector{Int64} isequal UnitRange{Int64}")...
    done (took 2.131326255 seconds)
    (5/24) benchmarking ("==", "Vector{Bool}")...
    done (took 2.169375393 seconds)
    (6/24) benchmarking ("isequal", "Vector{Float64}")...
    done (took 2.187081323 seconds)
    (7/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Int16}")...
    done (took 2.135575803 seconds)
    (8/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float64}")...
    done (took 2.294168485 seconds)
    (9/24) benchmarking ("isequal", "BitArray")...
    done (took 2.199598937 seconds)
    (10/24) benchmarking ("==", "Vector{Int64} == Vector{Float32}")...
    done (took 2.214750734 seconds)
    (11/24) benchmarking ("==", "Vector{Int16}")...
    done (took 2.091997112 seconds)
    (12/24) benchmarking ("==", "Vector{Int64} == Vector{Int64}")...
    done (took 2.111287461 seconds)
    (13/24) benchmarking ("==", "Vector{Int64}")...
    done (took 2.110844151 seconds)
    (14/24) benchmarking ("==", "Vector{Int64} == UnitRange{Int64}")...
    done (took 2.130028792 seconds)
    (15/24) benchmarking ("isequal", "Vector{Float32}")...
    done (took 2.187747079 seconds)
    (16/24) benchmarking ("==", "UnitRange{Int64}")...
    done (took 2.084291308 seconds)
    (17/24) benchmarking ("isequal", "UnitRange{Int64}")...
    done (took 2.086039603 seconds)
    (18/24) benchmarking ("==", "Vector{Int64} == Vector{Float64}")...
    done (took 2.199914144 seconds)
    (19/24) benchmarking ("==", "Vector{Float32}")...
    done (took 2.145248407 seconds)
    (20/24) benchmarking ("isequal", "Vector{Int64} isequal Vector{Float32}")...
    done (took 2.29599907 seconds)
    (21/24) benchmarking ("==", "BitArray")...
    done (took 2.083305676 seconds)
    (22/24) benchmarking ("isequal", "Vector{Int64}")...
    done (took 2.138916478 seconds)
    (23/24) benchmarking ("isequal", "Vector{Bool}")...
    done (took 2.170607521 seconds)
    (24/24) benchmarking ("==", "Vector{Int64} == Vector{Int16}")...
    done (took 2.138814474 seconds)
  done (took 53.679416523 seconds)
  (5/13) benchmarking "reductions"...
    (1/20) benchmarking ("perf_reduce", "Int64")...
    done (took 2.086836228 seconds)
    (2/20) benchmarking ("maxabs", "Float64")...
    done (took 2.093845452 seconds)
    (3/20) benchmarking ("perf_reduce", "Float64")...
    done (took 2.092686747 seconds)
    (4/20) benchmarking ("sumabs", "Float64")...
    done (took 2.091040487 seconds)
    (5/20) benchmarking ("sumabs", "Int64")...
    done (took 2.086541641 seconds)
    (6/20) benchmarking ("sumabs2", "Float64")...
    done (took 2.086769195 seconds)
    (7/20) benchmarking ("perf_mapreduce", "Float64")...
    done (took 2.093623694 seconds)
    (8/20) benchmarking ("sumabs2", "Int64")...
    done (took 2.088758643 seconds)
    (9/20) benchmarking ("norm", "Int64")...
    done (took 2.11342744 seconds)
    (10/20) benchmarking ("norm", "Float64")...
    done (took 2.086794404 seconds)
    (11/20) benchmarking ("sum", "Int64")...
    done (took 2.086356866 seconds)
    (12/20) benchmarking ("norm1", "Float64")...
    done (took 2.075064533 seconds)
    (13/20) benchmarking ("mean", "Int64")...
    done (took 2.08183544 seconds)
    (14/20) benchmarking ("mean", "Float64")...
    done (took 2.086469245 seconds)
    (15/20) benchmarking ("perf_mapreduce", "Int64")...
    done (took 2.086909162 seconds)
    (16/20) benchmarking ("norminf", "Float64")...
    done (took 2.101193922 seconds)
    (17/20) benchmarking ("norminf", "Int64")...
    done (took 2.100651627 seconds)
    (18/20) benchmarking ("sum", "Float64")...
    done (took 2.086742072 seconds)
    (19/20) benchmarking ("maxabs", "Int64")...
    done (took 2.092883656 seconds)
    (20/20) benchmarking ("norm1", "Int64")...
    done (took 2.092764598 seconds)
  done (took 43.817470028 seconds)
  (6/13) benchmarking "bool"...
    (1/6) benchmarking "bitarray_true_load!"...
    done (took 7.084273486 seconds)
    (2/6) benchmarking "boolarray_true_load!"...
    done (took 4.934017039 seconds)
    (3/6) benchmarking "boolarray_true_fill!"...
    done (took 2.433828701 seconds)
    (4/6) benchmarking "bitarray_true_fill!"...
    done (took 2.338706443 seconds)
    (5/6) benchmarking "bitarray_bool_load!"...
    done (took 7.085596919 seconds)
    (6/6) benchmarking "boolarray_bool_load!"...
    done (took 7.083835614 seconds)
  done (took 32.970643544 seconds)
  (7/13) benchmarking "growth"...
    (1/12) benchmarking ("prerend!", 256)...
    done (took 2.099470741 seconds)
    (2/12) benchmarking ("push_single!", 8)...
    done (took 2.091742257 seconds)
    (3/12) benchmarking ("append!", 8)...
    done (took 2.089429347 seconds)
    (4/12) benchmarking ("append!", 2048)...
    done (took 2.144462902 seconds)
    (5/12) benchmarking ("push_multiple!", 2048)...
    done (took 2.229187463 seconds)
    (6/12) benchmarking ("prerend!", 8)...
    done (took 2.095756741 seconds)
    (7/12) benchmarking ("push_multiple!", 8)...
    done (took 2.091917949 seconds)
    (8/12) benchmarking ("push_single!", 256)...
    done (took 2.102156258 seconds)
    (9/12) benchmarking ("push_single!", 2048)...
    done (took 2.135881557 seconds)
    (10/12) benchmarking ("prerend!", 2048)...
    done (took 2.156442505 seconds)
    (11/12) benchmarking ("append!", 256)...
    done (took 2.112267442 seconds)
    (12/12) benchmarking ("push_multiple!", 256)...
    done (took 2.116541232 seconds)
  done (took 27.473124288 seconds)
  (8/13) benchmarking "accumulate"...
    (1/12) benchmarking ("cumsum", "Float64", "dim2")...
    done (took 7.088850073 seconds)
    (2/12) benchmarking ("cumsum!", "Float64", "dim1")...
    done (took 7.089543581 seconds)
    (3/12) benchmarking ("cumsum", "Float64", "dim1")...
    done (took 7.08347144 seconds)
    (4/12) benchmarking ("cumsum!", "Float64")...
    done (took 2.103565276 seconds)
    (5/12) benchmarking ("cumsum", "Int")...
    done (took 2.100319852 seconds)
    (6/12) benchmarking ("cumsum!", "Int")...
    done (took 2.09576316 seconds)
    (7/12) benchmarking ("accumulate!", "Float64")...
    done (took 2.096671409 seconds)
    (8/12) benchmarking ("cumsum!", "Float64", "dim2")...
    done (took 7.085382506 seconds)
    (9/12) benchmarking ("accumulate", "Int")...
    done (took 2.102830553 seconds)
    (10/12) benchmarking ("cumsum", "Float64")...
    done (took 2.11089822 seconds)
    (11/12) benchmarking ("accumulate!", "Int")...
    done (took 2.103357705 seconds)
    (12/12) benchmarking ("accumulate", "Float64")...
    done (took 2.100477123 seconds)
  done (took 47.174594828 seconds)
  (9/13) benchmarking "index"...
    (1/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.302967844 seconds)
    (2/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.320458364 seconds)
    (3/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.309536572 seconds)
    (4/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.683316172 seconds)
    (5/608) benchmarking ("sumvector", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.660103058 seconds)
    (6/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.069611334 seconds)
    (7/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.37363533 seconds)
    (8/608) benchmarking ("sumelt", "BitMatrix")...
    done (took 5.302185265 seconds)
    (9/608) benchmarking ("sumlogical", "Matrix{Int32}")...
    done (took 3.768125874 seconds)
    (10/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.795868816 seconds)
    (11/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.377862554 seconds)
    (12/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.158535466 seconds)
    (13/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.045075678 seconds)
    (14/608) benchmarking ("sumelt_boundscheck", "Matrix{Float32}")...
    done (took 4.017655679 seconds)
    (15/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.98899656 seconds)
    (16/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.332185075 seconds)
    (17/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094353744 seconds)
    (18/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.947266544 seconds)
    (19/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.351770813 seconds)
    (20/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.148289823 seconds)
    (21/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.089864137 seconds)
    (22/608) benchmarking ("sumrange_view", "1.0:1.0:100000.0")...
    done (took 2.092194535 seconds)
    (23/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.090123201 seconds)
    (24/608) benchmarking ("sumvector", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.374400238 seconds)
    (25/608) benchmarking ("sumeach_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.415967528 seconds)
    (26/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.09462487 seconds)
    (27/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.302519159 seconds)
    (28/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104821033 seconds)
    (29/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.106345095 seconds)
    (30/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.318213367 seconds)
    (31/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.53130506 seconds)
    (32/608) benchmarking ("sumvector_view", "Matrix{Int64}")...
    done (took 2.142112848 seconds)
    (33/608) benchmarking ("sumeach", "Matrix{Int32}")...
    done (took 2.292107026 seconds)
    (34/608) benchmarking ("sumelt", "100000:-1:1")...
    done (took 2.346780307 seconds)
    (35/608) benchmarking ("sumvector", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.433460458 seconds)
    (36/608) benchmarking ("sumlinear_view", "Matrix{Float32}")...
    done (took 7.252587114 seconds)
    (37/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.108281185 seconds)
    (38/608) benchmarking ("sumcolon", "Matrix{Int32}")...
    done (took 5.259792808 seconds)
    (39/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.1360176 seconds)
    (40/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.126805361 seconds)
    (41/608) benchmarking ("sumcartesian", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.100463697 seconds)
    (42/608) benchmarking ("sumelt", "Array{Float64, 3}")...
    done (took 2.103668616 seconds)
    (43/608) benchmarking ("sumcartesian", "BitMatrix")...
    done (took 6.624627159 seconds)
    (44/608) benchmarking ("sumrange_view", "BitMatrix")...
    done (took 2.103581706 seconds)
    (45/608) benchmarking ("sumcartesian", "1.0:0.00010001000100010001:2.0")...
    done (took 2.365587068 seconds)
    (46/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094183109 seconds)
    (47/608) benchmarking ("sumeach_view", "Matrix{Float32}")...
    done (took 7.202715258 seconds)
    (48/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.093098584 seconds)
    (49/608) benchmarking ("sumeach", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.016159034 seconds)
    (50/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 4.42301387 seconds)
    (51/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.193361011 seconds)
    (52/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.090179975 seconds)
    (53/608) benchmarking ("sumelt", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.126795269 seconds)
    (54/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.526179562 seconds)
    (55/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.21097 seconds)
    (56/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.335153773 seconds)
    (57/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.09849889 seconds)
    (58/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 5.259876846 seconds)
    (59/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.146913255 seconds)
    (60/608) benchmarking ("sumlogical_view", "Matrix{Int32}")...
    done (took 4.367130776 seconds)
    (61/608) benchmarking ("sumlinear_view", "Matrix{Float64}")...
    done (took 7.323697422 seconds)
    (62/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.094506342 seconds)
    (63/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.305017725 seconds)
    (64/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.018502819 seconds)
    (65/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.457124469 seconds)
    (66/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.203509071 seconds)
    (67/608) benchmarking ("sumvector", "100000:-1:1")...
    done (took 2.124697833 seconds)
    (68/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.097176036 seconds)
    (69/608) benchmarking ("sumlinear_view", "1.0:1.0:100000.0")...
    done (took 4.792755887 seconds)
    (70/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.333537121 seconds)
    (71/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.172942829 seconds)
    (72/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.423773238 seconds)
    (73/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.842891663 seconds)
    (74/608) benchmarking ("sumrange_view", "1:100000")...
    done (took 2.094159294 seconds)
    (75/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.096458969 seconds)
    (76/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.099856132 seconds)
    (77/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.18758222 seconds)
    (78/608) benchmarking ("sumcartesian_view", "100000:-1:1")...
    done (took 7.091290498 seconds)
    (79/608) benchmarking ("mapr_access", "Matrix{Int64}")...
    done (took 3.38934089 seconds)
    (80/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.08123953 seconds)
    (81/608) benchmarking ("sumcartesian", "Matrix{Float64}")...
    done (took 4.018754592 seconds)
    (82/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.191038711 seconds)
    (83/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 3.488787878 seconds)
    (84/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.097619439 seconds)
    (85/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 7.090404399 seconds)
    (86/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.101950389 seconds)
    (87/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.945619927 seconds)
    (88/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.106638998 seconds)
    (89/608) benchmarking ("sumeach_view", "1:100000")...
    done (took 2.18785805 seconds)
    (90/608) benchmarking ("sumlogical_view", "Matrix{Int64}")...
    done (took 4.365402074 seconds)
    (91/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.402422831 seconds)
    (92/608) benchmarking ("sumcolon_view", "1:100000")...
    done (took 2.094224275 seconds)
    (93/608) benchmarking ("sumrange_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.094318499 seconds)
    (94/608) benchmarking ("sum", "3dsubarray")...
    done (took 2.116363328 seconds)
    (95/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.094335618 seconds)
    (96/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.039775341 seconds)
    (97/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.638632356 seconds)
    (98/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.154892428 seconds)
    (99/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.018225856 seconds)
    (100/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.655766373 seconds)
    (101/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 6.553172539 seconds)
    (102/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.057128508 seconds)
    (103/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 6.537456269 seconds)
    (104/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.134486964 seconds)
    (105/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.367347691 seconds)
    (106/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.245246058 seconds)
    (107/608) benchmarking ("sumcartesian", "Matrix{Int64}")...
    done (took 2.498113801 seconds)
    (108/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.30196143 seconds)
    (109/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.339967546 seconds)
    (110/608) benchmarking "5d"...
    done (took 3.625503321 seconds)
    (111/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.098283779 seconds)
    (112/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 4.708571569 seconds)
    (113/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.176650376 seconds)
    (114/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.170659298 seconds)
    (115/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.092407201 seconds)
    (116/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.655718144 seconds)
    (117/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 5.26558853 seconds)
    (118/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.397421167 seconds)
    (119/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.194919804 seconds)
    (120/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.093941983 seconds)
    (121/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.020201964 seconds)
    (122/608) benchmarking ("sumvector_view", "Matrix{Int32}")...
    done (took 2.105243501 seconds)
    (123/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.297499928 seconds)
    (124/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.546903102 seconds)
    (125/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.146991384 seconds)
    (126/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.093453001 seconds)
    (127/608) benchmarking ("sumrange_view", "Matrix{Float64}")...
    done (took 2.100071195 seconds)
    (128/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.095546177 seconds)
    (129/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.098966342 seconds)
    (130/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 4.20067364 seconds)
    (131/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.112207123 seconds)
    (132/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.381740135 seconds)
    (133/608) benchmarking ("sumcolon_view", "BitMatrix")...
    done (took 2.163111447 seconds)
    (134/608) benchmarking ("sumeach", "100000:-1:1")...
    done (took 2.09460002 seconds)
    (135/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.031088193 seconds)
    (136/608) benchmarking ("sumcolon_view", "Matrix{Float64}")...
    done (took 2.096964798 seconds)
    (137/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.384472284 seconds)
    (138/608) benchmarking ("sumrange", "Matrix{Float64}")...
    done (took 6.728080723 seconds)
    (139/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.151995118 seconds)
    (140/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.348947556 seconds)
    (141/608) benchmarking ("sumeach", "BitMatrix")...
    done (took 5.35829943 seconds)
    (142/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.795636542 seconds)
    (143/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.111113196 seconds)
    (144/608) benchmarking ("mapr_access", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.121521819 seconds)
    (145/608) benchmarking ("sumvector", "Matrix{Float32}")...
    done (took 2.359375383 seconds)
    (146/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.163491409 seconds)
    (147/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.169972899 seconds)
    (148/608) benchmarking ("sumlogical", "BitMatrix")...
    done (took 3.677606729 seconds)
    (149/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.225890781 seconds)
    (150/608) benchmarking ("sumlinear_view", "1:100000")...
    done (took 2.193128306 seconds)
    (151/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.095112866 seconds)
    (152/608) benchmarking ("sumlogical", "1.0:0.00010001000100010001:2.0")...
    done (took 2.233784065 seconds)
    (153/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.1006159 seconds)
    (154/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.100511817 seconds)
    (155/608) benchmarking ("sumcolon", "Matrix{Int64}")...
    done (took 6.470881579 seconds)
    (156/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.508915669 seconds)
    (157/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.520758851 seconds)
    (158/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.138249137 seconds)
    (159/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.11102553 seconds)
    (160/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.10187927 seconds)
    (161/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.273709684 seconds)
    (162/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.336285095 seconds)
    (163/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.167210191 seconds)
    (164/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.124296336 seconds)
    (165/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.102385748 seconds)
    (166/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.179798919 seconds)
    (167/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.323410414 seconds)
    (168/608) benchmarking "ind2sub"...
    done (took 7.096646266 seconds)
    (169/608) benchmarking ("sumeach", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.114685315 seconds)
    (170/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.345478098 seconds)
    (171/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.335505825 seconds)
    (172/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.386015556 seconds)
    (173/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.146079907 seconds)
    (174/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.169074952 seconds)
    (175/608) benchmarking ("sumvector_view", "BitMatrix")...
    done (took 2.167016622 seconds)
    (176/608) benchmarking ("sumeach", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.106245008 seconds)
    (177/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.308858392 seconds)
    (178/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.178391657 seconds)
    (179/608) benchmarking ("sumrange", "1.0:1.0:100000.0")...
    done (took 4.762937258 seconds)
    (180/608) benchmarking ("mapr_access", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.645300861 seconds)
    (181/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.325656933 seconds)
    (182/608) benchmarking ("sumrange", "Matrix{Int32}")...
    done (took 5.64701103 seconds)
    (183/608) benchmarking ("sumcartesian", "Matrix{Float32}")...
    done (took 4.060194377 seconds)
    (184/608) benchmarking ("sumelt", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.734247125 seconds)
    (185/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.372093186 seconds)
    (186/608) benchmarking ("sumeach", "1.0:0.00010001000100010001:2.0")...
    done (took 2.466307061 seconds)
    (187/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.115601226 seconds)
    (188/608) benchmarking ("sumcartesian_view", "Matrix{Float64}")...
    done (took 2.5485521 seconds)
    (189/608) benchmarking ("sumcolon", "Matrix{Float32}")...
    done (took 5.271505153 seconds)
    (190/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.775493549 seconds)
    (191/608) benchmarking ("sumlinear_view", "100000:-1:1")...
    done (took 7.125582435 seconds)
    (192/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.625850063 seconds)
    (193/608) benchmarking ("sumeach", "Matrix{Float32}")...
    done (took 4.023569727 seconds)
    (194/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.104297593 seconds)
    (195/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.442511049 seconds)
    (196/608) benchmarking ("sumelt_boundscheck", "Matrix{Float64}")...
    done (took 4.05129256 seconds)
    (197/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.71570559 seconds)
    (198/608) benchmarking ("sumeach_view", "BitMatrix")...
    done (took 7.163418188 seconds)
    (199/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.160381754 seconds)
    (200/608) benchmarking ("sumcolon_view", "100000:-1:1")...
    done (took 2.09756674 seconds)
    (201/608) benchmarking ("sumelt", "1:100000")...
    done (took 2.10036383 seconds)
    (202/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108205545 seconds)
    (203/608) benchmarking ("sumlogical", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.102286106 seconds)
    (204/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.201873776 seconds)
    (205/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.167473756 seconds)
    (206/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.17197016 seconds)
    (207/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.025624396 seconds)
    (208/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.72152455 seconds)
    (209/608) benchmarking ("sumvector_view", "100000:-1:1")...
    done (took 2.134043253 seconds)
    (210/608) benchmarking ("sumvector", "1.0:0.00010001000100010001:2.0")...
    done (took 2.102586868 seconds)
    (211/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.098770306 seconds)
    (212/608) benchmarking ("sumlogical", "Matrix{Float64}")...
    done (took 4.457369449 seconds)
    (213/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 3.947009517 seconds)
    (214/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.051768405 seconds)
    (215/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.099550003 seconds)
    (216/608) benchmarking ("sumeach", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.178289186 seconds)
    (217/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.848980298 seconds)
    (218/608) benchmarking ("sumlogical", "100000:-1:1")...
    done (took 2.650426399 seconds)
    (219/608) benchmarking ("sumrange_view", "100000:-1:1")...
    done (took 2.103858659 seconds)
    (220/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.10403699 seconds)
    (221/608) benchmarking ("sumcolon", "1.0:1.0:100000.0")...
    done (took 4.708918388 seconds)
    (222/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.725507837 seconds)
    (223/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.013744689 seconds)
    (224/608) benchmarking ("sumlinear_view", "Matrix{Int32}")...
    done (took 7.238225095 seconds)
    (225/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.865583337 seconds)
    (226/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.125757356 seconds)
    (227/608) benchmarking ("sumlogical_view", "Matrix{Float32}")...
    done (took 4.378272474 seconds)
    (228/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.192707943 seconds)
    (229/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.390271439 seconds)
    (230/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.805040111 seconds)
    (231/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.177474376 seconds)
    (232/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.101230345 seconds)
    (233/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107203128 seconds)
    (234/608) benchmarking ("sumeach_view", "1.0:1.0:100000.0")...
    done (took 4.804207786 seconds)
    (235/608) benchmarking ("sumeach_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.108916291 seconds)
    (236/608) benchmarking ("sumlinear", "1.0:1.0:100000.0")...
    done (took 4.800282865 seconds)
    (237/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.391420068 seconds)
    (238/608) benchmarking ("sumlinear", "BitMatrix")...
    done (took 5.372806926 seconds)
    (239/608) benchmarking ("sumrange", "BitMatrix")...
    done (took 2.539053819 seconds)
    (240/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.159135507 seconds)
    (241/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.311717253 seconds)
    (242/608) benchmarking ("sumelt_boundscheck", "Array{Float64, 3}")...
    done (took 2.114556 seconds)
    (243/608) benchmarking ("sumeach", "1:100000")...
    done (took 2.102832743 seconds)
    (244/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.592983423 seconds)
    (245/608) benchmarking ("sumvector", "1:100000")...
    done (took 2.126230789 seconds)
    (246/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.102448005 seconds)
    (247/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.304373253 seconds)
    (248/608) benchmarking ("sumlogical", "1:100000")...
    done (took 2.623746241 seconds)
    (249/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.441387622 seconds)
    (250/608) benchmarking ("sumelt_boundscheck", "BitMatrix")...
    done (took 5.733274405 seconds)
    (251/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.185858187 seconds)
    (252/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.117660702 seconds)
    (253/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.367981553 seconds)
    (254/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.098602822 seconds)
    (255/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 6.549838588 seconds)
    (256/608) benchmarking ("sumlinear_view", "Array{Float64, 3}")...
    done (took 2.785415784 seconds)
    (257/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.097844575 seconds)
    (258/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.105093057 seconds)
    (259/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.342652441 seconds)
    (260/608) benchmarking ("sumcartesian", "100000:-1:1")...
    done (took 2.789932126 seconds)
    (261/608) benchmarking ("sumvector_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.102425339 seconds)
    (262/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.07738212 seconds)
    (263/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.106716479 seconds)
    (264/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.314367463 seconds)
    (265/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.305884651 seconds)
    (266/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.376014614 seconds)
    (267/608) benchmarking ("sumvector", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.394875639 seconds)
    (268/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.547943205 seconds)
    (269/608) benchmarking ("sumelt_boundscheck", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.112080803 seconds)
    (270/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.106103601 seconds)
    (271/608) benchmarking "4d"...
    done (took 3.125561913 seconds)
    (272/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.348030225 seconds)
    (273/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.101467802 seconds)
    (274/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.139671395 seconds)
    (275/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.551232596 seconds)
    (276/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.174750138 seconds)
    (277/608) benchmarking ("sumcartesian_view", "Matrix{Int64}")...
    done (took 2.528911141 seconds)
    (278/608) benchmarking ("sumvector", "Matrix{Float64}")...
    done (took 2.383460639 seconds)
    (279/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.503761319 seconds)
    (280/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.723220128 seconds)
    (281/608) benchmarking ("sumvector", "Matrix{Int32}")...
    done (took 2.36505906 seconds)
    (282/608) benchmarking ("sumlinear", "Array{Float64, 3}")...
    done (took 2.164851727 seconds)
    (283/608) benchmarking ("sumvector_view", "Matrix{Float32}")...
    done (took 2.113895306 seconds)
    (284/608) benchmarking ("sumeach_view", "Array{Float64, 3}")...
    done (took 2.755963237 seconds)
    (285/608) benchmarking ("sumlogical_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.226255981 seconds)
    (286/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 4.034361845 seconds)
    (287/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222398016 seconds)
    (288/608) benchmarking ("sumelt", "Matrix{Float32}")...
    done (took 4.031128731 seconds)
    (289/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 3.796544427 seconds)
    (290/608) benchmarking ("sumrange", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392045145 seconds)
    (291/608) benchmarking ("sumvector_view", "Matrix{Float64}")...
    done (took 2.118696594 seconds)
    (292/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.370111511 seconds)
    (293/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.079889959 seconds)
    (294/608) benchmarking ("sumvector", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.436935186 seconds)
    (295/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.398226158 seconds)
    (296/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.388296845 seconds)
    (297/608) benchmarking ("sumcartesian", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.136882462 seconds)
    (298/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.13187855 seconds)
    (299/608) benchmarking ("sumrange", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.104841192 seconds)
    (300/608) benchmarking ("sumelt", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.155296154 seconds)
    (301/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.12379069 seconds)
    (302/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.288307392 seconds)
    (303/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.218080247 seconds)
    (304/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 7.107774965 seconds)
    (305/608) benchmarking ("sumrange", "Matrix{Float32}")...
    done (took 5.633277219 seconds)
    (306/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.140489578 seconds)
    (307/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.15197753 seconds)
    (308/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.11122494 seconds)
    (309/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.617480001 seconds)
    (310/608) benchmarking ("sumlinear", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.123698026 seconds)
    (311/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.105911844 seconds)
    (312/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.798948116 seconds)
    (313/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.756464454 seconds)
    (314/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.222418608 seconds)
    (315/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.176924222 seconds)
    (316/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.859250414 seconds)
    (317/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 6.586915391 seconds)
    (318/608) benchmarking ("sumrange", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.155089118 seconds)
    (319/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.99248757 seconds)
    (320/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 6.929421919 seconds)
    (321/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.371292215 seconds)
    (322/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.158636555 seconds)
    (323/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.552480325 seconds)
    (324/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.141672776 seconds)
    (325/608) benchmarking ("sumlinear", "Matrix{Int64}")...
    done (took 2.510863548 seconds)
    (326/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.118933804 seconds)
    (327/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.318901498 seconds)
    (328/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.110920307 seconds)
    (329/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.672338368 seconds)
    (330/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.14941264 seconds)
    (331/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.377402645 seconds)
    (332/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.058974927 seconds)
    (333/608) benchmarking ("sumcartesian_view", "Matrix{Int32}")...
    done (took 2.318280718 seconds)
    (334/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.30980542 seconds)
    (335/608) benchmarking ("sumlogical", "1.0:1.0:100000.0")...
    done (took 3.132375377 seconds)
    (336/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.110819061 seconds)
    (337/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.033185547 seconds)
    (338/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.212081636 seconds)
    (339/608) benchmarking ("sumcolon", "1:100000")...
    done (took 2.970596121 seconds)
    (340/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.090043152 seconds)
    (341/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.109027852 seconds)
    (342/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.129199776 seconds)
    (343/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.550634097 seconds)
    (344/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.295957132 seconds)
    (345/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.582595916 seconds)
    (346/608) benchmarking "3d"...
    done (took 2.924949542 seconds)
    (347/608) benchmarking ("sum", "3darray")...
    done (took 2.110379509 seconds)
    (348/608) benchmarking ("sumlogical", "Matrix{Int64}")...
    done (took 4.462130668 seconds)
    (349/608) benchmarking ("sumvector", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.485457201 seconds)
    (350/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.722197492 seconds)
    (351/608) benchmarking ("sumeach", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137974983 seconds)
    (352/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.108728943 seconds)
    (353/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.44534154 seconds)
    (354/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.865898821 seconds)
    (355/608) benchmarking ("sumlogical_view", "BitMatrix")...
    done (took 4.438739508 seconds)
    (356/608) benchmarking ("mapr_access", "Matrix{Float32}")...
    done (took 3.366152857 seconds)
    (357/608) benchmarking ("sumrange_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.114812429 seconds)
    (358/608) benchmarking ("sumcolon_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.770981824 seconds)
    (359/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.323063642 seconds)
    (360/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.233018085 seconds)
    (361/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.026924722 seconds)
    (362/608) benchmarking ("sumlogical_view", "100000:-1:1")...
    done (took 2.600941275 seconds)
    (363/608) benchmarking ("sumelt", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.690715598 seconds)
    (364/608) benchmarking ("sumeach", "1.0:1.0:100000.0")...
    done (took 4.808863902 seconds)
    (365/608) benchmarking ("sumeach", "Array{Float64, 3}")...
    done (took 2.117062399 seconds)
    (366/608) benchmarking ("sumlinear", "Matrix{Int32}")...
    done (took 2.312842732 seconds)
    (367/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.464766164 seconds)
    (368/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 5.387145574 seconds)
    (369/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.140706883 seconds)
    (370/608) benchmarking ("sumlinear", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.180895169 seconds)
    (371/608) benchmarking ("sumelt_boundscheck", "Matrix{Int64}")...
    done (took 2.513705543 seconds)
    (372/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.371842808 seconds)
    (373/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.803164565 seconds)
    (374/608) benchmarking ("sumlinear", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.023390053 seconds)
    (375/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.107467412 seconds)
    (376/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.502632795 seconds)
    (377/608) benchmarking ("sumcartesian", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.128835452 seconds)
    (378/608) benchmarking ("sumcartesian_view", "1:100000")...
    done (took 2.204899709 seconds)
    (379/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.349790889 seconds)
    (380/608) benchmarking ("sumvector", "BitMatrix")...
    done (took 2.422528445 seconds)
    (381/608) benchmarking ("sumrange", "Matrix{Int64}")...
    done (took 6.715832543 seconds)
    (382/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 6.559025887 seconds)
    (383/608) benchmarking ("sumcolon", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.137685771 seconds)
    (384/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.505188083 seconds)
    (385/608) benchmarking ("mapr_access", "Matrix{Int32}")...
    done (took 3.514969518 seconds)
    (386/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.505067888 seconds)
    (387/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.319034425 seconds)
    (388/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.473195989 seconds)
    (389/608) benchmarking ("sumeach", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.431420816 seconds)
    (390/608) benchmarking ("sumelt", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.990597288 seconds)
    (391/608) benchmarking ("sumelt", "Matrix{Int64}")...
    done (took 2.521203761 seconds)
    (392/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.32093108 seconds)
    (393/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.210303224 seconds)
    (394/608) benchmarking ("sumrange", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.386541767 seconds)
    (395/608) benchmarking ("sumlinear_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.978214057 seconds)
    (396/608) benchmarking ("sumelt", "1.0:1.0:100000.0")...
    done (took 4.819972069 seconds)
    (397/608) benchmarking ("sumcartesian_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.356166788 seconds)
    (398/608) benchmarking ("sumrange_view", "Matrix{Float32}")...
    done (took 2.113903022 seconds)
    (399/608) benchmarking ("sumeach", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.038914861 seconds)
    (400/608) benchmarking ("sumelt", "Matrix{Int32}")...
    done (took 2.316996915 seconds)
    (401/608) benchmarking ("sumeach_view", "Matrix{Float64}")...
    done (took 7.10227901 seconds)
    (402/608) benchmarking ("sumcolon", "Matrix{Float64}")...
    done (took 6.578609251 seconds)
    (403/608) benchmarking ("mapr_access", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.630827376 seconds)
    (404/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.120304491 seconds)
    (405/608) benchmarking ("sumlogical_view", "Matrix{Float64}")...
    done (took 4.398933051 seconds)
    (406/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.571670699 seconds)
    (407/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.647504352 seconds)
    (408/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 5.301064684 seconds)
    (409/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.130879858 seconds)
    (410/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 4.076066617 seconds)
    (411/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.133933728 seconds)
    (412/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.129965098 seconds)
    (413/608) benchmarking ("sumlinear_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.111155041 seconds)
    (414/608) benchmarking ("sumlogical_view", "1:100000")...
    done (took 2.60600072 seconds)
    (415/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.402038411 seconds)
    (416/608) benchmarking ("sumvector_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.123470284 seconds)
    (417/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.052111483 seconds)
    (418/608) benchmarking ("sumcartesian", "1:100000")...
    done (took 2.780070876 seconds)
    (419/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.03876397 seconds)
    (420/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.323787932 seconds)
    (421/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 5.29503859 seconds)
    (422/608) benchmarking ("sumcolon_view", "Matrix{Float32}")...
    done (took 2.143426098 seconds)
    (423/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.667449873 seconds)
    (424/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.395585129 seconds)
    (425/608) benchmarking ("sumcolon_view", "Matrix{Int64}")...
    done (took 2.206106061 seconds)
    (426/608) benchmarking ("sumvector", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.397175694 seconds)
    (427/608) benchmarking ("sumcolon", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.350134327 seconds)
    (428/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.142892028 seconds)
    (429/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.037458279 seconds)
    (430/608) benchmarking ("sumlogical", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.868074512 seconds)
    (431/608) benchmarking ("sumlinear", "Matrix{Float32}")...
    done (took 4.056189011 seconds)
    (432/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.194006488 seconds)
    (433/608) benchmarking ("sumeach", "Matrix{Int64}")...
    done (took 2.534221026 seconds)
    (434/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.125390698 seconds)
    (435/608) benchmarking ("sumcolon_view", "Matrix{Int32}")...
    done (took 2.114750977 seconds)
    (436/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.316401182 seconds)
    (437/608) benchmarking ("sumeach", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 4.040125165 seconds)
    (438/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.158927868 seconds)
    (439/608) benchmarking ("sumrange_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 2.742483398 seconds)
    (440/608) benchmarking ("sumcolon", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.311087152 seconds)
    (441/608) benchmarking ("mapr_access", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.690513001 seconds)
    (442/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.382774272 seconds)
    (443/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.233851407 seconds)
    (444/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.356286847 seconds)
    (445/608) benchmarking ("sumlinear_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.411854212 seconds)
    (446/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.113516784 seconds)
    (447/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.07305495 seconds)
    (448/608) benchmarking ("sumlinear", "1.0:0.00010001000100010001:2.0")...
    done (took 2.38392588 seconds)
    (449/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.039562923 seconds)
    (450/608) benchmarking ("sumrange", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.719676331 seconds)
    (451/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.791903438 seconds)
    (452/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 2.806522074 seconds)
    (453/608) benchmarking ("sumelt", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.183061663 seconds)
    (454/608) benchmarking ("sumelt_boundscheck", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.111539027 seconds)
    (455/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.114159027 seconds)
    (456/608) benchmarking ("sumelt", "1.0:0.00010001000100010001:2.0")...
    done (took 2.384075043 seconds)
    (457/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.464043011 seconds)
    (458/608) benchmarking ("sumeach_view", "Matrix{Int64}")...
    done (took 7.202129438 seconds)
    (459/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.67503354 seconds)
    (460/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.143002468 seconds)
    (461/608) benchmarking ("sumeach", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.13788915 seconds)
    (462/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.456627386 seconds)
    (463/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.190834455 seconds)
    (464/608) benchmarking ("sumvector_view", "1.0:1.0:100000.0")...
    done (took 2.115959116 seconds)
    (465/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.119725092 seconds)
    (466/608) benchmarking ("sumrange", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 6.58218706 seconds)
    (467/608) benchmarking ("sumelt_boundscheck", "Matrix{Int32}")...
    done (took 2.344060057 seconds)
    (468/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.133675738 seconds)
    (469/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.151765132 seconds)
    (470/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.317860269 seconds)
    (471/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.186998872 seconds)
    (472/608) benchmarking "sub2ind"...
    done (took 7.300767727 seconds)
    (473/608) benchmarking ("sumelt_boundscheck", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.18023773 seconds)
    (474/608) benchmarking ("sumelt_boundscheck", "1:100000")...
    done (took 2.629483972 seconds)
    (475/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 2.120311442 seconds)
    (476/608) benchmarking ("sumlogical", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.118915062 seconds)
    (477/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.151642655 seconds)
    (478/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.061923848 seconds)
    (479/608) benchmarking ("sumrange", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.112745476 seconds)
    (480/608) benchmarking ("sumlogical", "Matrix{Float32}")...
    done (took 3.842556784 seconds)
    (481/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 2.173405586 seconds)
    (482/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.137459957 seconds)
    (483/608) benchmarking ("sumvector", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.381652806 seconds)
    (484/608) benchmarking "6d"...
    done (took 3.738378104 seconds)
    (485/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.318275652 seconds)
    (486/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.508990618 seconds)
    (487/608) benchmarking ("sumrange", "1:100000")...
    done (took 2.977292527 seconds)
    (488/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 5.295909732 seconds)
    (489/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.155447283 seconds)
    (490/608) benchmarking ("sumrange_view", "Matrix{Int64}")...
    done (took 2.118019065 seconds)
    (491/608) benchmarking ("sumeach_view", "Matrix{Int32}")...
    done (took 7.122029813 seconds)
    (492/608) benchmarking ("sumvector", "Matrix{Int64}")...
    done (took 2.495332678 seconds)
    (493/608) benchmarking ("sumcartesian_view", "Matrix{Float32}")...
    done (took 2.405306343 seconds)
    (494/608) benchmarking ("sumelt_boundscheck", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 7.104920957 seconds)
    (495/608) benchmarking ("sumvector", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.382517788 seconds)
    (496/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.158203099 seconds)
    (497/608) benchmarking ("sumcolon_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 2.118112492 seconds)
    (498/608) benchmarking ("sumcartesian_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.139248394 seconds)
    (499/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.084190932 seconds)
    (500/608) benchmarking ("sumeach_view", "100000:-1:1")...
    done (took 7.11584936 seconds)
    (501/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 3.86501288 seconds)
    (502/608) benchmarking ("sumrange", "100000:-1:1")...
    done (took 3.002130098 seconds)
    (503/608) benchmarking ("sumcartesian", "1.0:1.0:100000.0")...
    done (took 4.844700096 seconds)
    (504/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.509635317 seconds)
    (505/608) benchmarking ("sumlinear_view", "BitMatrix")...
    done (took 7.129753908 seconds)
    (506/608) benchmarking ("sumelt_boundscheck", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.155817507 seconds)
    (507/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.119476393 seconds)
    (508/608) benchmarking ("sumelt", "Matrix{Float64}")...
    done (took 4.042903701 seconds)
    (509/608) benchmarking ("sumrange", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.120060806 seconds)
    (510/608) benchmarking ("sumelt", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.152501102 seconds)
    (511/608) benchmarking ("sumcartesian_view", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.126659779 seconds)
    (512/608) benchmarking ("sumlinear_view", "Matrix{Int64}")...
    done (took 7.116032763 seconds)
    (513/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.479934161 seconds)
    (514/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 5.199915385 seconds)
    (515/608) benchmarking ("sumlinear", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.192633251 seconds)
    (516/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 7.118182294 seconds)
    (517/608) benchmarking ("sumcolon_view", "1.0:1.0:100000.0")...
    done (took 2.117282205 seconds)
    (518/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 7.121643619 seconds)
    (519/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.330088389 seconds)
    (520/608) benchmarking ("sumelt_boundscheck", "100000:-1:1")...
    done (took 2.630891784 seconds)
    (521/608) benchmarking ("sumcartesian_view", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.134202237 seconds)
    (522/608) benchmarking ("sumcartesian_view", "1.0:1.0:100000.0")...
    done (took 4.817282453 seconds)
    (523/608) benchmarking ("sumeach", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.321127073 seconds)
    (524/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.119516547 seconds)
    (525/608) benchmarking ("sumlogical_view", "1.0:1.0:100000.0")...
    done (took 2.614741774 seconds)
    (526/608) benchmarking ("sumcolon", "BitMatrix")...
    done (took 2.570613131 seconds)
    (527/608) benchmarking ("sumcolon", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 5.371364924 seconds)
    (528/608) benchmarking ("sumcartesian_view", "Array{Float64, 3}")...
    done (took 2.154391303 seconds)
    (529/608) benchmarking ("sumcolon", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 5.303475966 seconds)
    (530/608) benchmarking ("sumrange", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.359042458 seconds)
    (531/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 3.656650961 seconds)
    (532/608) benchmarking ("sumcolon", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 5.309440944 seconds)
    (533/608) benchmarking ("sumeach", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.097920531 seconds)
    (534/608) benchmarking ("sumlinear_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.341655782 seconds)
    (535/608) benchmarking ("sumvector_view", "1:100000")...
    done (took 2.118663544 seconds)
    (536/608) benchmarking ("sumcartesian_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.389659559 seconds)
    (537/608) benchmarking ("sumelt_boundscheck", "1.0:0.00010001000100010001:2.0")...
    done (took 2.392086132 seconds)
    (538/608) benchmarking ("sumlinear", "1:100000")...
    done (took 2.118885784 seconds)
    (539/608) benchmarking ("sumcartesian", "Matrix{Int32}")...
    done (took 2.330115414 seconds)
    (540/608) benchmarking ("sumrange", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 6.577210144 seconds)
    (541/608) benchmarking ("sumcolon", "1.0:0.00010001000100010001:2.0")...
    done (took 2.401301002 seconds)
    (542/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.131579546 seconds)
    (543/608) benchmarking ("sumvector", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.703700484 seconds)
    (544/608) benchmarking ("sumrange_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.181620475 seconds)
    (545/608) benchmarking ("sumcolon", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 5.318772271 seconds)
    (546/608) benchmarking ("sumcolon", "100000:-1:1")...
    done (took 3.037526631 seconds)
    (547/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Float32, 2}")...
    done (took 7.130409495 seconds)
    (548/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.121804472 seconds)
    (549/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.383384092 seconds)
    (550/608) benchmarking ("mapr_access", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, Array{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.172339032 seconds)
    (551/608) benchmarking ("sumlinear", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 7.118522636 seconds)
    (552/608) benchmarking ("sumcartesian_view", "SubArray{Float64, 3, Array{Float64, 3}, Tuple{UnitRange{Int64}, UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.127589665 seconds)
    (553/608) benchmarking ("mapr_access", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 6.673669625 seconds)
    (554/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 3.884750731 seconds)
    (555/608) benchmarking ("sumlogical_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.584197806 seconds)
    (556/608) benchmarking ("sumvector_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.270774472 seconds)
    (557/608) benchmarking ("sumlogical_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 4.465778761 seconds)
    (558/608) benchmarking ("sumlogical", "SubArray{Int32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.960819706 seconds)
    (559/608) benchmarking ("sumelt_boundscheck", "1.0:1.0:100000.0")...
    done (took 4.872000333 seconds)
    (560/608) benchmarking ("sumvector", "1.0:1.0:100000.0")...
    done (took 2.121019553 seconds)
    (561/608) benchmarking ("sumeach", "Matrix{Float64}")...
    done (took 4.045562315 seconds)
    (562/608) benchmarking ("mapr_access", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 7.143673841 seconds)
    (563/608) benchmarking ("sumlinear", "Base.ReinterpretArray{Int32, 3, Float64, Array{Float64, 3}, false}")...
    done (took 2.141621277 seconds)
    (564/608) benchmarking ("sumrange_view", "Matrix{Int32}")...
    done (took 2.122327976 seconds)
    (565/608) benchmarking ("sumelt", "Base.ReinterpretArray{Float32, 2, Int32, Matrix{Int32}, false}")...
    done (took 7.128810224 seconds)
    (566/608) benchmarking ("sumlogical", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.815560648 seconds)
    (567/608) benchmarking "2d"...
    done (took 2.841036152 seconds)
    (568/608) benchmarking ("sumeach_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.3316787 seconds)
    (569/608) benchmarking "7d"...
    done (took 2.42835984 seconds)
    (570/608) benchmarking ("sumcartesian", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.045730211 seconds)
    (571/608) benchmarking ("sumlinear_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Int32, 2}")...
    done (took 2.322546528 seconds)
    (572/608) benchmarking ("sumcartesian", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.700367068 seconds)
    (573/608) benchmarking ("sumlinear", "Matrix{Float64}")...
    done (took 4.045921262 seconds)
    (574/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 3.0858672 seconds)
    (575/608) benchmarking ("sumrange", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 7.120217974 seconds)
    (576/608) benchmarking ("sumeach_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 2.380446266 seconds)
    (577/608) benchmarking ("sumelt", "SubArray{Float32, 2, Matrix{Float32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.046393475 seconds)
    (578/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.123386088 seconds)
    (579/608) benchmarking ("sumeach", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 7.140846415 seconds)
    (580/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float64, Matrix{Float64}, false}")...
    done (took 5.180467812 seconds)
    (581/608) benchmarking ("sumrange", "SubArray{Int32, 2, Matrix{Int32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 6.815661892 seconds)
    (582/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 2.388173808 seconds)
    (583/608) benchmarking ("sumeach_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Float32}, 2, Float32, Matrix{Float32}, false}")...
    done (took 7.120061627 seconds)
    (584/608) benchmarking ("sumelt", "SubArray{Float32, 2, Array{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 4.064693778 seconds)
    (585/608) benchmarking ("sumcolon_view", "SubArray{Float32, 2, Matrix{Float32}, Tuple{UnitRange{Int64}, UnitRange{Int64}}, false}")...
    done (took 2.123549716 seconds)
    (586/608) benchmarking ("sumcartesian_view", "BitMatrix")...
    done (took 7.122033739 seconds)
    (587/608) benchmarking ("mapr_access", "BitMatrix")...
    done (took 7.119412626 seconds)
    (588/608) benchmarking ("sumvector_view", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 2.204177387 seconds)
    (589/608) benchmarking ("sumlinear", "100000:-1:1")...
    done (took 2.121708167 seconds)
    (590/608) benchmarking ("sumlinear", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.23866524 seconds)
    (591/608) benchmarking ("sumvector", "BaseBenchmarks.ArrayBenchmarks.ArrayLSLS{Int32, 2}")...
    done (took 2.384691881 seconds)
    (592/608) benchmarking ("sumlogical_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.519981737 seconds)
    (593/608) benchmarking ("sumcartesian", "Array{Float64, 3}")...
    done (took 2.216110263 seconds)
    (594/608) benchmarking ("sumelt", "SubArray{Int32, 2, Array{Int32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 3.761323527 seconds)
    (595/608) benchmarking ("sumlogical", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}")...
    done (took 3.826008236 seconds)
    (596/608) benchmarking ("sumeach_view", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 3}, Tuple{Int64, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 4.056898529 seconds)
    (597/608) benchmarking ("sumcolon_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.162832884 seconds)
    (598/608) benchmarking ("sumelt", "BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 2}")...
    done (took 4.680745328 seconds)
    (599/608) benchmarking ("sumlinear_view", "SubArray{Int32, 2, Base.ReshapedArray{Int32, 2, SubArray{Int32, 3, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Int32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}, Tuple{Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}, Base.MultiplicativeInverses.SignedMultiplicativeInverse{Int64}}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, false}")...
    done (took 2.690043289 seconds)
    (600/608) benchmarking ("sumlogical_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 5.190657387 seconds)
    (601/608) benchmarking ("sumvector_view", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int64, Matrix{Int64}, false}")...
    done (took 2.898919249 seconds)
    (602/608) benchmarking ("sumlogical", "SubArray{Float32, 2, BaseBenchmarks.ArrayBenchmarks.ArrayLS{Float32, 2}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, false}")...
    done (took 3.84136309 seconds)
    (603/608) benchmarking ("sumeach", "BaseBenchmarks.ArrayBenchmarks.ArrayLF{Float32, 2}")...
    done (took 4.065399348 seconds)
    (604/608) benchmarking ("sumlinear", "Base.ReinterpretArray{BaseBenchmarks.ArrayBenchmarks.PairVals{Int32}, 2, Int32, Matrix{Int32}, false}")...
    done (took 3.12574217 seconds)
    (605/608) benchmarking ("sumelt", "SubArray{Float32, 2, Base.ReshapedArray{Float32, 2, SubArray{Float32, 3, Array{Float32, 3}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}, Tuple{}}, Tuple{Base.Slice{Base.OneTo{Int64}}, UnitRange{Int64}}, true}")...
    done (took 2.137574093 seconds)
    (606/608) benchmarking ("mapr_access", "Matrix{Float64}")...
    done (took 3.381959556 seconds)
    (607/608) benchmarking ("sumcolon_view", "1.0:0.00010001000100010001:2.0")...
    done (took 2.125422761 seconds)
    (608/608) benchmarking ("sumrange_view", "SubArray{Int32, 2, Matrix{Int32}, Tuple{Base.Slice{Base.OneTo{Int64}}, Base.Slice{Base.OneTo{Int64}}}, true}")...
    done (took 2.125140171 seconds)
  done (took 2303.437492048 seconds)
  (10/13) benchmarking "comprehension"...
    (1/8) benchmarking ("comprehension_indexing", "Vector{Float64}")...
    done (took 7.194824272 seconds)
    (2/8) benchmarking ("comprehension_iteration", "Vector{Float64}")...
    done (took 7.231622254 seconds)
    (3/8) benchmarking ("collect", "Vector{Float64}")...
    done (took 7.193627495 seconds)
    (4/8) benchmarking ("collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.23665961 seconds)
    (5/8) benchmarking ("comprehension_iteration", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.207421702 seconds)
    (6/8) benchmarking ("comprehension_indexing", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.17157557 seconds)
    (7/8) benchmarking ("comprehension_collect", "StepRangeLen{Float64, Base.TwicePrecision{Float64}, Base.TwicePrecision{Float64}}")...
    done (took 7.234627743 seconds)
    (8/8) benchmarking ("comprehension_collect", "Vector{Float64}")...
    done (took 7.154966334 seconds)
  done (took 59.665278776 seconds)
  (11/13) benchmarking "cat"...
    (1/17) benchmarking ("hvcat", 500)...
    done (took 7.122375179 seconds)
    (2/17) benchmarking "4467"...
    done (took 4.119558649 seconds)
    (3/17) benchmarking ("hcat_setind", 5)...
    done (took 2.13262701 seconds)
    (4/17) benchmarking ("hvcat_setind", 500)...
    done (took 7.095987697 seconds)
    (5/17) benchmarking ("hvcat", 5)...
    done (took 2.128849148 seconds)
    (6/17) benchmarking ("hcat", 500)...
    done (took 7.125132095 seconds)
    (7/17) benchmarking ("catnd_setind", 5)...
    done (took 2.319510068 seconds)
    (8/17) benchmarking ("vcat_setind", 500)...
    done (took 7.141782898 seconds)
    (9/17) benchmarking ("hvcat_setind", 5)...
    done (took 2.180842996 seconds)
    (10/17) benchmarking ("vcat", 5)...
    done (took 2.130494969 seconds)
    (11/17) benchmarking ("catnd_setind", 500)...
    done (took 7.125918205 seconds)
    (12/17) benchmarking ("vcat", 500)...
    done (took 7.124225782 seconds)
    (13/17) benchmarking ("catnd", 5)...
    done (took 2.433847163 seconds)
    (14/17) benchmarking ("vcat_setind", 5)...
    done (took 2.159411574 seconds)
    (15/17) benchmarking ("hcat_setind", 500)...
    done (took 7.124745598 seconds)
    (16/17) benchmarking ("catnd", 500)...
    done (took 7.695394037 seconds)
    (17/17) benchmarking ("hcat", 5)...
    done (took 2.150289123 seconds)
  done (took 81.437473961 seconds)
  (12/13) benchmarking "subarray"...
    (1/12) benchmarking ("lucompletepivCopy!", 100)...
    done (took 7.143346053 seconds)
    (2/12) benchmarking ("lucompletepivCopy!", 500)...
    done (took 7.477569993 seconds)
    (3/12) benchmarking ("gramschmidt!", 500)...
    done (took 7.211855822 seconds)
    (4/12) benchmarking ("gramschmidt!", 100)...
    done (took 7.150629722 seconds)
    (5/12) benchmarking ("lucompletepivSub!", 1000)...
    done (took 9.013512249 seconds)
    (6/12) benchmarking ("gramschmidt!", 250)...
    done (took 7.158669035 seconds)
    (7/12) benchmarking ("lucompletepivCopy!", 1000)...
    done (took 10.18009558 seconds)
    (8/12) benchmarking ("lucompletepivCopy!", 250)...
    done (took 7.189962176 seconds)
    (9/12) benchmarking ("lucompletepivSub!", 100)...
    done (took 7.152827853 seconds)
    (10/12) benchmarking ("lucompletepivSub!", 500)...
    done (took 7.523666937 seconds)
    (11/12) benchmarking ("gramschmidt!", 1000)...
    done (took 7.449832906 seconds)
    (12/12) benchmarking ("lucompletepivSub!", 250)...
    done (took 7.157093035 seconds)
  done (took 93.875247538 seconds)
  (13/13) benchmarking "setindex!"...
    (1/5) benchmarking ("setindex!", 2)...
    done (took 2.153923084 seconds)
    (2/5) benchmarking ("setindex!", 1)...
    done (took 2.151103692 seconds)
    (3/5) benchmarking ("setindex!", 5)...
    done (took 2.147408606 seconds)
    (4/5) benchmarking ("setindex!", 3)...
    done (took 2.147899286 seconds)
    (5/5) benchmarking ("setindex!", 4)...
    done (took 2.147462545 seconds)
  done (took 12.818479765 seconds)
done (took 2852.316718393 seconds)
(18/20) benchmarking "misc"...
  (1/15) benchmarking "fastmath many args"...
  done (took 2.395066469 seconds)
  (2/15) benchmarking "repeat"...
    (1/2) benchmarking (200, 1, 24)...
    done (took 2.203926883 seconds)
    (2/2) benchmarking (200, 24, 1)...
    done (took 2.257631623 seconds)
  done (took 6.530453718 seconds)
  (3/15) benchmarking "23042"...
    (1/4) benchmarking "ComplexF64"...
    done (took 2.299125328 seconds)
    (2/4) benchmarking "Float32"...
    done (took 2.34724669 seconds)
    (3/4) benchmarking "Float64"...
    done (took 2.45371198 seconds)
    (4/4) benchmarking "ComplexF32"...
    done (took 2.460992846 seconds)
  done (took 11.637757789 seconds)
  (4/15) benchmarking "parse"...
    (1/2) benchmarking "Int"...
    done (took 2.434566333 seconds)
    (2/2) benchmarking "Float64"...
    done (took 2.526126272 seconds)
  done (took 7.030219336 seconds)
  (5/15) benchmarking "perf highdim generator"...
  done (took 2.56401998 seconds)
  (6/15) benchmarking "18129"...
  done (took 7.16226883 seconds)
  (7/15) benchmarking "20517"...
  done (took 2.52183261 seconds)
  (8/15) benchmarking "issue 12165"...
    (1/3) benchmarking "Float32"...
    done (took 7.153416439 seconds)
    (2/3) benchmarking "Float64"...
    done (took 7.157804715 seconds)
    (3/3) benchmarking "Float16"...
    done (took 7.156393296 seconds)
  done (took 23.541250559 seconds)
  (9/15) benchmarking "bitshift"...
    (1/4) benchmarking ("Int", "UInt")...
    done (took 2.1503417 seconds)
    (2/4) benchmarking ("UInt", "UInt")...
    done (took 2.153172062 seconds)
    (3/4) benchmarking ("Int", "Int")...
    done (took 2.15120738 seconds)
    (4/4) benchmarking ("UInt32", "UInt32")...
    done (took 2.154722118 seconds)
  done (took 10.6806905 seconds)
  (10/15) benchmarking "julia"...
    (1/4) benchmarking ("parse", "array")...
    done (took 7.146966459 seconds)
    (2/4) benchmarking ("parse", "function")...
    done (took 3.948765947 seconds)
    (3/4) benchmarking ("parse", "nested")...
    done (took 7.151845096 seconds)
    (4/4) benchmarking ("macroexpand", "evalpoly")...
    done (took 2.161668266 seconds)
  done (took 22.476382679 seconds)
  (11/15) benchmarking "foldl"...
    (1/3) benchmarking "foldl(+, filter(...))"...
    done (took 2.359794473 seconds)
    (2/3) benchmarking "foldl(+, filter(...); init = 0.0)"...
    done (took 3.208397531 seconds)
    (3/3) benchmarking "foldl(+, flatten(filter(...)))"...
    done (took 2.920643404 seconds)
  done (took 10.55734051 seconds)
  (12/15) benchmarking "afoldl"...
    (1/3) benchmarking "Complex{Float64}"...
    done (took 2.776306389 seconds)
    (2/3) benchmarking "Int"...
    done (took 2.59982061 seconds)
    (3/3) benchmarking "Float64"...
    done (took 2.757622692 seconds)
  done (took 10.204422657 seconds)
  (13/15) benchmarking "allocation elision view"...
    (1/2) benchmarking "conditional"...
    done (took 3.328411066 seconds)
    (2/2) benchmarking "no conditional"...
    done (took 3.135719791 seconds)
  done (took 8.533714169 seconds)
  (14/15) benchmarking "splatting"...
    (1/1) benchmarking (3, 3, 3)...
    done (took 2.288936659 seconds)
  done (took 4.356153151 seconds)
  (15/15) benchmarking "iterators"...
    (1/10) benchmarking "sum(flatten(collect((i,i+1) for i in 1:1000))"...
    done (took 2.983713184 seconds)
    (2/10) benchmarking "sum(flatten(fill(rand(50), 100))))"...
    done (took 2.461367591 seconds)
    (3/10) benchmarking "zip(1:1, 1:1, 1:1)"...
    done (took 2.647530416 seconds)
    (4/10) benchmarking "zip(1:1, 1:1)"...
    done (took 2.708745858 seconds)
    (5/10) benchmarking "zip(1:1, 1:1, 1:1, 1:1)"...
    done (took 2.777655504 seconds)
    (6/10) benchmarking "zip(1:1000)"...
    done (took 2.393504257 seconds)
    (7/10) benchmarking "zip(1:1000, 1:1000, 1:1000)"...
    done (took 2.482942047 seconds)
    (8/10) benchmarking "zip(1:1000, 1:1000)"...
    done (took 2.4350194 seconds)
    (9/10) benchmarking "zip(1:1)"...
    done (took 2.563738951 seconds)
    (10/10) benchmarking "zip(1:1000, 1:1000, 1:1000, 1:1000)"...
    done (took 2.609728711 seconds)
  done (took 28.134319087 seconds)
done (took 160.407263259 seconds)
(19/20) benchmarking "sort"...
  (1/4) benchmarking "insertionsort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 3.588403408 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.202481652 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.361721688 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 3.5420265 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.391950056 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.363263855 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.56783152 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 3.534500636 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 3.216335854 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 3.19495531 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 3.535672927 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.392497548 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.51683752 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.19515051 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.519410391 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.199522037 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.389894846 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 3.60582544 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 4.215877859 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 4.439541286 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.577023279 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 3.175315996 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 3.377446095 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 3.195439522 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.392716369 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.298553498 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 3.767508985 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.201297254 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 4.365072817 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 3.782228385 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.315156966 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 4.589715336 seconds)
  done (took 179.081219616 seconds)
  (2/4) benchmarking "quicksort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.147887293 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.15218235 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.153652314 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.151500674 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 5.597910722 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.151994497 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.151966651 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.151457089 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 5.467158828 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 5.454613625 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.151390523 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 5.592342657 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.153875045 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.153440191 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.154537355 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.151235543 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 5.587004453 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.153246565 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.151563361 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.1520469 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.154104853 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 5.458161209 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.174404422 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 5.462059446 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 5.567487547 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.154000489 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.152963477 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.153865689 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.152999985 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.152228915 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.152694121 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.151933653 seconds)
  done (took 217.941185646 seconds)
  (3/4) benchmarking "mergesort"...
    (1/32) benchmarking ("sort! forwards", "ones")...
    done (took 7.142606093 seconds)
    (2/32) benchmarking ("sortperm reverse", "ascending")...
    done (took 7.155997624 seconds)
    (3/32) benchmarking ("sort forwards", "random")...
    done (took 7.152245254 seconds)
    (4/32) benchmarking ("sortperm! forwards", "ascending")...
    done (took 7.153481381 seconds)
    (5/32) benchmarking ("sort forwards", "descending")...
    done (took 7.153035309 seconds)
    (6/32) benchmarking ("sort! forwards", "random")...
    done (took 7.154396099 seconds)
    (7/32) benchmarking ("sortperm forwards", "random")...
    done (took 7.157916618 seconds)
    (8/32) benchmarking ("sortperm forwards", "ascending")...
    done (took 7.152280576 seconds)
    (9/32) benchmarking ("sort reverse", "descending")...
    done (took 7.048695552 seconds)
    (10/32) benchmarking ("sort! reverse", "descending")...
    done (took 7.035752982 seconds)
    (11/32) benchmarking ("sortperm! reverse", "descending")...
    done (took 7.155456154 seconds)
    (12/32) benchmarking ("sort! forwards", "descending")...
    done (took 7.152817465 seconds)
    (13/32) benchmarking ("sortperm reverse", "random")...
    done (took 7.155651608 seconds)
    (14/32) benchmarking ("sortperm! reverse", "ascending")...
    done (took 7.152841863 seconds)
    (15/32) benchmarking ("sortperm! reverse", "random")...
    done (took 7.154958819 seconds)
    (16/32) benchmarking ("sortperm! forwards", "descending")...
    done (took 7.147362013 seconds)
    (17/32) benchmarking ("sort reverse", "ascending")...
    done (took 7.15318353 seconds)
    (18/32) benchmarking ("sort forwards", "ones")...
    done (took 7.154094344 seconds)
    (19/32) benchmarking ("sortperm forwards", "ones")...
    done (took 7.151594984 seconds)
    (20/32) benchmarking ("sortperm reverse", "ones")...
    done (took 7.153857029 seconds)
    (21/32) benchmarking ("sortperm! forwards", "random")...
    done (took 7.156543008 seconds)
    (22/32) benchmarking ("sort! forwards", "ascending")...
    done (took 6.887736575 seconds)
    (23/32) benchmarking ("sortperm reverse", "descending")...
    done (took 7.155424356 seconds)
    (24/32) benchmarking ("sort forwards", "ascending")...
    done (took 6.91542436 seconds)
    (25/32) benchmarking ("sort! reverse", "ascending")...
    done (took 7.155552434 seconds)
    (26/32) benchmarking ("sort! reverse", "random")...
    done (took 7.157364222 seconds)
    (27/32) benchmarking ("sort! reverse", "ones")...
    done (took 7.153957989 seconds)
    (28/32) benchmarking ("sortperm forwards", "descending")...
    done (took 7.156694418 seconds)
    (29/32) benchmarking ("sortperm! forwards", "ones")...
    done (took 7.154169301 seconds)
    (30/32) benchmarking ("sort reverse", "ones")...
    done (took 7.153718925 seconds)
    (31/32) benchmarking ("sort reverse", "random")...
    done (took 7.155517425 seconds)
    (32/32) benchmarking ("sortperm! reverse", "ones")...
    done (took 7.156232226 seconds)
  done (took 230.271357675 seconds)
  (4/4) benchmarking "issorted"...
    (1/8) benchmarking ("forwards", "ascending")...
    done (took 2.393849727 seconds)
    (2/8) benchmarking ("forwards", "random")...
    done (took 2.154214264 seconds)
    (3/8) benchmarking ("reverse", "ascending")...
    done (took 2.144971615 seconds)
    (4/8) benchmarking ("reverse", "ones")...
    done (took 3.174513305 seconds)
    (5/8) benchmarking ("reverse", "random")...
    done (took 2.158069341 seconds)
    (6/8) benchmarking ("forwards", "descending")...
    done (took 2.148647059 seconds)
    (7/8) benchmarking ("forwards", "ones")...
    done (took 3.172900982 seconds)
    (8/8) benchmarking ("reverse", "descending")...
    done (took 2.402620439 seconds)
  done (took 21.825513682 seconds)
done (took 651.216256212 seconds)
(20/20) benchmarking "collection"...
  (1/6) benchmarking "initialization"...
    (1/42) benchmarking ("Dict", "Any", "loop")...
    done (took 3.522574221 seconds)
    (2/42) benchmarking ("Dict", "Any", "loop", "sizehint!")...
    done (took 2.923264132 seconds)
    (3/42) benchmarking ("Set", "Int", "loop", "sizehint!")...
    done (took 2.302343767 seconds)
    (4/42) benchmarking ("BitSet", "Int", "sorted", "loop", "sizehint!")...
    done (took 2.169325574 seconds)
    (5/42) benchmarking ("Set", "Any", "loop")...
    done (took 3.421281284 seconds)
    (6/42) benchmarking ("BitSet", "Int", "sorted", "iterator")...
    done (took 2.230323435 seconds)
    (7/42) benchmarking ("BitSet", "Int", "sorted", "loop")...
    done (took 2.175252855 seconds)
    (8/42) benchmarking ("Vector", "String", "loop")...
    done (took 2.239013674 seconds)
    (9/42) benchmarking ("IdDict", "Int", "loop")...
    done (took 2.828593251 seconds)
    (10/42) benchmarking ("Vector", "Int", "loop")...
    done (took 2.245559752 seconds)
    (11/42) benchmarking ("Dict", "String", "loop", "sizehint!")...
    done (took 2.594592047 seconds)
    (12/42) benchmarking ("BitSet", "Int", "unsorted", "iterator")...
    done (took 2.18625152 seconds)
    (13/42) benchmarking ("Dict", "String", "loop")...
    done (took 2.917596633 seconds)
    (14/42) benchmarking ("BitSet", "Int", "unsorted", "loop")...
    done (took 2.206745789 seconds)
    (15/42) benchmarking ("Dict", "Int", "loop", "sizehint!")...
    done (took 2.292010895 seconds)
    (16/42) benchmarking ("Vector", "String", "loop", "sizehint!")...
    done (took 2.234294403 seconds)
    (17/42) benchmarking ("Set", "String", "iterator")...
    done (took 2.519586553 seconds)
    (18/42) benchmarking ("Set", "String", "loop")...
    done (took 2.781893954 seconds)
    (19/42) benchmarking ("Dict", "Int", "iterator")...
    done (took 2.315258815 seconds)
    (20/42) benchmarking ("Set", "Any", "iterator")...
    done (took 2.85256529 seconds)
    (21/42) benchmarking ("Set", "Int", "loop")...
    done (took 2.328720588 seconds)
    (22/42) benchmarking ("IdDict", "String", "loop")...
    done (took 3.121724227 seconds)
    (23/42) benchmarking ("Vector", "Any", "loop")...
    done (took 2.257961769 seconds)
    (24/42) benchmarking ("IdDict", "Int", "iterator")...
    done (took 2.866007044 seconds)
    (25/42) benchmarking ("Dict", "String", "iterator")...
    done (took 2.603884332 seconds)
    (26/42) benchmarking ("IdDict", "String", "iterator")...
    done (took 3.150302873 seconds)
    (27/42) benchmarking ("IdDict", "Any", "loop", "sizehint!")...
    done (took 3.195114019 seconds)
    (28/42) benchmarking ("Set", "String", "loop", "sizehint!")...
    done (took 2.524040361 seconds)
    (29/42) benchmarking ("BitSet", "Int", "unsorted", "loop", "sizehint!")...
    done (took 2.180452954 seconds)
    (30/42) benchmarking ("Dict", "Int", "loop")...
    done (took 2.326760951 seconds)
    (31/42) benchmarking ("Dict", "Any", "iterator")...
    done (took 3.816513452 seconds)
    (32/42) benchmarking ("IdDict", "Any", "iterator")...
    done (took 3.436897858 seconds)
    (33/42) benchmarking ("Vector", "String", "iterator")...
    done (took 2.193765961 seconds)
    (34/42) benchmarking ("Vector", "Any", "iterator")...
    done (took 2.176832984 seconds)
    (35/42) benchmarking ("Vector", "Any", "loop", "sizehint!")...
    done (took 2.22991978 seconds)
    (36/42) benchmarking ("Vector", "Int", "loop", "sizehint!")...
    done (took 2.20637396 seconds)
    (37/42) benchmarking ("IdDict", "Any", "loop")...
    done (took 3.37200494 seconds)
    (38/42) benchmarking ("Vector", "Int", "iterator")...
    done (took 2.189000528 seconds)
    (39/42) benchmarking ("Set", "Int", "iterator")...
    done (took 2.291586416 seconds)
    (40/42) benchmarking ("IdDict", "String", "loop", "sizehint!")...
    done (took 2.929824367 seconds)
    (41/42) benchmarking ("Set", "Any", "loop", "sizehint!")...
    done (took 2.844763268 seconds)
    (42/42) benchmarking ("IdDict", "Int", "loop", "sizehint!")...
    done (took 2.709622577 seconds)
  done (took 111.985399004 seconds)
  (2/6) benchmarking "iteration"...
    (1/26) benchmarking ("Vector", "Int", "iterate second")...
    done (took 2.166846725 seconds)
    (2/26) benchmarking ("Dict", "Int", "iterate")...
    done (took 2.164394643 seconds)
    (3/26) benchmarking ("Vector", "String", "iterate second")...
    done (took 2.163567703 seconds)
    (4/26) benchmarking ("Set", "Int", "iterate second")...
    done (took 2.167218971 seconds)
    (5/26) benchmarking ("Set", "Any", "iterate second")...
    done (took 2.177225986 seconds)
    (6/26) benchmarking ("Dict", "Int", "iterate second")...
    done (took 2.164004124 seconds)
    (7/26) benchmarking ("IdDict", "String", "iterate second")...
    done (took 2.162730717 seconds)
    (8/26) benchmarking ("Set", "String", "iterate second")...
    done (took 2.165723254 seconds)
    (9/26) benchmarking ("IdDict", "Int", "iterate")...
    done (took 2.164653511 seconds)
    (10/26) benchmarking ("IdDict", "Any", "iterate second")...
    done (took 2.164887606 seconds)
    (11/26) benchmarking ("IdDict", "Any", "iterate")...
    done (took 2.165526286 seconds)
    (12/26) benchmarking ("Set", "Any", "iterate")...
    done (took 2.174050739 seconds)
    (13/26) benchmarking ("Dict", "Any", "iterate second")...
    done (took 2.166631099 seconds)
    (14/26) benchmarking ("Vector", "Any", "iterate")...
    done (took 2.175186825 seconds)
    (15/26) benchmarking ("Dict", "String", "iterate")...
    done (took 2.164381547 seconds)
    (16/26) benchmarking ("IdDict", "String", "iterate")...
    done (took 2.167141704 seconds)
    (17/26) benchmarking ("Set", "Int", "iterate")...
    done (took 2.166837347 seconds)
    (18/26) benchmarking ("Vector", "Any", "iterate second")...
    done (took 2.177245896 seconds)
    (19/26) benchmarking ("Dict", "Any", "iterate")...
    done (took 2.166337953 seconds)
    (20/26) benchmarking ("Set", "String", "iterate")...
    done (took 2.166516794 seconds)
    (21/26) benchmarking ("BitSet", "Int", "iterate")...
    done (took 2.164037138 seconds)
    (22/26) benchmarking ("Vector", "String", "iterate")...
    done (took 2.166267606 seconds)
    (23/26) benchmarking ("BitSet", "Int", "iterate second")...
    done (took 2.160227055 seconds)
    (24/26) benchmarking ("Dict", "String", "iterate second")...
    done (took 2.166275152 seconds)
    (25/26) benchmarking ("Vector", "Int", "iterate")...
    done (took 2.166646613 seconds)
    (26/26) benchmarking ("IdDict", "Int", "iterate second")...
    done (took 2.165580052 seconds)
  done (took 58.429286941 seconds)
  (3/6) benchmarking "set operations"...
    (1/117) benchmarking ("Vector", "Int", "⊆", "Set")...
    done (took 2.158191665 seconds)
    (2/117) benchmarking ("Set", "Int", "symdiff", "Set")...
    done (took 2.351667256 seconds)
    (3/117) benchmarking ("Vector", "Int", "union")...
    done (took 2.392960574 seconds)
    (4/117) benchmarking ("BitSet", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.180312361 seconds)
    (5/117) benchmarking ("BitSet", "Int", "intersect!", "big")...
    done (took 2.159968394 seconds)
    (6/117) benchmarking ("BitSet", "Int", "symdiff!", "Set")...
    done (took 2.161950036 seconds)
    (7/117) benchmarking ("Set", "Int", "setdiff", "BitSet")...
    done (took 2.189747629 seconds)
    (8/117) benchmarking ("Set", "Int", "⊆", "BitSet")...
    done (took 2.169057751 seconds)
    (9/117) benchmarking ("BitSet", "Int", "union", "Set")...
    done (took 2.162447829 seconds)
    (10/117) benchmarking ("BitSet", "Int", "union!", "Set")...
    done (took 2.16468498 seconds)
    (11/117) benchmarking ("Set", "Int", "union", "Set")...
    done (took 2.256666495 seconds)
    (12/117) benchmarking ("BitSet", "Int", "⊆", "self")...
    done (took 2.168332669 seconds)
    (13/117) benchmarking ("Set", "Int", "intersect", "Vector", "Vector")...
    done (took 2.173805748 seconds)
    (14/117) benchmarking ("Vector", "Int", "union", "Vector")...
    done (took 2.391395331 seconds)
    (15/117) benchmarking ("BitSet", "Int", "union", "BitSet")...
    done (took 2.177940909 seconds)
    (16/117) benchmarking ("empty", "Int", "⊆", "Set")...
    done (took 2.159263354 seconds)
    (17/117) benchmarking ("Vector", "Int", "⊆", "Vector")...
    done (took 2.160411289 seconds)
    (18/117) benchmarking ("BitSet", "Int", "intersect!", "BitSet")...
    done (took 2.161462952 seconds)
    (19/117) benchmarking ("Set", "Int", "symdiff", "Set", "Set")...
    done (took 2.362176616 seconds)
    (20/117) benchmarking ("Set", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.177051856 seconds)
    (21/117) benchmarking ("Set", "Int", "union!", "BitSet")...
    done (took 2.190725813 seconds)
    (22/117) benchmarking ("BitSet", "Int", "⊆", "Set")...
    done (took 2.170227705 seconds)
    (23/117) benchmarking ("Set", "Int", "setdiff", "Set")...
    done (took 2.19130977 seconds)
    (24/117) benchmarking ("Set", "Int", "intersect", "Set", "Set")...
    done (took 2.178022077 seconds)
    (25/117) benchmarking ("BitSet", "Int", "union!", "Vector")...
    done (took 2.162246904 seconds)
    (26/117) benchmarking ("BitSet", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.162597084 seconds)
    (27/117) benchmarking ("BitSet", "Int", "union", "Set", "Set")...
    done (took 2.165103761 seconds)
    (28/117) benchmarking ("Vector", "Int", "intersect", "Set", "Set")...
    done (took 2.601027592 seconds)
    (29/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet")...
    done (took 2.17579111 seconds)
    (30/117) benchmarking ("Set", "Int", "union", "BitSet")...
    done (took 2.261341136 seconds)
    (31/117) benchmarking ("BitSet", "Int", "union!", "big")...
    done (took 2.221150908 seconds)
    (32/117) benchmarking ("Set", "Int", "intersect")...
    done (took 2.197229013 seconds)
    (33/117) benchmarking ("Vector", "Int", "intersect", "BitSet")...
    done (took 2.522568682 seconds)
    (34/117) benchmarking ("Vector", "Int", "union", "Vector", "Vector")...
    done (took 2.407307523 seconds)
    (35/117) benchmarking ("BitSet", "Int", "symdiff!", "big")...
    done (took 2.218542005 seconds)
    (36/117) benchmarking ("empty", "Int", "⊆", "BitSet")...
    done (took 2.171015655 seconds)
    (37/117) benchmarking ("Set", "Int", "⊆", "Vector")...
    done (took 2.162580553 seconds)
    (38/117) benchmarking ("Set", "Int", "union", "BitSet", "BitSet")...
    done (took 2.314355031 seconds)
    (39/117) benchmarking ("BitSet", "Int", "setdiff!", "Set")...
    done (took 2.175519884 seconds)
    (40/117) benchmarking ("BitSet", "Int", "setdiff!", "BitSet")...
    done (took 2.161517909 seconds)
    (41/117) benchmarking ("Set", "Int", "setdiff", "Vector")...
    done (took 2.191049402 seconds)
    (42/117) benchmarking ("BitSet", "Int", "setdiff", "BitSet")...
    done (took 2.171399389 seconds)
    (43/117) benchmarking ("Vector", "Int", "union", "BitSet")...
    done (took 2.399551961 seconds)
    (44/117) benchmarking ("Vector", "Int", "symdiff", "BitSet")...
    done (took 2.684191705 seconds)
    (45/117) benchmarking ("BitSet", "Int", "symdiff")...
    done (took 2.177883991 seconds)
    (46/117) benchmarking ("empty", "Int", "<", "Set")...
    done (took 2.163672018 seconds)
    (47/117) benchmarking ("Vector", "Int", "intersect", "Vector")...
    done (took 2.597657058 seconds)
    (48/117) benchmarking ("Set", "Int", "union", "Vector", "Vector")...
    done (took 2.324929268 seconds)
    (49/117) benchmarking ("BitSet", "Int", "symdiff!", "small")...
    done (took 2.211999891 seconds)
    (50/117) benchmarking ("BitSet", "Int", "intersect", "Vector", "Vector")...
    done (took 2.176642369 seconds)
    (51/117) benchmarking ("Vector", "Int", "union", "BitSet", "BitSet")...
    done (took 2.408150051 seconds)
    (52/117) benchmarking ("BitSet", "Int", "union", "Vector")...
    done (took 2.181059042 seconds)
    (53/117) benchmarking ("empty", "Int", "<", "BitSet")...
    done (took 2.162193499 seconds)
    (54/117) benchmarking ("BitSet", "Int", "union!", "BitSet")...
    done (took 2.164817925 seconds)
    (55/117) benchmarking ("BitSet", "Int", "union!", "small")...
    done (took 2.200377364 seconds)
    (56/117) benchmarking ("BitSet", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.176107973 seconds)
    (57/117) benchmarking ("BitSet", "Int", "intersect!", "small")...
    done (took 2.16345925 seconds)
    (58/117) benchmarking ("Vector", "Int", "setdiff", "Set")...
    done (took 2.422373914 seconds)
    (59/117) benchmarking ("BitSet", "Int", "symdiff", "Set")...
    done (took 2.178977739 seconds)
    (60/117) benchmarking ("Set", "Int", "setdiff!", "Vector")...
    done (took 2.191224336 seconds)
    (61/117) benchmarking ("BitSet", "Int", "⊆", "Vector")...
    done (took 2.171683884 seconds)
    (62/117) benchmarking ("BitSet", "Int", "setdiff!", "Vector")...
    done (took 2.163943525 seconds)
    (63/117) benchmarking ("Set", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.368412017 seconds)
    (64/117) benchmarking ("BitSet", "Int", "intersect")...
    done (took 2.171877359 seconds)
    (65/117) benchmarking ("Set", "Int", "symdiff", "BitSet")...
    done (took 2.355646949 seconds)
    (66/117) benchmarking ("BitSet", "Int", "symdiff!", "BitSet")...
    done (took 2.173514318 seconds)
    (67/117) benchmarking ("Set", "Int", "intersect", "BitSet")...
    done (took 2.169411995 seconds)
    (68/117) benchmarking ("BitSet", "Int", "intersect", "BitSet")...
    done (took 2.165729335 seconds)
    (69/117) benchmarking ("Vector", "Int", "union", "Set")...
    done (took 2.401634083 seconds)
    (70/117) benchmarking ("BitSet", "Int", "union", "BitSet", "BitSet")...
    done (took 2.18170912 seconds)
    (71/117) benchmarking ("Vector", "Int", "symdiff", "Set", "Set")...
    done (took 2.691925281 seconds)
    (72/117) benchmarking ("BitSet", "Int", "setdiff!", "small")...
    done (took 2.179071513 seconds)
    (73/117) benchmarking ("BitSet", "Int", "==", "BitSet")...
    done (took 2.16419446 seconds)
    (74/117) benchmarking ("Set", "Int", "union", "Vector")...
    done (took 2.264891804 seconds)
    (75/117) benchmarking ("Set", "Int", "symdiff", "Vector")...
    done (took 2.352080694 seconds)
    (76/117) benchmarking ("Vector", "Int", "intersect", "Vector", "Vector")...
    done (took 2.625647269 seconds)
    (77/117) benchmarking ("BitSet", "Int", "intersect", "Vector")...
    done (took 2.179033703 seconds)
    (78/117) benchmarking ("Set", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.369333886 seconds)
    (79/117) benchmarking ("Vector", "Int", "intersect", "BitSet", "BitSet")...
    done (took 2.537658962 seconds)
    (80/117) benchmarking ("Set", "Int", "symdiff")...
    done (took 2.202143854 seconds)
    (81/117) benchmarking ("BitSet", "Int", "symdiff", "Vector")...
    done (took 2.176965992 seconds)
    (82/117) benchmarking ("Vector", "Int", "intersect", "Set")...
    done (took 2.585463196 seconds)
    (83/117) benchmarking ("Set", "Int", "union!", "Set")...
    done (took 2.205565408 seconds)
    (84/117) benchmarking ("BitSet", "Int", "intersect", "Set")...
    done (took 2.176154135 seconds)
    (85/117) benchmarking ("BitSet", "Int", "<", "BitSet")...
    done (took 2.163510692 seconds)
    (86/117) benchmarking ("BitSet", "Int", "⊆", "BitSet")...
    done (took 2.163485511 seconds)
    (87/117) benchmarking ("BitSet", "Int", "==", "self")...
    done (took 2.164242929 seconds)
    (88/117) benchmarking ("Set", "Int", "==", "self")...
    done (took 2.213890754 seconds)
    (89/117) benchmarking ("Set", "Int", "union")...
    done (took 2.190131854 seconds)
    (90/117) benchmarking ("Vector", "Int", "symdiff")...
    done (took 2.604575783 seconds)
    (91/117) benchmarking ("Vector", "Int", "symdiff", "Vector", "Vector")...
    done (took 2.698066141 seconds)
    (92/117) benchmarking ("Vector", "Int", "setdiff", "Vector")...
    done (took 2.44200058 seconds)
    (93/117) benchmarking ("Set", "Int", "setdiff!", "BitSet")...
    done (took 2.205286156 seconds)
    (94/117) benchmarking ("BitSet", "Int", "symdiff", "Set", "Set")...
    done (took 2.178114035 seconds)
    (95/117) benchmarking ("BitSet", "Int", "setdiff", "Vector")...
    done (took 2.166997835 seconds)
    (96/117) benchmarking ("Vector", "Int", "setdiff", "BitSet")...
    done (took 2.421956686 seconds)
    (97/117) benchmarking ("Set", "Int", "<", "Set")...
    done (took 2.176300721 seconds)
    (98/117) benchmarking ("Set", "Int", "⊆", "Set")...
    done (took 2.163434842 seconds)
    (99/117) benchmarking ("Vector", "Int", "intersect")...
    done (took 2.39409789 seconds)
    (100/117) benchmarking ("Vector", "Int", "symdiff", "BitSet", "BitSet")...
    done (took 2.706101347 seconds)
    (101/117) benchmarking ("BitSet", "Int", "setdiff!", "big")...
    done (took 2.180842369 seconds)
    (102/117) benchmarking ("Set", "Int", "intersect", "Set")...
    done (took 2.171931013 seconds)
    (103/117) benchmarking ("Vector", "Int", "symdiff", "Set")...
    done (took 2.673305004 seconds)
    (104/117) benchmarking ("BitSet", "Int", "setdiff", "Set")...
    done (took 2.181515491 seconds)
    (105/117) benchmarking ("Set", "Int", "setdiff!", "Set")...
    done (took 2.196128445 seconds)
    (106/117) benchmarking ("BitSet", "Int", "intersect", "Set", "Set")...
    done (took 2.178679546 seconds)
    (107/117) benchmarking ("Vector", "Int", "union", "Set", "Set")...
    done (took 2.415509605 seconds)
    (108/117) benchmarking ("BitSet", "Int", "union")...
    done (took 2.18280556 seconds)
    (109/117) benchmarking ("Set", "Int", "⊆", "self")...
    done (took 2.213984502 seconds)
    (110/117) benchmarking ("Set", "Int", "==", "Set")...
    done (took 2.165010909 seconds)
    (111/117) benchmarking ("Set", "Int", "intersect", "Vector")...
    done (took 2.171667016 seconds)
    (112/117) benchmarking ("BitSet", "Int", "union", "Vector", "Vector")...
    done (took 2.167903244 seconds)
    (113/117) benchmarking ("Set", "Int", "union!", "Vector")...
    done (took 2.196369619 seconds)
    (114/117) benchmarking ("BitSet", "Int", "symdiff!", "Vector")...
    done (took 2.177627044 seconds)
    (115/117) benchmarking ("Vector", "Int", "⊆", "BitSet")...
    done (took 2.155975223 seconds)
    (116/117) benchmarking ("Vector", "Int", "symdiff", "Vector")...
    done (took 2.663358675 seconds)
    (117/117) benchmarking ("Set", "Int", "union", "Set", "Set")...
    done (took 2.329701994 seconds)
  done (took 267.029169527 seconds)
  (4/6) benchmarking "optimizations"...
    (1/28) benchmarking ("Dict", "abstract", "UInt16")...
    done (took 7.168747139 seconds)
    (2/28) benchmarking ("Set", "abstract", "Int8")...
    done (took 7.164980637 seconds)
    (3/28) benchmarking ("Dict", "concrete", "UInt16")...
    done (took 7.16299727 seconds)
    (4/28) benchmarking ("Dict", "concrete", "Bool")...
    done (took 7.163624113 seconds)
    (5/28) benchmarking ("Dict", "abstract", "Bool")...
    done (took 7.164912188 seconds)
    (6/28) benchmarking ("Vector", "concrete", "Nothing")...
    done (took 2.168704892 seconds)
    (7/28) benchmarking ("Set", "abstract", "Bool")...
    done (took 7.163666961 seconds)
    (8/28) benchmarking ("Dict", "abstract", "Nothing")...
    done (took 7.165593321 seconds)
    (9/28) benchmarking ("Vector", "abstract", "Nothing")...
    done (took 2.166521785 seconds)
    (10/28) benchmarking ("Set", "concrete", "Bool")...
    done (took 7.164695195 seconds)
    (11/28) benchmarking ("Dict", "concrete", "Nothing")...
    done (took 7.165857309 seconds)
    (12/28) benchmarking ("IdDict", "concrete", "Int8")...
    done (took 7.167939592 seconds)
    (13/28) benchmarking ("IdDict", "concrete", "Nothing")...
    done (took 7.168256442 seconds)
    (14/28) benchmarking ("IdDict", "concrete", "UInt16")...
    done (took 7.174479299 seconds)
    (15/28) benchmarking ("Set", "concrete", "Nothing")...
    done (took 2.21319168 seconds)
    (16/28) benchmarking ("Set", "abstract", "Nothing")...
    done (took 2.168393405 seconds)
    (17/28) benchmarking ("BitSet", "Int8")...
    done (took 3.65322104 seconds)
    (18/28) benchmarking ("IdDict", "abstract", "Bool")...
    done (took 7.16754127 seconds)
    (19/28) benchmarking ("Set", "abstract", "UInt16")...
    done (took 7.166485393 seconds)
    (20/28) benchmarking ("Dict", "concrete", "Int8")...
    done (took 7.165287523 seconds)
    (21/28) benchmarking ("BitSet", "UInt16")...
    done (took 3.742082335 seconds)
    (22/28) benchmarking ("IdDict", "abstract", "Nothing")...
    done (took 7.171161773 seconds)
    (23/28) benchmarking ("Set", "concrete", "UInt16")...
    done (took 7.168629886 seconds)
    (24/28) benchmarking ("Set", "concrete", "Int8")...
    done (took 7.166216395 seconds)
    (25/28) benchmarking ("IdDict", "concrete", "Bool")...
    done (took 7.165900473 seconds)
    (26/28) benchmarking ("IdDict", "abstract", "Int8")...
    done (took 7.168634803 seconds)
    (27/28) benchmarking ("IdDict", "abstract", "UInt16")...
    done (took 7.16367071 seconds)
    (28/28) benchmarking ("Dict", "abstract", "Int8")...
    done (took 7.209715961 seconds)
  done (took 175.912589347 seconds)
  (5/6) benchmarking "queries & updates"...
    (1/105) benchmarking ("Set", "Int", "in", "true")...
    done (took 2.169141044 seconds)
    (2/105) benchmarking ("Dict", "String", "pop!", "unspecified")...
    done (took 2.222048566 seconds)
    (3/105) benchmarking ("IdDict", "Int", "first")...
    done (took 2.180252131 seconds)
    (4/105) benchmarking ("Dict", "Int", "push!", "overwrite")...
    done (took 2.214590865 seconds)
    (5/105) benchmarking ("Set", "Any", "in", "false")...
    done (took 2.181394828 seconds)
    (6/105) benchmarking ("BitSet", "Int", "last")...
    done (took 2.169125472 seconds)
    (7/105) benchmarking ("IdDict", "Int", "push!", "overwrite")...
    done (took 2.19324918 seconds)
    (8/105) benchmarking ("Vector", "Int", "pop!", "unspecified")...
    done (took 2.182351428 seconds)
    (9/105) benchmarking ("BitSet", "Int", "pop!", "unspecified")...
    done (took 2.174845824 seconds)
    (10/105) benchmarking ("Dict", "Int", "getindex")...
    done (took 2.170370304 seconds)
    (11/105) benchmarking ("BitSet", "Int", "first")...
    done (took 2.168673678 seconds)
    (12/105) benchmarking ("Set", "String", "push!", "new")...
    done (took 2.198436202 seconds)
    (13/105) benchmarking ("IdDict", "Int", "in", "false")...
    done (took 2.176425537 seconds)
    (14/105) benchmarking ("IdDict", "Any", "setindex!", "overwrite")...
    done (took 2.266140432 seconds)
    (15/105) benchmarking ("Vector", "String", "push!")...
    done (took 2.198278406 seconds)
    (16/105) benchmarking ("IdDict", "Int", "pop!", "specified")...
    done (took 2.202708353 seconds)
    (17/105) benchmarking ("IdDict", "String", "pop!", "specified")...
    done (took 2.271282635 seconds)
    (18/105) benchmarking ("Set", "String", "in", "false")...
    done (took 2.173755724 seconds)
    (19/105) benchmarking ("BitSet", "Int", "length")...
    done (took 2.276122933 seconds)
    (20/105) benchmarking ("Set", "Int", "first")...
    done (took 2.169176317 seconds)
    (21/105) benchmarking ("Dict", "Int", "pop!", "unspecified")...
    done (took 2.217091559 seconds)
    (22/105) benchmarking ("Dict", "Any", "in", "true")...
    done (took 2.182657133 seconds)
    (23/105) benchmarking ("Set", "Any", "push!", "overwrite")...
    done (took 2.200415208 seconds)
    (24/105) benchmarking ("Dict", "String", "push!", "overwrite")...
    done (took 2.230498672 seconds)
    (25/105) benchmarking ("Dict", "String", "in", "true")...
    done (took 2.182647459 seconds)
    (26/105) benchmarking ("Dict", "String", "push!", "new")...
    done (took 2.225101181 seconds)
    (27/105) benchmarking ("Dict", "Any", "in", "false")...
    done (took 2.182775179 seconds)
    (28/105) benchmarking ("Dict", "Int", "in", "false")...
    done (took 2.171054254 seconds)
    (29/105) benchmarking ("Dict", "String", "getindex")...
    done (took 2.168579968 seconds)
    (30/105) benchmarking ("Dict", "Any", "push!", "new")...
    done (took 2.283119324 seconds)
    (31/105) benchmarking ("IdDict", "Int", "length")...
    done (took 2.186921657 seconds)
    (32/105) benchmarking ("Set", "Any", "pop!", "specified")...
    done (took 2.201125965 seconds)
    (33/105) benchmarking ("Set", "Int", "pop!", "unspecified")...
    done (took 2.20477214 seconds)
    (34/105) benchmarking ("Vector", "String", "setindex!")...
    done (took 2.189861484 seconds)
    (35/105) benchmarking ("Dict", "Any", "push!", "overwrite")...
    done (took 2.287473097 seconds)
    (36/105) benchmarking ("IdDict", "String", "push!", "overwrite")...
    done (took 2.286160674 seconds)
    (37/105) benchmarking ("IdDict", "Any", "setindex!", "new")...
    done (took 2.274428923 seconds)
    (38/105) benchmarking ("IdDict", "Int", "setindex!", "new")...
    done (took 2.200546873 seconds)
    (39/105) benchmarking ("IdDict", "String", "getindex")...
    done (took 2.173129736 seconds)
    (40/105) benchmarking ("Vector", "Int", "getindex")...
    done (took 2.170191587 seconds)
    (41/105) benchmarking ("Vector", "Int", "last")...
    done (took 2.171054229 seconds)
    (42/105) benchmarking ("IdDict", "Any", "in", "false")...
    done (took 2.17231401 seconds)
    (43/105) benchmarking ("Dict", "String", "setindex!", "new")...
    done (took 2.225000486 seconds)
    (44/105) benchmarking ("Set", "Any", "in", "true")...
    done (took 2.182392378 seconds)
    (45/105) benchmarking ("BitSet", "Int", "push!", "overwrite")...
    done (took 2.171241478 seconds)
    (46/105) benchmarking ("Dict", "Any", "pop!", "specified")...
    done (took 2.28742123 seconds)
    (47/105) benchmarking ("BitSet", "Int", "in", "true")...
    done (took 2.18813878 seconds)
    (48/105) benchmarking ("IdDict", "Int", "in", "true")...
    done (took 2.170511378 seconds)
    (49/105) benchmarking ("Vector", "String", "in", "true")...
    done (took 2.192140986 seconds)
    (50/105) benchmarking ("Vector", "Int", "length")...
    done (took 2.170199425 seconds)
    (51/105) benchmarking ("Vector", "String", "pop!", "unspecified")...
    done (took 2.183209953 seconds)
    (52/105) benchmarking ("Vector", "Any", "pop!", "unspecified")...
    done (took 2.189618777 seconds)
    (53/105) benchmarking ("Set", "Any", "push!", "new")...
    done (took 2.206140225 seconds)
    (54/105) benchmarking ("Dict", "Any", "pop!", "unspecified")...
    done (took 2.294928624 seconds)
    (55/105) benchmarking ("Set", "Int", "pop!", "specified")...
    done (took 2.21685893 seconds)
    (56/105) benchmarking ("Vector", "String", "in", "false")...
    done (took 2.196734538 seconds)
    (57/105) benchmarking ("IdDict", "Int", "push!", "new")...
    done (took 2.195170913 seconds)
    (58/105) benchmarking ("Vector", "Any", "in", "true")...
    done (took 2.188535984 seconds)
    (59/105) benchmarking ("Dict", "Int", "first")...
    done (took 2.169705401 seconds)
    (60/105) benchmarking ("IdDict", "String", "setindex!", "overwrite")...
    done (took 2.26754356 seconds)
    (61/105) benchmarking ("Vector", "Any", "getindex")...
    done (took 2.177666218 seconds)
    (62/105) benchmarking ("Dict", "Any", "setindex!", "new")...
    done (took 2.286157471 seconds)
    (63/105) benchmarking ("Vector", "Int", "in", "true")...
    done (took 2.190865531 seconds)
    (64/105) benchmarking ("Dict", "Any", "getindex")...
    done (took 2.173084451 seconds)
    (65/105) benchmarking ("BitSet", "Int", "pop!", "specified")...
    done (took 2.174703229 seconds)
    (66/105) benchmarking ("Vector", "Int", "in", "false")...
    done (took 2.175311778 seconds)
    (67/105) benchmarking ("Dict", "Int", "setindex!", "new")...
    done (took 2.209785001 seconds)
    (68/105) benchmarking ("IdDict", "Int", "setindex!", "overwrite")...
    done (took 2.210244831 seconds)
    (69/105) benchmarking ("IdDict", "Any", "push!", "overwrite")...
    done (took 2.273500467 seconds)
    (70/105) benchmarking ("BitSet", "Int", "push!", "new")...
    done (took 2.179007697 seconds)
    (71/105) benchmarking ("IdDict", "String", "setindex!", "new")...
    done (took 2.269072019 seconds)
    (72/105) benchmarking ("Dict", "Int", "pop!", "specified")...
    done (took 2.225627868 seconds)
    (73/105) benchmarking ("Dict", "Int", "length")...
    done (took 2.186297864 seconds)
    (74/105) benchmarking ("IdDict", "Int", "getindex")...
    done (took 2.171807274 seconds)
    (75/105) benchmarking ("Dict", "String", "in", "false")...
    done (took 2.172090876 seconds)
    (76/105) benchmarking ("Dict", "String", "pop!", "specified")...
    done (took 2.227717428 seconds)
    (77/105) benchmarking ("IdDict", "Any", "push!", "new")...
    done (took 2.284632982 seconds)
    (78/105) benchmarking ("Dict", "Int", "setindex!", "overwrite")...
    done (took 2.226392157 seconds)
    (79/105) benchmarking ("Dict", "Int", "push!", "new")...
    done (took 2.232447464 seconds)
    (80/105) benchmarking ("Vector", "Int", "push!")...
    done (took 2.208876592 seconds)
    (81/105) benchmarking ("IdDict", "Any", "getindex")...
    done (took 2.180810069 seconds)
    (82/105) benchmarking ("Vector", "String", "getindex")...
    done (took 2.172786073 seconds)
    (83/105) benchmarking ("IdDict", "Any", "in", "true")...
    done (took 2.173598949 seconds)
    (84/105) benchmarking ("Set", "Int", "push!", "new")...
    done (took 2.200778851 seconds)
    (85/105) benchmarking ("Vector", "Int", "first")...
    done (took 2.180260976 seconds)
    (86/105) benchmarking ("Dict", "Any", "setindex!", "overwrite")...
    done (took 2.288046534 seconds)
    (87/105) benchmarking ("IdDict", "String", "push!", "new")...
    done (took 2.265721363 seconds)
    (88/105) benchmarking ("BitSet", "Int", "in", "false")...
    done (took 2.177809463 seconds)
    (89/105) benchmarking ("Set", "Int", "in", "false")...
    done (took 2.171946537 seconds)
    (90/105) benchmarking ("Set", "String", "in", "true")...
    done (took 2.17264913 seconds)
    (91/105) benchmarking ("IdDict", "String", "in", "false")...
    done (took 2.172667549 seconds)
    (92/105) benchmarking ("Vector", "Any", "push!")...
    done (took 2.197967962 seconds)
    (93/105) benchmarking ("Dict", "String", "setindex!", "overwrite")...
    done (took 2.236200645 seconds)
    (94/105) benchmarking ("Set", "Int", "push!", "overwrite")...
    done (took 2.214671275 seconds)
    (95/105) benchmarking ("IdDict", "Any", "pop!", "specified")...
    done (took 2.279482365 seconds)
    (96/105) benchmarking ("Set", "String", "push!", "overwrite")...
    done (took 2.211368495 seconds)
    (97/105) benchmarking ("Set", "String", "pop!", "unspecified")...
    done (took 2.212493597 seconds)
    (98/105) benchmarking ("Dict", "Int", "in", "true")...
    done (took 2.180593317 seconds)
    (99/105) benchmarking ("Vector", "Any", "setindex!")...
    done (took 2.18651823 seconds)
    (100/105) benchmarking ("Set", "Int", "length")...
    done (took 2.178128434 seconds)
    (101/105) benchmarking ("Set", "Any", "pop!", "unspecified")...
    done (took 2.208360079 seconds)
    (102/105) benchmarking ("IdDict", "String", "in", "true")...
    done (took 2.180565452 seconds)
    (103/105) benchmarking ("Vector", "Int", "setindex!")...
    done (took 2.184853565 seconds)
    (104/105) benchmarking ("Vector", "Any", "in", "false")...
    done (took 2.513867016 seconds)
    (105/105) benchmarking ("Set", "String", "pop!", "specified")...
    done (took 2.21281628 seconds)
  done (took 233.915523722 seconds)
  (6/6) benchmarking "deletion"...
    (1/28) benchmarking ("IdDict", "String", "filter!")...
    done (took 2.530917169 seconds)
    (2/28) benchmarking ("Vector", "String", "pop!")...
    done (took 2.218997793 seconds)
    (3/28) benchmarking ("Set", "Int", "filter!")...
    done (took 2.246006156 seconds)
    (4/28) benchmarking ("Set", "String", "filter!")...
    done (took 2.439197782 seconds)
    (5/28) benchmarking ("IdDict", "Any", "filter")...
    done (took 2.528147379 seconds)
    (6/28) benchmarking ("Set", "Any", "pop!")...
    done (took 4.126789729 seconds)
    (7/28) benchmarking ("Vector", "Any", "filter")...
    done (took 2.210868335 seconds)
    (8/28) benchmarking ("Vector", "Int", "pop!")...
    done (took 2.222861432 seconds)
    (9/28) benchmarking ("Vector", "String", "filter")...
    done (took 2.232091863 seconds)
    (10/28) benchmarking ("Dict", "String", "pop!")...
    done (took 2.36997182 seconds)
    (11/28) benchmarking ("BitSet", "Int", "pop!")...
    done (took 2.287263438 seconds)
    (12/28) benchmarking ("Dict", "Int", "pop!")...
    done (took 2.266581913 seconds)
    (13/28) benchmarking ("Vector", "Any", "filter!")...
    done (took 2.21031055 seconds)
    (14/28) benchmarking ("Vector", "Int", "filter!")...
    done (took 2.195212861 seconds)
    (15/28) benchmarking ("Vector", "Any", "pop!")...
    done (took 2.217816422 seconds)
    (16/28) benchmarking ("Vector", "String", "filter!")...
    done (took 2.234631202 seconds)
    (17/28) benchmarking ("Set", "Int", "pop!")...
    done (took 2.251801552 seconds)
    (18/28) benchmarking ("Set", "Any", "filter!")...
    done (took 2.531449621 seconds)
    (19/28) benchmarking ("IdDict", "Int", "filter!")...
    done (took 2.327804943 seconds)
    (20/28) benchmarking ("Dict", "Any", "pop!")...
    done (took 3.719485009 seconds)
    (21/28) benchmarking ("Vector", "Int", "filter")...
    done (took 2.213636094 seconds)
    (22/28) benchmarking ("IdDict", "Any", "filter!")...
    done (took 2.512300513 seconds)
    (23/28) benchmarking ("IdDict", "Int", "filter")...
    done (took 2.515101442 seconds)
    (24/28) benchmarking ("Set", "String", "filter")...
    done (took 2.551380757 seconds)
    (25/28) benchmarking ("Set", "Int", "filter")...
    done (took 2.26446307 seconds)
    (26/28) benchmarking ("Set", "Any", "filter")...
    done (took 2.607275006 seconds)
    (27/28) benchmarking ("IdDict", "String", "filter")...
    done (took 2.829789785 seconds)
    (28/28) benchmarking ("Set", "String", "pop!")...
    done (took 2.315520531 seconds)
  done (took 71.273170788 seconds)
done (took 920.63147867 seconds)
SAVING RESULT...
DONE!
