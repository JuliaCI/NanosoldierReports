Julia Version 1.4.0-DEV.535
Commit 9babbf5dc6 (2019-11-30 20:29 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)

   Cloning default registries into `~/.julia`
   Cloning registry from "https://github.com/JuliaRegistries/General.git"
[?25l    Fetching: [>                                        ]  0.0 %    Fetching: [==============>                          ]  34.6 %    Fetching: [=================================>       ]  81.1 %[2K[?25h     Added registry `General` to `~/.julia/registries/General`
 Resolving package versions...
 Installed TransformUtils â”€ v0.2.2
  Updating `~/.julia/environments/v1.4/Project.toml`
  [9b8138ad] + TransformUtils v0.2.2
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [9b8138ad] + TransformUtils v0.2.2
  [2a0f44e3] + Base64 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [de0858da] + Printf 
  [9abbd945] + Profile 
  [9a3f8284] + Random 
  [9e88b42a] + Serialization 
  [6462fe0b] + Sockets 
  [8dfed614] + Test 
  [4ec0a83e] + Unicode 
   Testing TransformUtils
Status `/tmp/jl_vgSKlB/Manifest.toml`
  [9b8138ad] TransformUtils v0.2.2
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [9abbd945] Profile  [`@stdlib/Profile`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [8dfed614] Test  [`@stdlib/Test`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary:                               |
Constructors SO3, Quaternion, AngleAxis...  | No tests
Test Summary:                           | Pass  Total
Ensure basic quaternion operations hold |   10     10
Test Summary:                                       | Pass  Total
Comparison functions for SO3, Quaternion, AngleAxis |    5      5
Test Summary:                                        | Pass  Total
Trivial case quaterion -> SO3 -> Euler -> quaternion |    2      2
â”Œ Warning: Need better coverage on convert function tests
â”” @ Main ~/.julia/packages/TransformUtils/x61q0/test/runtests.jl:67
dAA = AngleAxis(0.7853981633974483, [1.0, 0.0, 0.0])
dAA = so3([0.0 -0.06946490998525451 0.06870105239366446; 0.06946490998525451 0.0 -0.10798344554416883; -0.06870105239366446 0.10798344554416883 0.0])
dAA = so3([0.0 0.119768781596026 0.02935642448109246; -0.119768781596026 0.0 -0.12865996008304167; -0.02935642448109246 0.12865996008304167 0.0])
dAA = so3([0.0 -0.12003393260251222 -0.10668350393762421; 0.12003393260251222 0.0 0.016608096998343147; 0.10668350393762421 -0.016608096998343147 0.0])
dAA = Quaternion(0.9993012105748029, [-0.014743148055414611, -0.03418284324185368, -0.003356092527414189])
dAA = SO3([0.9687059780119054 0.05484380631515884 -0.24207619683245157; -0.0273745692682526 0.9929403271992656 0.11541290906477245; 0.24669690132098565 -0.10517444333240436 0.9633685563419345])
Test Summary:                        | Pass  Total
Compare SO3 and quaternion rotations |   24     24
Test Summary:       | Pass  Total
Basic SE3 mechanics |    4      4
Compare operations on two different SE3 transforms
xi = SE3(SO3([0.9532609918796705 0.3012231671848001 0.023623820854059722; -0.27800484835835326 0.9050305727562273 -0.3219207459387858; -0.11835026679241455 0.30030695284607256 0.9464718423822608]), [1.0798344554416883, 0.6870105239366446, 0.6946490998525451])
xj = SE3(SO3([0.985290235050181 0.02045265982695278 -0.16966096021407526; -0.007946534002187304 0.9972216438103094 0.07406649521623455; 0.1707044384663479 -0.07162877789176196 0.9827152755837377]), [-0.16608096998343147, -1.066835039376242, 1.200339326025122])
Dx = SE3(SO3([0.9212450058984003 -0.2492584441004298 -0.2986266350342673; 0.3408641187317739 0.8871662704082158 0.3110428607301378; 0.1874014185337655 -0.3883377868487817 0.9022607558998246]), [-0.7599535775480025, -1.8107201542760543, 1.0137875492338229])
Test Summary:         | Pass  Total
SE3 âŠ• and âŠ– mechanics |    6      6
TransformUtils.convert(Euler, q) = Euler(0.7853981633974484, 0.0, 1.5707963267948963, Quaternion(1.0, [0.0, 0.0, 0.0]))
Test Summary:              | Pass  Total
Previous discovered issues |    3      3
Test Summary:      | Pass  Total
test SO3 logmap... |  301    301
Test Summary:                              | Pass  Total
test in-place and efficient inverse SE3... |    1      1
   Testing TransformUtils tests passed 
