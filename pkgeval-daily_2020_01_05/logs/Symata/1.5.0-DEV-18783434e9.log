Julia Version 1.5.0-DEV.11
Commit 18783434e9 (2020-01-04 00:48 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed VersionParsing ───── v1.2.0
 Installed Conda ────────────── v1.3.0
 Installed Parsers ──────────── v0.3.10
 Installed OrderedCollections ─ v1.1.0
 Installed QuadGK ───────────── v2.3.1
 Installed Polynomials ──────── v0.6.0
 Installed SpecialFunctions ─── v0.9.0
 Installed Symata ───────────── v0.4.5
 Installed Formatting ───────── v0.4.1
 Installed MacroTools ───────── v0.5.3
 Installed Compat ───────────── v2.2.0
 Installed DataStructures ───── v0.17.7
 Installed Memoize ──────────── v0.3.0
 Installed Primes ───────────── v0.4.0
 Installed Roots ────────────── v0.8.4
 Installed JSON ─────────────── v0.21.0
 Installed OpenSpecFun_jll ──── v0.5.3+1
 Installed Combinatorics ────── v0.7.0
 Installed PyCall ───────────── v1.91.2
 Installed RecipesBase ──────── v0.7.0
  Updating `~/.julia/environments/v1.5/Project.toml`
  [a906b1d5] + Symata v0.4.5
  Updating `~/.julia/environments/v1.5/Manifest.toml`
  [861a8166] + Combinatorics v0.7.0
  [34da2185] + Compat v2.2.0
  [8f4d0f93] + Conda v1.3.0
  [864edb3b] + DataStructures v0.17.7
  [59287772] + Formatting v0.4.1
  [682c06a0] + JSON v0.21.0
  [1914dd2f] + MacroTools v0.5.3
  [c03570c3] + Memoize v0.3.0
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [f27b6e38] + Polynomials v0.6.0
  [27ebfcd6] + Primes v0.4.0
  [438e738f] + PyCall v1.91.2
  [1fd47b50] + QuadGK v2.3.1
  [3cdcf5f2] + RecipesBase v0.7.0
  [f2b01f46] + Roots v0.8.4
  [276daf66] + SpecialFunctions v0.9.0
  [a906b1d5] + Symata v0.4.5
  [81def892] + VersionParsing v1.2.0
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Conda ─→ `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Updating `/tmp/jl_5NQDZX/Project.toml`
 [no changes]
  Updating `/tmp/jl_5NQDZX/Manifest.toml`
 [no changes]
  Building PyCall → `~/.julia/packages/PyCall/ttONZ/deps/build.log`
  Updating `/tmp/jl_bYGKmr/Project.toml`
 [no changes]
  Updating `/tmp/jl_bYGKmr/Manifest.toml`
 [no changes]
   Testing Symata
 Installed NaNMath ────────────── v0.3.3
 Installed DiffResults ────────── v1.0.2
 Installed DiffRules ──────────── v1.0.0
 Installed ForwardDiff ────────── v0.10.8
 Installed IterTools ──────────── v1.3.0
 Installed StaticArrays ───────── v0.12.1
 Installed CommonSubexpressions ─ v0.2.0
  Updating `/tmp/jl_JN8MCt/Project.toml`
  [bbf7d656] + CommonSubexpressions v0.2.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [f6369f11] + ForwardDiff v0.10.8
  [c8e1da08] + IterTools v1.3.0
  Updating `/tmp/jl_JN8MCt/Manifest.toml`
  [bbf7d656] + CommonSubexpressions v0.2.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [f6369f11] + ForwardDiff v0.10.8
  [c8e1da08] + IterTools v1.3.0
  [77ba4419] + NaNMath v0.3.3
  [90137ffa] + StaticArrays v0.12.1
Running sandbox
Status `/tmp/jl_JN8MCt/Project.toml`
  [861a8166] Combinatorics v0.7.0
  [bbf7d656] CommonSubexpressions v0.2.0
  [8f4d0f93] Conda v1.3.0
  [864edb3b] DataStructures v0.17.7
  [163ba53b] DiffResults v1.0.2
  [b552c78f] DiffRules v1.0.0
  [59287772] Formatting v0.4.1
  [f6369f11] ForwardDiff v0.10.8
  [c8e1da08] IterTools v1.3.0
  [1914dd2f] MacroTools v0.5.3
  [c03570c3] Memoize v0.3.0
  [f27b6e38] Polynomials v0.6.0
  [27ebfcd6] Primes v0.4.0
  [438e738f] PyCall v1.91.2
  [1fd47b50] QuadGK v2.3.1
  [f2b01f46] Roots v0.8.4
  [276daf66] SpecialFunctions v0.9.0
  [a906b1d5] Symata v0.4.5
  [81def892] VersionParsing v1.2.0
  [ade2ca70] Dates 
  [b77e0a4c] InteractiveUtils 
  [d6f4376e] Markdown 
  [3fa0cd96] REPL 
  [10745b16] Statistics 
  [8dfed614] Test 
WARNING: could not import Base.Test into Symata
WARNING: could not import Base.search into Symata
WARNING: could not import Base.next into Symata
ERROR: LoadError: InitError: PyError (PyImport_ImportModule

The Python package sympy could not be found by pyimport. Usually this means
that you did not install sympy in the Python version being used by PyCall.

PyCall is currently configured to use the Python version at:

/usr/bin/python3

and you should use whatever mechanism you usually use (apt-get, pip, conda,
etcetera) to install the Python package containing the sympy module.

One alternative is to re-configure PyCall to use a different Python
version on your system: set ENV["PYTHON"] to the path/name of the python
executable you want to use, run Pkg.build("PyCall"), and re-launch Julia.

Another alternative is to configure PyCall to use a Julia-specific Python
distribution via the Conda.jl package (which installs a private Anaconda
Python distribution), which has the advantage that packages can be installed
and kept up-to-date via Julia.  As explained in the PyCall documentation,
set ENV["PYTHON"]="", run Pkg.build("PyCall"), and re-launch Julia. Then,
To install the sympy module, you can use `pyimport_conda("sympy", PKG)`,
where PKG is the Anaconda package the contains the module sympy,
or alternatively you can use the Conda package directly (via
`using Conda` followed by `Conda.add` etcetera).

) <class 'ModuleNotFoundError'>
ModuleNotFoundError("No module named 'sympy'",)

Stacktrace:
 [1] pyimport(::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:544
 [2] pyimport_conda(::String, ::String, ::String) at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:702
 [3] pyimport_conda at /home/pkgeval/.julia/packages/PyCall/ttONZ/src/PyCall.jl:701 [inlined]
 [4] import_sympy() at /home/pkgeval/.julia/packages/Symata/1oDeR/src/sympy.jl:41
 [5] init_sympy() at /home/pkgeval/.julia/packages/Symata/1oDeR/src/sympy.jl:848
 [6] do_init() at /home/pkgeval/.julia/packages/Symata/1oDeR/src/Symata.jl:130
 [7] __init__() at /home/pkgeval/.julia/packages/Symata/1oDeR/src/Symata.jl:124
 [8] _include_from_serialized(::String, ::Array{Any,1}) at ./loading.jl:697
 [9] _require_from_serialized(::String) at ./loading.jl:748
 [10] _require(::Base.PkgId) at ./loading.jl:1039
 [11] require(::Base.PkgId) at ./loading.jl:927
 [12] require(::Module, ::Symbol) at ./loading.jl:922
 [13] include(::String) at ./client.jl:439
 [14] top-level scope at none:6
during initialization of module Symata
in expression starting at /home/pkgeval/.julia/packages/Symata/1oDeR/test/runtests.jl:1
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/Symata/1oDeR/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/Symata/1oDeR/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package Symata errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:300
 [5] #test#66 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.5/Pkg/src/API.jl:292
 [11] top-level scope at none:13
