Julia Version 1.4.0-DEV.667
Commit acb7bd93fb (2019-12-27 21:20 UTC)
Platform Info:
  OS: Linux (x86_64-pc-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-8.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed PDMats ────────────────────── v0.9.10
 Installed AxisAlgorithms ────────────── v1.0.0
 Installed Arpack ────────────────────── v0.4.0
 Installed Polynomials ───────────────── v0.6.0
 Installed PhyloPlots ────────────────── v0.2.1
 Installed LineSearches ──────────────── v7.0.1
 Installed BufferedStreams ───────────── v1.0.0
 Installed IntervalTrees ─────────────── v1.0.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed CMakeWrapper ──────────────── v0.2.3
 Installed RecipesBase ───────────────── v0.7.0
 Installed WoodburyMatrices ──────────── v0.4.1
 Installed MKL_jll ───────────────────── v2019.0.117+0
 Installed IterTools ─────────────────── v1.3.0
 Installed RCall ─────────────────────── v0.13.4
 Installed BioSymbols ────────────────── v3.1.0
 Installed OpenSpecFun_jll ───────────── v0.5.3+1
 Installed PooledArrays ──────────────── v0.5.3
 Installed Distances ─────────────────── v0.8.2
 Installed StaticArrays ──────────────── v0.12.1
 Installed PhyloNetworks ─────────────── v0.11.0
 Installed Tables ────────────────────── v0.2.11
 Installed DiffEqDiffTools ───────────── v1.7.0
 Installed Requires ──────────────────── v0.5.2
 Installed VersionParsing ────────────── v1.2.0
 Installed BioSequences ──────────────── v1.1.0
 Installed ArrayInterface ────────────── v2.3.1
 Installed DataAPI ───────────────────── v1.1.0
 Installed WinReg ────────────────────── v0.3.1
 Installed OrderedCollections ────────── v1.1.0
 Installed Parsers ───────────────────── v0.3.10
 Installed Conda ─────────────────────── v1.3.0
 Installed SpecialFunctions ──────────── v0.9.0
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed DocStringExtensions ───────── v0.8.1
 Installed Combinatorics ─────────────── v0.7.0
 Installed NLSolversBase ─────────────── v7.5.0
 Installed YAML ──────────────────────── v0.3.2
 Installed Rmath ─────────────────────── v0.6.0
 Installed CategoricalArrays ─────────── v0.7.5
 Installed Parameters ────────────────── v0.12.0
 Installed NLopt ─────────────────────── v0.5.1
 Installed Interpolations ────────────── v0.12.5
 Installed CMake ─────────────────────── v1.1.2
 Installed FixedPointNumbers ─────────── v0.7.0
 Installed Twiddle ───────────────────── v1.1.1
 Installed CoupledFields ─────────────── v0.1.0
 Installed IndexableBitVectors ───────── v1.0.0
 Installed Compose ───────────────────── v0.7.3
 Installed FilePathsBase ─────────────── v0.7.0
 Installed TranscodingStreams ────────── v0.9.5
 Installed Media ─────────────────────── v0.5.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed StatsFuns ─────────────────── v0.9.3
 Installed BinDeps ───────────────────── v1.0.0
 Installed DataFrames ────────────────── v0.20.0
 Installed Showoff ───────────────────── v0.3.1
 Installed Hexagons ──────────────────── v0.2.0
 Installed BinaryProvider ────────────── v0.5.8
 Installed Gadfly ────────────────────── v1.0.1
 Installed CommonSubexpressions ──────── v0.2.0
 Installed Missings ──────────────────── v0.4.3
 Installed GLM ───────────────────────── v1.3.5
 Installed OffsetArrays ──────────────── v0.11.4
 Installed CSV ───────────────────────── v0.5.21
 Installed ColorTypes ────────────────── v0.9.0
 Installed MathProgBase ──────────────── v0.7.7
 Installed Colors ────────────────────── v0.11.0
 Installed Distributions ─────────────── v0.21.11
 Installed QuadGK ────────────────────── v2.3.1
 Installed Reexport ──────────────────── v0.2.0
 Installed DiffRules ─────────────────── v1.0.0
 Installed Compat ────────────────────── v2.2.0
 Installed FFTW ──────────────────────── v1.2.0
 Installed DataStructures ────────────── v0.17.6
 Installed MacroTools ────────────────── v0.5.3
 Installed ForwardDiff ───────────────── v0.10.8
 Installed ShiftedArrays ─────────────── v1.0.0
 Installed Codecs ────────────────────── v0.5.0
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed Juno ──────────────────────── v0.7.2
 Installed OpenBLAS_jll ──────────────── v0.3.7+1
 Installed KernelDensity ─────────────── v0.5.1
 Installed Contour ───────────────────── v0.5.1
 Installed FFTW_jll ──────────────────── v3.3.9+3
 Installed TableTraits ───────────────── v1.0.0
 Installed Calculus ──────────────────── v0.5.1
 Installed Measures ──────────────────── v0.3.1
 Installed IndirectArrays ────────────── v0.5.1
 Installed Optim ─────────────────────── v0.19.7
 Installed FillArrays ────────────────── v0.8.2
 Installed NaNMath ───────────────────── v0.3.3
 Installed AbstractFFTs ──────────────── v0.5.0
 Installed Loess ─────────────────────── v0.5.0
 Installed Automa ────────────────────── v0.8.0
 Installed PositiveFactorizations ────── v0.2.3
 Installed StatsModels ───────────────── v0.6.7
 Installed WeakRefStrings ────────────── v0.6.2
 Installed URIParser ─────────────────── v0.4.0
 Installed DiffResults ───────────────── v1.0.2
 Installed BioCore ───────────────────── v2.0.5
 Installed JSON ──────────────────────── v0.21.0
 Installed Arpack_jll ────────────────── v3.5.0+2
 Installed Ratios ────────────────────── v0.3.1
 Installed IntelOpenMP_jll ───────────── v2018.0.3+0
  Updating `~/.julia/environments/v1.4/Project.toml`
  [c0d5b6db] + PhyloPlots v0.2.1
  Updating `~/.julia/environments/v1.4/Manifest.toml`
  [621f4979] + AbstractFFTs v0.5.0
  [7d9fca2a] + Arpack v0.4.0
  [68821587] + Arpack_jll v3.5.0+2
  [4fba245c] + ArrayInterface v2.3.1
  [67c07d97] + Automa v0.8.0
  [13072b0f] + AxisAlgorithms v1.0.0
  [9e28174c] + BinDeps v1.0.0
  [b99e7846] + BinaryProvider v0.5.8
  [37cfa864] + BioCore v2.0.5
  [7e6ae17a] + BioSequences v1.1.0
  [3c28c6f8] + BioSymbols v3.1.0
  [e1450e63] + BufferedStreams v1.0.0
  [631607c0] + CMake v1.1.2
  [d5fb7624] + CMakeWrapper v0.2.3
  [336ed68f] + CSV v0.5.21
  [49dc2e85] + Calculus v0.5.1
  [324d7699] + CategoricalArrays v0.7.5
  [19ecbf4d] + Codecs v0.5.0
  [3da002f7] + ColorTypes v0.9.0
  [5ae59095] + Colors v0.11.0
  [861a8166] + Combinatorics v0.7.0
  [bbf7d656] + CommonSubexpressions v0.2.0
  [34da2185] + Compat v2.2.0
  [a81c6b42] + Compose v0.7.3
  [8f4d0f93] + Conda v1.3.0
  [d38c429a] + Contour v0.5.1
  [7ad07ef1] + CoupledFields v0.1.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [01453d9d] + DiffEqDiffTools v1.7.0
  [163ba53b] + DiffResults v1.0.2
  [b552c78f] + DiffRules v1.0.0
  [b4f34e82] + Distances v0.8.2
  [31c24e10] + Distributions v0.21.11
  [ffbed154] + DocStringExtensions v0.8.1
  [7a1cc6ca] + FFTW v1.2.0
  [f5851436] + FFTW_jll v3.3.9+3
  [48062228] + FilePathsBase v0.7.0
  [1a297f60] + FillArrays v0.8.2
  [53c48c17] + FixedPointNumbers v0.7.0
  [f6369f11] + ForwardDiff v0.10.8
  [38e38edf] + GLM v1.3.5
  [c91e804a] + Gadfly v1.0.1
  [a1b4810d] + Hexagons v0.2.0
  [1cb3b9ac] + IndexableBitVectors v1.0.0
  [9b13fd28] + IndirectArrays v0.5.1
  [1d5cc7b8] + IntelOpenMP_jll v2018.0.3+0
  [a98d9a8b] + Interpolations v0.12.5
  [524e6230] + IntervalTrees v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [c8e1da08] + IterTools v1.3.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [e5e0dc1b] + Juno v0.7.2
  [5ab0869b] + KernelDensity v0.5.1
  [d3d80556] + LineSearches v7.0.1
  [4345ca2d] + Loess v0.5.0
  [856f044c] + MKL_jll v2019.0.117+0
  [1914dd2f] + MacroTools v0.5.3
  [fdba3010] + MathProgBase v0.7.7
  [442fdcdd] + Measures v0.3.1
  [e89f7d12] + Media v0.5.0
  [e1d29d7a] + Missings v0.4.3
  [d41bc354] + NLSolversBase v7.5.0
  [76087f3c] + NLopt v0.5.1
  [77ba4419] + NaNMath v0.3.3
  [6fe1bfb0] + OffsetArrays v0.11.4
  [4536629a] + OpenBLAS_jll v0.3.7+1
  [efe28fd5] + OpenSpecFun_jll v0.5.3+1
  [429524aa] + Optim v0.19.7
  [bac558e1] + OrderedCollections v1.1.0
  [90014a1f] + PDMats v0.9.10
  [d96e819e] + Parameters v0.12.0
  [69de0a69] + Parsers v0.3.10
  [33ad39ac] + PhyloNetworks v0.11.0
  [c0d5b6db] + PhyloPlots v0.2.1
  [f27b6e38] + Polynomials v0.6.0
  [2dfb63ee] + PooledArrays v0.5.3
  [85a6dd25] + PositiveFactorizations v0.2.3
  [1fd47b50] + QuadGK v2.3.1
  [6f49c342] + RCall v0.13.4
  [c84ed2f1] + Ratios v0.3.1
  [3cdcf5f2] + RecipesBase v0.7.0
  [189a3867] + Reexport v0.2.0
  [ae029012] + Requires v0.5.2
  [79098fc4] + Rmath v0.6.0
  [1277b4bf] + ShiftedArrays v1.0.0
  [992d4aef] + Showoff v0.3.1
  [a2af1166] + SortingAlgorithms v0.3.1
  [276daf66] + SpecialFunctions v0.9.0
  [90137ffa] + StaticArrays v0.12.1
  [2913bbd2] + StatsBase v0.32.0
  [4c63d2b9] + StatsFuns v0.9.3
  [3eaba693] + StatsModels v0.6.7
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [3bb67fe8] + TranscodingStreams v0.9.5
  [7200193e] + Twiddle v1.1.1
  [30578b45] + URIParser v0.4.0
  [81def892] + VersionParsing v1.2.0
  [ea10d353] + WeakRefStrings v0.6.2
  [1b915085] + WinReg v0.3.1
  [efce3f68] + WoodburyMatrices v0.4.1
  [ddb6d928] + YAML v0.3.2
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [9abbd945] + Profile 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [4607b0f0] + SuiteSparse 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
  Building Conda → `~/.julia/packages/Conda/kLXeC/deps/build.log`
  Updating `/tmp/jl_Bqu8r2/Project.toml`
 [no changes]
  Updating `/tmp/jl_Bqu8r2/Manifest.toml`
 [no changes]
  Building RCall → `~/.julia/packages/RCall/g7dhB/deps/build.log`
  Updating `/tmp/jl_6bxDBk/Project.toml`
 [no changes]
  Updating `/tmp/jl_6bxDBk/Manifest.toml`
 [no changes]
  Building Rmath → `~/.julia/packages/Rmath/BoBag/deps/build.log`
  Updating `/tmp/jl_74rXX1/Project.toml`
 [no changes]
  Updating `/tmp/jl_74rXX1/Manifest.toml`
 [no changes]
  Building CMake → `~/.julia/packages/CMake/nSK2r/deps/build.log`
  Updating `/tmp/jl_qasErf/Project.toml`
 [no changes]
  Updating `/tmp/jl_qasErf/Manifest.toml`
 [no changes]
  Building NLopt → `~/.julia/packages/NLopt/eqN9a/deps/build.log`
  Updating `/tmp/jl_jJ9Z7V/Project.toml`
 [no changes]
  Updating `/tmp/jl_jJ9Z7V/Manifest.toml`
 [no changes]
  Building FFTW ─→ `~/.julia/packages/FFTW/qqcBj/deps/build.log`
  Updating `/tmp/jl_WLIGHe/Project.toml`
 [no changes]
  Updating `/tmp/jl_WLIGHe/Manifest.toml`
 [no changes]
   Testing PhyloPlots
  Updating `/tmp/jl_PXmznF/Project.toml`
 [no changes]
  Updating `/tmp/jl_PXmznF/Manifest.toml`
 [no changes]
Running sandbox
Status `/tmp/jl_PXmznF/Project.toml`
  [3da002f7] ColorTypes v0.9.0
  [5ae59095] Colors v0.11.0
  [a93c6f00] DataFrames v0.20.0
  [c91e804a] Gadfly v1.0.1
  [33ad39ac] PhyloNetworks v0.11.0
  [c0d5b6db] PhyloPlots v0.2.1
  [6f49c342] RCall v0.13.4
  [d6f4376e] Markdown 
  [de0858da] Printf 
  [8dfed614] Test 
[ Info: Loading DataFrames support into Gadfly.jl
Test setup for plotting PhyloNetworks objects: Log Test Failed at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:29
  Expression: PhyloPlots.checkNodeDataFrame(net, dat)
  Log Pattern: (:warn, "Some node numbers in the nodeLabel data frame are not found in the network:\n 100")
  Captured Logs: 
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762e5dd22, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 175, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762e5dd7a, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 175, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175,:maxlog => 1))
    Test.LogRecord(Warn, "Some node numbers in the nodeLabel data frame are not found in the network:\n 100", PhyloPlots, "phylonetworksPlots", :PhyloPlots_55f24fbe, "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 188, Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{,Tuple{}}}())

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/logging.jl:89
 [2] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:29
 [3] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
 [4] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:3
Test setup for plotting PhyloNetworks objects: Log Test Failed at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:30
  Expression: PhyloPlots.checkNodeDataFrame(net, dat[!, 2:3])
  Log Pattern: (:warn, "nodeLabel should have 2+ columns, the first one giving the node numbers (Integer)")
  Captured Logs: 
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762e5dd22, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 175, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762e5dd7a, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 175, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175,:maxlog => 1))
    Test.LogRecord(Warn, "nodeLabel should have 2+ columns, the first one giving the node numbers (Integer)", PhyloPlots, "phylonetworksPlots", :PhyloPlots_91ca88c2, "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 176, Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{,Tuple{}}}())

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/logging.jl:89
 [2] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:30
 [3] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
 [4] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:3
┌ Warning: `eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.
│   caller = checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:175
┌ Warning: `T` is deprecated, use `nonmissingtype` instead.
│   caller = checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:175
┌ Warning: `eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.
│   caller = prepareNodeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:222
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:222
┌ Warning: `T` is deprecated, use `nonmissingtype` instead.
│   caller = prepareNodeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:222
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:222
Test setup for plotting PhyloNetworks objects: Test Failed at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:36
  Expression: PhyloPlots.prepareNodeDataFrame(net, dat, true, true, true, collect(1.0:9), collect(10.0:18)) == DataFrame(name = ["A", "B", "", "C", "D", "#H1", "", "", ""], num = ["1", "2", "-4", "4", "5", "3", "-5", "-3", "-2"], lab = ["", "", "99", "", "mytips", "", "90", "95", ""], lea = [true, true, false, true, true, false, false, false, false], x = collect(1.0:9), y = collect(10.0:18))
   Evaluated: 9×6 DataFrame
│ Row │ name   │ num    │ lab    │ lea  │ x       │ y       │
│     │ String │ String │ String │ Bool │ Float64 │ Float64 │
├─────┼────────┼────────┼────────┼──────┼─────────┼─────────┤
│ 1   │ A      │ 1      │        │ 1    │ 1.0     │ 10.0    │
│ 2   │ B      │ 2      │        │ 1    │ 2.0     │ 11.0    │
│ 3   │        │ -4     │ 99     │ 0    │ 3.0     │ 12.0    │
│ 4   │ C      │ 4      │        │ 1    │ 4.0     │ 13.0    │
│ 5   │ D      │ 5      │ mytips │ 1    │ 5.0     │ 14.0    │
│ 6   │ H1     │ 3      │        │ 0    │ 6.0     │ 15.0    │
│ 7   │        │ -5     │ 90     │ 0    │ 7.0     │ 16.0    │
│ 8   │        │ -3     │ 95     │ 0    │ 8.0     │ 17.0    │
│ 9   │        │ -2     │        │ 0    │ 9.0     │ 18.0    │ == 9×6 DataFrame
│ Row │ name   │ num    │ lab    │ lea  │ x       │ y       │
│     │ String │ String │ String │ Bool │ Float64 │ Float64 │
├─────┼────────┼────────┼────────┼──────┼─────────┼─────────┤
│ 1   │ A      │ 1      │        │ 1    │ 1.0     │ 10.0    │
│ 2   │ B      │ 2      │        │ 1    │ 2.0     │ 11.0    │
│ 3   │        │ -4     │ 99     │ 0    │ 3.0     │ 12.0    │
│ 4   │ C      │ 4      │        │ 1    │ 4.0     │ 13.0    │
│ 5   │ D      │ 5      │ mytips │ 1    │ 5.0     │ 14.0    │
│ 6   │ #H1    │ 3      │        │ 0    │ 6.0     │ 15.0    │
│ 7   │        │ -5     │ 90     │ 0    │ 7.0     │ 16.0    │
│ 8   │        │ -3     │ 95     │ 0    │ 8.0     │ 17.0    │
│ 9   │        │ -2     │        │ 0    │ 9.0     │ 18.0    │
Stacktrace:
 [1] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:36
 [2] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
 [3] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:3
Test setup for plotting PhyloNetworks objects: Log Test Failed at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:43
  Expression: PhyloPlots.prepareEdgeDataFrame(net, dat, true, collect(1.0:9), collect(10.0:18), collect(19.0:27), collect(28.0:36))
  Log Pattern: (:warn, "Some edge numbers in the edgeLabel data frame are not found in the network:\n 200")
  Captured Logs: 
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebdd4c, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 259, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:259,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebdda4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 259, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:259,:maxlog => 1))
    Test.LogRecord(Warn, "Some edge numbers in the edgeLabel data frame are not found in the network:\n 200", PhyloPlots, "phylonetworksPlots", :PhyloPlots_55f24fbf, "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 272, Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{,Tuple{}}}())
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf08e, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf0e4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf08e, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf0e4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf08e, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf0e4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf08e, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf0e4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/logging.jl:89
 [2] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:43
 [3] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
 [4] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_phylonetworkPlots.jl:3
┌ Warning: `eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.
│   caller = prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:259
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:259
┌ Warning: `T` is deprecated, use `nonmissingtype` instead.
│   caller = prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:259
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:259
┌ Warning: `eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.
│   caller = prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:284
┌ Warning: `T` is deprecated, use `nonmissingtype` instead.
│   caller = prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284
└ @ PhyloPlots ~/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl:284
RCall-based plot Test: Log Test Failed at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_plotRCall.jl:15
  Expression: plot(net, :RCall, nodeLabel = dat)
  Log Pattern: (:warn, "Some node numbers in the nodeLabel data frame are not found in the network:\n -1")
  Captured Logs: 
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762e5dd22, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 175, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762e5dd7a, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 175, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => checkNodeDataFrame(::HybridNetwork, ::DataFrame) at phylonetworksPlots.jl:175,:maxlog => 1))
    Test.LogRecord(Warn, "Some node numbers in the nodeLabel data frame are not found in the network:\n -1", PhyloPlots, "phylonetworksPlots", :PhyloPlots_55f24fbe, "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 188, Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{,Tuple{}}}())
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762eabf14, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 222, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareNodeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:222,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762eabf76, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 222, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareNodeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:222,:maxlog => 1))
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762eabf14, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 222, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareNodeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:222,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762eabf76, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 222, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareNodeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Bool, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:222,:maxlog => 1))

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/logging.jl:89
 [2] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_plotRCall.jl:15
 [3] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
 [4] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_plotRCall.jl:5
RCall-based plot Test: Log Test Failed at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_plotRCall.jl:16
  Expression: plot(net, :RCall, edgeLabel = dat[!, [:edge, :bs]])
  Log Pattern: 
  Captured Logs: 
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebdd4c, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 259, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:259,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebdda4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 259, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:259,:maxlog => 1))
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf08e, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf0e4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf08e, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf0e4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`eltypes(df::AbstractDataFrame)` is deprecated, use `eltype.(eachcol(df))` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf08e, :eltypes), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))
    Test.LogRecord(Warn, "`T` is deprecated, use `nonmissingtype` instead.", PhyloPlots, :depwarn, (Ptr{Nothing} @0x00007f3762ebf0e4, :T), "/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/src/phylonetworksPlots.jl", 284, Base.Iterators.Pairs{Symbol,Any,Tuple{Symbol,Symbol},NamedTuple{(:caller, :maxlog),Tuple{Base.StackTraces.StackFrame,Int64}}}(:caller => prepareEdgeDataFrame(::HybridNetwork, ::DataFrame, ::Bool, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}, ::Array{Float64,1}) at phylonetworksPlots.jl:284,:maxlog => 1))

Stacktrace:
 [1] record(::Test.DefaultTestSet, ::Test.LogTestFailure) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/logging.jl:89
 [2] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_plotRCall.jl:16
 [3] top-level scope at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1116
 [4] top-level scope at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/test_plotRCall.jl:5
Test Summary:                                      | Pass  Fail  Total
PhyloPlots Tests                                   |   38     6     44
  Test setup for plotting PhyloNetworks objects    |    8     4     12
  Gadfly-based plot Test                           |   10           10
  RCall-based plot Test                            |    7     2      9
  test of substitution model plot, 2 binary traits |    1            1
  rexport and sexp tests                           |   12           12
ERROR: LoadError: Some tests did not pass: 38 passed, 6 failed, 0 errored, 0 broken.
in expression starting at /home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/runtests.jl:9
err = ProcessFailedException(Base.Process[Process(`/opt/julia/bin/julia -Cnative -J/opt/julia/lib/julia/sys.so -g1 --code-coverage=none --color=no --compiled-modules=yes --check-bounds=yes --inline=yes --startup-file=no --track-allocation=none --eval 'append!(empty!(Base.DEPOT_PATH), ["/home/pkgeval/.julia", "/opt/julia/local/share/julia", "/opt/julia/share/julia", "/usr/local/share/julia"])
append!(empty!(Base.DL_LOAD_PATH), String[])

cd("/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test")
append!(empty!(ARGS), String[])
include("/home/pkgeval/.julia/packages/PhyloPlots/aMMN1/test/runtests.jl")
'`, ProcessExited(1))])
ERROR: Package PhyloPlots errored during testing
Stacktrace:
 [1] pkgerror(::String, ::Vararg{String,N} where N) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Types.jl:54
 [2] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, julia_args::Cmd, test_args::Cmd, test_fn::Nothing) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/Operations.jl:1471
 [3] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}; coverage::Bool, test_fn::Nothing, julia_args::Cmd, test_args::Cmd, kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:313
 [4] test(::Pkg.Types.Context, ::Array{Pkg.Types.PackageSpec,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:300
 [5] #test#66 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [6] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:294 [inlined]
 [7] #test#65 at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [8] test at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:293 [inlined]
 [9] test(::String; kwargs::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [10] test(::String) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v1.4/Pkg/src/API.jl:292
 [11] top-level scope at none:12
