Julia Version 1.3.2-pre.0
Commit 2e6715c045 (2019-12-31 00:49 UTC)
Platform Info:
  OS: Linux (x86_64-linux-gnu)
  CPU: Intel(R) Xeon(R) Silver 4114 CPU @ 2.20GHz
  WORD_SIZE: 64
  LIBM: libopenlibm
  LLVM: libLLVM-6.0.1 (ORCJIT, skylake)
Environment:
  JULIA_DEPOT_PATH = ::/usr/local/share/julia

 Resolving package versions...
 Installed SortingAlgorithms ─────────── v0.3.1
 Installed Missings ──────────────────── v0.4.3
 Installed KCenters ──────────────────── v0.1.8
 Installed IteratorInterfaceExtensions ─ v1.0.0
 Installed InvertedIndices ───────────── v1.0.0
 Installed Compat ────────────────────── v3.2.0
 Installed MLLabelUtils ──────────────── v0.5.1
 Installed CategoricalArrays ─────────── v0.7.5
 Installed DataFrames ────────────────── v0.20.0
 Installed DataStructures ────────────── v0.17.6
 Installed MLDataUtils ───────────────── v0.5.0
 Installed Parsers ───────────────────── v0.3.10
 Installed Tables ────────────────────── v0.2.11
 Installed JSON ──────────────────────── v0.21.0
 Installed StatsBase ─────────────────── v0.32.0
 Installed MLDataPattern ─────────────── v0.5.0
 Installed PooledArrays ──────────────── v0.5.3
 Installed MappedArrays ──────────────── v0.2.2
 Installed DataAPI ───────────────────── v1.1.0
 Installed OrderedCollections ────────── v1.1.0
 Installed DataValueInterfaces ───────── v1.0.0
 Installed Reexport ──────────────────── v0.2.0
 Installed SimilaritySearch ──────────── v0.3.17
 Installed LearnBase ─────────────────── v0.2.2
 Installed TableTraits ───────────────── v1.0.0
  Updating `~/.julia/environments/v1.3/Project.toml`
  [5d8de97f] + KCenters v0.1.8
  Updating `~/.julia/environments/v1.3/Manifest.toml`
  [324d7699] + CategoricalArrays v0.7.5
  [34da2185] + Compat v3.2.0
  [9a962f9c] + DataAPI v1.1.0
  [a93c6f00] + DataFrames v0.20.0
  [864edb3b] + DataStructures v0.17.6
  [e2d170a0] + DataValueInterfaces v1.0.0
  [41ab1584] + InvertedIndices v1.0.0
  [82899510] + IteratorInterfaceExtensions v1.0.0
  [682c06a0] + JSON v0.21.0
  [5d8de97f] + KCenters v0.1.8
  [7f8f8fb0] + LearnBase v0.2.2
  [9920b226] + MLDataPattern v0.5.0
  [cc2ba9b6] + MLDataUtils v0.5.0
  [66a33bbf] + MLLabelUtils v0.5.1
  [dbb5928d] + MappedArrays v0.2.2
  [e1d29d7a] + Missings v0.4.3
  [bac558e1] + OrderedCollections v1.1.0
  [69de0a69] + Parsers v0.3.10
  [2dfb63ee] + PooledArrays v0.5.3
  [189a3867] + Reexport v0.2.0
  [053f045d] + SimilaritySearch v0.3.17
  [a2af1166] + SortingAlgorithms v0.3.1
  [2913bbd2] + StatsBase v0.32.0
  [3783bdb8] + TableTraits v1.0.0
  [bd369af6] + Tables v0.2.11
  [2a0f44e3] + Base64 
  [ade2ca70] + Dates 
  [8bb1440f] + DelimitedFiles 
  [8ba89e20] + Distributed 
  [9fa8497b] + Future 
  [b77e0a4c] + InteractiveUtils 
  [76f85450] + LibGit2 
  [8f399da3] + Libdl 
  [37e2e46d] + LinearAlgebra 
  [56ddb016] + Logging 
  [d6f4376e] + Markdown 
  [a63ad114] + Mmap 
  [44cfe95a] + Pkg 
  [de0858da] + Printf 
  [3fa0cd96] + REPL 
  [9a3f8284] + Random 
  [ea8e919c] + SHA 
  [9e88b42a] + Serialization 
  [1a1011a3] + SharedArrays 
  [6462fe0b] + Sockets 
  [2f01184e] + SparseArrays 
  [10745b16] + Statistics 
  [8dfed614] + Test 
  [cf7118a7] + UUIDs 
  [4ec0a83e] + Unicode 
   Testing KCenters
    Status `/tmp/jl_WP4uKK/Manifest.toml`
  [324d7699] CategoricalArrays v0.7.5
  [34da2185] Compat v3.2.0
  [9a962f9c] DataAPI v1.1.0
  [a93c6f00] DataFrames v0.20.0
  [864edb3b] DataStructures v0.17.6
  [e2d170a0] DataValueInterfaces v1.0.0
  [41ab1584] InvertedIndices v1.0.0
  [82899510] IteratorInterfaceExtensions v1.0.0
  [682c06a0] JSON v0.21.0
  [5d8de97f] KCenters v0.1.8
  [7f8f8fb0] LearnBase v0.2.2
  [9920b226] MLDataPattern v0.5.0
  [cc2ba9b6] MLDataUtils v0.5.0
  [66a33bbf] MLLabelUtils v0.5.1
  [dbb5928d] MappedArrays v0.2.2
  [e1d29d7a] Missings v0.4.3
  [bac558e1] OrderedCollections v1.1.0
  [69de0a69] Parsers v0.3.10
  [2dfb63ee] PooledArrays v0.5.3
  [189a3867] Reexport v0.2.0
  [053f045d] SimilaritySearch v0.3.17
  [a2af1166] SortingAlgorithms v0.3.1
  [2913bbd2] StatsBase v0.32.0
  [3783bdb8] TableTraits v1.0.0
  [bd369af6] Tables v0.2.11
  [2a0f44e3] Base64  [`@stdlib/Base64`]
  [ade2ca70] Dates  [`@stdlib/Dates`]
  [8bb1440f] DelimitedFiles  [`@stdlib/DelimitedFiles`]
  [8ba89e20] Distributed  [`@stdlib/Distributed`]
  [9fa8497b] Future  [`@stdlib/Future`]
  [b77e0a4c] InteractiveUtils  [`@stdlib/InteractiveUtils`]
  [76f85450] LibGit2  [`@stdlib/LibGit2`]
  [8f399da3] Libdl  [`@stdlib/Libdl`]
  [37e2e46d] LinearAlgebra  [`@stdlib/LinearAlgebra`]
  [56ddb016] Logging  [`@stdlib/Logging`]
  [d6f4376e] Markdown  [`@stdlib/Markdown`]
  [a63ad114] Mmap  [`@stdlib/Mmap`]
  [44cfe95a] Pkg  [`@stdlib/Pkg`]
  [de0858da] Printf  [`@stdlib/Printf`]
  [3fa0cd96] REPL  [`@stdlib/REPL`]
  [9a3f8284] Random  [`@stdlib/Random`]
  [ea8e919c] SHA  [`@stdlib/SHA`]
  [9e88b42a] Serialization  [`@stdlib/Serialization`]
  [1a1011a3] SharedArrays  [`@stdlib/SharedArrays`]
  [6462fe0b] Sockets  [`@stdlib/Sockets`]
  [2f01184e] SparseArrays  [`@stdlib/SparseArrays`]
  [10745b16] Statistics  [`@stdlib/Statistics`]
  [8dfed614] Test  [`@stdlib/Test`]
  [cf7118a7] UUIDs  [`@stdlib/UUIDs`]
  [4ec0a83e] Unicode  [`@stdlib/Unicode`]
Test Summary: | Pass  Total
Scores        |    9      9
[ Info: 125.23000000000009
Test Summary:        | Pass  Total
Clustering with enet |    4      4
[ Info: 75.81000000000003
[ Info: 40.059999999999995
[ Info: 24.560000000000002
[ Info: 313.64000338064864
[ Info: 547.7199992669996
[ Info: 146.21999835129265
[ Info: 75.80000116067464
Test Summary:        |
Clustering with dnet | No tests
inertia(cfft.distances) = 18.872047172238837
inertia(cdnet.distances) = 22.62081514242197
inertia(crand.distances) = 21.378261886226728
Test Summary:            |
Clustering with KCenters | No tests
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6904296875, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.6904296875,"f1":0.8039635711510718,"seconds":4.766508936882019e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.25,"distances_sum":1996.2739416015456}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8789694680319688,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5234375,"distances_sum":2382.4893529849624}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8789694680319688,"seconds":6.083399057388306e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5234375,"distances_sum":2382.4893529849624}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8232421875, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8232421875,"f1":0.897833936896438,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.5546875,"distances_sum":2496.8291040624454}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9592490842490845,"seconds":1.181475818157196e-5,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":3022.31205875739}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.92578125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.92578125,"f1":0.9589858058608063,"seconds":6.193295121192932e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.890625,"distances_sum":3055.691869161451}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9365244130869136,"seconds":5.7406723499298096e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.96875,"distances_sum":2838.432423701628}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.927734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.927734375,"f1":0.9592490842490845,"seconds":1.181475818157196e-5,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":3022.31205875739}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743131868131871,"seconds":6.590038537979126e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9921875,"distances_sum":3156.757649490888}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9501953125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.9501953125,"f1":0.9722298534798539,"seconds":6.5695494413375854e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":3147.2516550232936}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.966796875, conf: {"ssize":1,"bsize":12}, perf: {"precision":1.0,"recall":0.966796875,"f1":0.9819940476190481,"seconds":1.0065734386444092e-5,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":3228.0903451997096}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9701293498168505,"seconds":6.532296538352966e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.96875,"distances_sum":3110.013049166667}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675251831501835,"seconds":6.0033053159713745e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9375,"distances_sum":3098.434205752755}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":2,"bsize":10}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9687156593406597,"seconds":6.319954991340637e-6,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.953125,"distances_sum":3102.446597271404}, best_list's length: 13, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9443359375, conf: {"ssize":3,"bsize":10}, perf: {"precision":1.0,"recall":0.9443359375,"f1":0.9693452380952386,"seconds":1.0028481483459473e-5,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9453125,"distances_sum":3123.2147908606526}, best_list's length: 14, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819940476190481,"seconds":1.0065734386444092e-5,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":3228.0903451997096}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.966796875,"state":{"ssize":1,"bsize":12},"perf":{"precision":1.0,"recall":0.966796875,"f1":0.9819940476190481,"seconds":1.0065734386444092e-5,"exhaustive_search_seconds":1.296401023864746e-6,"evaluations":8.9765625,"distances_sum":3228.0903451997096}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5048828125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.5048828125,"f1":0.6534056221556224,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":6.390625,"distances_sum":1422.6672305102823}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.5048828125,"state":{"ssize":1,"bsize":3},"perf":{"precision":1.0,"recall":0.5048828125,"f1":0.6534056221556224,"seconds":4.032626748085022e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":6.390625,"distances_sum":1422.6672305102823}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6201171875, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.6201171875,"f1":0.7536879786879793,"seconds":4.542991518974304e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.046875,"distances_sum":1788.9683826367555}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7490234375, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.7490234375,"f1":0.8459977522477531,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.734375,"distances_sum":2210.584306588263}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7490234375,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.7490234375,"f1":0.8459977522477531,"seconds":5.073845386505127e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.734375,"distances_sum":2210.584306588263}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":7,"bsize":5}, perf: {"precision":1.0,"recall":0.755859375,"f1":0.8500036421911431,"seconds":5.2675604820251465e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":7.75,"distances_sum":2213.8052775075107}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8740234375, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.8740234375,"f1":0.9270375457875464,"seconds":5.885958671569824e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.5234375,"distances_sum":2734.1158757277794}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8828125, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.8828125,"f1":0.9311469780219783,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.5234375,"distances_sum":2722.074543094399}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9201267482517489,"seconds":5.6587159633636475e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.46875,"distances_sum":2640.769715468989}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8828125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9311469780219783,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.5234375,"distances_sum":2722.074543094399}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8828125,"state":{"ssize":7,"bsize":7},"perf":{"precision":1.0,"recall":0.8828125,"f1":0.9311469780219783,"seconds":5.748122930526733e-6,"exhaustive_search_seconds":1.8365681171417236e-6,"evaluations":8.5234375,"distances_sum":2722.074543094399}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.802734375, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.802734375,"f1":0.8785095113220119,"seconds":5.368143320083618e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3203125,"distances_sum":2230.8964077171913}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.171875, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.171875,"f1":null,"seconds":3.2223761081695557e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":5.6796875,"distances_sum":487.7089452499627}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8154296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.8154296875,"f1":0.8915095321345331,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3359375,"distances_sum":2260.455569107009}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8154296875,"state":{"ssize":4,"bsize":5},"perf":{"precision":1.0,"recall":0.8154296875,"f1":0.8915095321345331,"seconds":5.209818482398987e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3359375,"distances_sum":2260.455569107009}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.841796875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.841796875,"f1":0.9065679112554119,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4375,"distances_sum":2401.7881609647575}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8972818847818858,"seconds":5.282461643218994e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.3515625,"distances_sum":2331.863561386607}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.841796875,"state":{"ssize":6,"bsize":6},"perf":{"precision":1.0,"recall":0.841796875,"f1":0.9065679112554119,"seconds":5.4836273193359375e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.4375,"distances_sum":2401.7881609647575}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9473843864468869,"seconds":5.498528480529785e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.8046875,"distances_sum":2701.1417871316444}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8525390625, conf: {"ssize":5,"bsize":6}, perf: {"precision":1.0,"recall":0.8525390625,"f1":0.9129807692307699,"seconds":5.3979456424713135e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.40625,"distances_sum":2430.8521663747874}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9540407509157515,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.78125,"distances_sum":2787.9879059263226}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.900390625, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.900390625,"f1":0.9428831585081588,"seconds":5.4389238357543945e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.671875,"distances_sum":2711.1936230082824}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.896484375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.896484375,"f1":0.9408768315018321,"seconds":5.684792995452881e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.7265625,"distances_sum":2681.502322598055}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9540407509157515,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.78125,"distances_sum":2787.9879059263226}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":5,"bsize":8},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9540407509157515,"seconds":5.736947059631348e-6,"exhaustive_search_seconds":1.2814998626708984e-6,"evaluations":8.78125,"distances_sum":2787.9879059263226}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.41796875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.41796875,"f1":null,"seconds":3.6079436540603638e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.1953125,"distances_sum":1016.1152465440282}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.41796875,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.41796875,"f1":null,"seconds":3.6079436540603638e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.1953125,"distances_sum":1016.1152465440282}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5771484375, conf: {"ssize":2,"bsize":3}, perf: {"precision":1.0,"recall":0.5771484375,"f1":0.7151293151293158,"seconds":4.326924681663513e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":6.859375,"distances_sum":1514.5901142842397}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8633418664668672,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.8046875,"distances_sum":2189.0034471772774}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":5,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8517040251415259,"seconds":4.7869980335235596e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.6796875,"distances_sum":2106.083989536147}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.677734375, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.677734375,"f1":0.7950377747252756,"seconds":4.498288035392761e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.3125,"distances_sum":1798.749573722409}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7080078125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7080078125,"f1":0.8153854825729834,"seconds":4.623085260391235e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.484375,"distances_sum":1972.6670038939417}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7763671875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7763671875,"f1":0.8633418664668672,"seconds":5.105510354042053e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.8046875,"distances_sum":2189.0034471772774}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9073468198468206,"seconds":5.42961061000824e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.25,"distances_sum":2454.3141409649966}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.787109375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.787109375,"f1":0.8700965700965708,"seconds":5.155801773071289e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.8046875,"distances_sum":2235.0269154009097}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8310546875, conf: {"ssize":6,"bsize":6}, perf: {"precision":1.0,"recall":0.8310546875,"f1":0.9000228937728944,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.1484375,"distances_sum":2452.5542558550915}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9538919413919419,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7265625,"distances_sum":2852.9112705547323}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8916015625, conf: {"ssize":3,"bsize":8}, perf: {"precision":1.0,"recall":0.8916015625,"f1":0.9374203921078926,"seconds":5.645677447319031e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.6484375,"distances_sum":2735.7646468759}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9353823260073266,"seconds":5.520880222320557e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.609375,"distances_sum":2714.0560171841685}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7939453125, conf: {"ssize":2,"bsize":5}, perf: {"precision":1.0,"recall":0.7939453125,"f1":0.8783112720612729,"seconds":5.198642611503601e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":7.921875,"distances_sum":2259.226198236473}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9169921875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9169921875,"f1":0.9530792124542127,"seconds":4.461035132408142e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7734375,"distances_sum":2814.212643673011}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9189453125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9538919413919419,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7265625,"distances_sum":2852.9112705547323}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9189453125,"state":{"ssize":2,"bsize":9},"perf":{"precision":1.0,"recall":0.9189453125,"f1":0.9538919413919419,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":8.7265625,"distances_sum":2852.9112705547323}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69140625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.69140625,"f1":0.8033896658896668,"seconds":4.53554093837738e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.6953125,"distances_sum":1918.6612685297387}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.69140625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.69140625,"f1":0.8033896658896668,"seconds":4.53554093837738e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.6953125,"distances_sum":1918.6612685297387}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9091796875, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9091796875,"f1":0.9473843864468869,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.75,"distances_sum":2816.930599634654}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9208364552114557,"seconds":5.805864930152893e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.578125,"distances_sum":2606.0704046067385}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7744140625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7744140625,"f1":0.8633985805860814,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.0,"distances_sum":2243.8533391475207}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.8096162518037526,"seconds":4.686415195465088e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":7.8984375,"distances_sum":1913.1342195910343}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9091796875,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9091796875,"f1":0.9473843864468869,"seconds":5.943700671195984e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.75,"distances_sum":2816.930599634654}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.919921875, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.919921875,"f1":0.9553800366300371,"seconds":5.844980478286743e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8203125,"distances_sum":2842.2172068234654}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":3,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.955328525641026,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8515625,"distances_sum":2848.121670271415}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.921875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.955328525641026,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8515625,"distances_sum":2848.121670271415}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.921875,"state":{"ssize":3,"bsize":9},"perf":{"precision":1.0,"recall":0.921875,"f1":0.955328525641026,"seconds":5.796551704406738e-6,"exhaustive_search_seconds":1.1883676052093506e-6,"evaluations":8.8515625,"distances_sum":2848.121670271415}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.697265625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.697265625,"f1":0.810015505328006,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.71875,"distances_sum":1977.4155218539313}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3994140625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3994140625,"f1":null,"seconds":3.604218363761902e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":6.2109375,"distances_sum":1062.9646868256998}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.697265625,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.697265625,"f1":0.810015505328006,"seconds":4.7031790018081665e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.71875,"distances_sum":1977.4155218539313}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7001953125, conf: {"ssize":3,"bsize":4}, perf: {"precision":1.0,"recall":0.7001953125,"f1":0.8070132992007999,"seconds":4.7460198402404785e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":7.8984375,"distances_sum":1967.2884175227528}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9052734375, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9052734375,"f1":0.9450008325008332,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.796875,"distances_sum":2799.840899083927}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8867559523809532,"seconds":5.5693089962005615e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.484375,"distances_sum":2361.1809066876267}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8095703125, conf: {"ssize":9,"bsize":5}, perf: {"precision":1.0,"recall":0.8095703125,"f1":0.8873345404595412,"seconds":5.4407864809036255e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.34375,"distances_sum":2341.263930815964}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9052734375,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.9052734375,"f1":0.9450008325008332,"seconds":6.07222318649292e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.796875,"distances_sum":2799.840899083927}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9404296875, conf: {"ssize":3,"bsize":11}, perf: {"precision":1.0,"recall":0.9404296875,"f1":0.9668383699633705,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.890625,"distances_sum":2940.084771713364}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9561641483516489,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.7734375,"distances_sum":2888.92711064792}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9590258699633702,"seconds":6.038695573806763e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.796875,"distances_sum":2901.655888382928}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506009615384621,"seconds":5.887821316719055e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.7578125,"distances_sum":2874.7991884492367}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9404296875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668383699633705,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.890625,"distances_sum":2940.084771713364}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9404296875,"state":{"ssize":3,"bsize":11},"perf":{"precision":1.0,"recall":0.9404296875,"f1":0.9668383699633705,"seconds":6.2193721532821655e-6,"exhaustive_search_seconds":1.5012919902801514e-6,"evaluations":8.890625,"distances_sum":2940.084771713364}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4462890625, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4462890625,"f1":null,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.7578125,"distances_sum":732.7454019086687}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.4462890625,"state":{"ssize":1,"bsize":2},"perf":{"precision":null,"recall":0.4462890625,"f1":null,"seconds":4.073604941368103e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.7578125,"distances_sum":732.7454019086687}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.859375, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.859375,"f1":0.9198546245421253,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.640625,"distances_sum":1625.997641876601}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.578125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.578125,"f1":null,"seconds":4.4852495193481445e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":7.53125,"distances_sum":910.8965498166503}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4560546875, conf: {"ssize":8,"bsize":2}, perf: {"precision":null,"recall":0.4560546875,"f1":null,"seconds":4.069879651069641e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":6.8359375,"distances_sum":764.5118655307654}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6640625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.6640625,"f1":0.7879899614274622,"seconds":4.889443516731262e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.0625,"distances_sum":1179.6291112881322}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.859375,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.859375,"f1":0.9198546245421253,"seconds":5.967915058135986e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.640625,"distances_sum":1625.997641876601}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8720703125, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.8720703125,"f1":0.9266483516483522,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.828125,"distances_sum":1621.361113568717}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8720703125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9266483516483522,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.828125,"distances_sum":1621.361113568717}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.8720703125,"state":{"ssize":2,"bsize":7},"perf":{"precision":1.0,"recall":0.8720703125,"f1":0.9266483516483522,"seconds":5.710870027542114e-6,"exhaustive_search_seconds":1.516193151473999e-6,"evaluations":8.828125,"distances_sum":1621.361113568717}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7607421875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7607421875,"f1":0.8568572052947062,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.3984375,"distances_sum":1435.6527448938225}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7607421875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7607421875,"f1":0.8568572052947062,"seconds":5.1818788051605225e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.3984375,"distances_sum":1435.6527448938225}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.888671875, conf: {"ssize":1,"bsize":7}, perf: {"precision":1.0,"recall":0.888671875,"f1":0.9357257326007331,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8125,"distances_sum":1816.8025610290579}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.888671875,"state":{"ssize":1,"bsize":7},"perf":{"precision":1.0,"recall":0.888671875,"f1":0.9357257326007331,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8125,"distances_sum":1816.8025610290579}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9461939102564109,"seconds":5.54695725440979e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8203125,"distances_sum":1853.802942191316}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9605711996337,"seconds":5.77978789806366e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.890625,"distances_sum":1925.4123792807359}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9540808150183157,"seconds":5.463138222694397e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.875,"distances_sum":1881.2047775177055}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":9}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9675995879120882,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":1966.8005948238324}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675995879120882,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":1966.8005948238324}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":7,"bsize":9},"perf":{"precision":1.0,"recall":0.94140625,"f1":0.9675995879120882,"seconds":5.770474672317505e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.8984375,"distances_sum":1966.8005948238324}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.759765625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.759765625,"f1":0.8568348318348328,"seconds":7.729977369308472e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7109375,"distances_sum":1555.6640556854675}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.69921875, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.69921875,"f1":0.8144584582084591,"seconds":4.984438419342041e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.4296875,"distances_sum":1389.630753713954}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.66015625, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.66015625,"f1":0.7821067821067827,"seconds":4.820525646209717e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.1875,"distances_sum":1310.028711786096}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.759765625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.759765625,"f1":0.8568348318348328,"seconds":7.729977369308472e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.7109375,"distances_sum":1555.6640556854675}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.76953125, conf: {"ssize":8,"bsize":5}, perf: {"precision":1.0,"recall":0.76953125,"f1":0.8641712454212463,"seconds":5.288049578666687e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.625,"distances_sum":1560.150532479255}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.826171875, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.826171875,"f1":0.8982517482517489,"seconds":5.39049506187439e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.6484375,"distances_sum":1727.6336905385908}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":2,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.9497627372627377,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.765625,"distances_sum":2022.520178951442}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9111328125,"state":{"ssize":2,"bsize":8},"perf":{"precision":1.0,"recall":0.9111328125,"f1":0.9497627372627377,"seconds":5.325302481651306e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.765625,"distances_sum":2022.520178951442}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94921875, conf: {"ssize":5,"bsize":11}, perf: {"precision":1.0,"recall":0.94921875,"f1":0.9718406593406597,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.921875,"distances_sum":2138.565432252033}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.916015625, conf: {"ssize":6,"bsize":8}, perf: {"precision":1.0,"recall":0.916015625,"f1":0.9527586996337003,"seconds":6.472691893577576e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.8515625,"distances_sum":2032.9792472621252}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94921875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718406593406597,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.921875,"distances_sum":2138.565432252033}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94921875,"state":{"ssize":5,"bsize":11},"perf":{"precision":1.0,"recall":0.94921875,"f1":0.9718406593406597,"seconds":5.900859832763672e-6,"exhaustive_search_seconds":1.2889504432678223e-6,"evaluations":8.921875,"distances_sum":2138.565432252033}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.181640625, conf: {"ssize":3,"bsize":1}, perf: {"precision":null,"recall":0.181640625,"f1":null,"seconds":3.0118972063064575e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.25,"distances_sum":385.21515279217806}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.181640625,"state":{"ssize":3,"bsize":1},"perf":{"precision":null,"recall":0.181640625,"f1":null,"seconds":3.0118972063064575e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.25,"distances_sum":385.21515279217806}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.1826171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.1826171875,"f1":null,"seconds":3.3080577850341797e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":5.25,"distances_sum":380.18285407622506}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.3671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.3671875,"f1":null,"seconds":4.045665264129639e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":6.2890625,"distances_sum":692.7373103332127}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6787109375, conf: {"ssize":9,"bsize":4}, perf: {"precision":1.0,"recall":0.6787109375,"f1":0.7988537504162513,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.234375,"distances_sum":1235.2604843564513}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6787109375,"state":{"ssize":9,"bsize":4},"perf":{"precision":1.0,"recall":0.6787109375,"f1":0.7988537504162513,"seconds":5.1371753215789795e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.234375,"distances_sum":1235.2604843564513}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.685546875, conf: {"ssize":13,"bsize":4}, perf: {"precision":1.0,"recall":0.685546875,"f1":0.8034678862803872,"seconds":4.945322871208191e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.28125,"distances_sum":1256.2004284335874}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.939039606227107,"seconds":7.3015689849853516e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6953125,"distances_sum":1799.3865909618219}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.763671875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.763671875,"f1":0.8574028402153412,"seconds":7.5511634349823e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.484375,"distances_sum":1419.7094341074992}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8408203125,"f1":0.9066397144522153,"seconds":1.3789162039756775e-5,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6484375,"distances_sum":1639.6990822349126}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.755859375, conf: {"ssize":4,"bsize":5}, perf: {"precision":null,"recall":0.755859375,"f1":null,"seconds":5.608424544334412e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.5,"distances_sum":1426.505697148457}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.939039606227107,"seconds":7.3015689849853516e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6953125,"distances_sum":1799.3865909618219}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.892578125,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.939039606227107,"seconds":7.3015689849853516e-6,"exhaustive_search_seconds":1.4137476682662964e-6,"evaluations":8.6953125,"distances_sum":1799.3865909618219}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.201171875, conf: {"ssize":2,"bsize":1}, perf: {"precision":null,"recall":0.201171875,"f1":null,"seconds":3.293156623840332e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":6.1796875,"distances_sum":445.83271725794117}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6650390625, conf: {"ssize":2,"bsize":4}, perf: {"precision":0.9907552083333333,"recall":0.6650390625,"f1":0.7849333825896334,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.5625,"distances_sum":1357.0196589882116}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.6650390625,"state":{"ssize":2,"bsize":4},"perf":{"precision":0.9907552083333333,"recall":0.6650390625,"f1":0.7849333825896334,"seconds":4.628673195838928e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":7.5625,"distances_sum":1357.0196589882116}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":0.9838355654761904,"recall":0.890625,"f1":0.9307849702380958,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":2083.0604265846264}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8408203125, conf: {"ssize":3,"bsize":6}, perf: {"precision":0.988578869047619,"recall":0.8408203125,"f1":0.9021139017232773,"seconds":5.321577191352844e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.484375,"distances_sum":1909.5426057636705}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":8},"perf":{"precision":0.9838355654761904,"recall":0.890625,"f1":0.9307849702380958,"seconds":5.548819899559021e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.75,"distances_sum":2083.0604265846264}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":1,"bsize":12}, perf: {"precision":0.9846540178571428,"recall":0.9384765625,"f1":0.9593392284798535,"seconds":6.573274731636047e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.921875,"distances_sum":2261.416693411883}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":7,"bsize":10}, perf: {"precision":0.9849330357142858,"recall":0.94140625,"f1":0.9611235119047623,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8828125,"distances_sum":2265.374421402368}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.904296875, conf: {"ssize":7,"bsize":8}, perf: {"precision":0.9875372023809526,"recall":0.904296875,"f1":0.9396468115218118,"seconds":5.472451448440552e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.765625,"distances_sum":2107.5092261788204}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.94140625,"state":{"ssize":7,"bsize":10},"perf":{"precision":0.9849330357142858,"recall":0.94140625,"f1":0.9611235119047623,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8828125,"distances_sum":2265.374421402368}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.94140625,"state":{"ssize":7,"bsize":10},"perf":{"precision":0.9849330357142858,"recall":0.94140625,"f1":0.9611235119047623,"seconds":5.6549906730651855e-6,"exhaustive_search_seconds":1.4379620552062988e-6,"evaluations":8.8828125,"distances_sum":2265.374421402368}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.6806640625, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.6806640625,"f1":0.7970132298257306,"seconds":4.6156346797943115e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.65625,"distances_sum":1482.643909136758}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":2,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8143101689976698,"seconds":4.567205905914307e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":7.71875,"distances_sum":1544.0579879653305}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7587890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7587890625,"f1":0.8516155719280727,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.0703125,"distances_sum":1739.0922202516454}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7587890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7587890625,"f1":0.8516155719280727,"seconds":5.146488547325134e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.0703125,"distances_sum":1739.0922202516454}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8955078125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.8955078125,"f1":0.9400042665667672,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.671875,"distances_sum":2180.97510157297}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8515625, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8515625,"f1":0.9133361430236436,"seconds":5.356967449188232e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.3359375,"distances_sum":1987.545935036847}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9280505952380956,"seconds":5.386769771575928e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.40625,"distances_sum":2116.9484740807884}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8544921875, conf: {"ssize":7,"bsize":6}, perf: {"precision":1.0,"recall":0.8544921875,"f1":0.916068827006328,"seconds":5.414709448814392e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.34375,"distances_sum":2011.504706285587}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8955078125,"state":{"ssize":4,"bsize":8},"perf":{"precision":1.0,"recall":0.8955078125,"f1":0.9400042665667672,"seconds":5.660578608512878e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.671875,"distances_sum":2180.97510157297}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":8,"bsize":8}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9600103021978026,"seconds":5.880370736122131e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7578125,"distances_sum":2307.8265389922944}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.951171875, conf: {"ssize":4,"bsize":12}, perf: {"precision":1.0,"recall":0.951171875,"f1":0.9728079212454217,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8828125,"distances_sum":2383.7043614847553}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.9551167582417586,"seconds":6.185844540596008e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.71875,"distances_sum":2274.7412118634115}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9072265625, conf: {"ssize":5,"bsize":8}, perf: {"precision":1.0,"recall":0.9072265625,"f1":0.9467719780219784,"seconds":5.7034194469451904e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.6484375,"distances_sum":2229.498122680743}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9130859375, conf: {"ssize":10,"bsize":9}, perf: {"precision":1.0,"recall":0.9130859375,"f1":0.9506212537462545,"seconds":5.420297384262085e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.7421875,"distances_sum":2229.5142473678793}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":10,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9670787545787547,"seconds":5.9138983488082886e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.78125,"distances_sum":2354.1683594944484}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9326171875, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.9326171875,"f1":0.9622424450549454,"seconds":5.688518285751343e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8203125,"distances_sum":2320.276308617718}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.951171875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9728079212454217,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8828125,"distances_sum":2383.7043614847553}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.951171875,"state":{"ssize":4,"bsize":12},"perf":{"precision":1.0,"recall":0.951171875,"f1":0.9728079212454217,"seconds":6.6980719566345215e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":8.8828125,"distances_sum":2383.7043614847553}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7802734375, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7802734375,"f1":0.8658048548673559,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.171875,"distances_sum":1885.078671173141}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.671875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.671875,"f1":0.7897945804195811,"seconds":5.06080687046051e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":7.671875,"distances_sum":1473.6983710229647}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8658048548673559,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.171875,"distances_sum":1885.078671173141}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8658048548673559,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.171875,"distances_sum":1885.078671173141}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.7802734375,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7802734375,"f1":0.8658048548673559,"seconds":5.2228569984436035e-6,"exhaustive_search_seconds":1.4062970876693726e-6,"evaluations":8.171875,"distances_sum":1885.078671173141}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.251953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.251953125,"f1":null,"seconds":2.993270754814148e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.2578125,"distances_sum":536.7266371816036}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.251953125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.251953125,"f1":null,"seconds":2.993270754814148e-6,"exhaustive_search_seconds":1.30385160446167e-6,"evaluations":6.2578125,"distances_sum":536.7266371816036}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.470703125, conf: {"ssize":1,"bsize":3}, perf: {"precision":1.0,"recall":0.470703125,"f1":0.625535575535576,"seconds":3.727152943611145e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":6.65625,"distances_sum":1049.0112778073074}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.642578125, conf: {"ssize":5,"bsize":4}, perf: {"precision":1.0,"recall":0.642578125,"f1":0.7690921925296935,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.8984375,"distances_sum":1422.5097295102646}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.642578125,"state":{"ssize":5,"bsize":4},"perf":{"precision":1.0,"recall":0.642578125,"f1":0.7690921925296935,"seconds":4.33996319770813e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":7.8984375,"distances_sum":1422.5097295102646}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8896484375, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8896484375,"f1":0.9360951548451554,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8515625,"distances_sum":2165.238239683409}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.86328125, conf: {"ssize":4,"bsize":7}, perf: {"precision":1.0,"recall":0.86328125,"f1":0.9197776182151189,"seconds":5.431473255157471e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.734375,"distances_sum":2094.8710224073816}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8896484375,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.8896484375,"f1":0.9360951548451554,"seconds":5.383044481277466e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8515625,"distances_sum":2165.238239683409}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9384765625, conf: {"ssize":6,"bsize":11}, perf: {"precision":1.0,"recall":0.9384765625,"f1":0.9660370879120882,"seconds":5.945563316345215e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.921875,"distances_sum":2352.4041265964333}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.955078125, conf: {"ssize":4,"bsize":11}, perf: {"precision":1.0,"recall":0.955078125,"f1":0.9755036630036636,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9453125,"distances_sum":2436.012744979201}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9345703125, conf: {"ssize":4,"bsize":10}, perf: {"precision":1.0,"recall":0.9345703125,"f1":0.9638793498168503,"seconds":5.938112735748291e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.90625,"distances_sum":2352.5215986569356}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.94140625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.94140625,"f1":0.9676739926739929,"seconds":5.759298801422119e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.84375,"distances_sum":2412.1865394103506}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9522035256410262,"seconds":5.971640348434448e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.8203125,"distances_sum":2286.4987845816318}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":7,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9450835622710626,"seconds":5.599111318588257e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.7578125,"distances_sum":2265.6091652927307}, best_list's length: 12, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.955078125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755036630036636,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9453125,"distances_sum":2436.012744979201}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.955078125,"state":{"ssize":4,"bsize":11},"perf":{"precision":1.0,"recall":0.955078125,"f1":0.9755036630036636,"seconds":6.22868537902832e-6,"exhaustive_search_seconds":1.391395926475525e-6,"evaluations":8.9453125,"distances_sum":2436.012744979201}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.65234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.65234375,"f1":0.7798977064602072,"seconds":4.43682074546814e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.4140625,"distances_sum":1502.353281052227}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.359375, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.359375,"f1":null,"seconds":3.255903720855713e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":5.28125,"distances_sum":748.6438507916432}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.65234375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.65234375,"f1":0.7798977064602072,"seconds":4.43682074546814e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.4140625,"distances_sum":1502.353281052227}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.796875, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.796875,"f1":0.8796588827838837,"seconds":5.532056093215942e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.046875,"distances_sum":1935.730603703223}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7314453125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7314453125,"f1":0.8358381202131211,"seconds":4.762783646583557e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.75,"distances_sum":1747.7516528733313}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.892578125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.892578125,"f1":0.9373454670329675,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.65625,"distances_sum":2228.691554781014}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7197265625, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7197265625,"f1":0.8274595196470204,"seconds":5.6978315114974976e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":7.7890625,"distances_sum":1713.2967151330936}, best_list's length: 9, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.892578125,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.892578125,"f1":0.9373454670329675,"seconds":5.3532421588897705e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.65625,"distances_sum":2228.691554781014}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.923828125, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.923828125,"f1":0.9572973901098907,"seconds":6.3907355070114136e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.75,"distances_sum":2424.5862811283637}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.927734375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.927734375,"f1":0.9596783424908429,"seconds":5.552545189857483e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7734375,"distances_sum":2412.1381093022865}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9671130952380956,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.859375,"distances_sum":2443.535212406451}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.908203125, conf: {"ssize":4,"bsize":8}, perf: {"precision":1.0,"recall":0.908203125,"f1":0.9479052197802201,"seconds":6.021931767463684e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.7109375,"distances_sum":2311.8145911496144}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9189453125, conf: {"ssize":8,"bsize":9}, perf: {"precision":1.0,"recall":0.9189453125,"f1":0.953674450549451,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.796875,"distances_sum":2354.879959060805}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9671130952380956,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.859375,"distances_sum":2443.535212406451}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":1,"bsize":10},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9671130952380956,"seconds":5.817040801048279e-6,"exhaustive_search_seconds":1.3988465070724487e-6,"evaluations":8.859375,"distances_sum":2443.535212406451}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.1533203125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1533203125,"f1":null,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":4.65625,"distances_sum":388.00203328463573}}, beam: 1, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.1533203125,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.1533203125,"f1":null,"seconds":3.069639205932617e-6,"exhaustive_search_seconds":1.3671815395355225e-6,"evaluations":4.65625,"distances_sum":388.00203328463573}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.78125, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.78125,"f1":0.8695720945720954,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3359375,"distances_sum":1810.173808183899}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.4013671875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.4013671875,"f1":null,"seconds":4.207715392112732e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.921875,"distances_sum":756.7881797418914}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.20703125, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.20703125,"f1":null,"seconds":3.6656856536865234e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":6.34375,"distances_sum":415.61343309192875}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.78125,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.78125,"f1":0.8695720945720954,"seconds":5.921348929405212e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.3359375,"distances_sum":1810.173808183899}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":4,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8978027181152188,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.640625,"distances_sum":2012.8758995351784}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8291015625,"state":{"ssize":4,"bsize":6},"perf":{"precision":1.0,"recall":0.8291015625,"f1":0.8978027181152188,"seconds":5.95487654209137e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.640625,"distances_sum":2012.8758995351784}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.87890625, conf: {"ssize":2,"bsize":7}, perf: {"precision":1.0,"recall":0.87890625,"f1":0.9300168581418587,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.75,"distances_sum":2127.702228790529}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9013671875, conf: {"ssize":6,"bsize":7}, perf: {"precision":1.0,"recall":0.9013671875,"f1":0.9409689269064276,"seconds":6.170943379402161e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8046875,"distances_sum":2252.725817630755}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":3,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.901463120213121,"seconds":5.990266799926758e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.671875,"distances_sum":1999.7236959987515}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8818359375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.8818359375,"f1":0.931541895604396,"seconds":6.165355443954468e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.7890625,"distances_sum":2149.789525487447}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9267578125, conf: {"ssize":9,"bsize":8}, perf: {"precision":1.0,"recall":0.9267578125,"f1":0.9585050366300369,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2364.6843565692825}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9267578125,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585050366300369,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2364.6843565692825}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9267578125,"state":{"ssize":9,"bsize":8},"perf":{"precision":1.0,"recall":0.9267578125,"f1":0.9585050366300369,"seconds":6.359070539474487e-6,"exhaustive_search_seconds":1.477077603340149e-6,"evaluations":8.8828125,"distances_sum":2364.6843565692825}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.654296875, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.654296875,"f1":0.776356456043957,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.6640625,"distances_sum":1698.0606866120663}, best_list's length: 2, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.654296875,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.654296875,"f1":0.776356456043957,"seconds":5.174428224563599e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.6640625,"distances_sum":1698.0606866120663}}, beam: 3, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7529296875, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.7529296875,"f1":0.8501727439227448,"seconds":5.550682544708252e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.046875,"distances_sum":1941.4793299731216}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.88671875, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.88671875,"f1":0.9334249084249088,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.703125,"distances_sum":2390.6835987372024}, best_list's length: 6, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.88671875,"state":{"ssize":5,"bsize":7},"perf":{"precision":1.0,"recall":0.88671875,"f1":0.9334249084249088,"seconds":6.197020411491394e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.703125,"distances_sum":2390.6835987372024}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.943359375, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.943359375,"f1":0.9684180402930407,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.84375,"distances_sum":2632.890522842772}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.943359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684180402930407,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.84375,"distances_sum":2632.890522842772}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.943359375,"state":{"ssize":4,"bsize":9},"perf":{"precision":1.0,"recall":0.943359375,"f1":0.9684180402930407,"seconds":6.407499313354492e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.84375,"distances_sum":2632.890522842772}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.419921875, conf: {"ssize":1,"bsize":2}, perf: {"precision":null,"recall":0.419921875,"f1":null,"seconds":4.280358552932739e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":6.46875,"distances_sum":879.8925072841537}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7021484375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.7021484375,"f1":0.8113459457209465,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.7109375,"distances_sum":1617.8869506843394}, best_list's length: 3, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7021484375,"state":{"ssize":1,"bsize":4},"perf":{"precision":1.0,"recall":0.7021484375,"f1":0.8113459457209465,"seconds":5.3085386753082275e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.7109375,"distances_sum":1617.8869506843394}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8486328125, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8486328125,"f1":0.9120712620712628,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.3984375,"distances_sum":2096.5842476175167}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8776156135531141,"seconds":5.850568413734436e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.0546875,"distances_sum":1904.860550059476}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.703125, conf: {"ssize":4,"bsize":4}, perf: {"precision":1.0,"recall":0.703125,"f1":0.8149125180375189,"seconds":5.228444933891296e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":7.75,"distances_sum":1583.998001122943}, best_list's length: 7, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.8486328125,"state":{"ssize":1,"bsize":6},"perf":{"precision":1.0,"recall":0.8486328125,"f1":0.9120712620712628,"seconds":6.243586540222168e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.3984375,"distances_sum":2096.5842476175167}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.931640625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.931640625,"f1":0.9621508699633703,"seconds":6.7409127950668335e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8671875,"distances_sum":2389.0576987792815}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9296875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.9296875,"f1":0.9598099816849818,"seconds":6.556510925292969e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.78125,"distances_sum":2411.59434895413}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.939453125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.939453125,"f1":0.9665006868131873,"seconds":6.547197699546814e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8125,"distances_sum":2452.4961726983174}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9111328125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9111328125,"f1":0.948912545787546,"seconds":6.5267086029052734e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.6953125,"distances_sum":2308.2558964790605}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.939453125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665006868131873,"seconds":6.547197699546814e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8125,"distances_sum":2452.4961726983174}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.939453125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.939453125,"f1":0.9665006868131873,"seconds":6.547197699546814e-6,"exhaustive_search_seconds":1.6242265701293945e-6,"evaluations":8.8125,"distances_sum":2452.4961726983174}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.21484375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.21484375,"f1":null,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":5.765625,"distances_sum":483.2037708518597}}, beam: 2, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.21484375,"state":{"ssize":1,"bsize":1},"perf":{"precision":null,"recall":0.21484375,"f1":null,"seconds":3.643333911895752e-6,"exhaustive_search_seconds":1.5776604413986206e-6,"evaluations":5.765625,"distances_sum":483.2037708518597}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7890625, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.7890625,"f1":0.8728942932067941,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6875,"distances_sum":1634.4272715132017}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.404296875, conf: {"ssize":4,"bsize":2}, perf: {"precision":null,"recall":0.404296875,"f1":null,"seconds":4.056841135025024e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.2578125,"distances_sum":781.4894703410384}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.5517578125, conf: {"ssize":5,"bsize":3}, perf: {"precision":null,"recall":0.5517578125,"f1":null,"seconds":4.630535840988159e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":6.921875,"distances_sum":1114.315895334448}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.7890625,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.7890625,"f1":0.8728942932067941,"seconds":6.068497896194458e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.6875,"distances_sum":1634.4272715132017}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9140625, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.9140625,"f1":0.9503408050283053,"seconds":6.530433893203735e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9296875,"distances_sum":2011.485862809989}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.953125, conf: {"ssize":5,"bsize":9}, perf: {"precision":1.0,"recall":0.953125,"f1":0.9743303571428574,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9765625,"distances_sum":2140.560557762063}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8173828125, conf: {"ssize":4,"bsize":5}, perf: {"precision":1.0,"recall":0.8173828125,"f1":0.8929034507159516,"seconds":6.040558218955994e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.828125,"distances_sum":1705.8512075294684}, best_list's length: 10, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.953125,"state":{"ssize":5,"bsize":9},"perf":{"precision":1.0,"recall":0.953125,"f1":0.9743303571428574,"seconds":6.377696990966797e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.9765625,"distances_sum":2140.560557762063}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.95703125, conf: {"ssize":7,"bsize":12}, perf: {"precision":1.0,"recall":0.95703125,"f1":0.97654532967033,"seconds":6.647780537605286e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":8.96875,"distances_sum":2166.129040489274}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9677734375, conf: {"ssize":2,"bsize":13}, perf: {"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285717,"seconds":6.848946213722229e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":9.0,"distances_sum":2205.305151684044}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9677734375,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285717,"seconds":6.848946213722229e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":9.0,"distances_sum":2205.305151684044}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9677734375,"state":{"ssize":2,"bsize":13},"perf":{"precision":1.0,"recall":0.9677734375,"f1":0.9823660714285717,"seconds":6.848946213722229e-6,"exhaustive_search_seconds":1.648440957069397e-6,"evaluations":9.0,"distances_sum":2205.305151684044}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2880859375, conf: {"ssize":5,"bsize":2}, perf: {"precision":null,"recall":0.2880859375,"f1":null,"seconds":3.416091203689575e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":4.5078125,"distances_sum":689.9323119547186}, best_list's length: 4, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.2880859375,"state":{"ssize":5,"bsize":2},"perf":{"precision":null,"recall":0.2880859375,"f1":null,"seconds":3.416091203689575e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":4.5078125,"distances_sum":689.9323119547186}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7646484375, conf: {"ssize":3,"bsize":5}, perf: {"precision":1.0,"recall":0.7646484375,"f1":0.8564055735930745,"seconds":5.194917321205139e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.4296875,"distances_sum":1750.7880896200998}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.765625, conf: {"ssize":6,"bsize":5}, perf: {"precision":1.0,"recall":0.765625,"f1":0.8557791167166175,"seconds":5.306676030158997e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.3984375,"distances_sum":1790.7410921137784}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.615234375, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.615234375,"f1":0.7456737706737715,"seconds":4.5280903577804565e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":7.2734375,"distances_sum":1393.4106091829867}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2998046875, conf: {"ssize":2,"bsize":2}, perf: {"precision":null,"recall":0.2998046875,"f1":null,"seconds":3.1106173992156982e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":4.6015625,"distances_sum":727.4263572826766}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.486328125, conf: {"ssize":4,"bsize":3}, perf: {"precision":null,"recall":0.486328125,"f1":null,"seconds":3.984197974205017e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":6.4375,"distances_sum":1188.187745902427}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.765625,"state":{"ssize":6,"bsize":5},"perf":{"precision":1.0,"recall":0.765625,"f1":0.8557791167166175,"seconds":5.306676030158997e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.3984375,"distances_sum":1790.7410921137784}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8291015625, conf: {"ssize":8,"bsize":6}, perf: {"precision":1.0,"recall":0.8291015625,"f1":0.8981804653679663,"seconds":5.2638351917266846e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.5625,"distances_sum":1994.1920359073886}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.7763671875, conf: {"ssize":10,"bsize":5}, perf: {"precision":1.0,"recall":0.7763671875,"f1":0.8627433330558338,"seconds":5.422160029411316e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.4375,"distances_sum":1792.0096031883475}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8359375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8359375,"f1":0.9036375083250091,"seconds":5.384907126426697e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.625,"distances_sum":2012.1206059042418}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":7,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9197318306693314,"seconds":5.166977643966675e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.6171875,"distances_sum":2134.458069215282}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8642578125, conf: {"ssize":5,"bsize":7}, perf: {"precision":1.0,"recall":0.8642578125,"f1":0.9196491008991015,"seconds":5.3551048040390015e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.5703125,"distances_sum":2130.1820418347606}, best_list's length: 11, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.890625, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.890625,"f1":0.9362408424908433,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.625,"distances_sum":2253.215294870301}, best_list's length: 12, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.865234375, conf: {"ssize":3,"bsize":7}, perf: {"precision":1.0,"recall":0.865234375,"f1":0.9199586871461878,"seconds":5.6140124797821045e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.65625,"distances_sum":2132.9550885164726}, best_list's length: 13, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.890625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9362408424908433,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.625,"distances_sum":2253.215294870301}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.890625,"state":{"ssize":1,"bsize":8},"perf":{"precision":1.0,"recall":0.890625,"f1":0.9362408424908433,"seconds":5.766749382019043e-6,"exhaustive_search_seconds":1.4156103134155273e-6,"evaluations":8.625,"distances_sum":2253.215294870301}}, n: 9
==== BEGIN Opt. BeamSearch, expected recall: 0.99, n: 9
  == Begin Opt. BeamSearch iteration: 1, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.79296875, conf: {"ssize":1,"bsize":5}, perf: {"precision":1.0,"recall":0.79296875,"f1":0.8763491716616723,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.4140625,"distances_sum":1777.6746317476748}, best_list's length: 2, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2265625, conf: {"ssize":5,"bsize":1}, perf: {"precision":null,"recall":0.2265625,"f1":null,"seconds":3.2242387533187866e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.703125,"distances_sum":456.5248457488347}, best_list's length: 3, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.2265625, conf: {"ssize":4,"bsize":1}, perf: {"precision":null,"recall":0.2265625,"f1":null,"seconds":3.3527612686157227e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":6.6015625,"distances_sum":449.44380555961294}, best_list's length: 4, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.70703125, conf: {"ssize":1,"bsize":4}, perf: {"precision":1.0,"recall":0.70703125,"f1":0.8205429986679995,"seconds":4.751607775688171e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":7.8203125,"distances_sum":1499.2594772749983}, best_list's length: 5, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.79296875,"state":{"ssize":1,"bsize":5},"perf":{"precision":1.0,"recall":0.79296875,"f1":0.8763491716616723,"seconds":5.036592483520508e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.4140625,"distances_sum":1777.6746317476748}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 2, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9033203125, conf: {"ssize":1,"bsize":8}, perf: {"precision":1.0,"recall":0.9033203125,"f1":0.9450778388278395,"seconds":5.735084414482117e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.8671875,"distances_sum":2080.1492165229797}, best_list's length: 5, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9150390625, conf: {"ssize":1,"bsize":9}, perf: {"precision":1.0,"recall":0.9150390625,"f1":0.9503522519147525,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.84375,"distances_sum":2183.6026951578665}, best_list's length: 7, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.8427734375, conf: {"ssize":1,"bsize":6}, perf: {"precision":1.0,"recall":0.8427734375,"f1":0.9102735805860814,"seconds":5.502253770828247e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.75,"distances_sum":1879.3414240019229}, best_list's length: 8, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9150390625,"state":{"ssize":1,"bsize":9},"perf":{"precision":1.0,"recall":0.9150390625,"f1":0.9503522519147525,"seconds":5.798414349555969e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.84375,"distances_sum":2183.6026951578665}}, beam: 4, n: 9
  == Begin Opt. BeamSearch iteration: 3, expected recall: 0.99, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9599609375, conf: {"ssize":2,"bsize":11}, perf: {"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.984375,"distances_sum":2307.645731609438}, best_list's length: 6, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9521484375, conf: {"ssize":2,"bsize":9}, perf: {"precision":1.0,"recall":0.9521484375,"f1":0.9735519688644692,"seconds":5.496665835380554e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.921875,"distances_sum":2282.7604360332225}, best_list's length: 8, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.9453125, conf: {"ssize":1,"bsize":11}, perf: {"precision":1.0,"recall":0.9453125,"f1":0.9697916666666672,"seconds":6.116926670074463e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.96875,"distances_sum":2257.61957588691}, best_list's length: 9, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.921875, conf: {"ssize":4,"bsize":9}, perf: {"precision":1.0,"recall":0.921875,"f1":0.9552197802197804,"seconds":6.0927122831344604e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.9375,"distances_sum":2167.068862659619}, best_list's length: 10, n: 9
    ** Opt. BeamSearch. A new best conf was found> score: 0.947265625, conf: {"ssize":1,"bsize":10}, perf: {"precision":1.0,"recall":0.947265625,"f1":0.9712053571428576,"seconds":5.7443976402282715e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.96875,"distances_sum":2255.502608360618}, best_list's length: 11, n: 9
  == End Opt. BeamSearch. Iteration finished; {"score":0.9599609375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.984375,"distances_sum":2307.645731609438}}, beam: 4, n: 9
==== END Opt. BeamSearch. Finished, best: {"score":0.9599609375,"state":{"ssize":2,"bsize":11},"perf":{"precision":1.0,"recall":0.9599609375,"f1":0.9781250000000001,"seconds":6.224960088729858e-6,"exhaustive_search_seconds":1.5310943126678467e-6,"evaluations":8.984375,"distances_sum":2307.645731609438}}, n: 9
inertia(cfft.distances) = 18.254774336774336
inertia(cdnet.distances) = 22.75856318788423
inertia(crand.distances) = 21.20203883124965
Test Summary:                                      |
Clustering with KCenters with an approximate index | No tests
===> k=3
===> (k=3, initial=fft, maxiters=0); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=3); macro-recall: 0.8977777777777778
===> (k=3, initial=fft, maxiters=10); macro-recall: 0.9466666666666667
===> (k=3, initial=dnet, maxiters=0); macro-recall: 0.9422222222222222
===> (k=3, initial=dnet, maxiters=3); macro-recall: 0.8955555555555555
===> (k=3, initial=dnet, maxiters=10); macro-recall: 0.9
===> (k=3, initial=rand, maxiters=0); macro-recall: 0.8933333333333334
===> (k=3, initial=rand, maxiters=3); macro-recall: 0.8911111111111111
===> k=5
===> (k=3, initial=rand, maxiters=10); macro-recall: 0.8977777777777778
===> (k=5, initial=fft, maxiters=0); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=5, initial=fft, maxiters=10); macro-recall: 0.9422222222222222
===> (k=5, initial=dnet, maxiters=0); macro-recall: 0.931111111111111
===> (k=5, initial=dnet, maxiters=3); macro-recall: 0.9133333333333334
===> (k=5, initial=dnet, maxiters=10); macro-recall: 0.9377777777777778
===> (k=5, initial=rand, maxiters=0); macro-recall: 0.931111111111111
===> (k=5, initial=rand, maxiters=3); macro-recall: 0.8733333333333334
===> (k=5, initial=rand, maxiters=10); macro-recall: 0.8866666666666667
===> k=7
===> (k=7, initial=fft, maxiters=0); macro-recall: 0.9222222222222222
===> (k=7, initial=fft, maxiters=3); macro-recall: 0.9422222222222222
===> (k=7, initial=fft, maxiters=10); macro-recall: 0.9177777777777778
===> (k=7, initial=dnet, maxiters=0); macro-recall: 0.92
===> (k=7, initial=dnet, maxiters=3); macro-recall: 0.9266666666666667
===> (k=7, initial=dnet, maxiters=10); macro-recall: 0.8688888888888888
===> (k=7, initial=rand, maxiters=0); macro-recall: 0.9155555555555557
===> (k=7, initial=rand, maxiters=3); macro-recall: 0.9266666666666666
===> (k=7, initial=rand, maxiters=10); macro-recall: 0.9177777777777778
===> k=11
===> (k=11, initial=fft, maxiters=0); macro-recall: 0.8933333333333334
===> (k=11, initial=fft, maxiters=3); macro-recall: 0.8911111111111111
===> (k=11, initial=fft, maxiters=10); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=0); macro-recall: 0.9088888888888889
===> (k=11, initial=dnet, maxiters=3); macro-recall: 0.9155555555555556
===> (k=11, initial=dnet, maxiters=10); macro-recall: 0.9155555555555556
===> (k=11, initial=rand, maxiters=0); macro-recall: 0.9155555555555557
===> (k=11, initial=rand, maxiters=3); macro-recall: 0.9088888888888889
===> (k=11, initial=rand, maxiters=10); macro-recall: 0.8955555555555555
Test Summary:                             | Pass  Total
One class classifier with DeloneHistogram |  144    144
[ Info: ("XXXXXX===== rocchio like>", (KCenters.gaussian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.laplacian_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.cauchy_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.sigmoid_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.tanh_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX===== rocchio like>", (KCenters.direct_kernel, SimilaritySearch.l2_distance))
[ Info: ("XXXXXX==== clustering>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
nc.class_map = [3, 1, 3, 2, 3, 1, 3, 2, 1, 3, 3, 2, 1, 2, 3, 2, 3, 3, 3, 2, 3]
[ Info: ("XXXXXX==== split_entropy>", (KCenters.relu_kernel, SimilaritySearch.l2_distance))
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 6]]
** centroid: 1, normalized-entropy: 0.9852281360342514, Tuple{Int64,Int64}[(2, 8), (3, 6)]
*** center 2: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 8: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 9: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 9, normalized-entropy: 0.24988229283318547, Tuple{Int64,Int64}[(2, 23), (3, 1)]
*** center 10: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 11: selecting labels [2, 3] (freq >= 1) [from [0, 1, 8]]
** centroid: 11, normalized-entropy: 0.5032583347756457, Tuple{Int64,Int64}[(2, 1), (3, 8)]
*** center 12: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
finished with 14 centroids; started with 12
nc.class_map = [2, 3, 1, 3, 2, 3, 1, 2, 1, 2, 3, 2, 3, 1]
acc = 0.92
*** starting iteration: 1; err: [Inf, 0.3361333357055663] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3361333357055663, 0.18859831816466685] ***
*** starting iteration: 2; err: [Inf, 0.3361333357055663, 0.18859831816466685] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655] ***
*** starting iteration: 3; err: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655, 0.15718431026553276] ***
*** starting iteration: 4; err: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655, 0.15718431026553276] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655, 0.15718431026553276, 0.15576164277504467] ***
*** starting iteration: 5; err: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655, 0.15718431026553276, 0.15576164277504467] ***
*** computing centroids ***
*** computing 12 nearest references ***
*** new score with 12 references: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655, 0.15718431026553276, 0.15576164277504467, 0.1555322523161241] ***
*** finished computation of 12 references, err: [Inf, 0.3361333357055663, 0.18859831816466685, 0.16392725481480655, 0.15718431026553276, 0.15576164277504467, 0.1555322523161241] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [1] (freq >= 1) [from [8, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 21]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
*** center 8: selecting labels [2, 3] (freq >= 1) [from [0, 5, 1]]
** centroid: 8, normalized-entropy: 0.6500224216483541, Tuple{Int64,Int64}[(2, 5), (3, 1)]
*** center 9: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
*** center 10: selecting labels [2, 3] (freq >= 1) [from [0, 3, 15]]
** centroid: 10, normalized-entropy: 0.6500224216483541, Tuple{Int64,Int64}[(2, 3), (3, 15)]
*** center 11: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 12: selecting labels [2] (freq >= 1) [from [0, 18, 0]]
finished with 14 centroids; started with 12
acc = 0.9133333333333333
Test Summary:   | Pass  Total
NearestCentroid |   10     10
iteration 1 finished
*** starting iteration: 1; err: [Inf, 0.332024039385111] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.332024039385111, 0.22705749504072917] ***
*** starting iteration: 2; err: [Inf, 0.332024039385111, 0.22705749504072917] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.332024039385111, 0.22705749504072917, 0.18849661020868586] ***
*** starting iteration: 3; err: [Inf, 0.332024039385111, 0.22705749504072917, 0.18849661020868586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.332024039385111, 0.22705749504072917, 0.18849661020868586, 0.18380136085248863] ***
*** finished computation of 7 references, err: [Inf, 0.332024039385111, 0.22705749504072917, 0.18849661020868586, 0.18380136085248863] ***
*** center 1: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 19]]
** centroid: 2, normalized-entropy: 0.45371633918694493, Tuple{Int64,Int64}[(2, 2), (3, 19)]
*** center 3: selecting labels [1] (freq >= 1) [from [6, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 14, 9]]
** centroid: 6, normalized-entropy: 0.9656361333706099, Tuple{Int64,Int64}[(2, 14), (3, 9)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3888350377064874] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3888350377064874, 0.2318008808010796] ***
*** starting iteration: 2; err: [Inf, 0.3888350377064874, 0.2318008808010796] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3888350377064874, 0.2318008808010796, 0.20988824818777882] ***
*** starting iteration: 3; err: [Inf, 0.3888350377064874, 0.2318008808010796, 0.20988824818777882] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3888350377064874, 0.2318008808010796, 0.20988824818777882, 0.19401406683741806] ***
*** finished computation of 7 references, err: [Inf, 0.3888350377064874, 0.2318008808010796, 0.20988824818777882, 0.19401406683741806] ***
*** center 1: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 15]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 10, 1]]
** centroid: 4, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 10), (3, 1)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 5, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 18), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 3, 18]]
** centroid: 7, normalized-entropy: 0.5916727785823274, Tuple{Int64,Int64}[(2, 3), (3, 18)]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.2675071250990191] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2675071250990191, 0.19492131547018887] ***
*** starting iteration: 2; err: [Inf, 0.2675071250990191, 0.19492131547018887] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2675071250990191, 0.19492131547018887, 0.1774722009280075] ***
*** starting iteration: 3; err: [Inf, 0.2675071250990191, 0.19492131547018887, 0.1774722009280075] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2675071250990191, 0.19492131547018887, 0.1774722009280075, 0.17236435238443082] ***
*** finished computation of 7 references, err: [Inf, 0.2675071250990191, 0.19492131547018887, 0.1774722009280075, 0.17236435238443082] ***
*** center 1: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 3, normalized-entropy: 0.3095434291503252, Tuple{Int64,Int64}[(2, 17), (3, 1)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 10]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 15, 2]]
** centroid: 6, normalized-entropy: 0.5225593745369407, Tuple{Int64,Int64}[(2, 15), (3, 2)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 3]]
** centroid: 7, normalized-entropy: 0.954434002924965, Tuple{Int64,Int64}[(2, 5), (3, 3)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.960100006707511] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.960100006707511, 0.8137894898926402] ***
*** finished computation of 3 references, err: [Inf, 0.960100006707511, 0.8137894898926402] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 35]]
** centroid: 1, normalized-entropy: 0.9973487979180449, Tuple{Int64,Int64}[(2, 31), (3, 35)]
*** center 2: selecting labels [1] (freq >= 2) [from [19, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [14, 1, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3117999912261655] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3117999912261655, 0.6189834292473371] ***
*** finished computation of 3 references, err: [Inf, 1.3117999912261655, 0.6189834292473371] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 7, 34]]
** centroid: 1, normalized-entropy: 0.6593758812786991, Tuple{Int64,Int64}[(2, 7), (3, 34)]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 24, 1]]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9794999994458443] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9794999994458443, 0.5604787752730056] ***
*** finished computation of 3 references, err: [Inf, 0.9794999994458443, 0.5604787752730056] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 12, 24]]
** centroid: 1, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 12), (3, 24)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 25, 6]]
** centroid: 3, normalized-entropy: 0.708835673332196, Tuple{Int64,Int64}[(2, 25), (3, 6)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.7307000119569667] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7307000119569667, 0.8594348162154737] ***
*** starting iteration: 2; err: [Inf, 1.7307000119569667, 0.8594348162154737] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7307000119569667, 0.8594348162154737, 0.824525812085696] ***
*** starting iteration: 3; err: [Inf, 1.7307000119569667, 0.8594348162154737, 0.824525812085696] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.7307000119569667, 0.8594348162154737, 0.824525812085696, 0.8206970505902456] ***
*** finished computation of 3 references, err: [Inf, 1.7307000119569667, 0.8594348162154737, 0.824525812085696, 0.8206970505902456] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 31, 35]]
** centroid: 1, normalized-entropy: 0.9973487979180449, Tuple{Int64,Int64}[(2, 31), (3, 35)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [21, 1, 0]]
** centroid: 2, normalized-entropy: 0.2667649878030262, Tuple{Int64,Int64}[(1, 21), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.1093000090649734] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1093000090649734, 1.1255301553911847] ***
*** starting iteration: 2; err: [Inf, 2.1093000090649734, 1.1255301553911847] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1093000090649734, 1.1255301553911847, 1.0881772851087395] ***
*** starting iteration: 3; err: [Inf, 2.1093000090649734, 1.1255301553911847, 1.0881772851087395] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.1093000090649734, 1.1255301553911847, 1.0881772851087395, 1.0856521591825539] ***
*** finished computation of 3 references, err: [Inf, 2.1093000090649734, 1.1255301553911847, 1.0881772851087395, 1.0856521591825539] ***
*** center 1: selecting labels [1, 2] (freq >= 1) [from [11, 3, 0]]
** centroid: 1, normalized-entropy: 0.7495952572594798, Tuple{Int64,Int64}[(1, 11), (2, 3)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 28, 35]]
** centroid: 2, normalized-entropy: 0.9910760598382222, Tuple{Int64,Int64}[(2, 28), (3, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 6.367300010359809] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 6.367300010359809, 2.282405260902787] ***
*** starting iteration: 2; err: [Inf, 6.367300010359809, 2.282405260902787] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 6.367300010359809, 2.282405260902787, 0.7541607162707901] ***
*** starting iteration: 3; err: [Inf, 6.367300010359809, 2.282405260902787, 0.7541607162707901] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 6.367300010359809, 2.282405260902787, 0.7541607162707901, 0.5486837456330043] ***
*** finished computation of 3 references, err: [Inf, 6.367300010359809, 2.282405260902787, 0.7541607162707901, 0.5486837456330043] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 15, 29]]
** centroid: 2, normalized-entropy: 0.9256859869821296, Tuple{Int64,Int64}[(2, 15), (3, 29)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 22, 1]]
** centroid: 3, normalized-entropy: 0.2580186686648155, Tuple{Int64,Int64}[(2, 22), (3, 1)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.6141077286071431] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6141077286071431, 0.28197810896328085] ***
*** starting iteration: 2; err: [Inf, 0.6141077286071431, 0.28197810896328085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6141077286071431, 0.28197810896328085, 0.277541231534291] ***
*** starting iteration: 3; err: [Inf, 0.6141077286071431, 0.28197810896328085, 0.277541231534291] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6141077286071431, 0.28197810896328085, 0.277541231534291, 0.277541231534291] ***
*** finished computation of 7 references, err: [Inf, 0.6141077286071431, 0.28197810896328085, 0.277541231534291, 0.277541231534291] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 28, 6]]
** centroid: 1, normalized-entropy: 0.6722948170756378, Tuple{Int64,Int64}[(2, 28), (3, 6)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 4, 29]]
** centroid: 2, normalized-entropy: 0.5328350630342235, Tuple{Int64,Int64}[(2, 4), (3, 29)]
*** center 3: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.7034105863087483] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.7034105863087483, 0.6171392373738829] ***
*** starting iteration: 2; err: [Inf, 1.7034105863087483, 0.6171392373738829] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.7034105863087483, 0.6171392373738829, 0.45520700048726537] ***
*** starting iteration: 3; err: [Inf, 1.7034105863087483, 0.6171392373738829, 0.45520700048726537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.7034105863087483, 0.6171392373738829, 0.45520700048726537, 0.3654323631074128] ***
*** finished computation of 7 references, err: [Inf, 1.7034105863087483, 0.6171392373738829, 0.45520700048726537, 0.3654323631074128] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 8, 34]]
** centroid: 1, normalized-entropy: 0.7024665512903904, Tuple{Int64,Int64}[(2, 8), (3, 34)]
*** center 2: selecting labels [1] (freq >= 1) [from [4, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [5, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 23, 1]]
** centroid: 5, normalized-entropy: 0.24988229283318547, Tuple{Int64,Int64}[(2, 23), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.47254934454293734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.47254934454293734, 0.20475020081787168] ***
*** starting iteration: 2; err: [Inf, 0.47254934454293734, 0.20475020081787168] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.47254934454293734, 0.20475020081787168, 0.20405582580100665] ***
*** finished computation of 7 references, err: [Inf, 0.47254934454293734, 0.20475020081787168, 0.20405582580100665] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 19, 10]]
** centroid: 1, normalized-entropy: 0.9293636260137188, Tuple{Int64,Int64}[(2, 19), (3, 10)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 18, 1]]
** centroid: 5, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 18), (3, 1)]
*** center 6: selecting labels [1] (freq >= 1) [from [1, 0, 0]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6098000059863743] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6098000059863743, 0.3314172991926274] ***
*** starting iteration: 2; err: [Inf, 0.6098000059863743, 0.3314172991926274] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6098000059863743, 0.3314172991926274, 0.29058662480794734] ***
*** starting iteration: 3; err: [Inf, 0.6098000059863743, 0.3314172991926274, 0.29058662480794734] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6098000059863743, 0.3314172991926274, 0.29058662480794734, 0.2813468419891095] ***
*** finished computation of 7 references, err: [Inf, 0.6098000059863743, 0.3314172991926274, 0.29058662480794734, 0.2813468419891095] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 15, 5]]
** centroid: 1, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 15), (3, 5)]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 9, 5]]
** centroid: 2, normalized-entropy: 0.940285958670631, Tuple{Int64,Int64}[(2, 9), (3, 5)]
*** center 3: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [9, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 25]]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6441000016789993] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6441000016789993, 0.4040983899809662] ***
*** starting iteration: 2; err: [Inf, 0.6441000016789993, 0.4040983899809662] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6441000016789993, 0.4040983899809662, 0.28112775825323266] ***
*** starting iteration: 3; err: [Inf, 0.6441000016789993, 0.4040983899809662, 0.28112775825323266] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6441000016789993, 0.4040983899809662, 0.28112775825323266, 0.2636651733907501] ***
*** finished computation of 7 references, err: [Inf, 0.6441000016789993, 0.4040983899809662, 0.28112775825323266, 0.2636651733907501] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 2, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 1), (3, 18)]
*** center 3: selecting labels [1] (freq >= 1) [from [10, 0, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 23, 5]]
** centroid: 7, normalized-entropy: 0.6769418697808861, Tuple{Int64,Int64}[(2, 23), (3, 5)]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5731999996148218] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5731999996148218, 0.3651814577954519] ***
*** starting iteration: 2; err: [Inf, 0.5731999996148218, 0.3651814577954519] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5731999996148218, 0.3651814577954519, 0.3078759372512731] ***
*** starting iteration: 3; err: [Inf, 0.5731999996148218, 0.3651814577954519, 0.3078759372512731] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5731999996148218, 0.3651814577954519, 0.3078759372512731, 0.30080309150498236] ***
*** finished computation of 7 references, err: [Inf, 0.5731999996148218, 0.3651814577954519, 0.3078759372512731, 0.30080309150498236] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 18, 10]]
** centroid: 3, normalized-entropy: 0.940285958670631, Tuple{Int64,Int64}[(2, 18), (3, 10)]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 3, 0]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 2, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.1406331082411645] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1406331082411645, 0.5398596999240082] ***
*** finished computation of 3 references, err: [Inf, 1.1406331082411645, 0.5398596999240082] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 32, 35]]
** centroid: 2, normalized-entropy: 0.9985532860835362, Tuple{Int64,Int64}[(2, 32), (3, 35)]
*** center 3: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1829536661561566] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1829536661561566, 0.7787498034248714] ***
*** finished computation of 3 references, err: [Inf, 1.1829536661561566, 0.7787498034248714] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 30, 35]]
** centroid: 1, normalized-entropy: 0.9957274520849256, Tuple{Int64,Int64}[(2, 30), (3, 35)]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [27, 1, 0]]
** centroid: 2, normalized-entropy: 0.2222848306856879, Tuple{Int64,Int64}[(1, 27), (2, 1)]
*** center 3: selecting labels [1] (freq >= 1) [from [7, 0, 0]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 2.4065088320715375] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.4065088320715375, 0.6369868826807787] ***
*** finished computation of 3 references, err: [Inf, 2.4065088320715375, 0.6369868826807787] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [1, 2] (freq >= 1) [from [19, 1, 0]]
** centroid: 2, normalized-entropy: 0.2863969571159561, Tuple{Int64,Int64}[(1, 19), (2, 1)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 36, 30]]
** centroid: 3, normalized-entropy: 0.9940302114769566, Tuple{Int64,Int64}[(2, 36), (3, 30)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.185100006395776] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352] ***
*** starting iteration: 2; err: [Inf, 1.185100006395776, 0.4047455797994352] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895] ***
*** starting iteration: 3; err: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604] ***
*** starting iteration: 4; err: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295] ***
*** starting iteration: 5; err: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846] ***
*** starting iteration: 6; err: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846, 0.24231214628428052] ***
*** starting iteration: 7; err: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846, 0.24231214628428052] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846, 0.24231214628428052, 0.24118275220085406] ***
*** starting iteration: 8; err: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846, 0.24231214628428052, 0.24118275220085406] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846, 0.24231214628428052, 0.24118275220085406, 0.24064000588207482] ***
*** finished computation of 7 references, err: [Inf, 1.185100006395776, 0.4047455797994352, 0.26972655805833895, 0.260933318725604, 0.2533258715471295, 0.24490995122863846, 0.24231214628428052, 0.24118275220085406, 0.24064000588207482] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 16, 9]]
** centroid: 1, normalized-entropy: 0.9426831892554921, Tuple{Int64,Int64}[(2, 16), (3, 9)]
*** center 2: selecting labels [1] (freq >= 2) [from [7, 0, 0]]
*** center 3: selecting labels [1] (freq >= 2) [from [6, 0, 0]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 5: selecting labels [1] (freq >= 2) [from [20, 0, 0]]
*** center 6: selecting labels [2] (freq >= 2) [from [0, 16, 0]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 23]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5757000069791635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5757000069791635, 0.30493950293487077] ***
*** starting iteration: 2; err: [Inf, 0.5757000069791635, 0.30493950293487077] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994] ***
*** starting iteration: 3; err: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994, 0.28067339928765805] ***
*** starting iteration: 4; err: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994, 0.28067339928765805] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994, 0.28067339928765805, 0.27262142445135934] ***
*** starting iteration: 5; err: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994, 0.28067339928765805, 0.27262142445135934] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994, 0.28067339928765805, 0.27262142445135934, 0.27235810437992025] ***
*** finished computation of 7 references, err: [Inf, 0.5757000069791635, 0.30493950293487077, 0.28781114897102994, 0.28067339928765805, 0.27262142445135934, 0.27235810437992025] ***
*** center 1: selecting labels [1] (freq >= 2) [from [10, 0, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 15, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 17]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 7, 17]]
** centroid: 6, normalized-entropy: 0.8708644692353648, Tuple{Int64,Int64}[(2, 7), (3, 17)]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.43630000268897773] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964] ***
*** starting iteration: 2; err: [Inf, 0.43630000268897773, 0.2726104014635964] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024] ***
*** starting iteration: 3; err: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105] ***
*** starting iteration: 4; err: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253] ***
*** starting iteration: 5; err: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285] ***
*** starting iteration: 6; err: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285, 0.22780444181705928] ***
*** starting iteration: 7; err: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285, 0.22780444181705928] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285, 0.22780444181705928, 0.22464041400320933] ***
*** starting iteration: 8; err: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285, 0.22780444181705928, 0.22464041400320933] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285, 0.22780444181705928, 0.22464041400320933, 0.22438814542783989] ***
*** finished computation of 7 references, err: [Inf, 0.43630000268897773, 0.2726104014635964, 0.24850759835536024, 0.24221020427085105, 0.2366953329472253, 0.232701527515285, 0.22780444181705928, 0.22464041400320933, 0.22438814542783989] ***
*** center 1: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 2: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 18, 9]]
** centroid: 3, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 18), (3, 9)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 7]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 14, 1]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 13]]
*** center 7: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 1.1439999865124495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1439999865124495, 0.49233588510565196] ***
*** finished computation of 3 references, err: [Inf, 1.1439999865124495, 0.49233588510565196] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 5, 33]]
** centroid: 1, normalized-entropy: 0.5617526078313283, Tuple{Int64,Int64}[(2, 5), (3, 33)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 2]]
** centroid: 3, normalized-entropy: 0.36205125173399805, Tuple{Int64,Int64}[(2, 27), (3, 2)]
finished with 5 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.3948000035440415] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.3948000035440415, 0.5677877693882878] ***
*** finished computation of 3 references, err: [Inf, 1.3948000035440415, 0.5677877693882878] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 11]]
** centroid: 3, normalized-entropy: 0.8296071030882032, Tuple{Int64,Int64}[(2, 31), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0838000155804064] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0838000155804064, 0.58084429744668] ***
*** finished computation of 3 references, err: [Inf, 1.0838000155804064, 0.58084429744668] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 36, 14]]
** centroid: 1, normalized-entropy: 0.8554508105601307, Tuple{Int64,Int64}[(2, 36), (3, 14)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 1, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 16]]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8366924493624286] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8366924493624286, 0.3756956848153296] ***
*** starting iteration: 2; err: [Inf, 0.8366924493624286, 0.3756956848153296] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8366924493624286, 0.3756956848153296, 0.34579174310553074] ***
*** starting iteration: 3; err: [Inf, 0.8366924493624286, 0.3756956848153296, 0.34579174310553074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8366924493624286, 0.3756956848153296, 0.34579174310553074, 0.34004334494062916] ***
*** finished computation of 3 references, err: [Inf, 0.8366924493624286, 0.3756956848153296, 0.34579174310553074, 0.34004334494062916] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 26]]
** centroid: 2, normalized-entropy: 0.3712323266408756, Tuple{Int64,Int64}[(2, 2), (3, 26)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 9]]
** centroid: 3, normalized-entropy: 0.7793498372920851, Tuple{Int64,Int64}[(2, 30), (3, 9)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8866081103087572] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844] ***
*** starting iteration: 2; err: [Inf, 0.8866081103087572, 0.4230384114961844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393] ***
*** starting iteration: 3; err: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472] ***
*** finished computation of 3 references, err: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 3, 30]]
** centroid: 1, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 3), (3, 30)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 28, 5]]
** centroid: 3, normalized-entropy: 0.6136190195993708, Tuple{Int64,Int64}[(2, 28), (3, 5)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0877570258646179] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0877570258646179, 0.36786634341670427] ***
*** starting iteration: 2; err: [Inf, 1.0877570258646179, 0.36786634341670427] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0877570258646179, 0.36786634341670427, 0.36325720769221725] ***
*** starting iteration: 3; err: [Inf, 1.0877570258646179, 0.36786634341670427, 0.36325720769221725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0877570258646179, 0.36786634341670427, 0.36325720769221725, 0.36325720769221725] ***
*** finished computation of 3 references, err: [Inf, 1.0877570258646179, 0.36786634341670427, 0.36325720769221725, 0.36325720769221725] ***
*** center 1: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 2, 20]]
** centroid: 2, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 2), (3, 20)]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 35, 10]]
** centroid: 3, normalized-entropy: 0.7642045065086204, Tuple{Int64,Int64}[(2, 35), (3, 10)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.1439999865124495] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.1439999865124495, 0.49233588510565196] ***
*** finished computation of 3 references, err: [Inf, 1.1439999865124495, 0.49233588510565196] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 5, 33]]
** centroid: 1, normalized-entropy: 0.5617526078313283, Tuple{Int64,Int64}[(2, 5), (3, 33)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 27, 2]]
** centroid: 3, normalized-entropy: 0.36205125173399805, Tuple{Int64,Int64}[(2, 27), (3, 2)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.5710000055699782] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.5710000055699782, 0.5677877693882878] ***
*** finished computation of 3 references, err: [Inf, 1.5710000055699782, 0.5677877693882878] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 24]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 31, 11]]
** centroid: 3, normalized-entropy: 0.8296071030882032, Tuple{Int64,Int64}[(2, 31), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4972999976296961] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4972999976296961, 0.5344329655934584] ***
*** finished computation of 3 references, err: [Inf, 1.4972999976296961, 0.5344329655934584] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 19]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 37, 11]]
** centroid: 3, normalized-entropy: 0.7765557854444601, Tuple{Int64,Int64}[(2, 37), (3, 11)]
finished with 4 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.9646404247394258] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9646404247394258, 0.38055723860228013] ***
*** starting iteration: 2; err: [Inf, 0.9646404247394258, 0.38055723860228013] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074] ***
*** starting iteration: 3; err: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074, 0.34004334494062916] ***
*** starting iteration: 4; err: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074, 0.34004334494062916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046] ***
*** starting iteration: 5; err: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046, 0.3379028466906114] ***
*** finished computation of 3 references, err: [Inf, 0.9646404247394258, 0.38055723860228013, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046, 0.3379028466906114] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 29, 8]]
** centroid: 1, normalized-entropy: 0.7531979910695015, Tuple{Int64,Int64}[(2, 29), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 3, 27]]
** centroid: 3, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 3), (3, 27)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8866081103087572] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844] ***
*** starting iteration: 2; err: [Inf, 0.8866081103087572, 0.4230384114961844] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393] ***
*** starting iteration: 3; err: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472] ***
*** starting iteration: 4; err: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472, 0.3781926493184254] ***
*** starting iteration: 5; err: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472, 0.3781926493184254] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472, 0.3781926493184254, 0.37601706875490026] ***
*** starting iteration: 6; err: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472, 0.3781926493184254, 0.37601706875490026] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472, 0.3781926493184254, 0.37601706875490026, 0.3762132817382502] ***
*** finished computation of 3 references, err: [Inf, 0.8866081103087572, 0.4230384114961844, 0.40359877694767393, 0.3934048243882472, 0.3781926493184254, 0.37601706875490026, 0.3762132817382502] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 29]]
** centroid: 1, normalized-entropy: 0.2108423003185322, Tuple{Int64,Int64}[(2, 1), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 30, 6]]
** centroid: 3, normalized-entropy: 0.6500224216483541, Tuple{Int64,Int64}[(2, 30), (3, 6)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.83316824521453] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.83316824521453, 0.36434817896176214] ***
*** starting iteration: 2; err: [Inf, 0.83316824521453, 0.36434817896176214] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.83316824521453, 0.36434817896176214, 0.36346953505257884] ***
*** finished computation of 3 references, err: [Inf, 0.83316824521453, 0.36434817896176214, 0.36346953505257884] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 37, 11]]
** centroid: 1, normalized-entropy: 0.7765557854444601, Tuple{Int64,Int64}[(2, 37), (3, 11)]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 3: selecting labels [1] (freq >= 1) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.8866645395506619] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866645395506619, 0.3869529945244741] ***
*** starting iteration: 2; err: [Inf, 0.8866645395506619, 0.3869529945244741] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074] ***
*** starting iteration: 3; err: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074, 0.34004334494062916] ***
*** starting iteration: 4; err: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074, 0.34004334494062916] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046] ***
*** starting iteration: 5; err: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046, 0.3379028466906114] ***
*** finished computation of 3 references, err: [Inf, 0.8866645395506619, 0.3869529945244741, 0.34579174310553074, 0.34004334494062916, 0.33858805193911046, 0.3379028466906114] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 29, 8]]
** centroid: 1, normalized-entropy: 0.7531979910695015, Tuple{Int64,Int64}[(2, 29), (3, 8)]
*** center 2: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 27]]
** centroid: 3, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 3), (3, 27)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.841443993709673] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.841443993709673, 0.4030367134758856] ***
*** starting iteration: 2; err: [Inf, 0.841443993709673, 0.4030367134758856] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926] ***
*** starting iteration: 3; err: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926, 0.3786027499601677] ***
*** starting iteration: 4; err: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926, 0.3786027499601677] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926, 0.3786027499601677, 0.3760897209381713] ***
*** starting iteration: 5; err: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926, 0.3786027499601677, 0.3760897209381713] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926, 0.3786027499601677, 0.3760897209381713, 0.3760897209381713] ***
*** finished computation of 3 references, err: [Inf, 0.841443993709673, 0.4030367134758856, 0.38767967791282926, 0.3786027499601677, 0.3760897209381713, 0.3760897209381713] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 30, 8]]
** centroid: 1, normalized-entropy: 0.7424875695421234, Tuple{Int64,Int64}[(2, 30), (3, 8)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 27]]
*** center 3: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.0903899992296722] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0903899992296722, 0.36988741366783956] ***
*** starting iteration: 2; err: [Inf, 1.0903899992296722, 0.36988741366783956] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0903899992296722, 0.36988741366783956, 0.36325720769221725] ***
*** starting iteration: 3; err: [Inf, 1.0903899992296722, 0.36988741366783956, 0.36325720769221725] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.0903899992296722, 0.36988741366783956, 0.36325720769221725, 0.36325720769221725] ***
*** finished computation of 3 references, err: [Inf, 1.0903899992296722, 0.36988741366783956, 0.36325720769221725, 0.36325720769221725] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 20]]
** centroid: 2, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 2), (3, 20)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 10]]
** centroid: 3, normalized-entropy: 0.7642045065086204, Tuple{Int64,Int64}[(2, 35), (3, 10)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 0.44960849515835277] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.44960849515835277, 0.18681882514397483] ***
*** finished computation of 7 references, err: [Inf, 0.44960849515835277, 0.18681882514397483] ***
*** center 1: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 21, 2]]
** centroid: 3, normalized-entropy: 0.42622865699814483, Tuple{Int64,Int64}[(2, 21), (3, 2)]
*** center 4: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 26]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 11, 4]]
** centroid: 7, normalized-entropy: 0.8366407419411671, Tuple{Int64,Int64}[(2, 11), (3, 4)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3625384227581202] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3625384227581202, 0.18458457033198092] ***
*** finished computation of 7 references, err: [Inf, 0.3625384227581202, 0.18458457033198092] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 18]]
** centroid: 1, normalized-entropy: 0.2974722489192896, Tuple{Int64,Int64}[(2, 1), (3, 18)]
*** center 2: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 17, 1]]
** centroid: 3, normalized-entropy: 0.3095434291503252, Tuple{Int64,Int64}[(2, 17), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 13, 8]]
** centroid: 4, normalized-entropy: 0.9587118829771317, Tuple{Int64,Int64}[(2, 13), (3, 8)]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4676328593858138] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4676328593858138, 0.1963561996728869] ***
*** finished computation of 7 references, err: [Inf, 0.4676328593858138, 0.1963561996728869] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 16, 9]]
** centroid: 1, normalized-entropy: 0.9426831892554921, Tuple{Int64,Int64}[(2, 16), (3, 9)]
*** center 2: selecting labels [1] (freq >= 1) [from [30, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 9]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 5, 11]]
** centroid: 5, normalized-entropy: 0.8960382325345574, Tuple{Int64,Int64}[(2, 5), (3, 11)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 9, 1]]
** centroid: 6, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 9), (3, 1)]
*** center 7: selecting labels [1] (freq >= 1) [from [3, 0, 0]]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3561621211460912] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3561621211460912, 0.18040171960829504] ***
*** starting iteration: 2; err: [Inf, 0.3561621211460912, 0.18040171960829504] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3561621211460912, 0.18040171960829504, 0.16881502343919214] ***
*** starting iteration: 3; err: [Inf, 0.3561621211460912, 0.18040171960829504, 0.16881502343919214] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3561621211460912, 0.18040171960829504, 0.16881502343919214, 0.16714799929833987] ***
*** starting iteration: 4; err: [Inf, 0.3561621211460912, 0.18040171960829504, 0.16881502343919214, 0.16714799929833987] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3561621211460912, 0.18040171960829504, 0.16881502343919214, 0.16714799929833987, 0.16698078138002864] ***
*** finished computation of 7 references, err: [Inf, 0.3561621211460912, 0.18040171960829504, 0.16881502343919214, 0.16714799929833987, 0.16698078138002864] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 2: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 13, 7]]
** centroid: 5, normalized-entropy: 0.9340680553754911, Tuple{Int64,Int64}[(2, 13), (3, 7)]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 14, 2]]
** centroid: 6, normalized-entropy: 0.5435644431995963, Tuple{Int64,Int64}[(2, 14), (3, 2)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3421978521917407] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3421978521917407, 0.21081869811263554] ***
*** starting iteration: 2; err: [Inf, 0.3421978521917407, 0.21081869811263554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3421978521917407, 0.21081869811263554, 0.19882777252948222] ***
*** starting iteration: 3; err: [Inf, 0.3421978521917407, 0.21081869811263554, 0.19882777252948222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3421978521917407, 0.21081869811263554, 0.19882777252948222, 0.19564937833181492] ***
*** starting iteration: 4; err: [Inf, 0.3421978521917407, 0.21081869811263554, 0.19882777252948222, 0.19564937833181492] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3421978521917407, 0.21081869811263554, 0.19882777252948222, 0.19564937833181492, 0.1948126385456744] ***
*** finished computation of 7 references, err: [Inf, 0.3421978521917407, 0.21081869811263554, 0.19882777252948222, 0.19564937833181492, 0.1948126385456744] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 4, 9]]
** centroid: 3, normalized-entropy: 0.8904916402194913, Tuple{Int64,Int64}[(2, 4), (3, 9)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 14]]
** centroid: 4, normalized-entropy: 0.3533593350214213, Tuple{Int64,Int64}[(2, 1), (3, 14)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 20, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.3871797068827648] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012] ***
*** starting iteration: 2; err: [Inf, 0.3871797068827648, 0.19731200319912012] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651] ***
*** starting iteration: 3; err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748] ***
*** starting iteration: 4; err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002] ***
*** starting iteration: 5; err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021] ***
*** starting iteration: 6; err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865] ***
*** starting iteration: 7; err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865, 0.15874693810381635] ***
*** starting iteration: 8; err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865, 0.15874693810381635] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865, 0.15874693810381635, 0.15757361397250755] ***
*** starting iteration: 9; err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865, 0.15874693810381635, 0.15757361397250755] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865, 0.15874693810381635, 0.15757361397250755, 0.1572856736458542] ***
*** finished computation of 7 references, err: [Inf, 0.3871797068827648, 0.19731200319912012, 0.1773213552098651, 0.17305396474604748, 0.17104660696777002, 0.1691669896373021, 0.16376435539749865, 0.15874693810381635, 0.15757361397250755, 0.1572856736458542] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 8]]
*** center 3: selecting labels [1] (freq >= 1) [from [15, 0, 0]]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 5: selecting labels [1] (freq >= 1) [from [18, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 6, 3]]
** centroid: 6, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 6), (3, 3)]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 17, 7]]
** centroid: 7, normalized-entropy: 0.8708644692353648, Tuple{Int64,Int64}[(2, 17), (3, 7)]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5049000062880512] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5049000062880512, 0.28312065603259085] ***
*** finished computation of 7 references, err: [Inf, 0.5049000062880512, 0.28312065603259085] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 1, 29]]
** centroid: 1, normalized-entropy: 0.2108423003185322, Tuple{Int64,Int64}[(2, 1), (3, 29)]
*** center 2: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 26, 3]]
** centroid: 6, normalized-entropy: 0.47983202361612853, Tuple{Int64,Int64}[(2, 26), (3, 3)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.524999999469526] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.524999999469526, 0.2716175537786911] ***
*** finished computation of 7 references, err: [Inf, 0.524999999469526, 0.2716175537786911] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 8]]
** centroid: 1, normalized-entropy: 0.8631205685666311, Tuple{Int64,Int64}[(2, 20), (3, 8)]
*** center 2: selecting labels [1] (freq >= 1) [from [23, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 1, 16]]
** centroid: 5, normalized-entropy: 0.32275695889739825, Tuple{Int64,Int64}[(2, 1), (3, 16)]
*** center 6: selecting labels [1] (freq >= 1) [from [11, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5986000118844761] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5986000118844761, 0.2823922144472568] ***
*** finished computation of 7 references, err: [Inf, 0.5986000118844761, 0.2823922144472568] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 23, 4]]
** centroid: 1, normalized-entropy: 0.6051865766334207, Tuple{Int64,Int64}[(2, 23), (3, 4)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 14]]
** centroid: 4, normalized-entropy: 0.5435644431995963, Tuple{Int64,Int64}[(2, 2), (3, 14)]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 10, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 2, 5]]
** centroid: 7, normalized-entropy: 0.8631205685666311, Tuple{Int64,Int64}[(2, 2), (3, 5)]
finished with 10 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6467000052038548] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6467000052038548, 0.2732821472684397] ***
*** finished computation of 7 references, err: [Inf, 0.6467000052038548, 0.2732821472684397] ***
*** center 1: selecting labels [3] (freq >= 1) [from [0, 0, 23]]
*** center 2: selecting labels [1] (freq >= 1) [from [21, 0, 0]]
*** center 3: selecting labels [2] (freq >= 1) [from [0, 8, 0]]
*** center 4: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 5: selecting labels [3] (freq >= 1) [from [0, 0, 1]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 24, 9]]
** centroid: 6, normalized-entropy: 0.8453509366224364, Tuple{Int64,Int64}[(2, 24), (3, 9)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 2]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5338999998230607] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5338999998230607, 0.2789102082163778] ***
*** finished computation of 7 references, err: [Inf, 0.5338999998230607, 0.2789102082163778] ***
*** center 1: selecting labels [1] (freq >= 1) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 11, 1]]
** centroid: 3, normalized-entropy: 0.4138168503036336, Tuple{Int64,Int64}[(2, 11), (3, 1)]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 1, 16]]
** centroid: 4, normalized-entropy: 0.32275695889739825, Tuple{Int64,Int64}[(2, 1), (3, 16)]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 7, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 12, 7]]
** centroid: 6, normalized-entropy: 0.9494520153879484, Tuple{Int64,Int64}[(2, 12), (3, 7)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 4]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5405000045931303] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5405000045931303, 0.24810174916801528] ***
*** finished computation of 7 references, err: [Inf, 0.5405000045931303, 0.24810174916801528] ***
*** center 1: selecting labels [2, 3] (freq >= 1) [from [0, 20, 5]]
** centroid: 1, normalized-entropy: 0.7219280948873623, Tuple{Int64,Int64}[(2, 20), (3, 5)]
*** center 2: selecting labels [1] (freq >= 1) [from [20, 0, 0]]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 6]]
*** center 4: selecting labels [2] (freq >= 1) [from [0, 13, 0]]
*** center 5: selecting labels [1] (freq >= 1) [from [13, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 1) [from [0, 4, 5]]
** centroid: 6, normalized-entropy: 0.9910760598382222, Tuple{Int64,Int64}[(2, 4), (3, 5)]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 14]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 16)
[0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 17
iteration 2 finished
*** starting iteration: 1; err: [Inf, 2.6845000050887533] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6845000050887533, 0.4909435718072919] ***
*** starting iteration: 2; err: [Inf, 2.6845000050887533, 0.4909435718072919] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6845000050887533, 0.4909435718072919, 0.4895147824922637] ***
*** starting iteration: 3; err: [Inf, 2.6845000050887533, 0.4909435718072919, 0.4895147824922637] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 2.6845000050887533, 0.4909435718072919, 0.4895147824922637, 0.48866452093550433] ***
*** finished computation of 3 references, err: [Inf, 2.6845000050887533, 0.4909435718072919, 0.4895147824922637, 0.48866452093550433] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 31, 9]]
** centroid: 1, normalized-entropy: 0.7691928290130138, Tuple{Int64,Int64}[(2, 31), (3, 9)]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 26]]
*** center 3: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4472000063005168] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4472000063005168, 0.5677877693882878] ***
*** starting iteration: 2; err: [Inf, 1.4472000063005168, 0.5677877693882878] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4472000063005168, 0.5677877693882878, 0.5477656655436528] ***
*** starting iteration: 3; err: [Inf, 1.4472000063005168, 0.5677877693882878, 0.5477656655436528] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4472000063005168, 0.5677877693882878, 0.5477656655436528, 0.541507313975872] ***
*** starting iteration: 4; err: [Inf, 1.4472000063005168, 0.5677877693882878, 0.5477656655436528, 0.541507313975872] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4472000063005168, 0.5677877693882878, 0.5477656655436528, 0.541507313975872, 0.5405141357402735] ***
*** finished computation of 3 references, err: [Inf, 1.4472000063005168, 0.5677877693882878, 0.5477656655436528, 0.541507313975872, 0.5405141357402735] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 1, 27]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 30, 8]]
** centroid: 3, normalized-entropy: 0.7424875695421234, Tuple{Int64,Int64}[(2, 30), (3, 8)]
finished with 3 centroids; started with 3
*** starting iteration: 1; err: [Inf, 1.4993999979752335] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4993999979752335, 0.5344329655934584] ***
*** starting iteration: 2; err: [Inf, 1.4993999979752335, 0.5344329655934584] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835] ***
*** starting iteration: 3; err: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835, 0.516627395966645] ***
*** starting iteration: 4; err: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835, 0.516627395966645] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835, 0.516627395966645, 0.5137711119643954] ***
*** starting iteration: 5; err: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835, 0.516627395966645, 0.5137711119643954] ***
*** computing centroids ***
*** computing 3 nearest references ***
*** new score with 3 references: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835, 0.516627395966645, 0.5137711119643954, 0.5137711119643954] ***
*** finished computation of 3 references, err: [Inf, 1.4993999979752335, 0.5344329655934584, 0.5187351309019835, 0.516627395966645, 0.5137711119643954, 0.5137711119643954] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [2, 3] (freq >= 2) [from [0, 2, 20]]
** centroid: 2, normalized-entropy: 0.43949698692151346, Tuple{Int64,Int64}[(2, 2), (3, 20)]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 35, 10]]
** centroid: 3, normalized-entropy: 0.7642045065086204, Tuple{Int64,Int64}[(2, 35), (3, 10)]
finished with 3 centroids; started with 3
generating 4 configurations using top 4 configurations, starting with 17)
[0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 17
iteration 3 finished
generating 4 configurations using top 4 configurations, starting with 17)
[0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 18
iteration 4 finished
*** starting iteration: 1; err: [Inf, 0.59050000471537] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.59050000471537, 0.24277181296566586] ***
*** starting iteration: 2; err: [Inf, 0.59050000471537, 0.24277181296566586] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.59050000471537, 0.24277181296566586, 0.23823526070891668] ***
*** starting iteration: 3; err: [Inf, 0.59050000471537, 0.24277181296566586, 0.23823526070891668] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.59050000471537, 0.24277181296566586, 0.23823526070891668, 0.23481758139925188] ***
*** finished computation of 7 references, err: [Inf, 0.59050000471537, 0.24277181296566586, 0.23823526070891668, 0.23481758139925188] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 23, 0]]
*** center 2: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 3: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
*** center 4: selecting labels [2] (freq >= 2) [from [0, 9, 0]]
*** center 5: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 18]]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 14]]
finished with 7 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.4914999990133671] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4914999990133671, 0.2789102082163778] ***
*** starting iteration: 2; err: [Inf, 0.4914999990133671, 0.2789102082163778] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4914999990133671, 0.2789102082163778, 0.26103885873606286] ***
*** starting iteration: 3; err: [Inf, 0.4914999990133671, 0.2789102082163778, 0.26103885873606286] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.4914999990133671, 0.2789102082163778, 0.26103885873606286, 0.25562757366539246] ***
*** finished computation of 7 references, err: [Inf, 0.4914999990133671, 0.2789102082163778, 0.26103885873606286, 0.25562757366539246] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 9]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 13, 1]]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 0, 15]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 12, 7]]
** centroid: 6, normalized-entropy: 0.9494520153879484, Tuple{Int64,Int64}[(2, 12), (3, 7)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 3]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.6808000006578524] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6808000006578524, 0.24275751394928513] ***
*** starting iteration: 2; err: [Inf, 0.6808000006578524, 0.24275751394928513] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6808000006578524, 0.24275751394928513, 0.22744087542297456] ***
*** starting iteration: 3; err: [Inf, 0.6808000006578524, 0.24275751394928513, 0.22744087542297456] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.6808000006578524, 0.24275751394928513, 0.22744087542297456, 0.22233423809767555] ***
*** finished computation of 7 references, err: [Inf, 0.6808000006578524, 0.24275751394928513, 0.22744087542297456, 0.22233423809767555] ***
*** center 1: selecting labels [2] (freq >= 2) [from [0, 14, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [1] (freq >= 2) [from [16, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 16, 5]]
** centroid: 4, normalized-entropy: 0.7918583525674836, Tuple{Int64,Int64}[(2, 16), (3, 5)]
*** center 5: selecting labels [1] (freq >= 2) [from [17, 0, 0]]
*** center 6: selecting labels [2, 3] (freq >= 2) [from [0, 7, 5]]
** centroid: 6, normalized-entropy: 0.9798687566511527, Tuple{Int64,Int64}[(2, 7), (3, 5)]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 12]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 18)
[0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 18
iteration 5 finished
generating 4 configurations using top 4 configurations, starting with 18)
[0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 19
iteration 6 finished
*** starting iteration: 1; err: [Inf, 0.2721530929094405] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2721530929094405, 0.19878404938570085] ***
*** starting iteration: 2; err: [Inf, 0.2721530929094405, 0.19878404938570085] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2721530929094405, 0.19878404938570085, 0.18565606235226895] ***
*** starting iteration: 3; err: [Inf, 0.2721530929094405, 0.19878404938570085, 0.18565606235226895] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.2721530929094405, 0.19878404938570085, 0.18565606235226895, 0.18344450348278624] ***
*** finished computation of 7 references, err: [Inf, 0.2721530929094405, 0.19878404938570085, 0.18565606235226895, 0.18344450348278624] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 5, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [19, 0, 0]]
*** center 3: selecting labels [1] (freq >= 1) [from [14, 0, 0]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 7, 10]]
** centroid: 4, normalized-entropy: 0.9774178175281716, Tuple{Int64,Int64}[(2, 7), (3, 10)]
*** center 5: selecting labels [2, 3] (freq >= 1) [from [0, 4, 13]]
** centroid: 5, normalized-entropy: 0.787126586201269, Tuple{Int64,Int64}[(2, 4), (3, 13)]
*** center 6: selecting labels [3] (freq >= 1) [from [0, 0, 12]]
*** center 7: selecting labels [2] (freq >= 1) [from [0, 16, 0]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.7157734919341087] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7157734919341087, 0.3401727261572459] ***
*** starting iteration: 2; err: [Inf, 0.7157734919341087, 0.3401727261572459] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7157734919341087, 0.3401727261572459, 0.24627791782452857] ***
*** starting iteration: 3; err: [Inf, 0.7157734919341087, 0.3401727261572459, 0.24627791782452857] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.7157734919341087, 0.3401727261572459, 0.24627791782452857, 0.19305790269039128] ***
*** finished computation of 7 references, err: [Inf, 0.7157734919341087, 0.3401727261572459, 0.24627791782452857, 0.19305790269039128] ***
*** center 1: selecting labels [2] (freq >= 1) [from [0, 6, 0]]
*** center 2: selecting labels [2, 3] (freq >= 1) [from [0, 23, 5]]
** centroid: 2, normalized-entropy: 0.6769418697808861, Tuple{Int64,Int64}[(2, 23), (3, 5)]
*** center 3: selecting labels [3] (freq >= 1) [from [0, 0, 7]]
*** center 4: selecting labels [2, 3] (freq >= 1) [from [0, 2, 18]]
** centroid: 4, normalized-entropy: 0.46899559358928133, Tuple{Int64,Int64}[(2, 2), (3, 18)]
*** center 5: selecting labels [1] (freq >= 1) [from [22, 0, 0]]
*** center 6: selecting labels [1] (freq >= 1) [from [12, 0, 0]]
*** center 7: selecting labels [3] (freq >= 1) [from [0, 0, 5]]
finished with 9 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.5978907240397926] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5978907240397926, 0.26939252291507637] ***
*** starting iteration: 2; err: [Inf, 0.5978907240397926, 0.26939252291507637] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5978907240397926, 0.26939252291507637, 0.2279861565478157] ***
*** starting iteration: 3; err: [Inf, 0.5978907240397926, 0.26939252291507637, 0.2279861565478157] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.5978907240397926, 0.26939252291507637, 0.2279861565478157, 0.2063261898683423] ***
*** finished computation of 7 references, err: [Inf, 0.5978907240397926, 0.26939252291507637, 0.2279861565478157, 0.2063261898683423] ***
*** center 1: selecting labels [1] (freq >= 1) [from [17, 0, 0]]
*** center 2: selecting labels [1] (freq >= 1) [from [16, 0, 0]]
*** center 3: selecting labels [2, 3] (freq >= 1) [from [0, 17, 9]]
** centroid: 3, normalized-entropy: 0.9305861291319927, Tuple{Int64,Int64}[(2, 17), (3, 9)]
*** center 4: selecting labels [3] (freq >= 1) [from [0, 0, 19]]
*** center 5: selecting labels [2] (freq >= 1) [from [0, 4, 0]]
*** center 6: selecting labels [2] (freq >= 1) [from [0, 11, 0]]
*** center 7: selecting labels [2, 3] (freq >= 1) [from [0, 5, 2]]
** centroid: 7, normalized-entropy: 0.8631205685666311, Tuple{Int64,Int64}[(2, 5), (3, 2)]
finished with 9 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 19)
[0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 20
iteration 7 finished
*** starting iteration: 1; err: [Inf, 0.40097764687952336] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40097764687952336, 0.19857389876622036] ***
*** starting iteration: 2; err: [Inf, 0.40097764687952336, 0.19857389876622036] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.40097764687952336, 0.19857389876622036, 0.19794170104694486] ***
*** finished computation of 7 references, err: [Inf, 0.40097764687952336, 0.19857389876622036, 0.19794170104694486] ***
*** center 1: selecting labels [2, 3] (freq >= 2) [from [0, 2, 23]]
** centroid: 1, normalized-entropy: 0.4021791902022729, Tuple{Int64,Int64}[(2, 2), (3, 23)]
*** center 2: selecting labels [1] (freq >= 2) [from [21, 0, 0]]
*** center 3: selecting labels [2] (freq >= 2) [from [0, 5, 0]]
*** center 4: selecting labels [1] (freq >= 2) [from [12, 0, 0]]
*** center 5: selecting labels [2, 3] (freq >= 2) [from [0, 25, 9]]
** centroid: 5, normalized-entropy: 0.8337649072106652, Tuple{Int64,Int64}[(2, 25), (3, 9)]
*** center 6: ignoring all elements because minimum-frequency restrictions were not met, freq >= 2, freqs: [0, 0, 1]
*** center 7: selecting labels [3] (freq >= 2) [from [0, 0, 2]]
finished with 6 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.372012858106535] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.372012858106535, 0.21081869811263554] ***
*** starting iteration: 2; err: [Inf, 0.372012858106535, 0.21081869811263554] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.372012858106535, 0.21081869811263554, 0.19882777252948222] ***
*** starting iteration: 3; err: [Inf, 0.372012858106535, 0.21081869811263554, 0.19882777252948222] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.372012858106535, 0.21081869811263554, 0.19882777252948222, 0.19564937833181492] ***
*** finished computation of 7 references, err: [Inf, 0.372012858106535, 0.21081869811263554, 0.19882777252948222, 0.19564937833181492] ***
*** center 1: selecting labels [1] (freq >= 2) [from [34, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 5, 9]]
** centroid: 3, normalized-entropy: 0.940285958670631, Tuple{Int64,Int64}[(2, 5), (3, 9)]
*** center 4: selecting labels [3] (freq >= 2) [from [0, 1, 14]]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 6]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 19, 0]]
finished with 8 centroids; started with 7
*** starting iteration: 1; err: [Inf, 0.362286804906782] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.362286804906782, 0.1738009803032351] ***
*** starting iteration: 2; err: [Inf, 0.362286804906782, 0.1738009803032351] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.362286804906782, 0.1738009803032351, 0.166456499950582] ***
*** starting iteration: 3; err: [Inf, 0.362286804906782, 0.1738009803032351, 0.166456499950582] ***
*** computing centroids ***
*** computing 7 nearest references ***
*** new score with 7 references: [Inf, 0.362286804906782, 0.1738009803032351, 0.166456499950582, 0.16565945161495116] ***
*** finished computation of 7 references, err: [Inf, 0.362286804906782, 0.1738009803032351, 0.166456499950582, 0.16565945161495116] ***
*** center 1: selecting labels [1] (freq >= 2) [from [33, 0, 0]]
*** center 2: selecting labels [3] (freq >= 2) [from [0, 0, 8]]
*** center 3: selecting labels [2, 3] (freq >= 2) [from [0, 3, 6]]
** centroid: 3, normalized-entropy: 0.9182958340544894, Tuple{Int64,Int64}[(2, 3), (3, 6)]
*** center 4: selecting labels [2, 3] (freq >= 2) [from [0, 15, 5]]
** centroid: 4, normalized-entropy: 0.8112781244591328, Tuple{Int64,Int64}[(2, 15), (3, 5)]
*** center 5: selecting labels [2] (freq >= 2) [from [0, 6, 0]]
*** center 6: selecting labels [3] (freq >= 2) [from [0, 0, 11]]
*** center 7: selecting labels [2] (freq >= 2) [from [0, 13, 0]]
finished with 8 centroids; started with 7
generating 4 configurations using top 4 configurations, starting with 20)
[0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 20
iteration 8 finished
generating 4 configurations using top 4 configurations, starting with 20)
[0.96, 0.96, 0.96, 0.96, 0.96, 0.9533333333333333, 0.9533333333333333, 0.9466666666666667, 0.9400000000000001, 0.9400000000000001, 0.9400000000000001, 0.9266666666666667, 0.9199999999999999, 0.9199999999999999, 0.9, 0.9, 0.9, 0.8866666666666667, 0.8866666666666667, 0.88]
AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1) => 0.96
finished with 20
iteration 9 finished
[ Info: ========== BEST MODEL ==========
[ Info: (AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1), 0.96)
[ Info: AKNC{Array{Float64,1}}[AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[4.7, 3.085714285714286, 1.4357142857142855, 0.1785714285714286], [7.7, 2.6, 6.9, 2.3], [5.700000000000001, 2.6904761904761907, 4.133333333333333, 1.2428571428571429], [5.8, 2.5, 4.95, 1.75], [5.278947368421053, 3.6947368421052627, 1.4789473684210526, 0.2894736842105264], [6.453846153846154, 2.9846153846153842, 5.4923076923076914, 2.0923076923076915], [7.800000000000001, 3.4, 6.25, 2.15], [6.545454545454544, 3.0545454545454547, 4.609090909090909, 1.4545454545454546], [6.25, 2.75, 4.975, 1.75]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [1, 3, 2, 3, 1, 3, 3, 2, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[6.800000000000002, 3.142857142857143, 5.647619047619047, 2.1285714285714286], [4.886956521739131, 3.3173913043478267, 1.4478260869565218, 0.25217391304347825], [5.547058823529412, 2.6411764705882357, 3.841176470588236, 1.1705882352941177], [4.9, 2.5, 4.5, 1.7], [6.115384615384617, 2.8076923076923075, 4.607692307692307, 1.4769230769230768], [5.999999999999999, 2.7125000000000004, 5.062500000000001, 1.7750000000000001], [5.4818181818181815, 3.872727272727273, 1.4818181818181815, 0.2545454545454546], [7.666666666666667, 2.8000000000000003, 6.733333333333334, 2.1333333333333333], [7.800000000000001, 3.8, 6.550000000000001, 2.1]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [3, 1, 2, 3, 2, 3, 1, 3, 3], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1)), AKNC{Array{Float64,1}}(KNC{Array{Float64,1}}(Array{Float64,1}[[6.268750000000001, 2.9124999999999996, 4.4875, 1.425], [5.977777777777777, 2.7444444444444445, 4.944444444444445, 1.877777777777778], [4.932258064516129, 3.3645161290322587, 1.4806451612903222, 0.23548387096774195], [7.4125000000000005, 3.1375, 6.2875, 1.9875], [5.316666666666666, 2.4499999999999997, 3.4499999999999997, 1.0833333333333333], [6.68, 2.96, 4.9, 1.52], [6.572727272727272, 3.0, 5.527272727272727, 2.0818181818181816], [5.577777777777778, 2.655555555555556, 4.155555555555555, 1.3], [4.9, 2.5, 4.5, 1.7], [4.45, 2.5999999999999996, 1.35, 0.25]], [0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0], [2, 3, 1, 3, 2, 2, 3, 2, 3, 1], 3), KCenters.var"#fun#70"{SimilaritySearch.var"#_lp#1"{Float64}}(SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25)), AKNC_Config(KCenters.direct_kernel, SimilaritySearch.var"#_lp#1"{Float64}(Core.Box(4.0), 0.25), Statistics.mean, 1, 7, 1, 1.0, :fft, 0.3, 1))]
Test Summary: | Pass  Total
AKNC          |    1      1
[44, 1, 1, 23, 35, 1, 1, 24, 48, 24, 29, 1, 24, 30, 32, 29, 33, 23, 26, 32, 17, 30, 33, 2, 43, 27, 39, 13, 13, 36, 35, 24, 3, 32, 36, 43, 22, 36, 34, 19, 29, 35, 18, 1, 43, 39, 16, 32, 39, 47, 22, 24, 37, 44, 30, 37, 45, 24, 18, 32, 26, 27, 40, 30, 21, 34, 39, 20, 48, 2, 34, 31, 26, 19, 27, 27, 25, 18, 5, 50, 38, 30, 49, 40, 27, 28, 26, 18, 1, 50, 34, 36, 33, 50, 32, 56, 40, 22, 28, 29, 35, 42, 35, 17, 33, 32, 88, 37, 45, 1, 55, 59, 25, 18, 39, 46, 68, 62, 14, 23, 39, 33, 34, 21, 50, 23, 23, 32, 38, 25, 51, 35, 32, 35, 42, 23, 49, 13, 33, 34, 37, 30, 44, 21, 23, 24, 36, 46, 23, 68, 44, 2, 39, 49, 29, 45, 1, 40, 37, 7, 57, 24, 23, 53, 72, 41, 25, 52, 23, 4, 43, 57, 10, 38, 50, 22, 39, 48, 19, 56, 27, 21, 33, 22, 38, 26, 36, 30, 53, 44, 34, 17, 48, 50, 36, 27, 33, 56, 65, 40, 27, 51, 22, 35, 59, 78, 55, 33, 40, 34, 48, 42, 10, 30, 35, 34, 1, 9, 42, 47, 38, 29, 57, 22, 46, 27, 21, 36, 33, 31, 16, 57, 39, 24, 38, 36, 51, 24, 31, 23, 36, 1, 37, 43, 26, 50, 41, 34, 30, 32, 19, 33, 49, 41, 61, 35, 31, 31, 21, 31, 46, 41, 35, 28, 62, 39, 45, 26, 36, 44, 51, 28, 29, 36, 29, 33, 30, 41, 30, 42, 30, 19, 56, 30, 25, 21, 37, 21, 41, 55, 53, 37, 31, 26, 24, 36, 80, 49, 38, 45]
┌ Info: before optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.6140000000000002, speedup = 0.5794173667221365, eval_ratio = 0.042224)
KCenters.DeloneInvIndex> optimizing for recall=0.8
KCenters.DeloneInvIndex> optimize! step region_expansion=2, performance {"precision":0.3888888888888889,"recall":0.3880208333333333,"f1":null,"seconds":6.496161222457886e-5,"exhaustive_search_seconds":0.0003494303673505783,"evaluations":340.84375,"distances_sum":1730.605555939124}
KCenters.DeloneInvIndex> optimize! step region_expansion=3, performance {"precision":0.5616319444444444,"recall":0.5616319444444444,"f1":0.5616319444444444,"seconds":9.551644325256348e-5,"exhaustive_search_seconds":0.0003494303673505783,"evaluations":379.09375,"distances_sum":1612.0680812977291}
KCenters.DeloneInvIndex> optimize! step region_expansion=4, performance {"precision":0.664930555555555,"recall":0.664930555555555,"f1":0.664930555555555,"seconds":0.00012700073421001434,"exhaustive_search_seconds":0.0003494303673505783,"evaluations":419.1875,"distances_sum":1563.4380317504638}
KCenters.DeloneInvIndex> optimize! step region_expansion=5, performance {"precision":0.7369791666666663,"recall":0.7369791666666663,"f1":0.7369791666666663,"seconds":0.00015735812485218048,"exhaustive_search_seconds":0.0003494303673505783,"evaluations":459.84375,"distances_sum":1542.949766538334}
KCenters.DeloneInvIndex> optimize! step region_expansion=6, performance {"precision":0.7812499999999994,"recall":0.7812499999999994,"f1":0.7812499999999994,"seconds":0.0001916494220495224,"exhaustive_search_seconds":0.0003494303673505783,"evaluations":499.6953125,"distances_sum":1531.6249329283594}
KCenters.DeloneInvIndex> reached performance {"precision":0.8229166666666661,"recall":0.8229166666666661,"f1":0.8229166666666661,"seconds":0.0002193152904510498,"exhaustive_search_seconds":0.0003494303673505783,"evaluations":537.96875,"distances_sum":1521.445923493337}
┌ Info: after optimization
└   (recall = p.recall, speedup = p.exhaustive_search_seconds / p.seconds, eval_ratio = p.evaluations / length(X)) = (recall = 0.789, speedup = 1.615116357051841, eval_ratio = 0.054176)
Test Summary:                 | Pass  Total
Testing Delone Inverted Index |    1      1
   Testing KCenters tests passed 
